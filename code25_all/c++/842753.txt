#include <iostream>
using namespace std;

typedef double* doublevec;

// This first class contains a vector, a scalar N representing the size of the vector, and another scalar used for intializing the vector.
typedef class Structure1
{
 int N, vec0;
 doublevec vec;
public: 
 // Constructor and copy constructor.
 Structure1(int Nin, int vecin) : N(Nin), vec0(vecin) { vec = new double [N]; for(int i = 0; i < N; i++) { vec[i] = i + vec0; } }
 Structure1(const Structure1& structurein);
 // Accessor functions:
 int get_vec0() { return vec0; }
 int get_N() { return N; }
 doublevec get_vec() { return vec; }
 // Overide equivalence operator:
 Structure1& operator=(const Structure1& right)
 {
  //Handle Self-Assignment
  if (this == &right) return *this;
  N = right.N;
  vec0 = right.vec0;
  for (int i = 0; i < N; i++)
  {
   vec[i] = right.vec[i];   
  }
  return *this;
 }
 // Destructor:
 ~Structure1() { delete []vec; }
} Structure1;

Structure1::Structure1(const Structure1& structurein)
{
 N = structurein.N;
 vec = new double[N];
 for(int i = 0; i < N; i++)
 {
  vec[i] = structurein.vec[i];
 }
}

// This class just contains the first structure.
typedef class Structure2
 {
  Structure1 structure;
  // Mutator Function:
  void mutate_structure();
 public:  
  // Constructor:
  Structure2(const Structure1& structurein) : structure(structurein) { mutate_structure(); }
  // Accessor Function:
  Structure1 get_structure() { return structure; }
  // Destructor:
  ~Structure2() {}
 } Structure2;

void Structure2::mutate_structure()
{
 int N = structure.get_N();
 Structure1 tempstruct(N,10);
 structure = tempstruct;
}

int main (int argc, char * const argv[])
{
 const int N = 100;
 Structure1 structure1(N,0);
 Structure2 structure2(structure1);

 cout << structure1.get_N() << endl;
 cout << structure2.get_structure().get_N() << endl;
 cout << structure1.get_vec0() << endl;
 cout << structure2.get_structure().get_vec0() << endl;

 for(int i = 0; i < N; i++)
 {
  cout << i << " " << structure1.get_vec()[i] << " " << structure2.get_structure().get_vec()[i] << endl;
 }

 return 0;
}

