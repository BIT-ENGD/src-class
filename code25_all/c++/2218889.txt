std::for_each
template <typename T> struct Foo {
    void operator()(T const& t) { ... }
};

std::for_each(v.begin(), v.end(), Foo<Bar>());

std::copy
std::copy(v.begin(), v.end(), functor_output_iterator(Foo<Bar>()));

adapter(F f) : functor(f) { }
adapter& operator*()  { return *this; }
operator=(T const& t) { functor(t); }
operator++()          { }
...

std::for_each(..., some_adapter(std::ostream_iterator(std::cout)));

template <typename It> GetItems(It out) {
    MutexGuard guard(mutex);
    std::copy(items.begin(), items.end(), out);
}

std::set<whatever> set;
obj->GetItems(std::inserter(set, set.end()));

ObjLock lock = obj->GetLock();
for (int i = 0; i < obj->GetItemCount(); ++i) {
    Item* item = obj->GetItem(i);
    ...

std::for_each(v.begin(), v.end(), Joiner<Foo>());

std::copy
std::for_each
