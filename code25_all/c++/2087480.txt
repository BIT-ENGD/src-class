
void WidgetFactory::applyStyleToTopLevel(QStyle *style, QWidget *widget)
{
    const QPalette standardPalette = style->standardPalette();
    if (widget->style() == style && widget->palette() == standardPalette)
        return;
//....
}


MBICInput::MBICInput(QWidget *parent) : QStackedWidget(parent){
  displayPage = new QWidget();
  displayPage->setObjectName(QString::fromUtf8("displayPage"));

  inputLB = new QLabel(displayPage);
  inputLB->setObjectName(QString::fromUtf8("inputLabel"));
  inputLB->setCursor(QCursor(Qt::PointingHandCursor));

  addWidget(displayPage);

  EditPage = new QWidget();
  EditPage->setProperty("EditInputLine", QVariant(true));
  EditPage->setObjectName(QString::fromUtf8("EditPage"));

  inputInput = new QLineEdit(EditPage);
  inputInput->setGeometry(QRect(5, 10, 231, 25));
  inputInput->setObjectName(QString::fromUtf8("input"));

  addWidget(EditPage);

  _animation = new QString("");
  _message   = new QString("Message");
  _validator = new QRegExpValidator(QRegExp("[a-zA-Z]+"), this);

}

MBICInput::~MBICInput() {
}

QValidator::State MBICInput::validate(QString &text, int &pos) const{
    return _validator->validate(text, pos);
}

void MBICInput::paintEvent(QPaintEvent *) {
  QPainter painter(this);
  painter.setRenderHint(QPainter::Antialiasing);
}


QSize MBICInput::minimumSizeHint() const{
   return QSize(200, 40);
}

QSize MBICInput::sizeHint() const{
   return QSize(200, 40);
}

void MBICInput::setAnimation(const QString &animation){
  *_animation = animation;
  update();
}

QString MBICInput::animation() const{
   return *_animation;
}

void MBICInput::setMessage(const QString &message){
  *_message = message;
  update();
}

QString MBICInput::message() const{
   return *_message;
}

void MBICInput::mousePressEvent(QMouseEvent *event){
  if(currentIndex()==0){
    setCurrentIndex(1);
  }else{
    setCurrentIndex(0);
  }
   update();
}

