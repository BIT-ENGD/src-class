RFs fs;
fs.Connect();

CFileMan* fileMan=CFileMan::NewL(fs);
CleanupStack::PushL(fileMan);

TInt err=fileMan->Copy(anOld,aNew);

CleanupStack::PopAndDestroy(fileMan);
fs.Close();

if(err==KErrNone)
return ETrue;
else
return EFalse;

User::LeaveIfError( iDatabase.Execute( strSQL ) );

TBool Open = OpenL();

if (!Open)
{

User::LeaveIfError(iDbSession.Connect());

CleanupClosePushL(iDbSession);
CleanupClosePushL(iDatabase);

User::LeaveIfError(iDatabase.Replace(iDbSession, iDBPath ));

// create table
_LIT(KSQLtest,"CREATE TABLE testtable(id INTEGER,test1 VARCHAR(50),test2 VARCHAR(50))"); User::LeaveIfError(iDatabase.Execute(KSQLtest));

iDatabase.Compact();
iDatabase.Close();
iDbSession.Close();
CleanupStack::PopAndDestroy();
CleanupStack::PopAndDestroy();

User::LeaveIfError( iDbSession.Connect() );

CleanupClosePushL( iDbSession );

if ( KErrNone != iDatabase.Open(iDbSession, iDBPath))
{
iDbSession.Close();
CleanupStack::PopAndDestroy();
return EFalse;
}
else
{
CleanupClosePushL( iDatabase );
iIsDatabaseOpened = ETrue;
return ETrue;
}

