template<typename T>
struct Const { typedef void type; };

template<typename T>
void f(T, typename Const<T>::type*) { cout << "Const"; } // T1

template<typename T>
void f(T, void*) { cout << "void*"; } // T2

int main() {
  // GCC chokes on f(0, 0) (not being able to match against T1)
  void *p = 0;
  f(0, p);
}

void(int, void*)
Q
14.5.5.2
T1
(Q, typename Const<Q>::type*)
AT
(Q, void*)
T2
BT
(Q, void*)
T1
(T, typename Const<T>::type*)
T2
(T, void*)
T1
AT
14.8.2.1
14.8.2.1
AT
BT
14.8.2.4
A
P
AT
T2
{
(Q, T)
,
(void*, void*)
}
T
T
Q
AT
T2
BT
T1
{
(Q, T)
,
(void*, typename Const<T>::type*)
}
T
Q
typename Const<T>::type*
T
void*
T
14.8.2.4
4.4
4.1
template<typename T>
struct Const { typedef void type; };

template<typename T>
void f(T, typename Const<T>::type*) { cout << "Const"; } // T1

template<typename T>
void f(T, void*) { cout << "void*"; } // T2

template<> void f(int, void*) { }
  // main.cpp:11: error: ambiguous template specialization 
  // 'f<>' for 'void f(int, void*)'

