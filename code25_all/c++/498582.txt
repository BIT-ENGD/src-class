cv_scoped
boost::scoped_ptr
auto_ptr
shared_ptr
cv_auto_ptr
cv_shared_ptr
cv_ptr
std::auto_ptr<cv_ptr>
std::auto_ptr<cv_ptr> matrix(cv_ptr(cvCreateMat(320, 240, CV_32FC3)));
cvPow(matrix.get()->get()); // one get for the auto_ptr, one for the cv_ptr

operator delete
operator delete
auto_ptr
scoped_ptr
shared_ptr
class cv_auto_ptr {
public:
  cv_auto_ptr();
  ~cv_auto_ptr();

  // each method would just be a proxy for the smart pointer
  CvMat* get() { return this->matrix_.get()->get(); }
  // all the other operators/methods in auto_ptr would be the same, you get the idea

private:
  auto_ptr<cv_ptr> matrix_; // cv_ptr deletes CvMat properly
}

