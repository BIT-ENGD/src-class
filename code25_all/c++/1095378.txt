
// This class is C in the above description. There may be many instances of C.
class Context
{
public:
    // D will inherit from this class
    class Data
    {
    public:
        virtual ~Data() {}
    };

    Context();
    ~Context();

    // Associates an owner (O) with its data (D)
    void add(const void* owner, Data* data);

    // O calls this when he knows its the end (O's destructor).
    // All instances of C are now aware that O is gone and its time to get rid
    // of all associated instances of D.
    static void purge (const void* owner);

    // This is called periodically in the application. It checks whether
    // O has called purge, and calls "delete D;"
    void refresh();

    // Side note: sometimes O needs access to D
    Data *get (const void *owner);

private:
    // Used for mapping owners (O) to data (D)
    std::map _data;
};

// Here's an example of O
class Mesh
{
public:
    ~Mesh()
    {
        Context::purge(this);
    }

    void init(Context& c) const
    {
        Data* data = new Data;

        // GL initialization here

        c.add(this, new Data);
    }

    void render(Context& c) const
    {
        Data* data = c.get(this);
    }

private:
    // And here's an example of D
    struct Data : public Context::Data 
    {
        ~Data()
        {
            glDeleteBuffers(1, &vbo);
            glDeleteTextures(1, &texture);
        }

        GLint vbo;
        GLint texture;
    };
};

