void manager::init() // <-- Called from the .exe project
{
    this->log.open("C:\\development\\log.txt");
    this->storage = storage_manager(&(this->log), &(this->settings));
    this->storage.load_settings();
}

void storage_manager::load_settings()
{
    this->error_check(sqlite3_open("settings.db", &(this->db_settings_p)));
    sqlite3_stmt* read_settings;
    this->error_check(sqlite3_prepare_v2(this->db_settings_p, "SELECT name, value FROM settings", 1024, &read_settings, NULL));

    int step_code;
    std::string name;
    std::string value;
    while(true)
    {
        step_code = sqlite3_step(read_settings);
        if(step_code == SQLITE_DONE)
        {
            break;
        }
        else if(step_code == SQLITE_ROW)
        {
            name = std::string(reinterpret_cast<const char*>(sqlite3_column_text(read_settings, 0)));
            value = std::string(reinterpret_cast<const char*>(sqlite3_column_text(read_settings, 1)));
            (*(this->settings))[name] = value;

        }
        else
        {
            this->error();
        }
    }
    sqlite3_reset(read_settings);
    sqlite3_finalize(read_settings);
}

void storage_manager::error_check(int rc)
{
    if(rc)
    {
        this->error();
    }
}
void storage_manager::error() //Sure of error
{
    std::string error_msg;
    error_msg = "Storage Manager: SQLite Error (";
    error_msg += sqlite3_errcode(this->db_p);
    error_msg += ") - ";
    error_msg += sqlite3_errmsg(this->db_p);
    this->log->write(error_msg.c_str(), error_msg.length());
    this->log->flush();
}

