void f ()
{
  int a;
}

void f ()
{
    int m;
}

if(val){
    val++;
}

if(val)
{
    val++;
}

if(val
){
    val++;
}

if(a)
    func();

if(a)
{
    func();
}

class Base
{
    virtual void f(int a);
}

class Derived : public Base
{
    virtual void f( int a);

class MostDerived : public Derived
{
    virtual void f( int a);

class Base
{
    virtual void f(int a);
}

class Derived : public Base
{
    void f( int a);

class MostDerived : public Derived
{
    void f( int a);

class Compiler 
{
private:
    string inputFileName;
public:
    Compiler( string const & inputFileName_);
    genOutput( string const & outputFileName_);
private:
    analyze();
    emitCode( string const & );
    parse();
    tokenize( string const & inputFileName_);
}

class C
{
public:
    Compiler( string const & inputFileName_);
    genOutput( string const & outputFileName_);
private:
    analyze();
    emitCode( string const & );
    parse();
    tokenize( string const & inputFileName_);
private:
    string inputFileName;
}

class C
{
public:
    Compiler( string const & inputFileName_);
    genOutput( string const & outputFileName_);
private:
    analyze();
    emitCode( string const & );
    string inputFileName;
    parse();
    tokenize( string const & inputFileName_);
}

int x = 123456789;

int x =
123456789;

const int x;

int const x;

int variable = 123456789;

int Variable = 123456789;

int myVariable = 123456789;

int my_variable = 123456789;

void function() { return; }

void Function() { return; }

void myFunction() { return; }

void my_function() { return; }

