in VoltageForDisplayAndAnalyze.h file

private:

string *    grpVolFileName[ MAX_NUM_OF_GROUP ]; //for voltage files
fstream *   aStream_grpVolt[ MAX_NUM_OF_GROUP ];

in VoltageForDisplayAndAnalyze.CPP file

void VoltageForDisplayAndAnalyze::MakeFileNameForGroupCell( int xgrpIndex )
{
   int numOfFiles = (EEnd - EBegin + 1) / 255;
   grpVolFileName[ xgrpIndex ] = new string[ numOfFiles ];      
   assert( grpVolFileName[ xgrpIndex ] != NULL );
   aStream_grpVolt[xgrpIndex] = new fstream[ numOfFiles ];  
   assert( aStream_grpVolt[ xgrpIndex ] != NULL );
   .....
   for( int fileIndex=0; fileIndex<numOfFiles; fileIndex++ )
   {            
    char * tempbuf = new char[256];
    memcpy(tempbuf, mPath.c_str(), mPath.length() );
    tempbuf[mPath.length()] = '\0';
    char * numChar = new char[4];
    itoa(xgrpIndex, numChar, 3 );
    numChar[3] = '\0';   

    strcat(tempbuf, numChar );
    grpVolFileName[ xgrpIndex ][ fileIndex ].assign(tempbuf );

    }    
     ....
}

void VoltageForDisplayAndAnalyze::SaveDataForGrpCell( int grpIndex, int fileIndex, int xBegin, int xEnd     {

    int i = 0;
    char answer;

//save to hard disk
aStream_grpVolt[grpIndex][fileIndex].open(  grpVolFileName[grpIndex][fileIndex].c_str() , fstream::out | std::ofstream::app );
cout << "open file: grpIndex= " << grpIndex <<"  fileIndex= " << fileIndex << " :  " << grpVolFileName[grpIndex][fileIndex] << " to save." << endl;
if( aStream_grpVolt[grpIndex][fileIndex].good() )
{   
   //.....  
}
else
{

    cout << "Cannot open file: " << grpVolFileName[grpIndex][fileIndex] << endl;
   }

   //.......
}

...
open file: grpIndex= 2  fileIndex= 0 :  C:\Workspace\UncusJava\DataFiles\spc1\2 to save.
open file: grpIndex= 3  fileIndex= 0 :  C:\Workspace\UncusJava\DataFiles[][][][]4@ to save.

if( aStream_grpVolt[grpIndex][fileIndex].good() )
