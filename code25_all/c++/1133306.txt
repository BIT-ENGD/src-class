object.member
in function int main
in lookup_member, at cp/search.c:1288

#include "std_lib_facilities.h"

struct Name_pairs
{
    vector<string>names;
    vector<double>ages;
    void quicksort(vector<string>& num, int top, int bottom);
    void divide(vector<string>& array, int top, int bottom);
    bool test();
    string read_names();
    double read_ages();
    void print();
};

string Name_pairs::read_names()
{
    string name;
    cout << "Enter name: ";
    cin >> name;
    names.push_back(name);
    return name;
}

double Name_pairs::read_ages()
{
    double age;
    cout << "Enter corresponding age: ";
    cin >> age;
    ages.push_back(age);
    cout << endl;
    return age;
}

int Name_pairs::divide(vector<string>& array, int top, int bottom)
{
    string x = array[top];
    int i = top-1;
    int j = bottom-1;
    string temp;
    do{
        do
        {
            j--;
        } while(x>array[j]);

        do
        {
            i++;
        } while(x<array[i]);

        if(i<j)
        {
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    } while(i<j);
    return j;
}


void Name_pairs::quicksort(vector<string>& num, int top, int bottom) // top is subscript of beginning of vector.
{
    int middle;
    if(top < bottom)
    {
        middle = divide(num, top, bottom);
        quicksort(num, top, middle);
        quicksort(num, middle+1, bottom);
    }
    return;
}

void Name_pairs::print()
{
     for(int i = 0; i < (names.size()-1) && i < (ages.size()-1); ++i)
         cout << names[i] << " , " << ages[i] << endl;
}

int main()
{
    Name_pairs np;
    vector<string>names;
    vector<double>ages;
    cout << "Enter names and ages. Use 0 to cancel.\n";
    bool finished = false;
    while(!finished){
        finished = "0" == np.read_names();
        finished = 0 == np.read_ages();
    }
    np.quicksort(names, 0, (names.size()-2));
    np.print();
    keep_window_open();
}

