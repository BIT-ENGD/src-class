template <class type1>
struct DefaultInstanceCreator {
    type1 * operator ()() {
        return new type1;
    }
};

template < class type1
, class InstanceCreator = DefaultInstanceCreator<type1> >
class objectCache 
{
    public:
        objectCache (InstanceCreator  & instCreator) 
          :instCreator_ (instCreator) {}
        type1* Get() {
            type1 * temp = instCreator_ ();
        }
    private:
        InstanceCreator instCreator_;
};

class A{
public:
    A(int num){
        number = num;
    }
    int number;
    struct CreateInstance {
        CreateInstance (int value) : value_ (value) {}
        A * operator ()() const{
            return new A(value_);
        }
        int value_;
    };
};
objectCache< A, A::CreateInstance > intcache(A::CreateInstance(2));
    A* temp = intcache.Get();
    cout << temp->number <<endl;

objectCache< int > intcache();
int* temp = intcache.Get();
*temp = 3;
cout <<temp <<endl;

objectCache< int > intcache;

objectCache< int > intcache(DefaultInstanceCreator<int>());

