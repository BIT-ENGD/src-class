class BaseProtocol {
protected:
    int NumberOfBytesInPackOfText;
    std::string serviceString;
public:
    BaseProtocol(int SizeOfTextPack, const char* extraString): 
        NumberOfBytesInPackOfText(SizeOfTextPack), 
            serviceString(extraString) {}
    virtual std::string& convertToSystemMessage(const char* message)=0;
    virtual std::string& convertToNativeMessage(const char* message)=0;
    virtual ~BaseProtocol() {
        NumberOfBytesInPackOfText = 0;
        serviceString = "";
    }
};

class SimpleProtocol: public BaseProtocol {
public:
    SimpleProtocol(int SizeOfTextPack, const char* service): 
        BaseProtocol(SizeOfTextPack, service) {}
    std::string& convertToSystemMessage(const char* nativeMessage);
    std::string& convertToNativeMessage(const char* systemMessage);
};

