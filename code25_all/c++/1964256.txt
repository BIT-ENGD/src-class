class Point
{
public:
    Point() : mX(0), mY(0) {}
    Point(int x, int y) : mX(x), mY(y){}
    int x() const { return mX; }
    int y() const { return mY; }
private:
    int mX, mY;
};

std::istream& operator>>(std::istream& str, Point & outPoint)
{
    std::string text;
    str >> text; // doesn't always read the entire text
    int x(0), y(0);
    sscanf(text.c_str(), "(%d, %d)", &x, &y);
    outPoint = Point(x, y);
    return str;
}

std::ostream& operator<<(std::ostream& str, const Point & inPoint)
{
    str << "(" << inPoint.x() << ", " << inPoint.y() << ")";
    return str;
}

int main()
{   
    Point p(12, 14);    
    std::string ps = boost::lexical_cast<std::string>(p); // "(12, 14)" => OK    
    Point p2 = boost::lexical_cast<Point>(ps); // throws bad_cast exception!
    return 0;
}

