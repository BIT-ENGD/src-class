class object_1
{
  public:
  ...

  friend ofstream& operator<<(ofstream &out, const object_1 &obj_1);
  friend object_2;

  private:

  char *pCh_mem1;
  char *pCh_mem2;
  int *pInt_mem1;
  int *pInt_mem2;
};


class object_2
{
public:
...
friend ofstream& operator<<(ofstream &out, const object_2 &obj_2); 
friend object_1;
}; 

ostream& operator<<(ostream& out, const object_2& obj_2)
{
object1::display(out)  //Calls method display in object1's I.F.
return out;
} 

void object_1::display(std::ostream &out)
{
out << left  << setw(28) << "Person"   << setw(20) << "Place" ;
out << right << setw(5)  << "Thing"   << setw(5)  << "Idea" << endl;

out << left  << setw(28) << "----"   << setw(20) << "--------" ;
out << right << setw(5)  << "----- " << setw(5)  << "------" << endl;
} 

ostream& operator<<(ostream& out, const object_2& obj_2);

ostream& operator<<(ostream& out, const object_1& obj_1)
{
out << obj_1.pCh_mem1 << obj_1.pCh_mem2;
return out;
}  

static void method1() 
{ 
 //do stuff 
}
static void method2() 
{
  //do stuff
}
static void method3() 
{
  //do stuff 
}
int main(void)
{
    method1();
    method2();
    method3();
    cout << obj_2;
    return 0; // and such
}

ostream& operator<<(ostream& out, const object_2& obj_2)
{
object1::display(out)  //Calls method display in object1's I.F.
return out;
} 

