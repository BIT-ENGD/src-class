//All double dash arguments modify global options of the program,
//such as --all --debug --timeout etc.
void consoleParser::wordArgParse(std::vector<criterion *> *results)
{
    TCHAR const *compareCurWordArg = curToken.c_str()+2;
    if (!_tcsicmp(compareCurWordArg,_T("all")))
    {
        globalOptions::showall = TRUE;
    } else if (!_tcsnicmp(compareCurWordArg,_T("custom"),6))
    {
        if (curToken[9] == L':')
        {
            globalOptions::display = curToken.substr(10,curToken.length()-11);
        } else
        {
            globalOptions::display = curToken.substr(9,curToken.length()-10);
        }
    } else if (*compareCurWordArg == L'c' || *compareCurWordArg == L'C')
    {
        if (curToken[3] == L':')
        {
            globalOptions::display = curToken.substr(5,curToken.length()-6);
        } else
        {
            globalOptions::display = curToken.substr(4,curToken.length()-5);
        }
    } else if (!_tcsicmp(compareCurWordArg,_T("debug")))
    {
        globalOptions::debug = TRUE;
    } else if (!_tcsicmp(compareCurWordArg,L"expand"))
    {
        globalOptions::expandRegex = false;
    } else if (!_tcsicmp(compareCurWordArg,L"fileLook"))
    {
        globalOptions::display = L"---- #f ----#nCompany: #d#nFile Description: #e#nFile Version: #g"
        L"#nProduct Name: #i#nCopyright: #j#nOriginal file name: #k#nFile Size: #u#nCreated Time: #c"
        L"#nModified Time: #m#nAccessed Time: #a#nMD5: #5#nSHA1: #1";
    } else if (!_tcsicmp(compareCurWordArg,_T("peinfo")))
    {
        globalOptions::display = _T("[#p] #f");
    } else if (!_tcsicmp(compareCurWordArg,L"enable-filesystem-redirector-64"))
    {
        globalOptions::disable64Redirector = false;
    } else if (!_tcsnicmp(compareCurWordArg,_T("encoding"),8))
    {
        //Performance enhancement -- encoding compare only done once.
        compareCurWordArg += 8;
        if (!_tcsicmp(compareCurWordArg,_T("acp")))
        {
            globalOptions::encoding = globalOptions::ENCODING_TYPE_ACP;
        } else if (!_tcsicmp(compareCurWordArg,_T("oem")))
        {
            globalOptions::encoding = globalOptions::ENCODING_TYPE_OEM;
        } else if (!_tcsicmp(compareCurWordArg,_T("utf8")))
        {
            globalOptions::encoding = globalOptions::ENCODING_TYPE_UTF8;
        } else if (!_tcsicmp(compareCurWordArg,_T("utf16")))
        {
            globalOptions::encoding = globalOptions::ENCODING_TYPE_UTF16;
        } else
        {
            throw eMsg(L"Unrecognised encoding word argument!\r\nValid choices are --encodingACP --encodingOEM --encodingUTF8 and --encodingUTF16. Terminate.");
        }
    } else if (!_tcsnicmp(compareCurWordArg,L"files",5))
    {
        compareCurWordArg += 5;
        if (*compareCurWordArg == L':') compareCurWordArg++;
        std::wstring filePath(compareCurWordArg);
        globalOptions::regexes.insert(globalOptions::regexes.end(), new filesRegexPlaceHolder);
        results->insert(results->end(),new filesRegexPlaceHolder);
        boost::algorithm::trim_if(filePath,std::bind2nd(std::equal_to<wchar_t>(),L'"'));
        loadFiles(filePath);
    } else if (!_tcsicmp(compareCurWordArg,_T("full")))
    {
        globalOptions::fullPath = TRUE;
    } else if (!_tcsicmp(compareCurWordArg,_T("fs32")))
    {
        globalOptions::disable64Redirector = false;
    } else if (!_tcsicmp(compareCurWordArg,_T("long")))
    {
        globalOptions::display = _T("#t #s #m  #f");
        globalOptions::summary = TRUE;
    } else if (!_tcsnicmp(compareCurWordArg,_T("limit"),5))
    {
        compareCurWordArg += 5;
        if (*compareCurWordArg == _T(':'))
            compareCurWordArg++;
        globalOptions::lineLimit = _tcstoui64(compareCurWordArg,NULL,10);
        if (!globalOptions::lineLimit)
        {
            std::wcerr << eMsg(L"Warning: You are limiting to infinity lines. Check one of your --limit options!\r\n");
        }
    } else if (!_tcsicmp(compareCurWordArg,_T("short")))
    {
        globalOptions::display = _T("#8");
    } else if (!_tcsicmp(compareCurWordArg,_T("summary")))
    {
        globalOptions::summary = TRUE;
    } else if (!_tcsicmp(compareCurWordArg,_T("norecursion")))
    {
        globalOptions::noSubDirs = TRUE;
    } else if (!_tcsnicmp(compareCurWordArg,_T("timeout"),7))
    {
        compareCurWordArg += 7;
        if (*compareCurWordArg == _T(':'))
            compareCurWordArg++;
        globalOptions::timeout = _tcstoul(compareCurWordArg,NULL,10);
        if (!globalOptions::timeout)
        {
            std::wcerr << eMsg(L"Warning: You are limiting to infinite time. Check one of your --timeout options!\r\n");
        }
    } else if (!_tcsnicmp(compareCurWordArg,_T("tx"),2))
    {
        compareCurWordArg += 2;
        if (*compareCurWordArg == _T(':'))
            compareCurWordArg++;
        globalOptions::timeout = _tcstoul(compareCurWordArg,NULL,10);
        if (!globalOptions::timeout)
        {
            std::wcerr << eMsg(L"Warning: You are limiting to infinite time. Check one of your --timeout options!\r\n");
        }
    } else
    {
        throw eMsg(L"Could not understand word argument! Ensure all of your directives are spelled correctly. Terminate.");
    }
}

