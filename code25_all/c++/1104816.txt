template <class Super>
class SteerLibraryMixin : public Super { ... }

template <class Super>
class AnnotationMixin: public Super { ... }

template <class Super>
class LocalSpaceMixin: public Super { ... }

// SimpleVehicle_1 adds concrete LocalSpace methods to AbstractVehicle
typedef LocalSpaceMixin<AbstractVehicle> SimpleVehicle_1;


// SimpleVehicle_2 adds concrete annotation methods to SimpleVehicle_1
typedef AnnotationMixin<SimpleVehicle_1> SimpleVehicle_2;


// SimpleVehicle_3 adds concrete steering methods to SimpleVehicle_2
typedef SteerLibraryMixin<SimpleVehicle_2> SimpleVehicle_3;


// SimpleVehicle adds concrete vehicle methods to SimpleVehicle_3
class SimpleVehicle : public SimpleVehicle_3 { ... }

class SimpleVehicle : public LocalSpaceMixin<AbstractVehicle> { ... }

SteerLibrary.hpp||In member function Vec2D SteerLibrary<Super>::SteerForWander(float)':|
SteerLibrary.hpp|41|error: there are no arguments toGetMaxSpeed' that depend on a template parameter, so a declaration of GetMaxSpeed' must be available|
SteerLibrary.hpp|41|error: (if you use-fpermissive', G++ will accept your code, but allowing the use of an undeclared name is deprecated)|
SteerLibrary.hpp|42|error: there are no arguments to GetVel' that depend on a template parameter, so a declaration ofGetVel' must be available|
Vec2D SteerLibrary<Super>::SteerForWander(float)':|
SteerLibrary.hpp|41|error: there are no arguments to
GetMaxSpeed' must be available|
SteerLibrary.hpp|41|error: (if you use
GetVel' that depend on a template parameter, so a declaration of
