struct Policy {
  static void init();
  static void cleanup();
  //...
};

template <class CarT, class CdrT>
struct Cons {
  static void init() {
    CarT::init();
    CdrT::init();
  }
  static void cleanup() {
    CdrT::cleanup();
    CarT::cleanup();
  }
  //...
};

typedef Cons<Policy1, Cons<Policy2, Cons<Policy3, Policy4> > > MyPolicy;

init_with<MyPolicy>(...);
//...
cleanup_with<MyPolicy>(...);

MyPolicy::init_options(); // calls Policy1 to 4's init in order

MyPolicy::cleanup(); // calls Policy1 to 4's cleanup in reverse order

typedef CombinePolicy<Policy1, Policy2, Policy3, Policy4> MyPolicy;

typedef mpl::list<Policy, Policy2, Policy3, Policy4> Policies;

init_with<Policies>(...);

typedef iter_fold<Policies, begin<Policies>::type,
                  some_magic_lambda_expression>::type MyPolicy;

