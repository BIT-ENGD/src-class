#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <stdlib.h>
#define SCREEN_WIDTH 80
#define SCREEN_HEIGHT 25

using namespace std;
void WriteBuffer(CHAR_INFO **bufferp[][SCREEN_WIDTH]);

int main()
{
    //Initialize screen buffer and cursor
    HANDLE hConsoleOutput( GetStdHandle(STD_OUTPUT_HANDLE) );
    COORD dwBufferSize = { SCREEN_WIDTH,SCREEN_HEIGHT };
    COORD dwBufferCoord = { 0, 0 };
    SMALL_RECT rcRegion = { 0, 0, SCREEN_WIDTH-1, SCREEN_HEIGHT-1 };
    CHAR_INFO buffer[SCREEN_HEIGHT][SCREEN_WIDTH];
    CONSOLE_CURSOR_INFO lpConsoleCursorInfo = { 1, false };
    SetConsoleCursorInfo(hConsoleOutput, &lpConsoleCursorInfo);
    //characters
    char characters[3];
    characters[0] = static_cast<char>(177);
    characters[1] = static_cast<char>(177);
    characters[2] = static_cast<char>(177);
    characters[3] = static_cast<char>(177);
    //colors
    ULONG colors[3];
    colors[0] = 0x0A;
    colors[1] = 0x0B;
    colors[2] = 0x0C;
    colors[3] = 0x0D;
    //begin infinite loop
    while (1)
    {
          ReadConsoleOutput( hConsoleOutput, (CHAR_INFO *)buffer, dwBufferSize,dwBufferCoord, &rcRegion );
          WriteConsoleOutput( hConsoleOutput, (CHAR_INFO *)buffer, dwBufferSize,dwBufferCoord, &rcRegion );
          Sleep(100);
    }
}

void WriteBuffer(CHAR_INFO **bufferp[][SCREEN_WIDTH])
{
    int x, y, i = 0; 
    while(y < SCREEN_HEIGHT)
    {      
           while(x < SCREEN_WIDTH)
           {

               bufferp[y][x].Char.AsciiChar = characters[i];
               bufferp[y][x].Attributes = colors[i];
               x++;
           }
           x = 0;
           y++;
    }
}

