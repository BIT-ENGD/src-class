class PuzzleMode;
typedef PuzzleMode* (*fnPuzzleFactory)(bool* bVictory, const char* sPuzzleCode, const GFC::StringList& lParams);

#define REGISTER_PUZZLE(CODE, CLASSNAME)                                                                    \
    PuzzleMode* puzzleFactory##CLASSNAME (bool* bVictory, const char* sCode, const StringList& lParams)     \
    {                                                                                                       \
        return new CLASSNAME(bVictory, sCode, lParams);                                                     \
    }                                                                                                       \
                                                                                                            \
    static bool registerPuzzle##CLASSNAME (void)                                                            \
    {                                                                                                       \
        PuzzleMode::registerPuzzleFactory(CODE, puzzleFactory##CLASSNAME);                                  \
        return true;                                                                                        \
    }                                                                                                       \
                                                                                                            \
    static bool s_bRegisteredPuzzle##CLASSNAME = registerPuzzle##CLASSNAME();

REGISTER_PUZZLE("bloodcollection", BloodCollection);

static Hash<String, fnPuzzleFactory>* s_hPuzzleFactories = NULL;

void PuzzleMode::registerPuzzleFactory (const char* sId, fnPuzzleFactory pFactory)
{
    if (!s_hPuzzleFactories)
        s_hPuzzleFactories = new Hash<String, fnPuzzleFactory>();   

    String sLowId = String(sId).lower();
    s_hPuzzleFactories->setAt(sLowId, pFactory);
}

PuzzleMode* PuzzleMode::createPuzzleInstance (const char* sEngine, bool* bVictory, const GFC::StringList& lParams)
{
    // Shouldn't happen
    if (!s_hPuzzleFactories)
        s_hPuzzleFactories = new Hash<String, fnPuzzleFactory>();

    String sLowId = String(sEngine).lower();
        if (!s_hPuzzleFactories->hasKey(sLowId))    // <----- HERE
        return NULL;

    fnPuzzleFactory fnFactory = s_hPuzzleFactories->getAt(sLowId);
    return fnFactory(bVictory, sEngine, lParams);
}

