on_data_available(...)
on_liveliness_changed(...)
on_liveliness_changed(...)
on_data_available(...)
on_publication_matched(...)
on_publication_matched(...)
on_liveliness_changed(...)
readerQos.liveliness.lease_duration
on_data_available(...)
on_liveliness_changed(...)
DDS::DataReaderQos readerQos;
DDS::StatusKind mask = DDS::DATA_AVAILABLE_STATUS | DDS::LIVELINESS_CHANGED_STATUS |  DDS::LIVELINESS_LOST_STATUS ; 
m_subscriber->get_default_datareader_qos( readerQos );
DDS::Duration_t t = { 3, 0 };
readerQos.liveliness.lease_duration = t;
m_binary_Reader = static_cast<binary::binary_tdatareader( m_subscriber->create_datareader(m_Sender_Topic,readerQos,this, mask, 0, false) );

