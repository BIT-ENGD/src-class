

template <class f, class g> class Ptr;

class RealBase
{
};

template <class a, class b, class c = Ptr<a,b> >
class Base : public RealBase
{
public:
    Base(){};
};

template <class d, class e>
class Derived : public Base <d,e>
{
public:
    Derived(){};
    void DerivedMethod(){};
};
template <class f, class g>
class Ptr
{
public:
    Ptr(){};
    Ptr(Base<f,g,Ptr<f,g> >* a){in = a;};
    Base<f,g,Ptr<f,g> >* operator->()
    {
        return in;
    };
private:
    Base<f,g,Ptr<f,g> >* in;
};

typedef Derived<double,double> DDerived;

int main()
{
    Base<int,int> b = Base<int,int>();
    Derived<double,double> d = Derived<double,double>();
    DDerived dd = DDerived();
    Ptr<double,double> p(&dd);
    p->DerivedMethod();
    return 1;
}

