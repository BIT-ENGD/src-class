unsigned count = 0;
score_pair* scores = new score_pair[num_rows];
while ((row = data.next_row())) {
    float score = calc_score(data.next_feature())
    scores[count].score = score;
    scores[count].doc_id = row->docid;
    count++;
}

assert(count <= num_rows);
qsort(scores, count, sizeof(score_pair), score_cmp);

map<int, int> docid_lookup;
unsigned count = 0; 
score_pair* scores = new score_pair[num_rows];
while ((row = data.next_row())) {
    float score = calc_score(data.next_feature())

    map<int, int>::iterator iter;
    iter = docid_lookup.find(row->docid);
    if (iter != docid_lookup.end()) {
        scores[iter->second].score = score;
        scores[iter->second].doc_id = row->docid;
    } else {
        scores[count].score = score;
        scores[count].doc_id = row->docid;
        docid_lookup[row->docid] = count;
        count++;
    }
}

