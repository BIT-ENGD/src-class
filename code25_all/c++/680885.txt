class QSweep{

public:
QSweep(const vector< vector<double> >& myPoints, const vector< vector<int> >&myEdges);

void intersection(vector< vector<double> >& myPoints, vector< vector<int> >& myEdges);
vector< vector<int> >* sortEdges(vector< vector<double> >& myPoints,
vector<vector<int>>& myEdges);

bool sortx(const vector< vector<int> >& edge1, const vector< vector <int> >& edge2) {
return edge1[0][0]< edge2[0][0];
};
private:
vector< vector<double> > myPoints_;
vector< vector<int> > myEdges_;
};

QSweep::QSweep(const vector< vector<double> >& myPoints, const vector< vector<int>>&  
myEdges){
myPoints_=vector< vector<double> > (myPoints.size(), vector< double >(3,0));
for (unsigned int i=0;i<myPoints.size();i++){
myPoints_[i][0]=myPoints[i][0];
myPoints_[i][1]=myPoints[i][1];
myPoints_[i][2]=myPoints[i][2];
}

myEdges_=vector< vector<int> > (myEdges.size(), vector< int >(2,0));
for (unsigned int i=0;i<myEdges.size();i++){
myEdges_[i][0]=myEdges[i][0];
myEdges_[i][1]=myEdges[i][1];
}
}

 bool sortx(const vector<int> & edge1,const vector<int> & edge2) {
 return myPoints_[edge1[0][0]< myPoints_[edge2[0][0];
 };

int main(){
...
sort(myVector1.begin(),myVector1.end(),sortx);
}

class order{
public:
QSweep* o;
//vector< vector<double> > myPoints_;
bool operator() (const vector<int>& edge1, const vector<int>& edge2){
return o->myPoints_[edge1[0]][0]<o->myPoints_[edge2[0]][0];
}
};

sort(myVector1.begin(),myVector1.end(),order());

....
QSweep* s= new QSweep(myVector, myVector1);
....

sort(myVector1.begin(),myVector1.end(),order(s));

