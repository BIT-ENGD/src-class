void Audio::OpenDevice(const int device,
        const Audio::SamplingRate samplingRate) 
        throw (Exception, std::exception)
{
 switch(samplingRate)
 {
...
 case AUDIO_16BIT_44KHZ_STEREO:
  bits_per_sample_ = 16;
  hertz_ = 44100;
  channels_ = 2;
  break;
...
 default:
  throw Exception("Audio::OpenDevice(): Invalid enum value");
 }

 // Open the device
 const UINT_PTR dev = (-1 == device) ? (UINT_PTR)WAVE_MAPPER : (UINT_PTR)device;
 WAVEFORMATEX wf = {0};
 wf.wFormatTag = WAVE_FORMAT_PCM;
 wf.nChannels = channels_;
 wf.wBitsPerSample = bits_per_sample_;
 wf.nSamplesPerSec = hertz_;
 wf.nBlockAlign = wf.nChannels * wf.wBitsPerSample / 8;
`
 const MMRESULT result = waveInOpen(&hwi_, dev, &wf, 
  (DWORD_PTR)OnWaveEvent, (DWORD_PTR)this, CALLBACK_FUNCTION);
 if (MMSYSERR_NOERROR != result)
  throw Exception("waveInOpen()");

 std::cout << "Audio: Sampling at " << hertz_ << " hertz from " 
  << channels_ << " channel(s) with " << bits_per_sample_
  << " bits per sample. "
  << std::endl;
}

