class Widget
  {
  ComponentA a;
  ComponentB b;
  friend class WidgetPredicate;
  };

class WidgetPredicate : public std::unary_function<bool, const Widget&>
  { 
  bool operator () (const Widget& w) const
    {
    // inspect a and b and make a yes/no decision 
    }
  };

class WidgetPredicate : public std::unary ...
  {
  protected:
    const ComponentA& expose_a ( const Widget& w ) const { return w.a; }
    const ComponentB& expose_b ( const Widget& w ) const { return w.b; }
  public:
    virtual bool operator () ...
  };

class DerivedWidgetPredicate : public WidgetPredicate
  {
  public:
    virtual bool operator () (const Widget& w)
      {
      const ComponentA& a = this->expose_a(w); // a can now be inspected/predicated upon
      const ComponentB& b = this->expose_b(w); // b ...
      }
  };

