priority_queue<Node*,vector<Node*>,greater<Node*>> myQueue; 

bool Node::operator>(const Node& right) const
{   
    return param>right.param;
}

Node *myNode
myQueue.add(myNode);

    template<typename Node, typename Cmp = std::greater<Node> >
struct deref_compare : std::binary_function<Node*,Node*,bool>
{
    deref_compare(Cmp const& cmp = Cmp())
    : cmp(cmp) {}

    bool operator()(Node* a, Node* b) const {
        return cmp(*a,*b);
    }

private:
    Cmp cmp;
};

typedef deref_compare<Node,std::greater<Node> > my_comparator_t;
priority_queue<Node*,vector<Node*>,my_comparator_t> open; 

