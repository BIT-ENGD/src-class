int binaryTree::findHeight(node *n) {
    if (n == NULL) {
        return 0;
    } else {
        return 1 + max(findHeight(n->left), findHeight(n->right));
    }
}

treeHeight
binaryTree
max(a,b) ((a)>(b)?(a):(b))
windef.h
n^n
n
std
std::max
countLeaves
int binaryTree::countLeaves(node *n) {
    if (n == NULL) {
        return 0;
    } else if (n->left == NULL && n->right == NULL) {
        return 1;
    } else {
        return countLeaves(n->left) + countLeaves(n->right);
    }
}

a => countLeaves(n->left)
b => countLeaves(n->right)
#define max(i, j) (((i) > (j)) ? (i) : (j))

template<class T> T max (T i, T j) { return ((i > j) ? i : j) }

