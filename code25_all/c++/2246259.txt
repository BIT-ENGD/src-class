template <class T> class Foo { static Bar foobar;};
T
Foo
foobar
T
template <class T> friend class Foo<T>;
Bar foobar
Bar Foo_DO_NOT_TOUCH_THIS_PLEASE_foobar;
template <class T> class Foo { static Bar& foobar;};
template <class T> Bar& Foo<T>::foobar=Foo_DO_NOT_TOUCH_THIS_PLEASE_foobar;

friend RetType Foo_detail::StaticFunc(ArgT1, ArgT2)
Foo<T>::someFunc()
Foo_static::someFunc()
Foo_static
typedef int Bar;
template <class T> class Foo;

class FooBase
{
    static Bar foobar;
    public:
        template <class T> friend class Foo;
};
Bar FooBase::foobar;

template <class T> class Foo : public FooBase
{
    public:
    using FooBase::foobar;
};

