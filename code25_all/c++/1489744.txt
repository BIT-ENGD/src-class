template <typename T>
struct A
{
     T t;

     void DoSomething()
     {
          t.SomeFunction();
     }
};

struct B
{
};

A<B> a;

a.DoSomething()
DoSomething
B
SomeFunction
template <typename T>
class Primitive : public Object
{
    T value;
public:
    Primitive(const T &value=T());

    operator T() const;

    Primitive<T> &operator =(const T &value);
    Primitive<T> &operator +=(const T &value);
    Primitive<T> &operator %=(const T &value);

    // And so on...
};

Primitive<int>
Primitive<char>
Primitive<float>
%=
operator %=
Primitive<float>
operator %=
Primitive<float>
operator %=
Primitive<float>
operator %=
Primitive<float>
