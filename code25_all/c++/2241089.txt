extern "C" SEND BOOL WINAPI hook_wglSwapLayerBuffers(HDC h, UINT v)
{   
if ( frameCount > 250 )
{
    frameCount++;
    if ( frameCount == 750 ) frameCount = 0;

    if ( nwshader->thisframe == NULL )
    {
        createTextures();
    }

    glBindTexture(GL_TEXTURE_2D, nwshader->thisframe);
    glCopyTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 0, 0, nwshader->width, nwshader->height, 0);

    glClearColor(0.0f, 0.5f, 0.0f, 0.5f);
    glClear(GL_COLOR_BUFFER_BIT);


    glEnable(GL_TEXTURE_2D);    
    glDisable(GL_DEPTH_TEST);   
    glBlendFunc(GL_ONE, GL_ZERO);
    glEnable(GL_BLEND);

    glMatrixMode(GL_PROJECTION);
    glPushMatrix();
    glLoadIdentity();
    glOrtho( 0, nwshader->width , nwshader->height , 0, -1, 1 );
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glLoadIdentity();   


    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    glBegin(GL_POLYGON);
        glTexCoord2f(0.0f, 1.0f);
        glVertex2d(0, 0);
        glTexCoord2f(0.0f, 0.0f);
        glVertex2d(0, nwshader->height);
        glTexCoord2f(1.0f, 0.0f);
        glVertex2d(nwshader->width, nwshader->height);
        glTexCoord2f(1.0f, 1.0f);
        glVertex2d(nwshader->width, 0);
    glEnd();


    glMatrixMode( GL_PROJECTION );
    glPopMatrix();
    glMatrixMode( GL_MODELVIEW );
    glPopMatrix();  

    glEnable(GL_DEPTH_TEST);
    glDisable(GL_TEXTURE_2D);

    glBindTexture(GL_TEXTURE_2D, 0);    
} else {
    frameCount++;
}

if ( h == grabbedDevice )
{
    Log->logline("Swapping buffer on cached device.");

}
return wglSwapLayerBuffers(h,v);
}

