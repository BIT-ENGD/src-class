gcc version 4.0.1
namespace name {
   template <typename T>
   void foo(const T& t) {
      bar(t);
   }

   template <typename T>
   void bar(const T& t) {
      baz(t);
   }

   void baz(int) {
      std::cout << "baz(int)\n";
   }
}

struct test {};
void bar(const test&) {
   std::cout << "bar(const test&)\n";
}

name::foo(test()); // produces "bar(const test&)"

void bar(const double&) {
   std::cout << "bar(const double&)\n";
}

name::foo(5.0) // produces "baz(int)"

typedef std::vector<int> Vec;
void bar(const Vec&) {
   std::cout << "bar(const Vec&)\n";
}

name::foo(Vec());

error: cannot convert ‘const std::vector<int, std::allocator<int> >’ to ‘int’ for argument ‘1’ to ‘void name::baz(int)’

name
bar
