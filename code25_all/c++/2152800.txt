//leak.C
#include<iostream>

class leak
{

   int *p;

   public:

   leak():p(new int[10]()){std::cout<<"Constructor of leak called\n";}
   virtual void set()
   {

       for(int i=0;i<10;++i) p[i]=i*i;
   }

   virtual void display()
   {
       std::cout<<"In leak's display()\n";
       for(int i=0;i<10;++i) std::cout<<p[i]<<std::endl;
   }

   virtual ~leak()
   {
       std::cout<<"Destructor of leak called\n";
       delete[] p;
   }
};

class exleak: public leak
{

     double *r;

     public:

     exleak():r(new double[5]()){std::cout<<"Constructor of exleak called\n";}

     void set()
     {
       leak::set();
       for(int i=0;i<5;i++) r[i]=i*3.0;
     }


     void display()
     {
         leak::display();
         std::cout<<"In exleak's display()\n";
         for(int i=0;i<5;i++)  std::cout<<r[i]<<std::endl;
     }

     ~exleak()
     {

          std::cout<<"Destructor of exleak called\n";
          delete[] r;
     }
};

int main()
{

     leak *x=new exleak();
     x->set();
     x->display();
     delete x;

}

leak.C
leak
valgrind --leak-check=yes --verbose ./leak
==9320== 
==9320== HEAP SUMMARY:
==9320==     in use at exit: 12 bytes in 1 blocks
==9320==   total heap usage: 3 allocs, 2 frees, 92 bytes allocated
==9320== 
==9320== 12 bytes in 1 blocks are definitely lost in loss record 1 of 1
==9320==    at 0x40263A0: operator new(unsigned int) (vg_replace_malloc.c:214)
==9320==    by 0x8048B0E: main (in /home/prasoon/leak)
==9320== 
==9320== LEAK SUMMARY:
==9320==    definitely lost: 12 bytes in 1 blocks
==9320==    indirectly lost: 0 bytes in 0 blocks
==9320==      possibly lost: 0 bytes in 0 blocks
==9320==    still reachable: 0 bytes in 0 blocks
==9320==         suppressed: 0 bytes in 0 blocks
==9320== 
==9320== For counts of detected and suppressed errors, rerun with: -v
==9320== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 25 from 6)

  definitely lost: 12 bytes in 1 blocks //WHERE?

