template <typename T>
class safe_bool 
{
protected:
   typedef void (safe_bool::*bool_type)() const;
   bool_type to_bool_type(bool b) const 
     { return b ? &safe_bool<T>::safe_bool_true : 0; }

private:
   void safe_bool_true() const {}

private:
   bool operator ==(safe_bool<T> const & rhs);
   bool operator !=(safe_bool<T> const & rhs);
};

struct A : public safe_bool<A>
{
   // operator bool() const { return true; }
   operator bool_type() const { return to_bool_type(true); }
};

to_bool_type
bool_type
to_bool_type
class B : public safe_bool<A>
