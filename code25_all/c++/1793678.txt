SingleResult sr(AuthDb, format("SELECT Id, Access, Flags, SessionKey, RealmSplitPreference FROM accounts WHERE Name = '%s'") % Escaped(account_name));

struct SingleResult : public BaseResult
{
    SingleResult(Database *db, const boost::format& query)  { _ExecuteQuery(db, query.str()); }
}

01214E06  mov         eax,dword ptr [ebp-328h] 
01214E0C  push        eax  
01214E0D  push        offset string "SELECT Id, Access, Flags, Sessio"... (13C6278h) 
01214E12  lea         ecx,[ebp-150h] 
01214E18  call        boost::basic_format<char,std::char_traits<char>,std::allocator<char> >::basic_format<char,std::char_traits<char>,std::allocator<char> > (11A3260h) 
01214E1D  mov         dword ptr [ebp-32Ch],eax 
01214E23  mov         ecx,dword ptr [ebp-32Ch] 
01214E29  mov         dword ptr [ebp-330h],ecx 
01214E2F  mov         byte ptr [ebp-4],2 
01214E33  mov         ecx,dword ptr [ebp-330h] 
01214E39  call        boost::basic_format<char,std::char_traits<char>,std::allocator<char> >::operator%<Snow::Escaped> (11A3E18h) 
01214E3E  push        eax  
01214E3F  mov         edx,dword ptr [__tls_index (144EC40h)] 
01214E45  mov         eax,dword ptr fs:[0000002Ch] 
01214E4B  mov         ecx,dword ptr [eax+edx*4] 
01214E4E  mov         edx,dword ptr [ecx+12A3Ch] 
01214E54  push        edx  
01214E55  lea         ecx,[sr] 
01214E58  call        Snow::SingleResult::SingleResult (11A27D4h) 
01214E5D  mov         byte ptr [ebp-4],4 // VS GREEN ARROW IS HERE
01214E61  lea         ecx,[ebp-150h] 
01214E67  call        boost::basic_format<char,std::char_traits<char>,std::allocator<char> >::~basic_format<char,std::char_traits<char>,std::allocator<char> > (11A1DBBh) 
01214E6C  mov         byte ptr [ebp-4],5 
01214E70  lea         ecx,[ebp-170h] 
01214E76  call        Snow::Escaped::~Escaped (11A42D2h) 
    const bool account_found = !sr.Error();
01214E7B  lea         ecx,[sr] 
01214E7E  call        Snow::BaseResult::Error (11A2964h) 
01214E83  movzx       eax,al 
01214E86  test        eax,eax 
01214E88  sete        cl   
01214E8B  mov         byte ptr [account_found],cl 

    if (!account_found) {
01214E8E  movzx       edx,byte ptr [account_found] 
01214E92  test        edx,edx 
01214E94  jne         AuthSession+1C0h (1214F10h) 
        client.Kill(format("%s: Attempted to login with non existant account `%s'") % client % account_name, true);

011A8E7D  mov         dword ptr [ebp-10h],ecx 
011A8E80  mov         ecx,dword ptr [this] 
011A8E83  call        Snow::BaseResult::BaseResult (11A31D9h) 
011A8E88  mov         dword ptr [ebp-4],0 
011A8E8F  lea         eax,[ebp-30h] 
011A8E92  push        eax  
011A8E93  mov         ecx,dword ptr [query] 
011A8E96  call        boost::basic_format<char,std::char_traits<char>,std::allocator<char> >::str (11A1E01h) 
011A8E9B  mov         dword ptr [ebp-34h],eax 
011A8E9E  mov         ecx,dword ptr [ebp-34h] 
011A8EA1  mov         dword ptr [ebp-38h],ecx 
011A8EA4  mov         byte ptr [ebp-4],1 
011A8EA8  mov         edx,dword ptr [ebp-38h] 
011A8EAB  push        edx  
011A8EAC  mov         eax,dword ptr [db] 
011A8EAF  push        eax  
011A8EB0  mov         ecx,dword ptr [this] 
011A8EB3  call        Snow::SingleResult::_ExecuteQuery (124F380h) 
011A8EB8  mov         byte ptr [ebp-4],0 // VS GREEN ARROW HERE
011A8EBC  lea         ecx,[ebp-30h] 
011A8EBF  call        std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> > (11A2C02h) 
011A8EC4  mov         dword ptr [ebp-4],0FFFFFFFFh 
011A8ECB  mov         eax,dword ptr [this] 
011A8ECE  mov         ecx,dword ptr [ebp-0Ch] 
011A8ED1  mov         dword ptr fs:[0],ecx 
011A8ED8  pop         edi  
011A8ED9  add         esp,38h 
011A8EDC  cmp         ebp,esp 
011A8EDE  call        _RTC_CheckEsp (12B4450h) 
011A8EE3  mov         esp,ebp 
011A8EE5  pop         ebp  
011A8EE6  ret         8    

ASSERT(AuthDb);
ASSERT(AuthDb);
SingleResult sr(AuthDb, format("SELECT Id, Access, Flags, SessionKey, RealmSplitPreference FROM accounts WHERE Name = '%s'") % Escaped(account_name));

cout << AuthDb;
Database *AuthDb = NULL, *GameDb = NULL;
extern thread Database *AuthDb, *GameDb;
