std::auto_ptr
auto_ptr<T> x = new T();
boost::scoped_ptr
boost::shared_ptr
std::auto_ptr
std::auto_ptr
std::auto_ptr
boost::shared_ptr
auto_ptr
class T
{
public:
    T() {
        OutputDebugStringA("T\n");
    };
    ~T() {
        OutputDebugStringA("~T\n");
    };
};

{
    fix::auto_ptr<T> x(new T); // This just works.
}
{
    fix::auto_ptr<T> x = (new T); // Doesn't compile. Great!
}
{
    fix::auto_ptr<T> x = fix::auto_ptr<T>(new T); // Transfer of ownership works also.
}

