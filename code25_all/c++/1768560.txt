bool hashmap::remove(char const * const symbol, stock &s,
int& symbolHash, int& hashIndex, int& usedIndex)
{
    if ( isAdded == 0 ) return false;
    if ( hashTable[isRemoved].symbol == symbol ) return true; 
    else 
    {
        symbolHash = this->hashStr( symbol ); 
        hashIndex = symbolHash % maxSize;
        usedIndex = hashIndex;
    }
    for ( int integer = 0; integer < maxSize; integer++ )
    {
        if ( hashTable[usedIndex].symbol != NULL &&
             strcmp( hashTable[usedIndex].symbol, symbol ) == 0 )
        {   
            isAdded--; 
            isRemoved = hashIndex; 
            s = &hashTable[usedIndex];
            delete hashTable[usedIndex].symbol; 
            hashTable[usedIndex].symbol = NULL; 
            return true;
            }
        ++usedIndex %= maxSize; // wrap around if needed
    }
    return false;
}

hashTable[usedIndex].symbol = hashTable[NULL].symbol

