class test
{
public:

    test()
    {
        cout    << "ctor" << endl;
    }

    ~test()
    {
        cout    << "dtor" << endl;
    }

    void*   operator new(size_t) throw()
    {
        cout    << "custom operator new" << endl;
        return _pool.malloc();
    }

    void    operator delete(void* p)
    {
        cout    << "custom operator delete" << endl;
        _pool.free(p);
    }

    void    show()
    {
        cout    << _i << endl;
    }

private:
    int _i;
    static boost::pool<>    _pool;
};// class test

boost::pool<>   test::_pool(sizeof(test));

