[first, last)
template<class Iter>
bool next_permutation(Iter first, Iter last, Iter choice_last);

[first, last)
[first, choice_last)
V
N
R
R <= N
I
R
{ 0, 1, 2, ... R - 1 }
V
C
R
{ V[I[0]], V[I[1]], ... V[I[R - 1]] }
C
I
bool NextPermutationIndices(std::vector<int> &I, int N)
{
    const int R = I.size();
    for (int i = R - 1; ; --i) {
        if (I[i] < N - R + i) {
            ++I[i];
            return true;
        }

        if (i == 0)
            return false;

        if (I[i] > I[i-1] + 1) {
            ++I[i-1];
            for (int j = i; j < R; ++j)
                I[j] = I[j-1] + 1;
            return true;
        }
    }
}

template<class BidirectionalIterator>
bool next_partial_permutation(BidirectionalIterator first,
                              BidirectionalIterator middle,
                              BidirectionalIterator last)
{
    std::reverse(middle, last);
    return std::next_permutation(first, last);
}

