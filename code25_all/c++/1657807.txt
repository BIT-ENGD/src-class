1. 'class std::vector<indexStruct, std::allocator<indexStruct> >' has no member named 'name'
2. no matching function for call to `std::vector<indexStruct, std::allocator<indexStruct> >::push_back(std::vector<indexStruct, std::allocator<indexStruct> >&)'

#include "exampleApp.h"

exampleApp::exampleApp()
{
    this->makeCatalog();
}

char* findCWD()
{
    char* buffer = new char[_MAX_PATH];
    return getcwd(buffer, _MAX_PATH);
}

void exampleApp::makeCatalog()
{
    char* cwd = this->findCWD();
    vector<indexStruct> indexItems;

    this->indexDir(cwd, indexItems);
}

void exampleApp:indexDir(char* dirPath, vector<indexStruct>& indexRef)
{
    DIR *dirPointer = NULL;
    struct dirent *dirItem = NULL;
    vector<indexStruct> indexItems;
    vector<indexStruct> indexItem;

    try
    {
        if ((dirPointer = opendir(dirPath)) == NULL) throw 1;
        while (dirItem = readdir(dirPointer))
        {
            if (dirItem == NULL) throw 2;
            if (dirItem->d_name[0] != '.')
            {
                indexItem.name = dirItem->d_name;
                indexItem.path = dirPath;
                indexItems.push_back(indexItem);
                indexItem.clear();
            }
        }

        indexRef.swap(indexItems);
        closedir(dirPointer);
    }
    catch(int errorNo)
    {
        //cout << "Caught Error #" << errorNo;
    }
}

#ifndef EXAMPLEAPP_H
#define EXAMPLEAPP_H

#include <iostream.h>
#include <dirent.h>
#include <stdlib.h>
#include <vector.h>
using namespace std;

struct indexStruct
{
    char* name;
    char* path;
};

class exampleApp
{
public:
    exampleApp();
private:
    char* findCWD();
    void makeCatalog();
    void indexDir(char* dirPath, vector<indexStruct>& indexRef);
};

#endif

