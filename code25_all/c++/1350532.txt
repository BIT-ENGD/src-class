template <class In, class In2>
void func(In first, In last, In2 first2);

template <class In, class In2>
void func(In first, In last, In2 first2) {
    typedef typename std::iterator_traits<In>::value_type T;
    other_func(first, last, first2, std::less<T>());
}

In
In2
char*
int*
In
In2
In
char*
std::less<char>
In2
int*
::operator<
std::less<>
In
In2
unsigned int x = 0x80000000;
unsigned char y = 1;
std::cout << std::less<unsigned char>()(x, y) << std::endl;
std::cout << std::less<unsigned int>()(x, y) << std::endl;

1
0

typedef typeof(T1() < T2()) T;
other_func(first, last, first2, std::less<T>());

__typeof__
