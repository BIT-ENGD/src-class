friend ostream& operator<<(ostream& out, stack::myItem& theItem); 

class stack 
{ 
public: 
    stack(int capacity); 
    ~stack(void); 
     void method1(); 
     ... 

 private: 

    struct myItem 
    { 
    int             item; 
}; 

  ... 
public: 
    friend ostream& operator<<(ostream& out, stack& s); 
    friend ostream& operator<<(ostream& out, stack::myItem& theItem); 
}; 

ostream& operator<<(ostream& out, stack& s)
{
 if ( s.count == 0 ) // then no elements have been counted.
    out << "\nstack: empty\n\n";
else
        {
        out << "\nstack: ";
        for ( int i = 0; i < s.count; i++ )
        {
   if ( i < s.count-1 )
                     out << s.myItem[i].item << ", ";
                else out << s.myItem[i].item;
        }
        out << "\n\n";
 }
    return out;
}

ostream& operator<<(ostream& out, stack::myItem& theItem)

 out << theItem.item;
 return out;
}

ostream& operator<<(ostream& out, stack& s)
{
if ( s.count == 0 ) // then no elements have been counted.
        out << "\nstack: empty\n\n";
else
        {
        out << s;   
        }
        return out;
}

