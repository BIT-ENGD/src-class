vector<vector<vector<double> > > mdata;

myfun(const double ya[]);

gsl_spline_init(gsl_spline * spline, const double xa[], const double ya[], size_t size);

for (int s = 0; s < msize; s++) {
    accelerators = new gsl_interp_accel*[msize];
    splines = new gsl_spline*[msize];
    for (int i = 0; i < msize; i++) {
        accelerators[i] = gsl_interp_accel_alloc();
        splines[i] = gsl_spline_alloc(gsl_interp_cspline_periodic, msize+1);
        gsl_spline_init(splines[i], &(*mgrid.begin()), &(*mdata[s][i].begin()), msize+1);
    }
}

std::vector<std::vector<std::vector<double,
  std::allocator<double> >,
  std::allocator<std::vector<double,
  std::allocator<double> > > >,
  std::allocator<std::vector<std::vector<double,
  std::allocator<double> >,
  std::allocator<std::vector<double,
  std::allocator<double> > > > > >
  SimpleAmfCalculator::interp_m(int)
std::vector<double,
  std::allocator<double> >*
const
  double*
int
  gsl_spline_init(gsl_spline*, const
  double*, const double*, size_t)
