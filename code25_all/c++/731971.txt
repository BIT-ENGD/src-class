typedef vector< vector<int> > MxInt2d;
typedef vector< vector<double> > MxDouble2d;

class QSweep{   
public:
....
static MxDouble2d myPoints_;
    MxDouble2d myEdges_;

class order{
public:
    bool operator() (const vector<int>& edge1, const vector<int>& edge2){
        //std::cout<<"inside sort"<<endl;
        //3 sort criteria
        return (myPoints_[edge1[0]][0]<myPoints_[edge2[0]][0])|| 
                           (myPoints_[edge1[0]][0]==myPoints_[edge2[0]][0]&& 
                            myPoints_[edge1[0]][1]<myPoints_[edge2[0]][1]) 
               ||
                (myPoints_[edge1[0]][0]==myPoints_[edge2[0]][0]&& 
                             myPoints_[edge1[0]][1]==myPoints_[edge2[0]][1]&& 
                 getSlope(myPoints_[edge1[0]][0],myPoints_[edge1[0][1],  
                                      myPoints_[edge1[1]][0],myPoints_[edge1[1]][0])
                 <
                             getSlope(myPoints_[edge2[0][0],myPoints_[edge2[0][1],    
                                      myPoints_[edge2[1]][0],myPoints_[edge2[1]][0]));
            }
};
static double getSlope(double a, double b, double c, double d);

};

double QSweep::getSlope(double a, double b, double c, double d){
double slope=0.0;
//std::cout<<"slope criteria"<<endl;
double denum=c-a;
if (denum==0){
    std::cout<<"zero denominator"<<endl;
}
else{
    slope=(d-b)/denum;
}
return slope;
}

    sort(myEdges_.begin(),myEdges_.end(),order());

