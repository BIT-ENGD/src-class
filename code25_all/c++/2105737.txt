[ < pivot | == pivot | unsorted | > pivot]
[ == pivot | < pivot | unsorted | > pivot]
==
==
[ == pivot | < pivot | unsorted | > pivot | == pivot]
==
q1
[ < pivot | unsorted | >= pivot]
q2
[ <= pivot | unsorted | > pivot]
q1
pivot1
pivot1
[ < pivot1 | >= pivot1 ]
[ < pivot1]
q1
[ >= pivot1]
q2
q2
pivot2
[ <= pivot2 | > pivot2]
[ < pivot1 | >= pivot1 and <= pivot2 | > pivot2]
q2
[ <= pivot2 | > pivot2]
[ > pivot2]
q1
[ <= pivot2]
pivot1 == pivot2
q2
pivot3
pivot3 == pivot1
[ <= pivot 3]
qs2
[ <= pivot2]
[> pivot2]
qs1
qs2
// qs sorts into [ < p | >= p ]
void qs1(int a[], long left, long right){
    // Pick a pivot and set up some indicies
    int pivot = a[right], temp;
    long i = left - 1, j = right;
    // do the sort
    for(;;){
        while(a[++i] < pivot);
        while(a[--j] >= pivot) if(i == j) break;
        if(i >= j) break;
        temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
    // Put the pivot in the correct spot
    temp = a[i];
    a[i] = a[right];
    a[right] = temp;

    // send the [ < p ] partition to qs1
    if(left < i - 1)
        qs1(a, left, i - 1);
    // send the [ >= p] partition to qs2
    if( right > i + 1)
        qs2(a, i + 1, right);
}

void qs2(int a[], long left, long right){
    // Pick a pivot and set up some indicies
    int pivot = a[left], temp;
    long i = left, j = right + 1;
    // do the sort
    for(;;){
        while(a[--j] > pivot);
        while(a[++i] <= pivot) if(i == j) break;
        if(i >= j) break;
        temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
    // Put the pivot in the correct spot
    temp = a[j];
    a[j] = a[left];
    a[left] = temp;

    // Send the [ > p ] partition to qs1
    if( right > j + 1)
        qs1(a, j + 1, right);
    // Here is where we check the pivots.
    // a[left-1] is the other pivot we need to compare with.
    // This handles the repeated elements.
    if(pivot != a[left-1])
            // since the pivots don't match, we pass [ <= p ] on to qs2
        if(left < j - 1)
            qs2(a, left, j - 1);
}

qs1(array,0,indexofendofarray);

std::sort
std::sort - 1.609 seconds  
dual-pivot quicksort - 1.25 seconds  
qs1/qs2 - 1.172 seconds

std::sort
qs1/qs2
rand() % 1000
std::sort - 0.468 seconds  
dual-pivot quicksort - 0.438 seconds  
qs1/qs2 - 0.407 seconds

