#define CONTAINS(Class, Name)\
    private:\
        std::list<Class> m_##Name##s;\
    public:\
        void add_##Name(const Class& a_##Name) {\
            m_##Name##s.push_back(a_##Name);\
        }\
        int get_##Name(int pos) {\
            return m_##Name##s.at(pos);\
        }\
        // ... more member functions

class my_class {
    CONTAINS(int, integer)
    // ...
};

my_class a(...);
a.add_integer(10);

add_integer(10)
template<typename T>
class list_interface {
private:
    std::list<T> m_list;
public:
    void add_element(const T& x) {
        m_list.push_back(x);
    }
    // ... more member functions
};

class my_class : public list_interface<int> {
    // ...
};

my_class a;
a.add_element(10);

add_element(10)
add_integer(10)
