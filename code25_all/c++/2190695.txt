template <typename StateTypeEnum, typename EventTypeEnum>
class Fsm
{
public:
    Fsm(E_subSystems subSystem,
        uint8_t instance,
        const char * const fsmName,
        const std::vector<State<StateTypeEnum, EventTypeEnum> >& states)
    {}

template <typename StateTypeEnum, typename EventTypeEnum>
class State
{
public:
    State(INPUT E_subSystems subSystem,
    StateTypeEnum stateId, 
    const char * const stateName,
    const std::map<Event<EventTypeEnum>,  EventHandlerFunction>& events)
{}

non-existent
E_callControlStates, E_callControEvents
private:    State<StateTypeEnum, EventTypeEnum>  _currentState;

private:    State<StateTypeEnum, EventTypeEnum> *_currentState;

