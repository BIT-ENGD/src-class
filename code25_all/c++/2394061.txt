    -MusicCD-
band:      Beatles
musicians: "George Harrison" "John Lennon" "Ringo Starr"
songs:     10
title:     Sergeant Pepper's Lonely Hearts Club Band
keywords:  acid rock, sixties

item = library->addMusicCD("Sergeant Pepper's Lonely Hearts Club Band", "Beatles", 10);
if (item != NULL) {
    library->addKeywordForItem(item, "acid rock");
    library->addKeywordForItem(item, "sixties");
    library->addBandMember(item, "John Lennon");
    library->addBandMember(item, "George Harrison");
    library->addBandMember(item, "Ringo Starr");
    library->printItem(cout, item);
    }

#include "Library.h"
#include "book.h"
#include "cd.h"
#include "dvd.h"

#include <iostream>
// general functions


ItemSet allBooks;
ItemSet allCDS;
ItemSet allDVDs;
ItemSet* temp;



ItemSetMap allBooksByAuthor;
ItemSetMap allmoviesByDirector;
ItemSetMap allmoviesByActor;

ItemSetMap allMusicByBand;
ItemSetMap allMusicByMusician;

const Item* Library::addMusicCD(const string& title, const string& band, const int nSongs)
{

    ItemSet* obj = new ItemSet();
    CD* item = new CD(title,band,nSongs);

    allCDS.insert(item);
    obj->insert(item);
    //allMusicByBand[band] = obj;

 ItemSetMap::iterator myband = allMusicByBand.find(band);

if(myband != allMusicByBand.end())
{
    myband->second->insert(item);

}
else{
    allMusicByBand.insert(make_pair(band, obj));
}

    return item;

}

void Library::addBandMember(const Item* musicCD, const string& member)
{

    ItemSet* obj = new ItemSet();

    (((CD*) musicCD)->addBandMember(member)); 
    obj->insert((CD*) musicCD);


   ItemSetMap::iterator MByMusician = allMusicByMusician.find(member);

if(MByMusician != allMusicByMusician.end())
{
    MByMusician->second->insert((CD*) musicCD);


}
else
{
    allMusicByMusician.insert(make_pair(member, obj));
}

}

 #include "CD.h"

using namespace std;

CD::CD(const string& theTitle, const string& theBand, const int snumber)
: Item(theTitle), band(theBand),number(snumber)
{



}

CD::~CD()
{
}


const string CD::getBand() const
{
    return band;

}


const string CD::getMusician() const
{
    return musicians;

}

const int CD::getNumber() const
{

    return number;

}

void CD::addBandMember(const string &member)
{


    this->musicians = member;

}


void CD::print(ostream &out) const
{

    out << "-MusicCD-" << endl;
    out << "band: " << this->getBand() << endl;
    out << "musicians: " << this->getMusician() << endl;
    out << "songs: " << this->getNumber() << endl;
    out << "title: " << this->getTitle() << endl;
    out << "keywords: " << this->printKeywords(this->getKeywords()) << endl;
    out << endl;


}

ostream& operator<<(ostream& out, const CD* cd)
{

    cd->print(out);
    return out;

}

#ifndef CD_H
#define CD_H
#pragma once
#include "item.h"

class CD : public Item
{
public:

    CD(const string& theTitle, const string& theBand, const int snumber);
    void addBandMember(const string& member);
    const int getNumber() const;
    const string getMusician() const;

    const string getBand() const;
    virtual void print(ostream& out) const;
    ~CD();


private:

    string band;
    string musicians;
    string title;
    int number;

};

ostream& operator<<(ostream& out, const CD* cd);

#endif

