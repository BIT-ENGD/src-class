class Sensor
{
public:
  virtual double Calculate(const double &arg)=0;
};
class PTCResistor
{
  PTCResistor(XMLNode &node);
  double Calculate(const double &arg);
};
class Thermocouple
{
  Thermocouple(XMLNode &node);
  double Calculate(const double &arg);
};

<channels>
  <TurbineInletTemp sensor="Thermocouple.TypeK.xml" />
  <CylinderHeadTemp sensor="PTCResistor.PT500.xml" />
  ...
</channels>

<sensor class="PTCResistor">
  <param Rref="500" Tref="0">
  ...
</sensor>

string chnTITFile = rootNode.GetNode("TurbineInletTemp").GetAttribute("sensor");
XMLNode chnTITNode = XMLNode.parseFile(RootPath + chnTITFile,"sensor")
string className = chnTITNode .GetAttribute("class");

if(className == "Thermocouple") {
  Sensor* sensorTIT = new Thermocouple(chnTITNode);
}
else if(className = "PTCResistor") {
  Sensor* sensorTIT = new PTCResistor(chnTITNode);
}

string chnTITFile = rootNode.GetNode("TurbineInletTemp).GetAttribute("sensor");
XMLNode chnTITNode = XMLNode.parseFile(RootPath + chnTITFile,"sensor")
string className = chnTITNode .GetAttribute("class");  

switch(hash(className)) {
case ThermocoupleHash: ...
case PTCResistorHash: ...
...
}

  static Sensor* Thermocouple::Create(XMLNode &node) {
     return new Thermocouple(node);     
  }

typedef Sensor* (*CreateFunct)(XMLNode &node);

class SensorFactory 
{
public:
  SensorFactory() {
    classNameMap["Thermocouple"] = Thermocouple::Create;
    classNameMap["PTCResistor"] = PTCResistor::Create;
  };

  Sensor* ChannelByName(string chnName) {
    string chnFile= rootNode.GetNode(chnName).GetAttribute("sensor");
    XMLNode chnSensorNode = XMLNode.parseFile(RootPath + chnFile,"sensor")
    string className = chnSensorNode.GetAttribute("class");
    map<string, CreateFunct>::iterator iterat = classNameMap.find(className);
    if(iterat != classNameMap.end()) {
       CreateFunct f = iterat->second;
       return f(chnTITNode);
    }
  };

private:
  map<string, CreateFunct> classNameMap;
}

