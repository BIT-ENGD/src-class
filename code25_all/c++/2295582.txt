class linkNode {
    public:
        linkNode(void *p) {
            before = 0;
            after = 0;
            me = p;
        }

        linkNode *before;
        void *me;
        linkNode *after;
    };

    template <class T>
    class list
    {
    public:
        list(void) { first = last = NULL; size = 0; }
        ~list(void) { while(first) deleteNode(first); }      
    private:
        void deleteNode(linkNode *l);

        linkNode *first, *last;
        unsigned int size;
    };

template <class T>
inline void list<T>::deleteNode(linkNode *l) {
    if(c->before)
        if(c->after) {
            c->before->after = c->after;
            c->after->before = c->before;
        } else
            c->before->after = last = NULL;
    else
        if(c->after)
            c->after = first = NULL;
    delete c; size--;
}

ePhys::list<int> myList;
ePhys::list<int>::deleteNode(class ePhys::linkNode *)
