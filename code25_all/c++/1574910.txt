Widget: widget_ram_label:layout_bar:0 1
Widget: widget_ram_active:layout_bar:0 1
Widget: widget_ram_total:layout_bar:0 1
Widget: widget_wlan0_label:layout_bar:0 1

std::map<const char *, Widget *> widgets;

void Generic::BuildLayouts() {
   for(std::map<const char*, std::vector<widget_template> >::iterator l = 
       widget_templates.begin(); l != widget_templates.end(); l++) {
       std::vector<widget_template> layout = l->second;
       for(unsigned int i = 0; i < layout.size(); i++ ) {
           Json::Value *widget_v = CFG_Fetch_Raw(root, layout[i].key);
           if(!widget_v) {
               error("No widget named <%s>", layout[i].key);
               continue;
           }
           Json::Value *type = CFG_Fetch_Raw(widget_v, "type");
           if(!type) {
               error("Widget <%s> has no type!", layout[i].key);
               delete widget_v;
               continue;
           }

           Widget *widget;

           char name[256];
           sprintf(name, "%s:%s", layout[i].key, l->first);
           char tmp[256];
           int i = 0;
           sprintf(tmp, "%s:%d", name, i);

           while(widgets.find(tmp) != widgets.end()) {
               i++;
               sprintf(tmp, "%s:%d", name, i);
           }
           memcpy(name, tmp, 256);

           if(strcmp(type->asCString(), "text") == 0) {
               widget = (Widget *) new WidgetText(this, name, widget_v, 
                   layout[i].row, layout[i].col);
               std::cout << "Widget: " << name << " " << widgets.size() << std::endl;
           } else {
               error("Unknown widget type: %s", type->asCString());
           }
           if(widget) {
               widgets[name] = widget;
           }
           delete type;

       }
   }
}

