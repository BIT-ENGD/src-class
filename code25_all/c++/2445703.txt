#include <iostream>
#include <map>
#include <set>

class A
{
public:
   A(int i, char c) : m_i(i), m_c(c)
   {
   std::cout << "Construct object " << m_c << m_i << std::endl;
   }

   A(const A &a) : m_i(a.m_i), m_c(a.m_c)
   {
   std::cout << "Copy object " << m_c << m_i << std::endl;
   }

   ~A()
   {
   std::cout << "Destruct object " << m_c << m_i << std::endl;
   }

   void operator= (const A &a)
   {
   m_i = a.m_i;
   m_c = a.m_c;
   std::cout << "Assign object " << m_c << m_i << std::endl;
   }

   int m_i;
   char m_c;

};

class B : public A
{
public:
   B(int i) : A(i, 'B') { }

   static const char s_c = 'B';
};

class C : public A
{
public:
   C(int i) : A(i, 'C') { }

   static const char s_c = 'C';
};

template <class X>
class compareA
{
public:
   compareA() : m_i(999)
   {
   std::cout << "Construct functor " << X::s_c << m_i << std::endl;
   }

   compareA(const compareA &a) : m_i(a.m_i)
   {
   std::cout << "Copy functor " << X::s_c << m_i << std::endl;
   }

   ~compareA()
   {
   std::cout << "Destruct functor " << X::s_c << m_i << std::endl;
   }

   void operator= (const compareA &a)
   {
   m_i = a.m_i;
   std::cout << "Assign functor " << X::s_c << m_i << std::endl;
   }

   bool operator() (const X &x1, const X &x2) const
   {
   std::cout << "Comparing object " << x1.m_i << " with " << x2.m_i << std::endl;
   return x1.m_i < x2.m_i;
   }

private:
   int m_i;
};


typedef std::set<C, compareA<C> > SetTest;
typedef std::map<B, SetTest, compareA<B> >  MapTest;

int main()
   {
   int i = 0;
   std::cout << "--- " << i++ << std::endl;
   MapTest mapTest;
   std::cout << "--- " << i++ << std::endl;
   SetTest &setTest = mapTest[0];
   std::cout << "--- " << i++ << std::endl;
   }

--- 0
Construct functor B999
Copy functor B999
Copy functor B999
Destruct functor B999
Destruct functor B999
--- 1
Construct object B0
Construct functor C999
Copy functor C999
Copy functor C999
Destruct functor C999
Destruct functor C999
Copy object B0
Copy functor C999
Copy functor C999
Copy functor C999
Destruct functor C999
Destruct functor C999
Copy object B0
Copy functor C999
Copy functor C999
Copy functor C999
Destruct functor C999
Destruct functor C999
Destruct functor C999
Destruct object B0
Destruct functor C999
Destruct object B0
--- 2

--- 0
Construct functor B999
Copy functor B999
Copy functor B999
Destruct functor B999
Destruct functor B999
--- 1
Construct object B0
Construct functor C999
Copy functor C999
Copy functor C999
Destruct functor C999
Destruct functor C999
Copy object B0
Copy functor C999
Copy functor C999
Copy functor C999
Destruct functor C999
Destruct functor C999
Copy functor C999
Assign functor C999
Assign functor C999
Destruct functor C999
Copy object B0
Copy functor C999
Copy functor C999
Copy functor C999
Destruct functor C999
Destruct functor C999
Copy functor C999
Assign functor C999
Assign functor C999
Destruct functor C999
Destruct functor C999
Destruct object B0
Destruct functor C999
Destruct object B0
--- 2

