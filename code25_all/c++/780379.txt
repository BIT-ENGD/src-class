template <class TYPE, class KTYPE> 
bool List<TYPE, KTYPE> :: _search (NODE<TYPE> **pPre,
                                   NODE<TYPE> **pLoc, 
                                   KTYPE        key)
{
   if ((*pLoc) == NULL)
        return false;
   else
        if (key == (*pLoc)->data.key)
            return true;

            _search ((*pPre)->link ,(*pLoc)->link, key);

            return false;
}

template <class TYPE, class KTYPE> bool List<TYPE, KTYPE> :: _search (NODE<TYPE> **pPre, NODE<TYPE> **pLoc, KTYPE key) { if ((*pLoc) == NULL) return false; else if (key == (*pLoc)->data.key) return true; _search ((*pPre)->link ,(*pLoc)->link, key); return false; }

_search ((*pPre)->link ,(*pLoc)->link, key);

error C2664: 'List<TYPE,KTYPE>::_search' : cannot convert parameter 1 from 'NODE<TYPE> *' to 'NODE<TYPE> **'

NODE <TYPE>  * pPre;
    pPre = NULL;
    NODE <TYPE>  * pLoc ;
    pLoc = NULL;

NODE <TYPE> * pPre; pPre = NULL; NODE <TYPE> * pLoc ; pLoc = NULL;

**
template <class  TYPE> 
    struct NODE 
      {
       TYPE    data;
       NODE   *link;
      }; 

    struct Student 
      {
       string name ;   
       int level;
       int key;
      }; 

template <class  TYPE, class KTYPE> 
    class List  
       {
         private:
           NODE<TYPE> *head;
           NODE<TYPE> *pos;
           NODE<TYPE> *rear;
           int         count;
                     ....
                     .... 
                    ....
                     ....
                     ....

};

template <class TYPE> struct NODE { TYPE data; NODE *link; }; struct Student { string name ; int level; int key; }; template <class TYPE, class KTYPE> class List { private: NODE<TYPE> *head; NODE<TYPE> *pos; NODE<TYPE> *rear; int count; .... .... .... .... .... };


 ostream & operator << (ostream  & out , Student & Data)
{
    out << "The name is : " << Data.name << "\nThe Level is : " << Data.level<< "\nThe ID is :"<<Data.key;
    return out;
}

template<class TYPE, class KTYPE> 
void List <TYPE, KTYPE > :: ReversePrint ( NODE <TYPE> * node )
{
if ( node== NULL)  
        return ;

ReversePrint (node->link);

cout << node-> data;

   return ;
}

