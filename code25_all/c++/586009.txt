
template <class f, class g> class Ptr;

template <class a, class b, class c = Ptr<a,b> >
class Base
{
public:
    Base(){};
};

template <class d, class e>
class Derived : public Base <d,e>
{
public:
    Derived(){};
};

template <class f, class g>
class Ptr
{
public:
    Ptr(){};
    Ptr(Base<f,g,Ptr<f,g> >* a){};
};

typedef Derived<double,double> DDerived;

int main()
{
    Base<int,int> b = Base<int,int>();
    Derived<double,double> d = Derived<double,double>();
    DDerived dd = DDerived();
    Ptr<double,double> p(&dd);
    return 1;
}
      

void function()
{
  vector nVector(1);  // cut down for simplicity
  nVector[0].SetId(1); // To ensure the node is instantiated correctly
  Ptr temp(&nVector[1]);
};

MPICXX:
Ptr&lt;double, double>::Ptr(Derived&lt;double, double>*)
Ptr&lt;f, g>::Ptr(Base&lt;f, g, Ptr&lt;f, g> >*) [with f = double, g = double]
