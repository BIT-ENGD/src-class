template<typename T>
struct A
{};

template<typename T>
struct B
{
    B (A<B> *) {}
};

struct C : public B<int>
{
    C(A<C> *p) : B<int>(p) {} // error
};


int main() {
    A<C> ac;
    C c(&ac);
}

error: no matching function for call to ‘B<int>::B(A<C>*&)’

C       == B<int>
B<int>  == B<T>

=> A<C> == A<B<T> >

struct C : public B<int>
{
    C(A<C> *p) : B<int>((A<B<int> > *)p) {}
};

