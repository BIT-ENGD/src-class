&
operator&()
operator&()
template<class T>
void process( const T* object )
{
    //whatever
}    

template<class T>
void tryProcess( T& object )
{
    process( &object )
}

tryProcess()
T*
T
tryProcess()
class T
operator&()
tryProcess<_com_ptr_<Interface>>()
operator&()
template<class T>
T* getAddress( T& object )
{
   return reinterpret_cast<T*>( &reinterpret_cast<char&>( object ) );
}

tryProcess()
template<class T>
void tryProcess( T& object )
{
    process( getAddress( object ) )
}

class T
operator&()
