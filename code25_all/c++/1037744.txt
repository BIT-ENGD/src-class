class string 
{ 
  public: 
        friend istream& operator >> ( istream& is, string& str); 
  private: 
        char *m_data; 
}; 

int main() 
{ 
  string str; 
  freopen("in.txt","r",stdin); 
  while( cin >> str) 
  { 
      cout < < str < < endl; 
  } 
  return 0; 
}

asdfsfgfdgdfg

is.get()
getchar()
#include <iostream>

namespace Str

{
    class string
    {
    public:
        string():k(0){}

    friend bool operator >> ( std::istream& is, string& str)
    {
        int size = 100;
        char m;

        if( (m = getchar()) && m == -1)
            return false;

        str.m_data = new char[size];

        do
        {
            if( str.k == size)
            {
                size *= 2;
                char *temp = new char[size];
                for( int j = 0; j < str.k; ++j)
                {
                    char *del = str.m_data;
                    temp[j] = *str.m_data++;
                    delete del;
                }
                str.m_data = temp;
                temp = NULL;
            }

            str.m_data[str.k++] = m;
        }while( (m = getchar()) && m != -1);

        return true;
    }

    friend void operator << ( std::ostream& os, string& str)
    {
        os << str.m_data;
        str.k = 0;
        delete []str.m_data;
    }

private:
    char *m_data;
    int k;
};
}


using namespace Str;
int main()
{

string str;

while( std::cin >> str)
{
    std::cout << str;
}

return 0;
}

do
{
}while();

