std::vector<MyType> 

std::vector<MyType,gc_allocator<MyType> >

template<class T> typedef std::vector<T,gc_allocator<T> > gc_vector<T>;

std::map<Key,Val> 

std::map<Key,Val, std::less<Key>, gc_allocator< std::pair<const Key, Val> > >

#define gc_vector(T) std::vector<T, gc_allocator<T> >
typedef gc_vector( std::pair< int, float > ) MyVector;

// standard vector using my allocator
template<class T>
using gc_vector = std::vector<T, gc_allocator<T> >;

// allocates elements using My_alloc
gc_vector <double> fib = { 1, 2, 3, 5, 8, 13 };

// verbose and fib are of the same type
vector<int, gc_vector <int>> verbose = fib; 

