#include "stdafx.h"
#ifdef WIN32
    #include <io.h>
#else
    #include <sys/io.h>
#endif
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>

#include "n_script_timer.h"
//using namespace std;

#ifdef _INC_WCHAR
    typedef wchar_t CHR;
#else
    typedef char CHR;
#endif
int _tmain(int argc, CHR* argv[])
{
    #ifndef _DEBUG
        if(argc == 1)
        {
            printf("You must drag a file onto this program to run it.");
            scanf("%*c");
            return 0;
        }
        CHR* fname = argv[1];
    #else
        #ifdef _INC_WCHAR
            const CHR fname[16] = L"f:\\deleteme.bin";
        #else
            const CHR fname[16] = "f:\\deleteme.bin";
        #endif
    #endif

    FILE* inFile;
    long len;
    struct Script_Timer a;
    //static const int bsize = 4096*6;
    static const int bsize = 84;
    typedef CHR chhh[bsize];
    int alen;
    printf("#Opening File '%s' ...\n",fname);
    #ifdef _INC_WCHAR
        if((inFile = _wfopen(fname,L"rb")) == NULL)
    #else
        if((inFile = fopen(fname,"r")) == NULL)
    #endif
    {
        printf("Error opening file '%s' ",fname);
        return 0;
    }
    fseek(inFile,SEEK_SET,0);
    #ifdef _WIN32
        len = _filelength( inFile->_file );
    #else
        len = _filelength(inFile->_fileno);
    #endif
    printf("  !FileLength: %d\n",len);
    printf("#Creating Buffers...\n");
    if(((float)len/(float)bsize) > (len/bsize))
    {
        alen = (len/bsize) + 1;
    }
    else alen = (len/bsize);
    #ifdef WIN32
        //chhh *cha = new chhh[alen];
        chhh cha[alen];
    #else
        chhh cha[alen];
    #endif
    printf("#Reading File...\n");
    Start_ST(&a);
    int i = 0;
    for(i=0;i<alen;++i)
    {
        fread(&cha[i],sizeof(CHR),bsize,inFile);
        printf("[%i]%s",i,cha[i]);
    }
    End_ST(&a);
    fclose(inFile);
    printf("Characters per millisecond: %f \n",((float)len/a.milliseconds));
    printf("Characters per second: %f \n",((float)len/a.milliseconds) * 1000);
    scanf("%*c");
    return 0;
}

