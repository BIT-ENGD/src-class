class App
{
    void onEvent(const MyEvent& event);
    void onEvent(const MyOtherEvent& event);

    Connector connect;
}

class Connector
{  
   template <class T> void Subscribe(boost::function <void (const T&)> callback);
}

App::App()
{
    connect.Subscribe<MyEvent>(&App::OnEvent<MyEvent>);
}

boost::function f = &App::OnEvent, 

template <> OnEvent(const MyEvent& e) ...

boost::function <void (App*, const MyEvent&)> f = &App::OnEvent;
f(this, e); 

boost::function<void (const MyEvent&)> g = boost::bind(&App::OnEvent, this);

