C 100
R
W

#include <iostream>
#include <fstream>

using namespace std; 

int arrayLength;

class ELEMENT
{
    public:
        int key;
};

class HEAP
{
    public:
        int capacity;
        int size;
        ELEMENT H [];
};

HEAP initialize(int n)
{
    HEAP h;
    h.capacity = n;
    h.size = 0;
    return h;
}

void buildHeap(HEAP &h, ELEMENT *a)
{
    h.size = arrayLength;
    for (int i = 1; i <= arrayLength; i++)
    {
        h.H[i] = a[i];
    }

    for (int i = h.size/2; i >= 1; i--)
    {
        // HEAPIFY HERE
    }
}

void printHeap(HEAP &h)
{
    cout << "Capacity:\t" << h.capacity << endl;
    cout << "Size:\t\t" << h.size << endl;
    cout << "|";
    for (int i = 1; i <= h.size; i++)
    {
        cout << " ";
        cout << h.H[i].key << " |";
    }
    cout << endl;
}

int main()
{
    char c;
    int val;
    HEAP h;

    while (c != 'S')
    {
        cin >> c;
        switch (c)
        {
            case 'S':
                break;
            case 'C':
                cin >> val;
                h = initialize(val);
                break;
            case 'W':
                printHeap(h);
                break;
            case 'R':
                {
                    ifstream infile;
                    infile.open("HEAPinput.txt");
                    infile >> arrayLength;
                    ELEMENT* a = new ELEMENT[arrayLength];
                    for (int i = 1; i <= arrayLength; i++)
                        infile >> a[i].key;
                    infile.close();
                    buildHeap(h, a);
                }
                break;
        }
    }

    return 0;
}

12 9 10 11 12 8 7 6 5 4 3 2 1

Capacity: 100

Size: 12

| 87 | 10 | 11 | 12 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 |

