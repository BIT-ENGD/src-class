Matrix<int>
Matrix<double>
Matrix<T>::Matrix(Matrix<U> const&)
Matrix<T>::Matrix(Matrix<T> const&)
template <typename T> class Matrix {
public:
    // ...
    template <typename U> Matrix(Matrix<U> const&);
    // ...
private
    unsigned int m_rows, m_cols;
    T *m_data;
    // ...
};

U == T
Matrix<T>::Matrix(Matrix<T> const&)
malloc
template <typename T> template <typename U>
template <typename T, typename U>
template <typename T> template <typename U> Matrix<T>::Matrix(Matrix<U> const& obj) {
    m_rows = obj.GetNumRows();
    m_cols = obj.GetNumCols();
    m_data = new T[m_rows * m_cols];

    for (unsigned int r = 0; r < m_rows; ++r) {
        for (unsigned int c = 0; c < m_cols; ++c) {
            m_data[m_rows * r + c] = static_cast<T>(obj(r, c));
        }
    }
}

