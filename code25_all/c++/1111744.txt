class Dynamic
{
public:
    typedef std::map<std::string, boost::function<void (Dynamic&)> > FuncMap;

    void addMethod(const std::string& name, boost::function<void (Dynamic&)> func) {
        funcMap_[name] = func;
    }

    void operator[](const std::string& name) {
        FuncMap::iterator funcItr = funcMap_.find(name);
        if (funcItr != funcMap_.end()) {
            funcItr->second(*this);
        }
    }

private:
    FuncMap funcMap_;
};

void f(Dynamic& self) {
    doStuffWithDynamic(self);
}

int main()
{
    Dynamic dyn;
    dyn.addMethod("f", boost::bind(&f, _1));
    dyn["f"]; // invoke f
}

