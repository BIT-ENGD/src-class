VirtualMotor
Motor
class Motor
{
protected:
    float speed;
    float angle;
public:
    Motor();
    float getSpeed();
    float getAngle();
    virtual void setSpeed( float speed );
    virtual void setAngle( float angle );

#include "Motor.h"

float Motor::getSpeed() { return speed; }
float Motor::getAngle() { return angle; }

#include "Motor.h"

class VirtualMotor: public Motor
{
private:
    float lastSpeed;
public:
    VirtualMotor();
    void setSpeed(float speed);
    void setAngle(float angle);
};

#include "VirtualMotor.h"

VirtualMotor::VirtualMotor() 
{
    speed = 2;
    angle = 5;
}

void VirtualMotor::setSpeed(float speed)
{
    this->speed = speed;
}

void VirtualMotor::setAngle(float angle)
{
    this->angle = angle;
}

#include <iostream>
#include "VirtualMotor.h"

using namespace std;

int main (int argc, char **argv)
{
    VirtualMotor m;
    cout << m.getSpeed() << endl;
    m.setSpeed(9);
    cout << m.getSpeed() << endl;   

    return 0;
}

g++ Main.cpp Motor.cpp VirtualMotor.cpp -o main
/tmp/ccIdYJaR.o: In function `VirtualMotor::VirtualMotor()':
VirtualMotor.cpp:(.text+0x29): undefined reference to `Motor::Motor()'
/tmp/ccIdYJaR.o: In function `VirtualMotor::VirtualMotor()':
VirtualMotor.cpp:(.text+0x5d): undefined reference to `Motor::Motor()'
/tmp/ccIdYJaR.o:(.rodata._ZTI12VirtualMotor[typeinfo for VirtualMotor]+0x8): undefined reference to `typeinfo for Motor'
collect2: ld returned 1 exit status

VirtualMotor::VirtualMotor() : Motor::Motor()
