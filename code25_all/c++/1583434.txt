GL_RGBA32F_ARB
GL_BLEND
glBlendFunc(GL_ONE, GL_ZERO)
 const size_t res = 16;
 GLuint tex;
 glGenTextures(1, &tex);
 glBindTexture(GL_TEXTURE_2D, tex);
 glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
 glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
 glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
 glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
 glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_FALSE);
 glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F_ARB,
  res, res, 0, GL_RGBA, GL_FLOAT, 0);
 glBindTexture(GL_TEXTURE_2D, 0);

 GLuint fbo;
 glGenFramebuffersEXT(1, &fbo);
 glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, fbo);
 glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT,
  GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, tex, 0);
 glDrawBuffer(GL_COLOR_ATTACHMENT0_EXT);

 glViewport(0, 0, res, res);
 glMatrixMode(GL_PROJECTION);
 glLoadIdentity();
 glOrtho(0, res, 0, res, -1, 1);

 glClearColor(0,0,0,0);
 glClear(GL_COLOR_BUFFER_BIT);

 //glEnable(GL_BLEND);
 //glBlendFunc(GL_ONE, GL_ZERO);
 glDisable(GL_BLEND);
 glDisable(GL_DEPTH_TEST);

 glColor4f(0.2, 0.3, 0.4, 0.5);

 for (int i=0; i<2; ++i) {
  glBegin(GL_QUADS);
  glVertex2i(0,0);
  glVertex2i(res, 0);
  glVertex2i(res, res);
  glVertex2i(0, res);
  glEnd();
 }

 glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);

 std::vector<float> tmp(res*res*4);
 glBindTexture(GL_TEXTURE_2D, tex);
 glGetTexImage(GL_TEXTURE_2D, 0,
  GL_RGBA, GL_FLOAT, &tmp.front());
 const float * const x = &tmp.front();
 cerr << x[0] << " " << x[1] << " " << x[2] << " " << x[3] << endl;
 // prints 0.3 0.45 0.6 0.75

 glDeleteTextures(1, &tex);
 glDeleteFramebuffersEXT(1, &fbo);

