   #include <iostream>
using namespace std;

struct node {
  char dat;
  node *nextPtr;
};

//inserts new node and returns pointer
node* new_node(char data, node* prevNode);

//adds a new node at the head ofthe list
void new_head (node *head_, char dat_);

//inserts new node after *before
void insert_node (node *before, char dat_);

//runs through and prints the list - requires first node (head)
void print_nodes (node *head);


int main() {
  cout <<endl << endl;
  cout << endl << "*******************RUN******************" <<endl <<endl;

  node* head = NULL;

  if (head == NULL) { 
    cout << "head null"; //this works here
  }


  //head non-standard
  //  node* head = new node;
  //  head->dat ='a';

  /*
  node* b = new_node('b', head);
  node* c = new_node('c', b);
  node* d = new_node('d', c);
  node* e = new_node('e', d);
  node* f = new_node('f', e);

  */
  print_nodes(head);

  insert_node(head,'N');

  print_nodes(head);

  cout << endl << "*******************END RUN******************" <<endl;
  return 0;
}

node* new_node(char data, node* prevNode) {
  node* tempPtr = new node;
  tempPtr->dat = data;
  tempPtr->nextPtr = NULL; //standard
  prevNode->nextPtr = tempPtr;
  return tempPtr;
}

void new_head (node *head_, char dat_) {

}

void insert_node (node *before, char dat_) {
  node* tempPtr = new node;
  tempPtr->dat = dat_;

  tempPtr->nextPtr = before->nextPtr;
  before->nextPtr = tempPtr;

}


void print_nodes (node *head) {

  node* tempPtr = head;

  cout << "\nPrinting nodes..." <<endl;

  if (tempPtr == NULL) { //this test is not working.. why?
    cout << "tempPtr is NULL";
    return; 
  } else { //only run in the non null case
    for (tempPtr; tempPtr != NULL; tempPtr = tempPtr->nextPtr) {
      cout << "Current node content: " << tempPtr->dat <<endl;
    }  
  }
}

