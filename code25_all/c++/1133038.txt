// this is what we want the wrapped function to look like
typedef void (*callback)(int); 
void foobar( float x ); // wrappee

// doesn't compile
template< T (*f)(S) > // non-type template param, it's a function ptr
struct Wrapper
{
  static void wrapped(int x)
  {
     // do a bunch of other stuff here
     f(static_cast<S>(x)); // call wrapped function, ignore result

  }
}

AddCallback( Wrapper<foobar>::wrapped );

template< class T, class S, T (*f)(S) >
struct Wrapper
// ...

Wrapper<void,float,foobar>::wrapped
