
    void resize( size_type size )
    {
        size_t new_size = round_to_power2( size );
        size_t old_size = m_buckets;

        if ( new_size == old_size )
        {
            // Do nothing
            return;
        }
        else if ( new_size < old_size )
        {
            // The new table will be smaller, so there's no need to rehash
            // all the items.
            value_type* new_table;
            new_table = m_allocator.allocate( new_size * ItemSize );

            // Copy the elements that fit into the new table and destroy
            // those that doesn't fit.  Plain old memcpy seems to have much
            // less problems with types than std::copy..
            std::memcpy( new_table, m_table, new_size * ItemSize );

        //_Destroy( iterator( this, m_table + new_size, true ), m_end_it );

            for ( iterator First = iterator( this, m_table + new_size, true ); First != m_end_it; ++First) _Destroy(&First);


            m_allocator.deallocate( m_table, old_size );
            m_table = new_table;
            ...
            ...
            ...


    void clear()
    {
        // Call the destructor for all objects and reinitialize the memory.

        //_Destroy( begin(), end() );

        for ( iterator First = begin(); First != end(); ++First) 
                    _Destroy(&First);

        initialize_memory();
        m_num_elements = 0;
    }


    void erase( iterator first, iterator last )
    {
        m_num_elements -= mm::distance( first, last );
        //_Destroy( first, last );
        for ( ; first != last; ++first) 
                    _Destroy(&last);

        std::uninitialized_fill( first, last, m_empty_value );
    }

