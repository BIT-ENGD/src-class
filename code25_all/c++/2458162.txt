class Right
{};

class Left
{
public:
  Left& operator = (Right const&)
  {
    //... Do something ...

    return *this;
  }
};


int main()
{
  Right right;
  Left left;

  // Assign individual object -- this works
  left = right;
}

= operator()
Left
int main()
{
  ...

  std::list<Right> rightLst;
  std::list<Left>  leftLst;

  // Assign a list of objects -- this doesn't compile
  leftLst = rightLst;
}

rightLst
leftLst
class Left
{
public:
  Left()
  {}
  explicit Left(Right const& right_)
  {
    .. // Do something ..
  }
  Left& operator = (Right const& right_)
  {
    // .. Do something ..
    return *this;
  }
};

  for(std::list<Right>::iterator it  = rightLst.begin();
                                 it != rightLst.end();
                                 it++ )
  {
    leftLst.push_back(Left(*it));
  }

