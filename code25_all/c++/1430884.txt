 

class B;
class A {

     private:
          A();
          class A *ptr;
     public:
         A & GetAInstance()
         {
           if (!ptr)
               ptr = new A;
           return ptr;
         }
         void CreateBInstances(std::string name)
         {
              map[name] = new B(name);
         }
};

Class B {
       public:
           B(std::string name) { }
       public:
           void checkCondition()
           {
                if  (condition == true)
                {
                   // So here the contidition is hit, I want to create
                   // another object of class B, but I want to intimate
                   // class A to do this job for me
                }
           }
};

