class Worker
{
private:
  SomeContainer _c;
public:
    void add( const Item &i );
    void doSomething();
};

doSomething()
operator==
class Item
{
protected:
    virtual bool _equals( Item &other ) = 0;
public:
    bool operator==( Item &other ) { return _equals( other ); };
};

class AItem: public Item
{
private:
    bool _equals( Item &other );
    std::string _member;
...
};

class BItem: public Item
{
private:
    bool _equals( Item &other );
    int _member;
...
};

_equals
other
bool AItem::_equals( Item &other )
{
    return this->_member == static_cast<AItem &>(other)._member;
}

dynamic_cast
other
#define
