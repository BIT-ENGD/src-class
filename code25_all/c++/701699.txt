struct Test{
    int i;
    Test(int ii):i(ii){}
    Test& operator=(int ii){
        i = ii;
        return *this;
    }
    Test operator+(const Test& rhs){
        return Test(i + rhs.i);
    }
    void non_const_function(){
        i *= i;
    }
};

int main(){
        //code below gives errors, builtin types don't allow evil code
        //int i = 5+5 = 8;
        //int& iRef = 5+5;
        //int* iPtr = &(5+5);
        //5 = 10;

        Test x = Test(5) + Test(5) = 8;//assign to a temporary
        Test& xRef = Test(5) + Test(5);//reference to a temporary
        Test* xPtr = &(Test(5) + Test(5));//address of a temporary
        Test(5) = Test(10);//assign to a temporary
        Test(8).non_const_function();//call a non-const function
        return 0;
}

