ifstream read;
read.open("input.txt");
write.open("output.txt");
int width, height, wall[500][500];
read >> height;
read >> width;
for ( int count1 = 0; count1 < height; count1++)
{
   for ( int count2 = 0; count2 < width; count2++)
      { 
         read >> wall[count1][count2];
       }
}

cout
int h = 0, w = 0, compare1, compare2, compare3, currentInt;
for ( int count3=( height-2 ); count3 >= 0; count3--)
{  
   for( int count4 = 0; count4 < width; count4++)
     {
     h = count3;
     w = count4;
      currentInt = wall[h][w];   // read in affected integers.
      if( w != 0 )
       { compare1 = wall[h+1][w-1];
       }
       compare2 = wall[h+1][w];
       compare3 = wall[h+1][w+1]; 
       if( w!= 0)                     // Compare and replace. 
       {  
          if((( currentInt + compare1) >=(currentInt + compare2)) && ((currentInt + compare1)>=(currentInt + compare3)))
          { 
             wall[h][w] = ( currentInt+compare1);
          }
          if((( currentInt + compare2) >(currentInt + compare1)) && ((currentInt + compare2)>(currentInt + compare3)))
          { 
             wall[h][w] = ( currentInt+compare2);
          }
          if((( currentInt + compare3) >=(currentInt + compare2)) && ((currentInt + compare1)>(currentInt + compare1)))
          { 
             wall[h][w] = ( currentInt + compare3);
          }
       }
       else
       { 
          if ((currentInt + compare2) >= ( currentInt + compare3))
          {
             wall[h][w] = ( currentInt + compare2);
          }
          else
          {
             wall[h][w] = ( currentInt + compare3);
          }
       }
      }
}
int maxFlies=0;
for (int count5 = 1; count5 < width;count5++)
   {
   maxFlies = wall[0][0] ;
   if ( maxFlies < wall[0][count5])
   { maxFlies = wall[0][count5] ; }
   }
write<<maxFlies<<endl;
read.close();
write.close();
return 0;

