template_test.h
template<class BaseClass>
class Templated : public BaseClass
    {
public:
    Templated(int a);
    virtual int Foo();
    };

class Base
    {
protected:
    Base(int a);
public:
    virtual int Foo() = 0;
protected:
    int b;
    };

template_test.cpp
#include "template_test.h"

Base::Base(int a)
    : b(a+1)
    {
    }

template<class BaseClass>
Templated<BaseClass>::Templated(int a)
    : BaseClass(a)
    {
    }

template<class BaseClass>
int Templated<BaseClass>::Foo()
    {
    return this->b;
    }

main.cpp
#include "template_test.h"

int main()
    {
    Templated<Base> test(1);
    return test.Foo();
    }

Templated<Base>::Templated(int)
Templated<Base>::Foo()
main.cpp
template<> Templated<Base>::Templated(int a);
template<> int Templated<Base>::Foo();

main.cpp
class Templated
