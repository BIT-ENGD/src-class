y = 1 + a[0][0]*x[0] + a[1][0]*x[0]^2 + a[0][1]*x[1] + a[1][1]*x[1]^2 + ...

class Solution
{
    double *x;
    double y;
    double **a; // the same for all instances
    int n; // the same for all instances
public:
    Solution(int,double*);
    ~Solution();
    double yFunc();
}

class Pool
{
    vector<Solution> sols;
    int poolSize;
    // other private members
public:
    Pool(int,int,double*);
    ~Pool();
    // other public functions
}

// construct Solution
Solution::Solution(int numX,double **coef)
{
    n=numX;
    // allocate memory for coefficients
    a = new double*[2];
    for(int i=0;i<2;i++) a[i] = new double[n];
    // assign coefficients
    for(int i=0;i<2;i++) 
        for(int j=0;j<n;j++)
            a[i][j] = coef[i][j];
    // generate a random solution in [-1,+1] range
    srand(time(0));
    for(int j=0;j<n;j++)
        x[j] = 2.0*(rand()/(double)RAND_MAX-0.5);
}

// destroy Solution
Solution::~Solution()
{
    delete[] x;
    for(int i=0;i<2;i++) delete[] a[i];
    delete[] a;
}

// define optimized function
double Solution::yFunc()
{
    double sum=1.0;
    for(int j=0;j<n;j++)
        sum += a[0][j]*x[j]+a[1][j]*x[j]*x[j];
    return sum;
}

// construct Pool
Pool::Pool(int numSols, int numX, double **coef)
{
    poolSize = numSols;
    for(int i=0;i<poolSize;i++)
    {
        Solution sol = new Solution (numX,coef);
        sols.push_back(sol);
    }
}

