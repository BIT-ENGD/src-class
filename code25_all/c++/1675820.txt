bool quack::pushFront(const int nPushFront) 
{     
    if ( count == maxSize ) // indicates a full array
    {
         return false;
     }
    else if ( count == 0 ) 
    {
        ++count;
        items[0].n = nPushFront;
        return true;
    }
     intBack = intFront;
     items[++intBack] = items[intFront];
     ++count;
     items[(top+(count)+maxSize)%maxSize].n = nPushFront;
 /*
    for ( int shift = count - 1; shift >= 0; --shift )
    {
         items[shift] = iâ‚¬tems[shift-1];
    }   
     items[top+1].n = nPushFront; */
     return true;    
  }

not actual code:

pushFront(2);
pushFront(4);
cout << q;    

