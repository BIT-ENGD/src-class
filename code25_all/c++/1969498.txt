class GameObject1 {
public:
GameObject1();
GameObject1(const char * filename);
virtual ~GameObject1();

virtual void Draw();

private:
struct md3_header_t
{
    int  IDENT;         //id of file, always "IDP3"
    int  Version;       //version number, always 15
    char Name[64];      //name of character
    int  Flags;         //blank but needed
    int  Num_frames;    //number of Frames
    int  Num_surfaces;  // number of shaders
    int  Num_skins;     //...
    int  Num_triangles; //num triangles - important one
    int  Ofs_triangles; // offset of triangles
    int  Ofs_frames;    // frames offset
    int  Ofs_tags;      // tags offset
    int  Ofs_surfaces;  //offset to surfaces
    int  Ofs_eof;       //offset of end of header

};

typedef float vec3[3];

struct md3_frame_header_t
{
    vec3 Min_bounds;    //first corner of bounding box
    vec3 Max_bounds;    //other corner
    vec3 local_origin;  //usually 0 0 0
    float Radius;       //radius of bounding sphere
    char NAME[16];      // name of frame
};

struct md3_tag_header_t
{
    char NAME[64];      //name of tag
    vec3 origin;        //origin of tag eg head or torso
    vec3 Axis[3];       //axis stuff
};

struct md3_surface_header_t
{
    int IDENT;           //id, must be IDP3
    char Name[64];       //name of mesh
    int Flags;          // blank space
    int Num_frames;     // number of frames
    int Num_shaders;    // no shaders
    int Num_vert;       // number verts
    int Num_triangles;  //number of triangles
    int Ofs_triangles;  //offset of triangle data from surface start
    int Ofs_shaders;    // offset of shaders
    int Ofs_st;         // offset texture data
    int Ofs_xyznormal;  // offset of verts
    int Ofs_end;        // offset of end of surface section from start
};

#include "GameObject1.h"

GameObject1::GameObject1() {
   //if we have no model...
}

//constructor if a model has been provided
GameObject1::GameObject1(const char * filename) {
ifstream md3file;
md3file.open(filename, ios::in|ios::binary);

// C stuff
md3_header_t * md3header = (struct md3_header_t *)
    malloc(sizeof(struct md3_header_t));
md3file.read((char *) md3header, sizeof (struct md3_header_t));


// Check the file
if (md3header->IDENT != 860898377) {
    // Error!
    cerr << "Error: bad version or identifier" << endl;
}  


// seekg to search through the file to add new data to structs
    // frame struct
md3_frame_header_t * md3frame = (struct md3_frame_header_t *)
            malloc(sizeof(struct md3_frame_header_t));
md3file.seekg(md3header->Ofs_frames);
md3file.read((char *) md3frame, sizeof (struct md3_frame_header_t));

//surface struct
md3_surface_header_t * md3surface = (struct md3_surface_header_t *)
                                 malloc(sizeof( md3_surface_header_t));
md3file.seekg(md3header->Ofs_surfaces);
md3file.read((char *) md3surface, sizeof (struct md3_surface_header_t));

md3file.close();
}

GameObject1::~GameObject1() {
// deconstructor
}

void GameObject1::Draw(){
 // eventually a method to draw the model to screen using OpenGL and SDL
}

