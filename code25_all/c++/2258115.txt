template < std::size_t N = 3, typename T = float >
class Vector
{
  typedef T Degree, Radian;
private:
  T m_vecEntry[N];
public:
  // arithmetic operations
  Vector operator + (const Vector & _vector) const;
  Vector operator - (const Vector & _vector) const;
  Vector operator * (const Vector & _vector) const;
  Vector operator * (float _val) const;
};

template < std::size_t N = 4, typename T = float >
class Colour
{
private:
  T m_colEntry[N];
public:
  // arithmetic operations
  Colour operator + (const Colour& _colour) const;
  Colour operator - (const Colour& _colour) const;
  Colour operator * (const Colour& _colour) const;
  Colour operator * (float _val) const;
};

