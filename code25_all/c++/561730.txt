// works fine with full template specialization
template <int N>
struct TestDispatcher1D {
  int f(int n) {
    if (n == N) return n; // replace me with actual dispatch
    TestDispatcher1D<N-1> t;
    return t.f(n);
  }
};

template<>
struct TestDispatcher1D<-1> {
  int f(int n) { return -1; }
};

// partial template specialization is problematic
template <int M, int N>
struct TestDispatcher2D {
  int f(int m, int n);
};

template<int M>
struct TestDispatcher2D<M,-1> {
  int f(int m, int n) { return -1; }
};

template<int N>
struct TestDispatcher2D<-1,N> {
  int f(int m, int n) { return -1; }
};

template<>
struct TestDispatcher2D<-1,-1> {
  int f(int m, int n) { return -1; }
};

template <int M, int N>
int TestDispatcher2D<M,N>::f(int m, int n) {
  if ((n == N) && (m == M)) return n + m; // replace me with actual dispatch
  if (m < M) {
    if (n < N) {
      TestDispatcher2D<M-1,N-1> t;
      return t(m,n);
    } else {
      TestDispatcher2D<M-1,N> t;
      return t(m,n);
    }
  } else {
    TestDispatcher2D<M,N-1> t;
    return t(m,n);
  }
}

// test code
void testIt() {
  { 
    TestDispatcher1D<16> t; 
    t.f(16); 
  }
  {
    TestDispatcher1D<16>t; 
    t.f(0);
  }
  {
    TestDispatcher2D<16,16>t; 
    t.f(8,8);
  }
}

