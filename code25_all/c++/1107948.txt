/*********************************************************************
If T is polymorphic, the compiler is required to evaluate the typeid 
stuff at runtime, and answer will be true.  If T is non-polymorphic, 
the compiler is required to evaluate the typeid stuff at compile time, 
whence answer will remain false
*********************************************************************/
template <class T> 
bool isPolymorphic() { 
   bool answer=false; 
   typeid(answer=true,T()); 
   return answer; 
}

class PolyBase {
public:
   virtual ~PBase(){}
};

class NPloyBase {
public:
   ~NBase(){}
};


if (isPolymorphic<PolyBase>())
  std::cout<<"PBase = Polymorphic\n";
if (isPolymorphic<NPolyBase>())
  std::cout<<"NBase = Also Polymorphic\n";

dynamic_cast<void*>(T)
dynamic_cast
