public class ListForType<T>
{

    private Dictionary<Type, List<T>> listForType
        = new Dictionary<Type, List<T>>();

    public void AddList(Type type, params T[] list)
    {
        AddListForType(type, list);
        AddListFromSuperiorTypes();
    }

    public T[] GetList(Type type)
    {
        return listForType[type].ToArray();
    }

    private void AddListForType(Type type, T[] list)
    {
        if (!listForType.ContainsKey(type))
            listForType.Add(type, new List<T>());
        foreach (T item in list)
            AddItemForType(type, item);
    }

    private void AddItemForType(Type type, T item)
    {
        if (!listForType[type].Contains(item))
            listForType[type].Add(item);
    }

    private void AddListFromSuperiorTypes()
    {
        foreach (Type type in listForType.Keys)
            foreach (Type typePossibleSuper in listForType.Keys)
                if (type.IsSubclassOf(typePossibleSuper))
                    AddListForType(type, GetList(typePossibleSuper));
    }

}

public class Fruit
{

    private static ListForType<String> fruitReferenceBooks
        = new ListForType<String>();

    protected static ListForType<String> FruitReferenceBooks
    {
        get { return fruitReferenceBooks; }
        set { fruitReferenceBooks = value; }
    }

    static Fruit()
    {
        FruitReferenceBooks.AddList(typeof(Fruit),
            "A Book on Fruit");
    }

    public String[] ReferenceBooks
    {
        get { return FruitReferenceBooks.GetList(this.GetType()); }
    }

}

public class Banana : Fruit
{

    static Banana()
    {
        FruitReferenceBooks.AddList(typeof(Banana),
            "A Book on Bananas");
    }

}


public class Apple : Fruit
{

    static Apple()
    {
        FruitReferenceBooks.AddList(typeof(Apple),
            "A Book on Apples",
            "Another Book on Apples");
    }

}

public class McIntosh : Apple
{

    static McIntosh()
    {
        FruitReferenceBooks.AddList(typeof(McIntosh),
            "A Book on McIntosh Apples");
    }

}

public class GoldenDelicious : Apple
{

    static GoldenDelicious()
    {
        FruitReferenceBooks.AddList(typeof(GoldenDelicious),
            "A Book on GoldenDelicious Apples",
            "Another Book on GoldenDelicous Apples");
    }

}

GoldenDelicious gd = new GoldenDelicious();
    foreach (String book in gd.ReferenceBooks)
        Console.WriteLine(book);

