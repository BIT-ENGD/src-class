/// <summary>
/// Dummy interface
/// </summary>
public interface ITest1
{ }
/// <summary>
/// Dummy interface
/// </summary>
public interface ITest2
{ }
/// <summary>
/// Generic Class
/// </summary>
public class GenericClass
{
    /// <summary>
    /// First overload
    /// </summary>
    /// <param name="test1"></param>
    public void TestMethod(ITest1 test1)
    { }
    /// <summary>
    /// Second overload
    /// </summary>
    /// <param name="test2"></param>
    public void TestMethod(ITest2 test2)
    { }

    /// <summary>
    /// method with common logic
    /// </summary>
    /// <typeparam name="TInterfaceType">
    /// Type of the test object
    /// </typeparam>
    /// <param name="test">
    /// Test object to pass to the method.
    /// </param>
    public void ConditionallyCallTest<TInterfaceType>(
          TInterfaceType test, bool someLogic)
    {
        if (someLogic)
        {
            this.TestMethod(test);
        }
        else
        {
            // .. Perform Common operations here
        }
    }
}

GenericClass g = new GenericClass();
// We have an overload, so this is OK:
g.ConditionallyCallTest<ITest1>(test1);
// We have an overload, so this is OK:
g.ConditionallyCallTest<ITest2>(test2);
// Compiler error, no overload available:
g.ConditionallyCallTest<UnknownType>(obj);

