public class A { 
  internal A(int i) { ... }
  public int Foo { get; set; }
}

public class B : A {
  ...
}

int
A
public T Load<T>() where T : A {
  //do some stuff, create an instance of T from an int, then return it
}

B b = Helper.Load<B>();

B
typeof(T).GetConstructor(typeof(int))
return (T)new A(/*some int */);

System.InvalidCastException
