private JobCard PopulateObject(JobCard jc, DataRow dataRow)
{

    PropertyInfo[] proplist = jc.GetType().GetProperties();

    foreach (PropertyInfo propertyitem in proplist)
    {
        if (propertyitem.Name != "")
            if (propertyitem.PropertyType.BaseType.Namespace == "System")
            {
               propertyitem.SetValue(jc, dataRow[propertyitem.Name], null);                  
            }
            else
            {
                string typename = propertyitem.ToString().Replace("Pss.Common.Mia.", "");
                int i = typename.IndexOf("Base");
                typename = typename.Substring(0, i);
                Type type = propertyitem.PropertyType;

                switch (typename)
                {
                    case "Customer":
                        propertyitem.SetValue(jc, PopulateCustomerObject(propertyitem, dataRow, type), null);
                        break;
                    case "Meter":
                        propertyitem.SetValue(jc, PopulateMeterObject(propertyitem, dataRow, type), null);
                        break;
                    case "TimeSheet":
                        propertyitem.SetValue(jc, PopulateTimeSheetObject(propertyitem, dataRow, type), null);
                        break;
                }
            }
    }

    return jc;

}

 private Customer PopulateCustomerObject(object o, DataRow dataRow, Type type)
    {
            IDataStorable instance = (IDataStorable)AppDomain.CurrentDomain.CreateInstanceAndUnwrap(type.Assembly.FullName, type.FullName);
        PropertyInfo[] proplist = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);

        Customer c = new Customer();

    Guid customerGuid = new Guid(dataRow["AddressId"].ToString());
    string view = ReflectionHelper.GetAttribute<DBObjectRetrieveAttribute>(type).View;

    string query = string.Format("select * from {0} where id = '{1}'", view, customerGuid);

    c = DataAccess.Retriever.Retrieve<Customer>(query);

    return c;
}


private Address PopulateAddressObject(object o, DataRow dataRow, Type type)
{
    IDataStorable instance = (IDataStorable)AppDomain.CurrentDomain.CreateInstanceAndUnwrap(type.Assembly.FullName, type.FullName);
    PropertyInfo[] proplist = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);

    Address a = new Address();

    Guid AddressGuid = new Guid(dataRow["PhysicalAddressId"].ToString());
    string view = ReflectionHelper.GetAttribute<DBObjectRetrieveAttribute>(type).View;

    string query = string.Format("select * from {0} where id = '{1}'", view, AddressGuid);

    a = DataAccess.Retriever.Retrieve<Address>(query);
    return a;
}

private Meter PopulateMeterObject(object o, DataRow dataRow, Type type)
{

    IDataStorable instance = (IDataStorable)AppDomain.CurrentDomain.CreateInstanceAndUnwrap(type.Assembly.FullName, type.FullName);
    PropertyInfo[] proplist = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);

    Meter m = new Meter();

    Guid meterGuid = new Guid(dataRow["MeterId"].ToString());
    string view = ReflectionHelper.GetAttribute<DBObjectRetrieveAttribute>(type).View;

    string query = string.Format("select * from {0} where id = '{1}'", view, meterGuid);

    m = DataAccess.Retriever.Retrieve<Meter>(query);
    return m;
}

Customer c = new Customer();
Address a = new Address();
Meter m = new Meter();
TimeSheet t = new TimeSheet();

c = DataAccess.Retriever.Retrieve<Customer>(query);
a = DataAccess.Retriever.Retrieve<Address>(query);
m = DataAccess.Retriever.Retrieve<Meter>(query);
t = DataAccess.Retriever.Retrieve<TimeSheet>(query);

public static T Retrieve<T>(string query)
            where T : IDataStorable
        {
            return Retrieve<T>(query, new IDbDataParameter[0], string.Empty);
        }

