void ProcessRequest(object listenerContext)
{
    var context = (HttpListenerContext)listenerContext;
    Uri URL = new Uri(context.Request.RawUrl);
    HttpWebRequest.DefaultWebProxy = null;
    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(URL);
    httpWebRequest.Method = context.Request.HttpMethod;
    httpWebRequest.Headers.Clear();
    if (context.Request.UserAgent != null) httpWebRequest.UserAgent = context.Request.UserAgent;
    foreach (string headerKey in context.Request.Headers.AllKeys)
    {
        try { httpWebRequest.Headers.Set(headerKey, context.Request.Headers[headerKey]); }
            catch (Exception) { }
    }

    using (HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse())
    {
        Stream responseStream = httpWebResponse.GetResponseStream();
        if (httpWebResponse.ContentEncoding.ToLower().Contains("gzip"))
            responseStream = new GZipStream(responseStream, CompressionMode.Decompress);
        else if (httpWebResponse.ContentEncoding.ToLower().Contains("deflate"))
                responseStream = new DeflateStream(responseStream, CompressionMode.Decompress);

        MemoryStream memStream = new MemoryStream();

        byte[] respBuffer = new byte[4096];
        try
        {
            int bytesRead = responseStream.Read(respBuffer, 0, respBuffer.Length);
            while (bytesRead > 0)
            {
                memStream.Write(respBuffer, 0, bytesRead);
                bytesRead = responseStream.Read(respBuffer, 0, respBuffer.Length);
            }
        }
        finally
        {
            responseStream.Close();
        }

        byte[] msg = memStream.ToArray();

        context.Response.ContentLength64 = msg.Length;
        using (Stream strOut = context.Response.OutputStream)
        {
            strOut.Write(msg, 0, msg.Length);
        }
    }
    catch (Exception ex)
    {
        // Some error handling
    }
}

void ProcessRequest(object listenerContext)
{
    HttpListenerContext context = (HttpListenerContext)listenerContext;
    Uri URL = new Uri(context.Request.RawUrl);
    string getString = string.Format("GET {0} HTTP/1.1\r\nHost: {1}\r\nAccept-Encoding: gzip\r\n\r\n",
                context.Request.Url.PathAndQuery,
                context.Request.UserHostName);

    Socket socket = null;

    string[] hostAndPort;
    if (context.Request.UserHostName.Contains(":"))
    {
        hostAndPort = context.Request.UserHostName.Split(':');
    }
    else
    {
        hostAndPort = new string[] { context.Request.UserHostName, "80" };
    }

    IPHostEntry ipAddress = Dns.GetHostEntry(hostAndPort[0]);
    IPEndPoint ip = new IPEndPoint(IPAddress.Parse(ipAddress.AddressList[0].ToString()), int.Parse(hostAndPort[1]));
    socket = new Socket(ip.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
    socket.Connect(ip);

Encoding ASCII = Encoding.ASCII;
Byte[] byteGetString = ASCII.GetBytes(getString);
Byte[] receiveByte = new Byte[256];
string response = string.Empty;
socket.Send(byteGetString, byteGetString.Length, 0);
Int32 bytes = socket.Receive(receiveByte, receiveByte.Length, 0);
response += ASCII.GetString(receiveByte, 0, bytes);
while (bytes > 0)
{
bytes = socket.Receive(receiveByte, receiveByte.Length, 0);
strPage = strPage + ASCII.GetString(receiveByte, 0, bytes);
}
socket.Close();

string separator = "\r\n\r\n";
string header = strPage.Substring(0,strPage.IndexOf(separator));
string content = strPage.Remove(0, strPage.IndexOf(separator) + 4);

byte[] byteResponse = ASCII.GetBytes(content);
context.Response.ContentLength64 = byteResponse .Length;
context.Response.OutputStream.Write(byteResponse , 0, byteResponse .Length);
context.Response.OutputStream.Close();

if (contentEncoding.Equals("gzip"))
{
    int magicNumber = 0;
    while (magicNumber != 10)
        magicNumber = responseStream.ReadByte();
    responseStream = new GZipStream(responseStream, CompressionMode.Decompress);
}

