  


// Abstract Base Class to handle specifics of the database connection
abstract class Database : IDisposable  
{  
    protected OleDbConnection m_Conn;  

    public bool Open()  
    {  
        // Open a connection to the database  
    }  

    public void Dispose()  
    {  
        if (m_Conn != null)  
        {  
           m_Conn.Dispose();  
        }
    }  
}  

// Specific classes for each table, with methods for CRUD functions
class EmployeeDB : Database  
{  
    public bool AddTestData(Employee emp)  
    {  
        // Construct SQL to add Employee class members to the DB, breaking
        // them out into their component tables as needed  
    }  

    public List<Employee> GetEmployeeByProject(string project)  
    {  
        // Retrieve recordset of all employees on the project,
        // breaking them out into instances of the Employee class

        // Add each new Employee object to a list, and return the list
        // to the caller.
    }  
}  

// Specific classes for each table (or logical unit, since obviously 
// most of the time we'll need to join a few tables to get what 
// we want), with methods for CRUD functions
    void AddSomethingToTheDatabase()
    {
        using (TestDataDB td = new TestDataDB())
        {
            td.Open(Application.StartupPath);
            string NewID = td.AddTestData(txtAddMe.Text);
        }
    }



// Abstract Base Class to handle specifics of the database connection
abstract class Database : IDisposable  
{  
    protected OleDbConnection m_Conn;  

    public bool Open()  
    {  
        // Open a connection to the database  
    }  

    public void Dispose()  
    {  
        if (m_Conn != null)  
        {  
           m_Conn.Dispose();  
        }
    }  
}  

// Specific classes for each table, with methods for CRUD functions
class EmployeeDB : Database  
{  
    public bool AddTestData(Employee emp)  
    {  
        // Construct SQL to add Employee class members to the DB, breaking
        // them out into their component tables as needed  
    }  

    public List<Employee> GetEmployeeByProject(string project)  
    {  
        // Retrieve recordset of all employees on the project,
        // breaking them out into instances of the Employee class

        // Add each new Employee object to a list, and return the list
        // to the caller.
    }  
}  

// Specific classes for each table (or logical unit, since obviously 
// most of the time we'll need to join a few tables to get what 
// we want), with methods for CRUD functions
    void AddSomethingToTheDatabase()
    {
        using (TestDataDB td = new TestDataDB())
        {
            td.Open(Application.StartupPath);
            string NewID = td.AddTestData(txtAddMe.Text);
        }
    }


