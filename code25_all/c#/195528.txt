public class BidiParent<C, P> { ... }

public class BidiChildList<C, P> : IList<C> { ... }

public class Parent {
    public string Name { get; set; }
    public IList<Child> Children {
        get { return ChildrenBidi; }
        set { ChildrenBidi.Set(value); }
    }
    private BidiChildList<Child, Parent> ChildrenBidi {
        get { return BidiChildList.Create(this, p => p._Children, c => c._Parent, (c, p) => c._Parent = p); }
    }
    internal IList<Child> _Children = new List<Child>();
}

public class Child {
    public string Name { get; set; }
    public Parent Parent {
        get { return ParentBidi.Get(); }
        set { ParentBidi.Set(value); }
    }
    private BidiParent<Child, Parent> ParentBidi {
        get { return BidiParent.Create(this, p => p._Children, () => _Parent, p => _Parent = p); }
    }
    internal Parent _Parent = null;
}

[Test]
public void MultilevelConstruction_Succeeds() {
    var p = new Parent {
        Name = "Bob",
        Children = new List<Child> {
            new Child { Name = "Kate" },
            new Child { Name = "Billy" }
        }
    };
    Assert.AreEqual(2, p.Children.Count);
    Assert.AreEqual("Kate", p.Children[0].Name);
    Assert.AreEqual("Billy", p.Children[1].Name);
    Assert.AreSame(p, p.Children[0].Parent);
    Assert.AreSame(p, p.Children[1].Parent);
}

