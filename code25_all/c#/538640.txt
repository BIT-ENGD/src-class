CancelEventHandler _windowClosing;
private CancelEventHandler WindowClosing 
{
  set
  {
    clearEventHandlerList();
    this.Closing += value;
    _windowClosing = value;


    /*
     * if calling the method with null parameters,
     * it will set up itself as the primary control on the Window
     */
    _windowClosing(null,null);
  }
  get
  {
    return _windowClosing;
  }
}

private readonly CancelEventHandler[] CONTROLS = null;
private int current = 0;

public InitializerForm()
{
  InitializeComponent();

  /*
   * these are the handlers for the different controls,
   * in the order of appereance to the user
   */
  STATES = new CancelEventHandler[] { handler1, handler2, etc. };

  WindowClosing = CONTROLS[0];
}

private void clearEventHandlerList()
{
  foreach (CancelEventHandler c in CONTROLS)
  {
    this.Closing -= c;
  }
}

private void handler1(object obj, CancelEventArgs e)
{
  if (obj == null)
  {
    //hide every other control, but this one, also set up if necessary
  }
  else
  {
    //do something

    WindowClosing = CONTROLS[++current]; // set the next control to show

    e.Cancel = true;
  }
}

current
closing
handler1
handler2
null
CONTROLS
