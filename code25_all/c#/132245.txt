public class BaseDataObject
{

// internal data store
private Dictionary<string, object> attachedData
                                           = new Dictionary<string, object>();

public void SetData(string key, object value)
{
    attachedData[key] = value;
}

public object GetData(string key)
{
    return attachedData[key];
}

public int SomeValue { get; set; }
public int SomeOtherValue { get; set; }

}

public static class Extensions
{
    public static void SetBarValue(this BaseDataObject dataObject,
                                        int            barValue)
    {
        /// Cannot attach a property to BaseDataObject?
        dataObject.SetData("bar", barValue);
    }
}

public class TestDemo
{

public void CreateTest()
{
    // this works
    BaseDataObject test1 = new BaseDataObject 
      { SomeValue = 3, SomeOtherValue = 4 };

    // this does not work - it does not compile
    // cannot use extension method in the initialiser block
    // cannot make an exension property  
    BaseDataObject test2 = new BaseDataObject 
   { SomeValue = 3, SomeOtherValue = 4, SetBarValue(5) };
}
}

    // fluent interface style
    public static BaseDataObject SetBarValueWithReturn(
this BaseDataObject dataObject, int barValue)
    {
        dataObject.SetData("bar", barValue);
        return dataObject;
    }

        // this works
        BaseDataObject test3 = (new BaseDataObject 
{ SomeValue = 3, SomeOtherValue = 4 }).SetBarValueWithReturn(5);

