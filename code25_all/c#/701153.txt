&
match
leader
x + y * parent.Width
GetGroupMquander
Contains
Add
Contains
Add
Contains
if (RetVal.Add(s)) curStack.Push(s);
public static List<Square> GetGroup(int match, Model grid, Square leader)
{
    Stack<Square> curStack = new Stack<Square>();
    Dictionary<Square, bool> Retval = new Dictionary<Square, bool>();
    curStack.Push(leader);
    while (curStack.Count != 0)
    {
        Square curItem = curStack.Pop();
        if (Retval.ContainsKey(curItem)) continue;
        Retval.Add(curItem, true);
        foreach (Square s in curItem.Neighbors)
        {
            if (0 != ((int)(s.RoomType) & match))
            {
                curStack.Push(s);
            }
        }
    }
    return new List<Square>(Retval.Keys);
}

    public static List<Square> GetGroupMquander(int match, Model grid, Square leader)
    {
        Stack<Square> curStack = new Stack<Square>();
        Dictionary<Square, bool> Retval = new Dictionary<Square, bool>();
        Retval.Add(leader, true);
        curStack.Push(leader);
        while (curStack.Count != 0)
        {
            Square curItem = curStack.Pop();

            foreach (Square s in curItem.Neighbors)
            {
                if (0 != ((int)(s.RoomType) & match))
                {
                    if (!Retval.ContainsKey(s))
                    {
                        curStack.Push(s);
                        Retval.Add(curItem, true);
                    }
                }
            }
        }
        return new List<Square>(Retval.Keys);
    }

