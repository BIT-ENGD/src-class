public class BaseContainer<T> : IEnumerable<T>
{
    public void DoStuff(T item) { throw new NotImplementedException(); }

    public IEnumerator<T> GetEnumerator() { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}
public class Container<T> : BaseContainer<T>
{
    public void DoStuff(IEnumerable<T> collection) { }

    public void DoStuff <Tother>(IEnumerable<Tother> collection)
        where Tother: T
    {
    }
}

DoStuff(T item)
DoStuff <Tother>(IEnumerable<Tother>)
Container<string> c = new Container<string>();
c.DoStuff("Hello World");

<char>
DoStuff(string)
Container.DoStuff<char>(IEnumerable<char>)
string
IEnumerable<char>
BaseContainer.DoStuff(string)
DoStuff(T)
public class Container<T> : BaseContainer<T>
{
    public new void DoStuff(T item) { base.DoStuff(item); }

    public void DoStuff(IEnumerable<T> collection) { }

    public void DoStuff <Tother>(IEnumerable<Tother> collection)
        where Tother: T
    {
    }
}

IEnumerable<char>
new DoStuff(T item)
Container
