abstract class BaseClass<T>
{
    protected BaseClass(){}
}

class Class1 : BaseClass<Class1>
{
    public static Class1 Instance = new Class1();
    private Class1(){}          
}

class Class2 : BaseClass<Class2>
{
    public static Class2 Instance = new Class2();
    private Class2(){}      
}

...
public BaseClass<T> Method<T>(int z) where T: BaseClass<T>
{
    switch(z)
    {
        case 1: 
            return Class1.Instance;
        case 2:
            return Class2.Instance;
    }
}

public BaseClass<T> Method<T>(int z) where T: BaseClass<T>,
