Elements.OrderBy(column.SortExpression).AsQueryable();

Func<T, object>
Column<T>
new Column<OrderViewData>{Key = "ShippingDate", SortExpression = e => e.ShippingDate}

Elements = from element in Elements
           orderby column.SortExpression
           select element;

Expression<Func<Employee, DateTime?>> sortexpression = e => e.BirthDate;
var db = new NorthwindDataContext();
var query = from e in db.Employees
            select e;
query = query.OrderBy(sortexpression);
int count = query.Count();

SELECT COUNT(*) AS [value]
FROM [dbo].[Employees] AS [t0]

Expression<Func<Employee, object>> sortexpression = e => e.BirthDate;

Expression<Func<Employee, some_type>>
SortExpression = e => e.BirthDate
e.BirthDate
Func<T, object>
Expression<Func<T,some_type>>
var gridBuilder = new RainbowGridBuilder<Employee>("Examples_Employees")
{
    Elements = GetEmployees(), //The elements (records) we will show in our grid. 

    //Define the columns for our grid.
    Columns = new List<Column<Employee>>{
            new Column<Employee> {
                Key = "EmployeeId",                             //Key is used for sorting, selecting columns, ...
                Header = "Employee Id",                         //The header of the column. Also used as caption in the column selection checkboxlist.
                ValueExpression = e => e.EmployeeID.ToString(), //The Linq expression which will be executed on each element to fill the cell
                SortExpression = e => e.EmployeeID,             //The Linq expression by which to sort the elements in the grid. 
                Display = false},                               //Is this column visible by default?
            new Column<Employee> {Key = "Name", ValueExpression = e => e.FirstName + " " + e.LastName, SortExpression = e => e.LastName},
        },

    // Some other properties here that are irrelevant.


}

