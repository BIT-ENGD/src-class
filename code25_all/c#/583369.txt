public string Ebnf {
    get {
        var props = GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
        var ruleProps = from p in props where p.PropertyType.IsSubclassOf(typeof(ARule)) select p;
        var rules = from p in ruleProps select (ARule)p.GetValue(this, null);
        var ebnfs = from r in rules select r.Name + " = " + r.Ebnf + ".";
        return string.Join("\n", ebnfs.ToArray());
    }
}

public string EbnfNonLinq {
    get {
        var ebnfs = new List<string>();
        var props = GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
        foreach (var p in props) {
            if (p.PropertyType.IsSubclassOf(typeof(ARule))) {
                var r = (ARule)p.GetValue(this, null);
                ebnfs.Add(r.Name + " = " + r.Ebnf + ".");
            }
        }
        return string.Join("\n", ebnfs.ToArray());
    }
}

