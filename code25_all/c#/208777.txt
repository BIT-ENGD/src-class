public DelayCompositeDesigner(DelayComposite CompositeObject)
{
    InitializeComponent();

    compositeObject = CompositeObject;  
}

var designer = Activator.CreateInstance(designerAttribute.Designer);

var designer = Activator.CreateInstance(designerAttribute.Designer, new DelayComposite(4));

MissingMethodException
CompositeBase
[CompositeMetaData("Delay","Sets the delay between commands",1)]
[CompositeDesigner(typeof(DelayCompositeDesigner))]
public class DelayComposite : CompositeBase
{
}

DelayComposite
DelayComposite
DelayCompositeDesigner
ContentPresenter
DelayComposite
public DelayCompositeDesigner(DelayComposite CompositeObject)
{
    InitializeComponent();

    compositeObject = CompositeObject;
}

object composite = Activator.CreateInstance(item.CompositType,(byte)205);
                    var designer = Activator.CreateInstance(designerAttribute.Designer, composite);

DelayComposite
var designer = Activator.CreateInstance(
    designerAttribute.Designer, 
    new object[] { new DelayComposite(4) } 
);

Activator.CreateInstance
Activator.CreateInstance(Type type, params object[] obj)

var designer = Activator.CreateInstance(designerAttribute.Designer, new object[] { new DelayComposite(4)});

