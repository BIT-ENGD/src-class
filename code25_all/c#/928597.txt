public class DataStore : IDisposable {

    private static readonly object serverLock = new object();
    private static readonly object containerLock = new object();

    private static IObjectServer server;
    private static IObjectContainer container;

    private static IObjectServer Server {
        get {
            lock (serverLock) {
                if (server == null)
                    server = Db4oFactory.OpenServer(ConfigurationManager.AppSettings["DatabaseFilePath"], 0);
                return server;
            }
        }
    }

    private static IObjectContainer Container {
        get {
            lock (containerLock) {
                if (container == null)
                    container = Server.OpenClient();
                return container;
            }
        }
    }

    public IQueryable<T> Find<T>(Func<T, bool> predicate) {
        return (from T t in Container where predicate(t) select t).AsQueryable();
    }

    public IQueryable<T> Find<T>() {
        return (from T t in Container select t).AsQueryable();
    }

    public ValidationResult Save(IValidatable item) {
        var validationResult = item.Validate();
        if (!validationResult.IsValid) return validationResult;
        Container.Store(item);
        return validationResult;
    }

    public void Delete(object item) {
        Container.Delete(item);
    }

    public void Dispose() {
        Server.Close();
        Container.Close();
    }
}

