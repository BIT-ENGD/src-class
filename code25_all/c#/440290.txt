if (backingField == null) 
  backingField = SomeOperation();
return backingField;

public class LazyProperty<T>
    {
    private readonly Func<T> getter;

    public LazyProperty(Func<T> getter)
    {
        this.getter = getter;
    }

    private bool loaded = false;
    private T propertyValue;

    public T Value
    {
        get
        {
            if (!loaded)
            {
                propertyValue = getter();
                loaded = true;
            }
            return propertyValue;
        }
    }

    public static implicit operator T(LazyProperty<T> rhs)
    {
        return rhs.Value;
    }
}

first = new LazyProperty<HeavyObject>(() => new HeavyObject { MyProperty = Value });

public HeavyObject First { get { return first; } }

