using System;
using System.CodeDom.Compiler;
using System.Reflection;
using System.Collections.Generic;
using Microsoft.CSharp;  

namespace AsmCompileTest
  {
  class Program
    {
    static Assembly Compile( string code, Assembly referencedAssembly )
      {
      CompilerParameters cp = new CompilerParameters();
      cp.GenerateExecutable = false;
      cp.GenerateInMemory = true;

      if( null != referencedAssembly )
        {
        cp.ReferencedAssemblies.Add( referencedAssembly.FullName );
        }

      CodeDomProvider provider = new CSharpCodeProvider( new Dictionary<string,string> { { "CompilerVersion", "v3.5" } } );

      CompilerResults compilerResults = provider.CompileAssemblyFromSource( cp, code );

      if( compilerResults.Errors.HasErrors )
        {
        foreach( CompilerError error in compilerResults.Errors )
          {
          Console.WriteLine( "COMPILER ERROR: " + error.ErrorText );
          }
        }

      return compilerResults.CompiledAssembly;
      }


    static string Code1 = "using System;" +
                          "public class HelloClass" +
                          "  {" +
                          "  public HelloClass() { Console.WriteLine( \"Hello, World!\" ); }" +
                          "  }";


    static string Code2 = "using System;" +
                          "public class TestClass" +
                          "  {" +
                          "  public TestClass() { new HelloClass(); }" +
                          "  }";

    static void Main()
      {
      Assembly asm1 = Compile( Code1, null );
      Console.WriteLine( "Compiled: " + asm1.FullName );  

      asm1.GetType( "HelloClass" ).InvokeMember( String.Empty, BindingFlags.CreateInstance, null, null, null );  

      Assembly asm2 = Compile( Code2, asm1 );
      Console.WriteLine( "Compiled: " + asm2.FullName );  

      asm2.GetType( "TestClass" ).InvokeMember( String.Empty, BindingFlags.CreateInstance, null, null, null );
      }
    }
  }

