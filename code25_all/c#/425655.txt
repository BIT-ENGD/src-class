public interface IParentInterface
{

}

public interface IChildInterface : IParentInterface
{

}

public class ParentClass<T> where T: IParentInterface
{

}

public class ChildClass : ParentClass<IChildInterface>
{

}

public class TestClass
{
    public ChildClass Property { get; set; }
}

[TestFixture]
public class ScratchPad
{

    [Test]
    public void Assignabl()
    {
        var tc = new TestClass();
        var tct = tc.GetType();

        var pi = tct.GetProperty("Property");

        Assert.IsNotNull(pi);

        Assert.IsTrue(typeof(ParentClass<IChildInterface>).IsAssignableFrom(pi.PropertyType));
        Assert.IsTrue(typeof(ParentClass<>).IsAssignableFrom(pi.PropertyType));
        Assert.IsTrue(typeof(ParentClass<IParentInterface>).IsAssignableFrom(pi.PropertyType));

    }

}

