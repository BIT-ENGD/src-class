public DataTable LeftJoin(DataSet ds, params JoinKey[] JoinKey)

// hard-coded:
br => new                                  
{                                   
  zip = br.Field<string>("ZipCode"),                                   
  store =br.Field<double>"StoreID")
},                                 
jr => new                                 
{                                   
  zip = jr.Field<string>("ZipCode"),                                   
  store = jr.Field<double>("StoreID")                                 
}

var dtBase = ds.Tables[0].AsEnumerable();  
for (int i = 1; i < ds.Tables.Count; i++)
{  
    var query = dtBase.GroupJoin(ds.Tables[i].AsEnumerable(),
                                 br => new 
                                 {
                                   zip = br.Field<string>("ZipCode"),
                                   store = br.Field<double>("StoreID")
                                 },
                                 jr => new
                                 {
                                   zip = jr.Field<string>("ZipCode"),
                                   store = jr.Field<double>("StoreID")
                                 },
                                 (baseRow, joinRow) => joinRow.DefaultIfEmpty()
                                     .Select(row => new
                                     {
                                         flatRow = baseRow.ItemArray.Concat((row == null) ? new object[ds.Tables[i].Columns.Count] : row.ItemArray).ToArray()
                                     })
                       ).SelectMany(s => s);  



   [... create a DataTable with the resulting left join, etc. ...]  
}

var dtBase = ds.Tables[0].AsEnumerable();  
for (int i = 1; i < ds.Tables.Count; i++)
{  
    var query = dtBase.GroupJoin(ds.Tables[i].AsEnumerable(),
                                 or => KeySelector(or, JoinKey),  
                                 ir => KeySelector(ir, JoinKey),
                                 (baseRow, joinRows) => joinRows.DefaultIfEmpty()
                                     .Select(joinRow => new
                                     {
                                         flatRow = baseRow.ItemArray.Concat((joinRow == null) ? new object[ds.Tables[i].Columns.Count] : joinRow.ItemArray).ToArray()
                                     })
                                 )
                       .SelectMany(s => s);

    [... create a DataTable with the resulting left join, etc. ...]  
}

private IEnumerable KeySelector(DataRow dr, params JoinKey[] JoinKey)
{
  List<object> gl = new List<object>();
  foreach (JoinKey jk in JoinKey)
  {
    // note that I did try to mimic the 'hard-coded' approach from Snippet 1:
    // this does not work:
    // gl.Add(dr.Field<jk.DataType>(jk.Name)); --> it does not like <jk.DataType>

    // I 'hacked' around it by using the following:

    gl.Add(dr[dr.Table.Columns.IndexOf(jk.Name)]);
  }
  return gl;
}

