this.tl = new TcpListener(IPAddress.Any, PORT);
tl.Start();
while(true)
{
  TcpClient tcl = tl.AcceptTcpClient();//here the server will wait forever untill someone connects, meaning the "new Thread" statement is never reached untill someone connects.
  TcpHelper th = new TcpHelper(tcl,conf);
  new Thread(new ThreadStart(th.Start)).Start();//should be multi-threaded, not sure if it is.
  //t.Start();
}

public class TcpHelper
{
    private TcpClient tc;
    private IPEndPoint ipe;
    private string get;
    private Configuration conf;

    public TcpHelper(TcpClient tc, Configuration conf)
    {
       this.tc = tc;
       this.conf = conf;
    }

    public void Start()
    {
       using (NetworkStream nws = this.tc.GetStream())
       {
           using (StreamReader sr = new StreamReader(nws))
           {
              using (StreamWriter sw = new StreamWriter(nws))
              {
                  this.ipe = (IPEndPoint)tc.Client.RemoteEndPoint;
                  this.conf.List.Add(this.ipe.Address);
                  bool conn = true;

                  while (conn)
                  {
                      this.get = sr.ReadLine();//here's the problem
                      switch (this.get)
                      {
                          case "GET":
                              foreach (IPAddress address in this.conf.Lijst)
                              {
                                  sw.WriteLine(address.ToString());
                              }
                              sw.WriteLine(".");
                              break;

                          case "REM":
                              this.conf.List.Remove(this.ipe.Address);
                              sw.WriteLine("OK.");
                              conn = false;
                              break;

                          default:
                              break;
                     }
                  }
              }
          }
      }
  }

  #region Properties
  public IPEndPoint Ipe
  {
      get
      {
          return this.ipe;
      }
  }
  #endregion
}

