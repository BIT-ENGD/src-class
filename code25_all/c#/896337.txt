public class WindsorControllerFactory : DefaultControllerFactory
{
    private WindsorContainer _container;

    public WindsorControllerFactory()
    {
        _container= new WindsorContainer(new XmlInterpreter(new ConfigResource("castle")));
        var controllerTypes = from t in Assembly.GetExecutingAssembly().GetTypes()
                              where typeof (IController).IsAssignableFrom(t)
                              select t;
        foreach(Type t in controllerTypes)
        {
            _container.AddComponentLifeStyle(t.FullName, t, LifestyleType.Transient);
        }
    }
    protected override IController GetControllerInstance(Type controllerType)
    {
        return (IController)_container.Resolve(controllerType);
    }
}

  <castle>
    <components>
      <component id="MenuRepository"
                 service="****.IMenuRepository, ****.Model"
                 type="****.FakeMenuRepository, ****.Model">
      </component>
      <component id="NewsRepository"
                 service="****.INewsRepository, ****.Model"
                 type="****.FakeNewsRepository, ****.Model">
      </component>
    </components>
  </castle>

public class NewsArticleController : Controller
{
    private INewsRepository _repository { get; set; }
    public NewsArticleController(INewsRepository repository)
    {
        _repository = repository;
    }

    protected void Application_Start()
    {
        RegisterRoutes(RouteTable.Routes);
        ControllerBuilder.Current.SetControllerFactory((new WindsorControllerFactory()));
    }

Exception Details: Castle.MicroKernel.ComponentNotFoundException: No component for supporting the service ****.NewsArticleController was found

Source Error:

Line 29:         protected override IController GetControllerInstance(Type controllerType)
Line 30:         {
Line 31:             return (IController)_container.Resolve(controllerType);
Line 32:         }
Line 33:     }

