this.outputStream = new StreamWriter(fileNameToUse, false, Encoding.Default);

try
{
    byte[] buffer;

    // Start the process with the info we specified.
    // Call WaitForExit and then the using statement will close.
    using (Process exeProcess = new Process())
    {
        // Assign start info to the process
        exeProcess.StartInfo = startInfo;

        // Set up the event handler to call back with each line of output
        exeProcess.OutputDataReceived += new DataReceivedEventHandler(OnDataReceived);

        // Start the Process
        exeProcess.Start();

        exeProcess.BeginOutputReadLine();
        exeProcess.WaitForExit();
    }
}
catch (Exception ex) { PrintException(ex); }
finally
{
    this.outputStream.Flush();
    this.outputStream.Close();
}

// Called asynchronously with a line of data
private void OnDataReceived(object Sender, DataReceivedEventArgs e)
{
    lock (this)
    {
        if (!string.IsNullOrEmpty(e.Data) && (this.outputStream != null))
            this.outputStream.WriteLine(e.Data);
    }
}

