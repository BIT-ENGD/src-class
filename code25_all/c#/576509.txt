public class MyClass
{
    private ICollection<Color> _colors;
    public MyClass(ICollection<Color> colors)
    {
        _colors = colors;
    }

    public MyClass(string colors)
    {
        if("MyColors".equals(colors))
        {
        .
        .
        .
        }
    }

    .
    .
    .
}

public static ColorGenerator FromString(object value)
{
    TypeConverter tc = TypeDescriptor.GetConverter(typeof(MyClass));
    if (tc.CanConvertFrom(typeof(string)))
        return tc.ConvertFrom(null, null, value) as MyClass;
    else return null;
}
.
.
.
if(destinationType == typeof(InstanceDescriptor))
{
    MethodInfo mi = typeof(MyTypeConverter).GetMethod("FromString", BindingFlags.Public | BindingFlags.Static, null, new Type[] { typeof(string) }, null);
     return new InstanceDescriptor(mi, new object[] { "MyColors" }, true);
}
.
.
.

.
.
.
if(destinationType == typeof(InstanceDescriptor))
{
            ConstructorInfo ci = typeof(MyClass).GetConstructor(new Type[] { typeof(string) });
            InstanceDescriptor descriptor = new InstanceDescriptor(ci, new object[] { "LightColors" });
            return descriptor;
}
.
.
.

