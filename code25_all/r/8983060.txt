adabag
bagging
predict.bagging
predict.bagging
 library(adabag)
 library(rpart)
 data(iris)
 names(iris)<-c("LS","AS","LP","AP","Especies")
 sub <- c(sample(1:50, 25), sample(51:100, 25), sample(101:150, 25))
 iris.bagging <- bagging(Especies ~ ., data=iris[sub,], mfinal=10)
 iris.predbagging<- predict.bagging(iris.bagging, newdata=iris[-sub,])
 iris.predbagging

newdata
predict.bagging
Especies
testdata <- iris[-sub, ]
result <- predict.bagging(iris.bagging, newdata=testdata)

testdata <- iris[-sub, -5] #this deletes the Especies column!
result <- predict.bagging(iris.bagging, newdata=testdata)

testdata <- iris[-sub, ] 
testdata$Especies <- c("virginica") #sets up everything as virginica
result <- predict.bagging(iris.bagging, newdata=testdata)

bagging
> testdata <- iris[150,]
> predict.bagging(iris.bagging, newdata=testdata) #all working
> testdata
     LS AS  LP  AP  Especies
150 5.9  3 5.1 1.8 virginica
> is(testdata)
[1] "data.frame" "list"       "oldClass"   "vector"    
> testdata$Especies = "virginica"
> testdata
     LS AS  LP  AP  Especies
150 5.9  3 5.1 1.8 virginica    #!!!the same thing!!!
> is(testdata)
[1] "data.frame" "list"       "oldClass"   "vector"    #the same object type!!!
> 
> predict.bagging(iris.bagging, newdata = testdata)
Error in matrix(unlist(value, recursive = FALSE, use.names = FALSE), nrow = nr,  : 
  length of 'dimnames' [2] not equal to array extent
In addition: Warning messages:
1: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
2: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
3: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
4: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
5: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
6: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
7: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
8: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
9: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
10: In is.na(e2) : is.na() applied to non-(list or vector) of type 'NULL'
> 

