hclust()
as.dendrogram()
plot.dendrogram()
dendrapply()
_+v\_stat5a\_01_
_+v\_stat5b\_01_
dendrapply()
_+v\_stat5a\_01_
_+v\_stat5b\_01_
rect()
_+v\_stat5a\_01_
_+v\_stat5b\_01_
markSignificantClusters <<- function (n) {
  if (!is.leaf(n)) {
     a <- attributes(n)
     leafList <- unlist(dendrapply(n, listLabels))
     for (clusterIndex in 1:length(significantClustersList[[1]])) {
       clusterList <- unlist(significantClustersList[[1]][clusterIndex])
       if (nodes-in-leafList-match-nodes-in-clusterList) {
          # I now have a node "n" that contains significant leaves, and
          # I'd like to use a dendrapply() call to another local function
          # which colors the edges that run down to the leaves; or, draw
          # a rect() around the leaves
       }
     }
  }
}

if
dendrapply(n, markEdges)
markEdges <<- function (n) {
  a <- attributes(n)
  attr(n, "edgePar") <- c(a$edgePar, list(lty=3, col="red"))
}

_+v\_stat5a\_01_
_+v\_stat5b\_01_
rect.hclust()
if
ma <- match(leafList, orderedLabels)  
rect.hclust(scoreClusterObj, h = a$height, x = c(min(ma), max(ma)), border = 2)

rect.hclust()
edgePar
rect.hclust()
rect.hclust()
getAnywhere(rect.hclust())
rect
dendrapply()
rect
rect
rect
rect
rect
x
par["usr"]
x
rect
rect
x
