using namespace std;

string request_cpp;

ostringstream oss;

int read(FILE* tcp_fd)  
{
  /* function to read input from FILE* into the 'request_cpp' string */
}  

int write(FILE* tcp_fd, const string& response)  
{
  /* function to write a string to FILE* */
}

int main(int argc, char* argv[])  
{
  // create RInside object
  RInside R(argc,argv);

  //socket  
  int sd = socket(PF_INET, SOCK_STREAM, 0);  
  addr.sin_family = AF_INET;  
  addr.sin_port = htons(40650);

  // set and accept connection on socket  
  inet_pton(AF_INET, "127.0.0.1", &addr.sin_addr);  
  bind(sd,(struct sockaddr*)&addr, sizeof(addr));  
  listen(sd,1);  
  int sd_i = accept(sd, 0, 0);  

  //re-route stdout and stderr to socket  
  close(1);  
  dup(sd_i);  
  close(2);  
  dup(sd_i);  

  // open read/write file descriptor to socket

  FILE* fp = fdopen(sd_i,"r+");  

  // emulate R prompt  

  write(fp,"> ");  

  // (attempt to) redirect R's stdout to stderr
  R.parseEvalQ("sink(stderr(),type=\"output\");");

  // read from socket and pass commands to RInside  
  while( read(fp) )  
  {
    try  
    {
      // skip empty input  
      if(request_cpp == "")  
      {  
        write(fp, "> ");  
        continue;  
      }
      else if(request_cpp == "q()")  
      {  
        break;
      }  
      else  
      {  
        // clear string stream  
        oss.str("");  

        // wrap command in try  
        oss << "try(" << request_cpp << ");" << endl;  

        // send command  
        R.parseEvalQ(oss.str());  
      }  
    }  
    catch(exception e)  
    {  
      // print exception to console  
      write(fp, e.what());  
    }    
 write(fp, "> ");
 }

fclose(fp);  
close(sd_i);  
exit(0);  
}

