var Person = function (name) {
    this.name = name;
}

Person.prototype = {
    walk: function () {
        alert(this.name  + ' is walking');
    }
}

var walter = new Person('Walter');

walter.walk() // => "Walter is walking"

var WingedAnimal = function () {
    this.hasWings = true;
}

WingedAnimal.prototype = {
    fly: function () {
        alert(this.name + ' is flying')
    }
}

var Person = function (name) {
    this.name = name;
}

Person.prototype =  {
    walk: function () {
        alert(this.name  + ' is walking');
    },
    prototype: new WingedAnimal()
}

var walter = new Person('Walter');

walter.walk() // => 'Walter is walking'

walter.fly();

Person.prototype =  {
    walk: function () {
        alert(this.name  + ' is walking');
    }
}

Person.prototype.prototype = new WingedAnimal();

var walter = new Person('Walter');

walter.walk() // => 'Walter is walking'

walter.fly();

var Constructor = function () {
    // stuff
}

CORE.mix(Constructor.prototype, SomeInterface, AnotherInterface, {
    //stuff that goes only into objects made with Constructor
});

