dispatch
module Main where

import System.Environment

main = getArgs >>= parse

parse :: [String] -> IO ()
parse [] = usage
parse (file:mode:[]) = if mode == "list"
                       then list file
                       else case lookup mode dispatch of
                         Just _ -> putStrLn "That mode requires arguments" >> usage
                         Nothing -> putStrLn "Please supply a valid mode" >> usage
parse (file:mode:args) = case lookup mode dispatch of
  Nothing -> do case lookup file dispatch of
                  Just _ -> putStrLn "Please supply a data file"
                  Nothing -> putStrLn "Please supply a valid mode"
                usage
  Just fun -> fun file args
parse (file:[]) = case lookup file dispatch of
  Just _ -> putStrLn "Please supply a datafile" >> usage
  Nothing -> list file

usage :: IO ()
usage = mapM_ putStrLn helptext

helptext :: [String]
helptext = ["Homework manager by Marcus Medom Ryding <mrok4a@gmail.com>"
           ,"Copyright 2013, licensed under BSD3"
           ,"Usage: homework filepath [mode] [arguments]"]

dispatch :: [(String, String -> [String] -> IO ())]
dispatch  = [("new",new)]

new :: String -> [String] -> IO ()
new file args = putStrLn ("NEW: " ++ file) >> mapM_ putStrLn args

list :: String -> IO ()
list file = putStrLn ("LIST: " ++ file)

