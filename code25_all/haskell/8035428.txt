main = do 
  line <- getLine
  putStrLn (work (toInt line) [0,0,0])

work n b = do
  if n == 0 
    then 
        unwords (map show b)
    else do 
        line <- getLine
        work n-1 summ (map toInt . unwords line) b

toInt :: String -> Int
toInt b = read b

toInts a = map toInt a

summ [] [] = []
summ (x:xs) (y:ys) = (x+y) ++ (summ xs ys)

src\Main.hs:28:21:
Couldn't match expected type `[t0]' with actual type `IO String'
In a stmt of a 'do' expression: line <- getLine
In the expression:
  do { line <- getLine;
         work n - 1 summ (map toInt . unwords line) b }
In the expression:
  if n == 0 then
      unwords (map show b)
  else
      do { line <- getLine;
             work n - 1 summ (map toInt . unwords line) b }

n
a1 b1 c1
a2 b2 c2
...
a_n b_n c_n

sum(a) sum(b) sum(c)

work :: Int -> [Int] -> String
work n b = do
if n == 0 
    then 
        return $ unwords (map show b)
    else do 
        line <- getLine
        work (n-1) (summ toInts.words line b)

src\Main.hs:27:13:
Couldn't match expected type `Char' with actual type `[Char]'
Expected type: String
  Actual type: [String]
In the expression: return $ unwords (map show b)
In the expression:
  if n == 0 then
        return $ unwords (map show b)
  else
      do { line <- getLine;
           work (n - 1) (summ toInts . words line b) }

main = do 
line <- getLine
ans <- (work (toInt line) [0,0,0])
putStrLn ans

work 0 b = return $ unwords (map show b)
work n b = do
line <- getLine
work (n-1) $ zipWith (+) (map toInt (words line)) b

toInt b = read b::Int

