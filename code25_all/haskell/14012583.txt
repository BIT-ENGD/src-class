> kt :: Int -> (Int,Int) -> [(Int,Int)]
> kt dimension startPos = kt' (delete startPos allFields) [startPos] startPos
>   where allFields = [(h,v) | h <- [1..dimension], v <- [1..dimension]]
>         kt' :: [(Int,Int)] -> [(Int,Int)] -> (Int,Int) -> [(Int,Int)]
>         kt' [] moves _ = moves
>         kt' freeFields moves currentPos
>           | nextField /= (0,0) = kt' (delete nextField freeFields) (moves ++ [nextField]) nextField
>           | otherwise = error "Oops ... dead end!"
>           where h            = fst currentPos
>                 v            = snd currentPos
>                 nextField    = if nextFieldEnv /= [] then fst (head (sortBy sortGT nextFieldEnv)) else (0,0)
>                 nextFieldEnv = fieldEnv' currentPos freeFields


> sortGT ((a1,a2),a3) ((b1,b2),b3)
>  | a3 > b3 = GT
>  | a3 < b3 = LT
>  | a3 == b3 = EQ

> fieldEnv :: (Int,Int) -> [(Int,Int)] -> [(Int,Int)]
> fieldEnv field freeFields = [nField | nField <- [(hor-2,ver-1),(hor-2,ver+1),(hor-1,ver-2),(hor-1,ver+2),(hor+1,ver-2),(hor+1,ver+2),(hor+2,ver-1),(hor+2,ver+1)], nField `elem` freeFields]
>  where hor = fst field
>        ver = snd field

> fieldEnv' :: (Int,Int) -> [(Int,Int)] -> [((Int,Int),Int)]
> fieldEnv' field freeFields = [(nField,length (fieldEnv nField freeFields)) | nField <- (fieldEnv field freeFields)]
>  where hor = fst field
>        ver = snd field

