selectMenu :: Int->IO() 
selectMenu num
        |(num==1)=convertFromDecimal
        |(num==2)=--menu2
        |(num==3)=putStrLn("3")
        |(num==4)=putStrLn("4")
        |(num==5)=putStrLn("5")


convertFromDecimal:: IO()
convertFromDecimal= do 
            putStrLn("\n\tConvert From Decimal To Binary & Octals \n")
            putStrLn("----------------------------------------------------------\n")
            putStrLn("Enter 5 decimal numbers [,,] : ")
            input<-getLine
            let n=(read input)::[Int] -- is this right?
            --putStrLn (show n)
            let result = convertionTO decToOct n
            putStrLn(show result)`



decToOct :: Int -> [Int]
decToOct x = reverse(decToOct' x)
            where
        decToOct' 0 = []
        decToOct' y = let (a,b) = quotRem y 8 in [b] ++ decToOct' a




convertionTO :: (Int -> [Int] -> [Int]) -> [Int] -> [Int]
convertionTO _ [] = []  
convertionTO f (x:xs) = f x : convertionTO f xs

Assignment.hs:49:51:
    Couldn't match expected type `[Int] -> [Int]'
                with actual type `[Int]'
    Expected type: Int -> [Int] -> [Int]
      Actual type: Int -> [Int]
    In the first argument of `convertionTO', namely `decToOct'
    In the expression: convertionTO decToOct n
Assignment.hs:66:25:
    Couldn't match expected type `Int'
                with actual type `[Int] -> [Int]'
    In the return type of a call of `f'
    In the first argument of `(:)', namely `f x'
    In the expression: f x : convertionTO f xs

