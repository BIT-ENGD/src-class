apply
(apply + '(1 2 3))
(+ 1 2 3)
apply x [] = x
apply f (x:xs) = apply (f x) xs

ERROR line 2 - Type error in function binding
*** Term           : apply
*** Type           : (b -> a) -> [b] -> a
*** Does not match : a -> [b] -> a
*** Because        : unification would give infinite type

(a -> a -> a -> b) -> [a] -> b
(a -> a -> a -> a -> a -> a -> b) -> [a] -> b
data FnOrDat a b = Dat b | Fn (a -> FnOrDat a b)

apply :: (FnOrDat a b) -> [a] -> (FnOrDat a b)
apply x [] = x
apply (Fn f) (x:xs) = apply (f x) xs
apply (Dat _) _ = error "Cannot apply something which is not a function!"

add a = Fn (\b -> Dat (a + b))

main = putStrLn $ show $ x where Dat x = apply (Fn add) [5,1]

apply
apply
add4 a = Fn (\b -> Fn (\c -> Fn (\d -> Dat (a + b + c + d))))

apply
apply
