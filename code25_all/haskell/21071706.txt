ghc -O3 Main
Foo.hs
plusFastCyc
plusFastCyc
INLINE
plusFastCyc
plusFastCyc
plusFastCyc
Foo.hs
{-# INLINEABLE plusFastCyc #-}
{-# SPECIALIZE plusFastCyc :: 
         forall m . (Factored m Int) => 
              (FastCyc (VT U.Vector m) Int) -> 
                   (FastCyc (VT U.Vector m) Int) -> 
                        (FastCyc (VT U.Vector m) Int) #-}

-- Although the next specialization makes `fcTest` fast,
-- it isn't useful to me in my real program because the phantom type M is reified
-- {-# SPECIALIZE plusFastCyc :: 
--          FastCyc (VT U.Vector M) Int -> 
--               FastCyc (VT U.Vector M) Int -> 
--                    FastCyc (VT U.Vector M) Int #-}

plusFastCyc :: (Num (t r)) => (FastCyc t r) -> (FastCyc t r) -> (FastCyc t r)
plusFastCyc (PowBasis v1) (PowBasis v2) = PowBasis $ v1 + v2

Main.hs
vtTest
fcTest
forall
vtTest
Unboxed
Int
fcTest
plusFastCyc
main6
iterate main8 y
main8
plusFastCyc
fcTest
vtTest
plusFastCyc
inline
GHC.Exts
fcTest
Factored m Int
plusFastCyc
plusFastCyc
plusFastCyc
INLINE
INLINABLE
SPECIALIZE
plusFastCyc
INLINE
plusFastCyc
match_co: needs more cases
RULE: LHS too complicated to desugar
match_co
Factored m Int
fcTest
vtTest
plusFastCyc
