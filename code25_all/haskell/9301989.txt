MonadTrans
Data.Newtype
{-# LANGUAGE FlexibleContexts, TypeFamilies #-}

module Alt.Control.Monad.Trans where

import Control.Monad

class (Monad , Monad (BaseMonad )) => MonadTrans ( :: * -> *) where
    type BaseMonad  :: * -> *
    lift :: (BaseMonad ) α ->  α

A
foo
M
A
T M
A
class A  where
    foo :: String ->  ()

instance (A (BaseMonad ), MonadTrans ) => A  where
    foo n = lift $ foo n

foo
minimize_call :: A  =>  ()
minimize_call = foo "minimize"

B :: * -> *
B
B t /= t
B (B t) /= B t
B
A
