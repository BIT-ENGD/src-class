data Term = A | B
          | F Term | G Term | H Term Term
          | Var String
           deriving (Show)

unify :: [(Term, Term)] -> Bool
 -- argument represents a list of term equations,
 -- result indicates whether they have a solution
unify nil = True
unify ((A, A):eqns) = unify eqns
unify ((B, B):eqns) = unify eqns
unify ((F(t1), F(t2)):eqns) = unify((t1,t2):eqns)
unify ((G(t1), G(t2)):eqns) = unify((t1,t2):eqns)
unify ((H s1 t1, H s2 t2):eqns) = unify((s1,s2):(t1,t2):eqns)
unify ((Var v1, t):eqns) =
        (case t of 
              Var v2    -> if v1 == v2 then unify(eqns)
                           else unify(map (substEqn v1 t) eqns)
          _     -> unify(map (substEqn v1 t) eqns))
unify ((t, Var v):eqns) = unify(map (substEqn v t) eqns)
unify _ = False

Warning: Pattern match(es) are overlapped
             In an equation for `unify':
                 unify ((A, A) : eqns) = ...
                 unify ((B, B) : eqns) = ...
                 unify ((F (t1), F (t2)) : eqns) = ...
                 unify ((G (t1), G (t2)) : eqns) = ...
                 ...

