import Data.Ratio (Rational, (%), denominator, numerator)
type R = Rational

integrate :: (R -> R) -> R -> (R, R) -> R       
integrate f d (a, b) = foldr (+) 0 $ zipWith (*) (map f [a, a + d..b]) (widths d)
 where widths :: R -> [R]
       widths = \n -> n : widths n

eval :: R -> Double       
eval = \r -> (/) (fromIntegral $ numerator r) (fromIntegral $ denominator r)

eval $ integrate (\x -> 20 + x^2) (1%10000) (-3%1, 3%1) = 
 ~> 138.00290001

widths d
[d..]
integrate' :: (R -> R) -> R -> (R, R) -> R       
integrate' f d (a, b) = foldr (+) 0 $ zipWith (*) (map f [a, a+d..b]) [d..]

eval $ integrate' (\x -> 20 + x^2) (1%10000) (-3%1, 3%1)
 ~> 41400870141.0029

