Couldn't match expected type `Integer'
            with actual type `RandomAgent'
In the first argument of `preference', namely `agentNum'
In the expression: preference agentNum alternative
In an equation for `score':
    score agentNum alternative = preference agentNum alternative

A_i(x_j)
A_i
x_j
module AgentGenerator where

import System.Random

type Alternative = Integer


data RandomAgent = RandomAgent

class Agent a where
    score :: a -> Alternative -> Double

instance Agent RandomAgent where
    score agentNum alternative = preference agentNum alternative

-- TODO: Replace Doubles with Agents
-- Generate `n` agents with `x` alternatives each
generate :: Integer -> Integer -> [Double]
generate agents alternatives = [ preference i j   | i <- [0..(agents-1)], j <- [0..(alternatives-1)] ]

-- Given agent's index and alternative's index return that agent's
-- preference for that alternative
preference :: Integer -> Integer -> Double
preference agent alternative = randomFromSeed $ fromCoord (agent, alternative)

-- Given grid position convert it to a single integer
fromCoord :: (Integer, Integer) -> Integer
fromCoord (agent, alternative) = (agent * 10^0) + (alternative * 10^1)

-- Generate random value between [0, 1] based on the seed
randomFromSeed :: Integer -> Double
randomFromSeed seed = value
    where (value, gen) = randomR (0.0, 1.0) $ mkStdGen (fromIntegral seed)

