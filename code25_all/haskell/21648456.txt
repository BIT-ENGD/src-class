data Tree a = Empty
            | Leaf a
            | Fork (Tree a) (Tree a)

removeRandom' :: Tree a -> IO (Tree a)
randomRIO :: Random a => (a,a) -> IO a
removeRandom' :: Tree a -> IO (Tree a)
removeRandom' t = let lengthTree = numbelems t
                  in do x <- randomRIO (0,lengthTree -1)
                        return (remove x t)

numbelems :: Tree a -> Int
numbelems Empty = 0
numbelems Leaf x = 1
numbelems Fork l r = (numbelems l) + (numbelems r)

remove :: Int -> Tree a -> Tree a
remove _ (Leaf x) = Empty
remove n (Fork l r) = let lengthLeft = numbelems l
                      in if (n>lengthLeft) then Fork l (remove (n-lengthLeft r)
                         else Fork (remove n l) r

