import qualified Data.ByteString.Lazy as LZ
import qualified Data.ByteString.Lazy.Char8 as LC
...
processLines :: String -> [String] -> String
processLines delim (l:rest) = do
    case l of
        delim -> ""
        _     -> l ++ "\n" ++ processLines delim rest

processFile :: [String] -> String
processFile (delim:some:other:line:txt) = processLines delim txt

postImpexR :: SystemsId -> Handler RepPlain
postImpexR sysid = do
    wr <- waiRequest
    bss <- lift $ requestBody wr $$ consume
    let file = LZ.fromChunks bss
    return $ RepPlain $ toContent $ processFile $ map LC.unpack $ LC.lines file

