import Control.Monad (guard)

type Position = (Int, Int)
type Positions = [Position]

moveKnight :: Positions -> [Positions]
moveKnight pos@((col, row):xs) = do
     (col', row') <- [(col+2, row-1), (col+2, row+1), (col-2, row-1), (col-2, row+1),
                      (col+1, row-2), (col+1, row+2), (col-1, row-2), (col-1, row+2)]
     guard (col' `elem` [1..8] && row' `elem` [1..8] && (not . (`elem` pos)) (col', row'))
     return ((col', row'):pos)

moveMany :: Int -> Position -> [Positions]
moveMany moves start = return (return start) >>= foldr (<=<) return (replicate moves moveKnight)

getMoves :: Position -> [Positions]
getMoves start = moveMany 63 start

moveMany' :: Int -> Position -> [Positions]
moveMany' moves start = tour moves (return (return start))
            where tour 1 pos = pos
                  tour n pos = tour (n - 1) (pos >>= moveKnight) 

