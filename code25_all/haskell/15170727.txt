data Simple a = Top a 
  deriving ( Show )

newtype SimpleState a = SimpleState { applySimple :: Int -> ( a, Int ) }

instance Monad SimpleState where
    return x = SimpleState $ \s -> ( x, s )
    st >>= g = SimpleState $ \s -> let ( x, s' ) = applySimple st s in applySimple ( g x ) s' 

applySimple
applySimple st s
applySimple
tic :: SimpleState Int
tic = SimpleState $ \s -> ( s, s + 1 ) 

incr :: Simple a -> SimpleState ( Simple ( a, Int ) ) 
incr ( Top a ) = do 
  v <- tic
  return ( Top ( a, v ) )

>>=
applySimple ( incr ( Top 1 ) ) 3

(Top (1,3),4)

applySimple
SimpleState
