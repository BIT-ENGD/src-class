eval :: Wff -> Assignment -> Maybe Bool
Wff
data Wff = Var Name
         | Not Wff
         | Or Wff Wff
         deriving (Eq)

Assignment
Wff
type Assignment = [(Name, Bool)]

testEval :: Test
testEval = "Test eval"
        ~: TestList $ zipWith (\e (Just a) -> e ~=? a) expected (eval wff <$> assignments)
    where expected = [True, False]
          assignments = [[('p', True)], [('p', False)]]
          Right wff = parse wffStr
          wffStr = "p"

wffStr
Right wff
parse
Left String
Rigth Wff
