import Data.Array

type Dimensions = (Int, Int)
type Position = (Int, Int)
data PipeType = Vertical | Horizontal | UpLeft | UpRight | DownLeft | DownRight deriving (Show)

data PhisicalCell = AirCell
                  | PipeCell PipeType
                  | DeathCell
                  | RecipientCell Object
                  -- deriving (Show) SEE THE PROBLEM BELOW  

data Object = Pipe { pipeType :: PipeType  -- tipo di tubo
                   , position :: Position  -- posizione del tubo
                   , movable  :: Bool      -- se posso muoverlo
                   }
            | Bowl { position   :: Position                 -- posizione dell'angolo in alto a sinistra
                   , dimensions :: Dimensions               -- dimensioni (orizzontale, verticale)
                   , waterMax   :: Int                      -- quanta acqua puo' contenere al massimo
                   , waterStart :: Int                      -- con quanta acqua parte 
                   , hatch      :: Maybe Position           -- un eventuale casella di sbocco
                   , sourceIn   :: [Position]               -- posti da cui l'acqua entra
                   , movable    :: Bool                     -- se posso muoverlo
                   }
            | Death
            deriving (Show)

data Level = Level Dimensions [Object]
type LevelTable = Array Dimensions PhisicalCell

-- HERE IS THE PROBLEM -- 
instance Show PhisicalCell where
show AirCell = " "
show (PipeCell _) = "P"
show DeathCell = "X"
show (RecipientCell _) = "U"

both :: (a -> b) -> (a,a) -> (b,b)
both f (a,b) = (f a, f b)

levelTable :: Level -> LevelTable
levelTable (Level dim _) = initial
  where initial = array ((0,0), both (+1) dim) $
                    [((x,y), AirCell) | x <- [1..fst dim], y <- [1..snd dim] ]
                    ++ [((x,y), DeathCell) | x <- [0..fst dim + 1], y <- [0, snd dim + 1]]
                    ++ [((x,y), DeathCell) | x <- [0, fst dim + 1], y <- [0..snd dim + 1]]

main = print $ levelTable (Level (8,12) []) 

