xandy :: Element_w_Coord Cell -> Coord
xandy (e, (x, y)) = (x, y)

transition_world :: Ordered_Lists_2D Cell -> Element_w_Coord Cell -> Ordered_Lists_2D Cell
transition_world world (cell, (x, y)) = case (cell, (x, y)) of
    (Head, (x, y))-> map_Ordered_Lists_2D Tail world
    (Tail, (x, y)) -> map_Ordered_Lists_2D Conductor world
    (Empty, (x, y)) -> map_Ordered_Lists_2D Empty world
    (Conductor, (x, y))  -> map_Ordered_Lists_2D Head world

Sources/Transitions/For_Ordered_Lists_2D.hs:33:43:
    Couldn't match expected type `Element_w_Coord e0 -> Cell'
                with actual type `Cell'
    In the first argument of `map_Ordered_Lists_2D', namely `Tail'
    In the expression: map_Ordered_Lists_2D Tail world
    In a case alternative:
        (Head, (x, y)) -> map_Ordered_Lists_2D Tail world

type Ordered_Lists_2D e = [Sparse_Line e]

data Sparse_Line e = Sparse_Line {y_pos :: Y_Coord, entries :: Placed_Elements e}

data Placed_Element  e = Placed_Element {x_pos :: X_Coord, entry :: e}
type Placed_Elements e = [Placed_Element e]


map_Ordered_Lists_2D :: (Element_w_Coord e -> b) -> Ordered_Lists_2D e -> Ordered_Lists_2D b
map_Ordered_Lists_2D f world =  case world of
   l: ls -> map_line f l: map_Ordered_Lists_2D f ls
   []    -> []
   where
      map_line :: (Element_w_Coord e -> b) -> Sparse_Line e -> Sparse_Line b
      map_line f line = Sparse_Line {y_pos = (y_pos line), entries = map_elements f (y_pos line) (entries line)}

         where
            map_elements :: (Element_w_Coord e -> b) -> Y_Coord -> Placed_Elements e -> Placed_Elements b
            map_elements f y elements = case elements of
               c: cs -> Placed_Element {x_pos = (x_pos c), entry = f ((entry c), ((x_pos c), y))}: map_elements f y cs
               []    -> []

