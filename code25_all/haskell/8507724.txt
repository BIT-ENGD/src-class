type FuncDef = Int -> Int -> Int

someFunc :: FuncDef -> Int

someFunc :: (Int -> Int -> Int) -> Int

data AType = X | Y | Z Int
matchType :: AType -> Bool
matchType X = ..
matchType Y = ..
matchType (Z _) = ..

data MyType a b = X | Y (a -> b)

matchMyType :: (MyType a b) -> Bool
matchMyType X = ..
matchMyType Y ?? = .. 

