{-# LANGUAGE GeneralizedNewtypeDeriving #-}
...
newtype J = J { runJ :: ErrorT Foo (StateT Bar IO) a } deriving (Applicative, Functor, etc)

J
peekNextQuux :: J Quux
peekNextQuux = ...

withJ :: J a -> IO (Either Foo a)
withJ = ...

J
f = withJ $ peekNextQuux >>= liftIO . print

J
g = withJ . liftIO . forkIO . forever $ peekNextQuux >>= liftIO . print

