let x = 4 in x*x

env "x" = 4

{
module Parser where

import Token
import Lexer
}

%tokentype { Token }

%token 
      let             { TLet }
      in              { TIn }
      int             { TInt $$ }
      var             { TVar $$ }
      '='             { TEq }
      '+'             { TPlus }
      '-'             { TMinus }
      '*'             { TMul }
      '/'             { TDiv }
      '('             { TOB }
      ')'             { TCB }

%name parse

%attributetype { Int }

%attribute env { String -> Int }

%error { parseError }

%%

Exp   : let var '=' Exp in Exp
            {
                $4.env = $$.env;
                $2.env = (\_ -> 0);
                $6.env = (\str -> if str == $2 then $4 else 0);
                $$ = $6;
            }
      | Exp1                    
            {
                $1.env = $$.env;
                $$ = $1;
            }

Exp1  : Exp1 '+' Term
            {
                $1.env = $$.env;
                $2.env = $$.env;
                $$ = $1 + $3;
            }
      | Exp1 '-' Term
            {
                $1.env = $$.env;
                $2.env = $$.env;
                $$ = $1 - $3;
            }
      | Term 
            {
                $1.env = $$.env;
                $$ = $1;
            }

Term  : Term '*' Factor
            {
                $1.env = $$.env;
                $2.env = $$.env;
                $$ = $1 * $3;
            }
      | Term '/' Factor
            {
                $1.env = $$.env;
                $2.env = $$.env;
                $$ = div $1 $3;
            }
      | Factor
            {
                $1.env = $$.env;
                $$ = $1;
            }

Factor            
      : int
            {
                $$ = $1;
            }
      | var
            {
                $$ = $$.env $1;
            }
      | '(' Exp ')'
            {
                $1.env = $$.env;
                $$ = $1;
            }

{
parseError :: [Token] -> a
parseError _ = error "Parse error"

}

    Ambiguous occurrence `Int'
It could refer to either `Parser.Int', defined at parser.hs:271:6
                      or `Prelude.Int',
                         imported from `Prelude' at parser.hs:2:8-13
                         (and originally defined in `GHC.Types')

