module Main where

import System
import Data.Char
import Data.List

lowercase :: String -> String
lowercase = map toLower

main = do 
arg1 <- getArgs
txt <- getContents
putStr (redact txt arg1)

redact :: String -> String -> String
redact input xWords = unlines [ work line | line <- lines input ]
where work line = unwords [ foo word | word <- words line ]
  foo w | lowercase(w) == lowercase(xWords) = convertWord w 1
    | otherwise                         = w

convertWord Eq a => [a] -> [a]
convertWord = map (const '*') 

redact.hs:13:38:
    Couldn't match expected thye 'Char' with actual type '[Char]'
    Expected type: String
     Actual type: [String]
    In the second argument of 'redact', namely 'arg1'
    In the first of 'putStr', namely '<redact txt arg1>'
Failed, module loaded: none.

putStr (redact txt arg1)

(arg1:arg2:arg3:arg4:arg5:_) <- getArgs

