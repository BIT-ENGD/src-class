data Op = Plus | Minus | Mul | Div | Pow
        deriving (Eq, Show)

type Name = String

data Variable a = Variable Name (Expression a)
            deriving (Eq, Show)

data Declaration a = Declaration (Variable a)
            deriving (Eq, Show)  

{- The core symbolic manipulation type -}
data Expression a = 
          Number a           -- Simple number, such as 5
        | Expression Op (Expression a) (Expression a)
          deriving (Eq, Show)

Declaration Variable "var1" 2+3
instance Num a => Num (Expression a) where
    a + b = Expression Plus a b
    a - b = Expression Minus a b
    a * b = Expression Mul a b
    negate a = Expression Mul (Number (-1)) a
    abs a = error "abs is unimplemented"
    signum _ = error "signum is unimplemented"
    fromInteger i = Number (fromInteger i)

