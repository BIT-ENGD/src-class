Data.MeldableHeap
genericArbitrary :: (PriorityQueue pq, Arbitrary a, Ord a) => Gen (pq a)
genericArbitrary = fromList `fmap` listOf arbitrary

{-# LANGUAGE TypeSynonymInstances, FlexibleInstances #-}

import Test.QuickCheck
import Control.Monad (liftM)
import Data.MeldableHeap

genericArbitrary :: (PQ pq, Arbitrary a, Ord a) => Gen (pq a)
genericArbitrary = liftM (foldr (\x acc -> insert x acc) empty) (listOf arbitrary)

`pq' is applied to too many type arguments
In the type signature for `genericArbitrary':
  genericArbitrary :: (PQ pq, Arbitrary a, Ord a) => Gen (pq a)

