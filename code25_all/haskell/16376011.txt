Expr
class Expr a where
  mul :: a -> a -> a 
  add :: a -> a -> a
  lit :: Integer -> a

data StackExp = PushI Integer
              | PushB Bool
              | Add
              | Mul
              | And
              | Or
                deriving Show

type Program = [StackExp] --i use this type for function of stack calculator later

Expr
Program
mul ( add (lit 3) (lit 2)) (lit 4)
[PushI 2, PushI 3, Add, PushI 4, Mul]
[[StackExp]]
instance Expr Program where
  lit n = (PushI n):[]
  add exp1 exp2 = exp1:(exp2:[Add]) 
  mul exp1 exp2 = exp1:(exp2:[Mul])

Couldn't match type `[StackExp]' with `StackExp'
    Expected type: StackExp
      Actual type: Program

