import Text.Printf
import Test.HUnit
doubleMe x = x + x
doubleUs x y = doubleMe x + doubleMe y
doubleSmallNumber x = if x > 100 then x else x*2
doubleSmallNumber' x = if x > 100 then x else x*2 + 1
conanO'Brien = "It's a-me, Conan O'Brien!"
main = do
  runTestTT $ TestList [TestCase $ ae 4 $ doubleMe 2,
                        TestCase $ ae 10 $ doubleUs 2 3,
                        TestCase $ ae 4 $ doubleSmallNumber 2,
                        TestCase $ ae 1000 $ doubleSmallNumber' 1000,
                        TestCase $ assertEqual "" "It's a-me, Conan O'Brien!" conanO'Brien]
  where ae = assertEqual "" 

$ clear && ghc baby.hs && ./baby     
[1 of 1] Compiling Main             ( baby.hs, baby.o )
Linking baby ...
ld: warning: could not create compact unwind for .LFB3: non-standard register 5 being saved in prolog
Cases: 5  Tried: 5  Errors: 0  Failures: 0

import Text.Printf
import Test.HUnit
doubleMe x = x + x
doubleUs x y = doubleMe x + doubleMe y
doubleSmallNumber x = if x > 100 then x else x*2
doubleSmallNumber' x = if x > 100 then x else x*2 + 1
conanO'Brien = "It's a-me, Conan O'Brien!"
main = do
  runTestTT $ TestList [TestCase $ ae 4 $ doubleMe 2,
                        TestCase $ ae 10 $ doubleUs 2 3,
                        TestCase $ ae 4 $ doubleSmallNumber 2,
                        TestCase $ ae 1000 $ doubleSmallNumber' 1000,
                        TestCase $ ae "It's a-me, Conan O'Brien!" conanO'Brien]
  where ae = assertEqual "" 

[1 of 1] Compiling Main             ( baby.hs, baby.o )

baby.hs:12:65:
    No instance for (Num [Char])
      arising from the literal `1000'
    Possible fix: add an instance declaration for (Num [Char])
    In the first argument of `doubleSmallNumber'', namely `1000'
    In the second argument of `($)', namely `doubleSmallNumber' 1000'
    In the second argument of `($)', namely
      `ae 1000 $ doubleSmallNumber' 1000'

ld: warning: could not create compact unwind for .LFB3: non-standard register 5 being saved in prolog

