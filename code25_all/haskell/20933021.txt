type Id = String

data TermEx                         
    = VarE Id                       
    | LamE Id TermEx                
    | AppE TermEx TermEx            

data TermIn                         
    = VarI Int                  
    | LamI TermIn               
    | AppI TermIn TermIn        

encode' :: TermEx -> TermIn
encode' = go [] where
go en te = case te of 
    VarE x   -> case elemIndex x en of 
        Just i -> VarI 
    LamE x t  -> LamI $ go (x:en) t
    AppE t t' -> AppI (go en t) (go en t')    -- * see comment below

AppI
type DeBruijn = forall m. (Monad m, Functor m) => StateT [Id] m TermIn

