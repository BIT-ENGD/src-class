>>=
mplus
A AND (B OR C) AND (D OR E)
(A AND B AND D) OR (A AND B AND E) OR (A AND C AND D) OR (A AND C AND E)
Control.MonadPlus.Free
Plus ms >>= f
f
Pure
ms
f
Pure
Plus ms >> g
g
ms
Plus
Control.MonadPlus.Free
Then
data Free f a = Pure a
              | Free (f (Free f a))
              | Then [Free f ()] (Free f a)
              | Plus [Free f a]

Then
Monad
instance Functor f => Monad (Free f) where
    return = Pure

    Pure a >>= f = f a
    Free fa >>= f = Free $ fmap (>>= f) fa
    Then ms m >>= f = Then ms $ m >>= f
    Plus ms >>= f = Plus $ map (>>= f) ms

    Pure a >> mb = mb
    Then ms ma >> mb = Then (ms ++ [ma >>= (const $ return ())]) mb
    ma >> mb = Then [] ma >> mb

>>
Pure a
Pure ()
++
>>=
fmap
Control.Monad.Free
