import Math.NumberTheory.Powers

divides::Integer->Integer->Bool
divides x y = y `mod` x == 0

factorcarmichael::Integer->(Integer,Integer)
factorcarmichael n = until (\(_, s) -> not $ divides 2 s)
                           (\(r, s) -> (r+1, div s 2))
                           (0, n-1)

second::((Integer,Integer),[Integer])->[Integer]
second (x,xs) = xs

millerlist::Integer->Integer->[Integer]
millerlist a n =  second $ until (\((r,s), xs) -> r<0)
                                 (\((r,s), xs) -> ((r-1,s), (powerMod a ((2^r)*s) n):xs))
                                 (factoredcarmichael, [])
    where 
        factoredcarmichael = factorcarmichael n 

millerlist 8888 9746347772161

