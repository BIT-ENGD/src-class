{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}

data Types = DefaultType | MyTypeA

toString :: (MyTypeAString a, DefaultString a) => Types -> a -> String
toString DefaultType a = toDefaultString DefaultType a
toString MyTypeA a = toMyTypeAString a

class DefaultString a where
    toDefaultString :: Types -> a -> String

data TheThingA = TheThingA TheThingB
data TheThingB = TheThingB

instance DefaultString TheThingA where
    toDefaultString myType (TheThingA thingB) = "Thing A has " ++ toString myType thingB

instance DefaultString TheThingB where
    toDefaultString myType thing = "a thing B!"

class MyTypeAString a where
    toMyTypeAString :: (DefaultString a) => a -> String

instance MyTypeAString a where
    toMyTypeAString thing = toDefaultString MyTypeA thing 

instance MyTypeAString TheThingB where
    toMyTypeAString thing = "a thing B created by MyTypeA"

test1 = toString DefaultType (TheThingA TheThingB)
> "Thing A has a thing B!"

test2 = toString MyTypeA (TheThingA TheThingB)
> "Thing A has a thing B created by MyTypeA"

