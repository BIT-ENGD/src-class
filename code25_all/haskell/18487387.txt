comp :: Monad m => m a -> m b -> m b

Mfunctor
ms :: Monad m => m String
ms = undefined

tma :: (Monad m, MFunctor t) => t m a
tma = undefined

ms
tma
tmas = hoist (\ma -> comp ma ms) tma

 Could not deduce (a ~ [Char])
    from the context (Monad m, MFunctor t)
      bound by the inferred type of
               comp :: (Monad m, MFunctor t) => t m b
      at Coroutine.hs:607:1-40
      `a' is a rigid type variable bound by
          a type expected by the context: m a -> m a at Coroutine.hs:607:8
    Expected type: m a
      Actual type: m String

a
ms
ms :: Monad m => m a
tma
hoist :: (Monad m, MFunctor t) => (forall a. m a -> n a) -> t m b -> t n b

forall
