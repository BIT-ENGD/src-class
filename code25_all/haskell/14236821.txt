    true=\x.\y.x 
    false=\x.\y.y 

    not=\x.((x false) true)
    (not true) 
    (not false)

    and=\x.\y.((x y) false)
    ((and true) true)
    ((and true) false)
    ((and false) true)
    ((and false) false)

    or=\x.\y.((x true) y)
    ((or true) true)
    ((or true) false)
    ((or false) true)
    ((or false) false)

    nil=\x.true
    null=\l.(l \x.\y.false)
    cons=\x.\y.\z.((z x) y)
    car=\l.(l true)
    cdr=\l.(l false)
    if=\p.\then.\else.((p then) else)

fix=\f.(\x.(f (x x)) \x.(f (x x)))
(fix fun)

append=\a.\b.((fix \r.\a.(((if (null a)) b) 
                      ((cons (car a)) (r (cdr a))))) a)
la=((cons x) nil)
lb=((cons y) ((cons z) nil))
lc=((append la) lb) 
(car lc)
(car (cdr lc))
(car (cdr (cdr lc)))

<\x.\y.x; >
<\x.\y.y; >

<\x.((x false) true); >
<\x.\y.y; x<-true>
<\x.\y.x; x<-false>

<\x.\y.((x y) false); >
<\x.\y.x; >
<\x.\y.y; >
<\x.\y.y; y<-true, x<-false>
<\x.\y.y; y<-false, x<-false>

<\x.\y.((x true) y); >
<\x.\y.x; y<-true, x<-true>
<\x.\y.x; y<-false, x<-true>
<\x.\y.x; >
<\x.\y.y; >

<\x.true; >
<\l.(l \x.\y.false); >
<\x.\y.\z.((z x) y); >
<\l.(l true); >
<\l.(l false); >
<\p.\then.\else.((p then) else); >

<\f.(\x.(f (x x)) \x.(f (x x))); >
(fun (x x))

<\a.\b.((fix \r.\a.(((if (null a)) b)
                ((cons (car a)) (r (cdr a))))) a); >
<\z.((z x) y); y<-nil, x<-x>
<\z.((z x) y); y<-((cons z) nil), x<-y>
<\z.((z x) y); y<-(r (cdr a)), x<-(car a), a<-a, r<-(x x), b<-lb, a<-la>
x
y
z

