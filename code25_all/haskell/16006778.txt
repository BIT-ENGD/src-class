data Cases a = Case_A | Case_B | Case_C | Case_D

test_list :: Eq a => [a] -> [a] -> Cases a
test_list list_left list_right = case (list_left, list_right) of
  ([], []) -> Case_A
  ([], _) -> Case_B
  (_, []) -> Case_C
  (x:xs, y:ys)
       | (x==y) -> test_list xs ys
       | otherwise -> Case_D (x, y)

