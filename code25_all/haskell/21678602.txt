import Data.List
solveRPN :: String -> Int
solveRPN str = head $ foldl putStack [] (words str) 
         where putStack accumulator token 
            | token == "+" = pFunction (+)
            | token == "-" = pFunction (-)
            | token == "*" = pFunction (*)
            | token == "/" = pFunction (`div`)
            | otherwise    = accumulator ++ [read token :: Float]
            where pFunction function =  (int $ init accumulator) ++ [function argu1 argu2]
                  argu1 = last accumulator
                  argu2 = last $ init accumulator

solveRPN
"4 3 2 + *"
["4","3","2","+","*"]
(int $ init accumulator)
(int $ init accumulator)
| token == "/" = pFunction (
)
pFunction
Prelude> let plus = (+) 
Prelude> :t (+) 
(+) :: Num a => a -> a -> a
Prelude> :t plus 
plus :: Integer -> Integer -> Integer

