{-# LANGUAGE OverloadedStrings, TemplateHaskell, TypeFamilies,
             MultiParamTypeClasses, QuasiQuotes #-}

import Yesod
import Data.Text
import Data.Text.Encoding
import Data.ByteString.UTF8
import Database.Redis
import qualified Data.ByteString.Lazy as L


data LRedis = LRedis

instance Yesod LRedis where

mkYesod "LRedis" [parseRoutes|
    / HomeR GET
    /learnJson LearnJsonR GET
    /redisWorks RedisWorksR GET
    |]

getHomeR :: Handler RepHtml
getHomeR = do
    defaultLayout[whamlet|
    <p>Hi this is a headless API thing.
    |]

getLearnJsonR :: Handler RepJson
getLearnJsonR = do
    jsonToRepJson $ object [("json", ("ftw"::Text))]

getRedisWorksR :: Handler RepPlain
getRedisWorksR = do
    conn <- liftIO $ connect defaultConnectInfo
    liftIO $ runRedis conn $ do
        result <- Database.Redis.get (fromString "hello")
        case result of
            Left e -> return $ RepPlain "Error"
            Right mAnswer -> do
                case mAnswer of
                    Nothing -> return $ RepPlain "Not found."
                    Just x -> return $ RepPlain (toContent x)

main :: IO()
main = do
    warpDebug 3000 $ LRedis

/redisWorks
/learnJson
getRedisJsonR :: Handler RepJson
getRedisJsonR = do
    conn <- liftIO $ connect defaultConnectInfo
    liftIO $ runRedis conn $ do
        result <- Database.Redis.get (fromString "hello")
        case result of
            Left e -> jsonToRepJson $ object [("response", ("error"::Text))]
            Right mAnswer -> do
                case mAnswer of
                    Nothing -> jsonToRepJson $ object [("response", ("Nothing"::Text))]
                    Just x -> jsonToRepJson $ object [("response", ((decodeUtf8 x)::Text))]

/redisJson RedisJsonR GET
Couldn't match expected type `Redis a0'
            with actual type `GHandler sub0 master0 RepJson'
In the expression:
  jsonToRepJson $ object [("response", ("error" :: Text))]
In a case alternative:
    Left e -> jsonToRepJson $ object [("response", ("error" :: Text))]
In a stmt of a 'do' block:
  case result of {
    Left e -> jsonToRepJson $ object [("response", ("error" :: Text))]
    Right mAnswer
      -> do { case mAnswer of {
                Nothing -> ...
                Just x -> ... } } }

result
