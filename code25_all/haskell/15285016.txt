data $V = $V deriving (Eq,Ord)

V
declareSingleton
String -> DecsQ
$(declareSingleton "Foo")

data Foo = Foo deriving (Eq,Ord)

declareSingleton :: String -> Q [Dec]
declareSingleton s = let n = mkName s in sequence [
        dataD (cxt []) n [] [normalC n []] [''Eq,''Ord]
   ]

declareSingleton :: String -> Q [Dec]
declareSingleton s = let n = mkName s in 
    [d| data $n = $n deriving (Eq,Ord) |]

$s
$v
$(conT v)
v
'v
declareSingleton
