import Control.Monad (replicateM)
import System.Random

// max random numbers
maxInt = 5
// list
randList = replicateM (fromIntegral maxInt) (randomRIO(1, 6))

let
maxInt
randList
.hs
    Ambiguous type variable `a0' in the constraints:
  (Num a0)
    arising from the literal `1' at code.hs:11:59
  (Random a0)
    arising from a use of `randomRIO'
    at code.hs:11:49-57
Possible cause: the monomorphism restriction applied to the following:
  randList :: IO [a0] (bound at code.hs:11:1)
Probable fix: give these definition(s) an explicit type signature
              or use -XNoMonomorphismRestriction
In the expression: 1
In the first argument of `randomRIO', namely `(1, 6)'
In the second argument of `replicateM', namely `(randomRIO (1, 6))'
Failed, modules loaded: none.

import System.Random

addToList :: Int -> Int
addToList 0 = [randomRIO(1, 6)]
addToList n = [randomRIO(1, 6)] ++ addToList (n-1)

