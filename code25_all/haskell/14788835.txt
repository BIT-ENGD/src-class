Project
Task
data Project = Project { projectName :: Text
                       , projectStart :: Day
                       , projectEnd :: Day
                       , projectMaxHoursPerDay :: Int
                       , projectTasks :: [Task]
                       }
  deriving (Eq, Show)

data Task = Task { taskName :: Text }
  deriving (Eq, Show)

Writer [Task]
project "LambdaBook" startDate endDate $ do
  task "Web site"
  task "Marketing"

project :: Text -> Date -> Date -> Writer [Task] a
Writer
projectMaxHoursPerDay
project "LambdaBook" $ do
  maxHoursPerDay 4
  task "Web site"
  task "Marketing"

maxHoursPerDay
Project
Writer
[Task]
Project
data Project = Project { projectName, projectStart, projectEnd, projectProperties }
data ProjectProperties = ProjectProperties { projectMaxHoursPerDay :: Maybe Int
                                           , projectTasks :: [Task]
                                           }

Monoid ProjectProperties
Writer ProjectProperties
Project
Project
ProjectProperties
Semigroup m => Writer m
Project
Monoid
Semigroup
First
maxHoursPerDay
Last
projectTasks
[Task]
Writer
Semigroup
Writer
Monoid
Project
ProjectProperties
Project
maxHoursPerDay
Just
return
pure
Resource
Task
Bind
Monad
