STVector
ST monad
STVector
Int
DVec s
{-# LANGUAGE BangPatterns #-}
module Test where
import Data.Vector.Unboxed.Mutable as MU
import Control.Monad.ST as ST
import Control.Monad.Primitive (PrimState)
import GHC.Float.RealFracMethods (int2Float)

type MVI1 s  = MVector (PrimState (ST s)) Int
data DVec s = DV {-# UNPACK #-}!Int -- this one keeps track of index of last vector
                                (MVI1 s)
append :: DVec s -> Int -> ST s (DVec s)
append (DV i v) x = do
   if i < MU.length v then MU.unsafeWrite v i x >> return $ DV (i+1) v
   else MU.unsafeGrow v (floor $ 1.5 * (int2Float $ MU.length v)) >>= (\y -> MU.unsafeWrite y i x >> return $ DV (i+1) y)

Couldn't match type `s' with `PrimState ((->) (DVec s))'
  `s' is a rigid type variable bound by
      the type signature for append :: DVec s -> Int -> ST s (DVec s)
      at B.hs:11:11
Expected type: MVector (PrimState ((->) (DVec s))) Int
  Actual type: MVI1 s
In the first argument of `unsafeWrite', namely `y'
In the first argument of `(>>)', namely `unsafeWrite y i x'
In the expression: unsafeWrite y i x >> return

