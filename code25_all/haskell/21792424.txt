ReadP
[(Hand, Hand)]
[]
import Text.ParserCombinators.ReadP as Par
import qualified Data.List as L
import qualified Control.Monad as M
import qualified Data.Map as D
import qualified Control.Applicative as A

data Suit=C|D|H|S deriving (Show, Read, Eq, Ord)
data Card=Card Int Suit deriving (Show, Eq, Ord)
data Hand=Hand [Card] deriving (Show, Eq)

ranks=D.fromList [('2', 2), ('3', 3), ('4', 4), ('5', 5), ('6', 6), ('7', 7), ('8', 8),
 ('9', 9), ('T', 10), ('J', 11), ('Q', 12), ('K', 13), ('A', 14)]

allPar=readP_to_S
fstPar s=fst . head . (allPar s)

parCard=do
    rank <- M.liftM (ranks D.!) get
    suit <- M.liftM (read . (:[])) get
    return $ Card rank suit

parHand=do
    first <-parCard
    rest  <-M.replicateM 4 (char ' ' >> parCard)
    return $ Hand $ first:rest

parFile=do
    r<-sepBy (return (,) `M.ap` parHand `M.ap` (char ' ' >> parHand)) (char '\n')
    eof --I have tested with and without this line.
    return r

eof
Î» <*Main>: fstPar parFile `M.liftM` readFile "poker.txt"
[]

ReadP
