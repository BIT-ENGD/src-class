data LispVal = Atom String                  
         | List [LispVal]                   
         | Vector (Array Int LispVal)

lispValtoList :: LispVal -> [LispVal]
lispValtoList (List [a]) = [a]

parseVector :: Parser LispVal
parseVector = do string "#("
             vecArray <- parseVectorInternals       
             char ')'
             return $ Vector vecArray

parseVectorInternals :: Parser (Array Int LispVal)
parseVectorInternals = listToArray . lispValtoList . parseList  

listToArray :: [a] -> Array Int a
listToArray xs = listArray (0,l-1) xs
    where l = length xs

parseList :: Parser LispVal
parseList = liftM List $ sepBy parseExpr spaces

a ->
  LispVal'
         against inferred type
(.)' namely
(.)' namely
  
