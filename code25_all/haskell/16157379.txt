scrapePost :: String -> IO ()                                                   
scrapePost url = liftM (fromMaybe ()) . runMaybeT $ do
  doc <- lift $ fromUrl url
  -- get a bunch of stuff from the page 
  -- send it to the db
  replies <- lift . runX $ doc >>> css ".post.reply"
  -- here is the problem
  mapM_ (parseReply url (fromJust page_id)) replies
  -- here is the problem

parseReply
parseReply :: String -> String -> XNode -> Maybe ()                                
parseReply url op_id reply = do                                                    
  reply_id <- runX $ reply ! "id"                                                     
  return ()                       

scrapePost
mapM
mapM
liftIO
parseReply
MaybeT IO ()
scrapePost
parseReply
toRoot :: ArrowXml a => XmlTree -> a n XmlTree                                     
toRoot node = root [] [constA node]                                                

parseReply :: String -> String -> XmlTree -> MaybeT IO ()                          
parseReply url op_id reply = do                                                    
  let node = toRoot reply                                                        
  reply_id <-  lift . liftM (`atMay` 0) $ runX $ node >>> css "div" ! "id"
  guard (isJust reply_id)                                                        
  return ()

