Lens' Entity Value
Action
Getter
Setter
LensM'
Lens' (Entity, State) Value
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
import qualified Data.Map    as M
import Control.Monad.State
import Control.Lens

newtype Entity = Entity { unEntity :: Int }
  deriving (Show, Eq, Ord, Enum)

type Address = String
type Name    = String

data EntitySystem = EntitySystem {
  _nextEntity :: Entity,

  _addresses  :: M.Map Entity Address,
  _names      :: M.Map Entity Name
} deriving (Show, Eq, Ord)

makeLenses ''EntitySystem

newEntry :: Name -> Address -> State EntitySystem Entity
newEntry name addr = do
  ne <- nextEntity <<%= succ

  addresses.at ne ?= addr
  names.at ne ?= name

  return ne 

entityAddress e = addresses . at e
entityName e = names . at e

entityAddress entity
Entity -> Lens' EntitySystem Address
entityAddress :: Lens' Entity Address
