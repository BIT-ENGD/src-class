import Control.Exception
import Control.Monad
import Control.DeepSeq

import qualified Data.List as List

import Test.HUnit


data Tree a  =  Empty
         |  Node a (Tree a) (Tree a)
         deriving (Show, Eq)



insertTree :: ( Ord a, Show a ) => Tree a -> a -> Tree a
insertTree Empty x  =  Node x Empty Empty
insertTree ( Node v tLeft tRight ) x
     | x == v = Node v tLeft tRight
     | x < v = Node v (insertTree tLeft x) tRight
     | x > v = Node v tLeft (insertTree tRight x)


createTree :: ( Ord a, Show a ) => [ a ] -> Tree a
createTree = foldl insertTree Empty

member:: ( Ord a, Show a ) => Tree a -> a -> Bool
member Empty x = False
member (Node v tLeft tRight ) x
| x == v = True
| x < v = member tLeft x
| x > v = member tRight x



intTree = createTree [ 9, 7, 2, 8, 6, 0, 5, 3, 1 ]

listTree = createTree ( List.permutations [ 0 .. 3 ] )

strTree = createTree [ "hello"
                     , "world"
                     , "lorem"
                     , "ipsum"
                     , "dolor"
                     , "sit"
                     , "amet"
                    ]

ghci.> member 5 intTree
