r
s
()
newtype MyMonad m a = MM (ReaderT () (StateT () m a)

InputT
System.Console.Haskeline.MonadException
GeneralizedNewtypeDeriving
{-# LANGUAGE GeneralizedNewtypeDeriving, StandaloneDeriving, FlexibleContexts #-}

import Control.Monad.State
import Control.Monad.Reader
import Control.Monad.IO.Class
import Control.Applicative
import System.Console.Haskeline.MonadException

newtype MyMonad m a = MM (ReaderT () (StateT () m) a)
                    deriving (Functor, Applicative, Monad, MonadIO)
deriving instance (MonadException m) => MonadException (MyMonad m)        

/home/bgamari/hi.hs:11:1:
    Could not deduce (MonadException (StateT () m))
      arising from the superclasses of an instance declaration
    from the context (MonadIO (MyMonad m), MonadException m)
      bound by the instance declaration at /home/bgamari/hi.hs:11:1-66
    Possible fix:
      add an instance declaration for (MonadException (StateT () m))
    In the instance declaration for `MonadException (MyMonad m)'

StateT
ReaderT
instance MonadException m => MonadException (ReaderT r m)
instance MonadException m => MonadException (StateT s m)

StateT
GeneralizedNewtypeDeriving
