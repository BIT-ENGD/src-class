Int
ins :: (Num b, Ord a) => a -> b -> [(a, b)] -> ([(a, b)], b)
ins n x [] = ( [(n,x)], 0) 
ins n x l@((v, s):t) = 
  case compare n v of
    LT -> ( (n,s+x) : l , s )
    EQ -> ( (n,s+x) : t , if null t then 0 else snd (head t))
    GT -> let (u,z) = ins n x t
          in  ((v,s+x):u,z)

scanl g (0,([],[])) ns  -- ns :: [Int]
g ::
  (Num t, Ord t, Ord a) =>
  (t, ([(a, t)], [(a, t)])) -> a -> (t, ([(a, t)], [(a, t)])) 
g (c,( a, b)) n = 
    let
      (a2,x) = ins n 1 a
      (b2,y) = if x>0 then ins n x b else (b,0)
      c2     = c + y
    in
      (c2,( a2, b2))

(a,b)
n
goarr top = runSTArray $ do
  let sz = 10000
  a <- newArray (1,sz) (0,0) :: ST s (STArray s Int (Integer,Integer))
  b <- newArray (1,sz) (0,0) :: ST s (STArray s Int (Integer,Integer))
  let p1 = somefunc 2 -- somefunc :: Integer -> [(Integer, Int)]
  go1 p1 2 0 top a b

go1 p1 i c top a b = 
    if i >= top
     then 
      do
       return c
     else
       go2 p1 i c top a b

go2 p1 i c top a b =
  do
   let p2 = somefunc (i+1)  -- p2 :: [(Integer, Int)]
   let n  = combine p1 p2   -- n :: Int
   -- update arrays and calc new c 
   -- like the "g" function is doing:
   --    (a2,x) = ins n 1 a
   --    (b2,y) = if x>0 then ins n x b else (b,0)
   --    c2     = c + y
   go1 p2 (i+1) c2 top a b  -- a2 b2??

ins3 :: (Ord k, Num a) => k -> a -> Map.Map k a -> (Map.Map k a, a)
ins3 n x a | Map.null a = (Map.insert n x a , 0)
ins3 n x a = let (p,q,r) = Map.splitLookup n a in
  case q of 
    Nothing -> (Map.union (Map.map (+x) p) 
                 (Map.insert n (x+leftmost r) r) , leftmost r)
    Just s -> (Map.union (Map.map (+x) p) 
                 (Map.insert n (x+s) r) , leftmost r)

leftmost r | Map.null r = 0
           | otherwise = snd . head $ Map.toList r

return c
go1
c
scanl
(!!)
foldl
take
