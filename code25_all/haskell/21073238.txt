def is_valid(password):
    checks = {
        lambda x : True : 10,
        lambda x : x.isupper() : 2,
        lambda x : x.islower() : 2,
        lambda x : x.isdigit() : 2,
        lambda x : x in frozenset("~!@#$%^&*()-=_+[]{}<>?/\\`") : 2,
    }

    for c in password:
        for func in list(checks):
            if func(c):
                checks[func] -= 1
                if checks[func] == 0:
                    del checks[func]

        if len(checks) <= 2:
            return True

    return False

>>> is_valid(itertools.cycle("!!xxxxxxxx"))
True
>>> is_valid(itertools.cycle("UUxxxxxxxx"))
True

isValid :: String -> Bool
isValid password =
  let
    checks = atLeast 10 password:map containsChars [isUpper, isLower, isSpecialChar, isDigit]
  in atLeast 3 $ filter (==True) checks
  where
    containsChars predicate = length (take 2 $ filter predicate password) == 2
    isSpecialChar c = isPunctuation c || isSymbol c
    atLeast n seq = length (take n seq) == n

*Main Data.Char> isValid (cycle "UUxxxxxxxx")
True
*Main Data.Char> isValid (cycle "!!xxxxxxxx")
-- hangs

atLeast
