{-# LANGUAGE UndecidableInstances,
         MultiParamTypeClasses,
         KindSignatures,
         TypeFamilies,
         Rank2Types,
         ConstraintKinds,
         FlexibleInstances,
         OverlappingInstances #-}

module Test where

  import GHC.Exts  -- to get Constraint type constructor

  class NextClass f where
    type Ctxt f a :: Constraint
    next :: (Ctxt f a) => a -> a

  instance NextClass Int where
    type Ctxt Int a = Num a
    next b = b + 1

  n :: (NextClass a) => a -> a
  n v = next v

NextClass
NextClass
+
Num a
Int
Could not deduce (Ctxt f0 a) arising from a use of `next'
from the context (NextClass a)
   bound by the type signature for n :: NextClass a => a -> a
In the expression: next v
In an equation for `n': n v = next v

