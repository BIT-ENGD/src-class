import Control.Monad.Trans.Class (lift)
import Data.Conduit
import Data.Conduit.Binary (sinkFile)
import Data.Conduit.List
import Network.HTTP.Conduit

downloadContent manager = do
  mx <- await
  case mx of
    Nothing   -> return ()
    Just name -> do
      req <- lift $ parseUrl $ "http://" ++ name ++ ".com/"
      res <- lift $ http req manager
      lift $ responseBody res $$+- sinkFile $ name ++ ".html"
      downloadContent manager

main = do
  runResourceT $ do
    withManager $ \manager -> do
      sourceList ["google", "yahoo"] $$ downloadContent manager

lift
downloadContent
lift
parseUrl
  :: failure-0.2.0.1:Control.Failure.Failure HttpException m =>
     String -> m (Request m')

http
  :: (MonadResource m, MonadBaseControl IO m) =>
     Request m
     -> Manager
     -> m (Response
             (ResumableSource m Data.ByteString.Internal.ByteString))

($$+-) :: Monad m => ResumableSource m a -> Sink a m b -> m b

downloadContent
  :: (MonadResource m, MonadBaseControl IO m,
      failure-0.2.0.1:Control.Failure.Failure HttpException m) =>
     Manager -> ConduitM [Char] o m ()

class (MonadThrow m, MonadUnsafeIO m, MonadIO m, Applicative m) => MonadResource m

