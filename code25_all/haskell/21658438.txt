fn :: [a] -> Int
fn = (2 *) . length

fn list = (2 * length list) :: Int

fn list = 2 * length (list :: [Char])

fnSig = undefined :: [Char] -> a
fn | False = fnSig
   | True  = (* 2) . length

fn :: [Char] -> a
fn = (2 *) . length

fn :: [Char] -> _
fn = (2 *) . length

fn list = 2 * length list
  where
    _ = list :: [Char]

fn = (2 *) . length
  where
    _ = fn `asTypeOf` (undefined :: [Char] -> a)
    _ = fn `asTypeOf` (undefined :: a -> Int)
    _ = fn `asTypeOf` (undefined :: a -> b)
    _ = fn `asTypeOf` (undefined :: a)

asTypeOf
