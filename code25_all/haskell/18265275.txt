Maybe
type Maybe' a = forall b. (b -> (a -> b) -> b)

just :: a -> Maybe' a
just a = \d f -> f a

nothing :: Maybe' a
nothing = const

bind :: Maybe' a -> (a -> Maybe' b) -> Maybe' b
bind ma f = ma nothing (\a -> f a)

instance Monad (Maybe') where
    return = just
    a >>= f = bind a f

Type synonym Maybe' should have 1 argument, but has been given none

