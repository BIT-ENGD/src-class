combinationsOf 0 _ = [[]]
combinationsOf _ [] = []
combinationsOf k (x:xs) = map (x:) (combinationsOf (k-1) xs)
                          ++ combinationsOf k xs

combinations k n = combinationsOf k [1..n]

combinationsOf :: Integer -> [a] -> [[a]]
combinations :: Integer -> Integer -> [[Integer]]

module Main
    where
        import IO
        import qualified CombinatoricsGeneration as CG

        main = putStr $ unlines $ map show CG.combinations(6, 8)

$ ghc --version
The Glorious Glasgow Haskell Compilation System, version 6.12.3
$ ghc -c CombinatoricsGeneration.hs 
$ ghc -o test  CombinatoricsGeneration.o test.hs 

test.hs:6:37:
Couldn't match expected type `[a]'
       against inferred type `t -> t1 -> [[t1]]'
In the second argument of `map', namely `CG.combinations'
In the second argument of `($)', namely
    `map show CG.combinations (6, 8)'
In the second argument of `($)', namely
    `unlines $ map show CG.combinations (6, 8)'

main = putStr $ unlines $ map show [[1,2],[2],[3]]

