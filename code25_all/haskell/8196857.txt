import Data.Vector.Unboxed as D


xs = [0,1,2,3,4,5,6,7,8,9,10,11]
rows = 3
cols = 4

sb = D.fromList xs

takeRows::Int -> Int -> Vector Int -> Vector (Vector Int)
takeRows rows cols x0 = D.map (\x -> D.slice x (fromIntegral cols) x0) starts
                        where
                         starts = D.enumFromStepN 0 cols rows

-- takeRowsList::Int -> Int -> Vector Int -> [Vector Int]                                                         
-- takeRowsList rows cols x0 = Prelude.map (\x -> D.slice x (fromIntegral cols) x0) starts                        
--  where                                                                                  
--  starts = D.toList . D.enumFromStepN 0 cols $ rows                                    

No instance for (Unbox (Vector Int))
  arising from a use of `D.map'
Possible fix: add an instance declaration for (Unbox (Vector Int))
In the expression:
  D.map (\ x -> slice x (fromIntegral cols) x0) starts
In an equation for `takeRows':
    takeRows rows cols x0
      = D.map (\ x -> slice x (fromIntegral cols) x0) starts
      where
          starts = enumFromStepN 0 cols rows

