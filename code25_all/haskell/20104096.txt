A to B to A to B to breaking condition
primaryFunc :: SuperType -> MyMap -> (Integer, MyMap)
primaryFunc (SubType1 a) mapInstance = do
    let returnInt = func1 a mapInstance
    (returnInt, mapInstance)
primaryFunc (SubType2 c) mapInstance = do
    let returnInt = primaryFunc_nonprefix_SuperType c mapInstance
    let returnSuperType = (Const returnInt)
    let returnTable = H.insert c returnSuperType mapInstance
    (returnInt, returnTable)
primaryFunc (ConstSubType d) mapInstance = do
    let returnInt = d
    (returnInt, mapInstance)

func1 :: SubType1 -> MyMap -> Integer    
func1 oe vt = do
    --do stuff with input and map data to get return int
    returnInt = primaryFunc
    returnInt

func2 :: SubType2 -> MyMap -> Integer
func2 pe vt = do
    --do stuff with input and map data to get return int
    returnInt = primaryFunc
    returnInt

