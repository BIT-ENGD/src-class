read_field
get_field
module Main where
import System.IO
import System.Environment
import Text.Printf
import Text.JSON.Generic
import Text.JSON.Types
import Text.JSON

touchJSONfile path = do
  -- Touches a file into existence. The good touch.
  writeFile path "{}\n"
  return ()


read_field :: String -> String -> IO String
read_field filename key = do
  result <- readFile filename
  let json_data = decode result :: Result JSValue
  value <- json_data >>= \x -> get_field x key     -- right here
  return (value)



main :: IO ()
main = do
  args <- getArgs
  case head args of
    "init-store" ->  touchJSONfile (args !! 1)
    "set-keyf" -> putStrLn $ show args  --stub
    "set-keyi" -> putStrLn $ show args  --stub
    "get-key" -> putStrLn $ read_field ( args !! 1 )  (args !! 2)
    _ -> putStrLn "Error, command not accepted"

  return ()

