DIM2
DIM2
DIM3
traverse2
stack :: (Shape sh, Source r c, Source r2 c)                                                      
      => Array r (sh :. Int) c -> Array r2 sh c -> Array D (sh :. Int) c                                                   
stack arr1 arr2 = traverse2 arr1 arr2 resize $ \f g sh@(sh' :. _) ->                                                        
    if extent arr1 `inShape` sh then f sh else g sh'                                                                      
    where resize :: Shape (sh :. Int) => (sh :. Int) -> t -> (sh :. Int)                                                  
          resize (xs :. x) _ = xs :. (x + 1)

stack (3x3x3 box :: DIM3) (3x3 slice :: DIM2) == (3x3x4 box :: DIM3)
