   combinations pre suf letters = prefixed ++ suffixed   
    where
     perms = permutation letters
     prefixed = map (\x -> pre ++ x) $ perms
     suffixed = map (\x -> x ++ suf) $ perms

Apple
Banana
Stawberry
...... and so on

["banana","nanaba,..."]
["banana","nanaba,...,Apple,Banana,Strawbery"] 

combinations pre suf letters = prefixed ++ suffixed
  where
    perms = permutation letters
    prefixed = map (\x -> pre ++ x)  $ perms
    suffixed = map (\x -> x ++ suf)  $ perms

fileLines :: FilePath -> IO [String]
fileLines file = readFile file >>= (\x -> return $ lines x)
        main = do 
         lines <- fileLines "directory.txt"
         putStr $ (combinations pre suf letters) ++ lines

