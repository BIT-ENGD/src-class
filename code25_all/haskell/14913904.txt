gremove :: (Group a) => a -> a -> a
gremove x y = x `mappend` (invert y)

class (Monoid a) => MRemove a where
    mremove :: a -> a -> a

x `mremove` x = mempty
x `mremove` mempty = x
(x `mappend` y) `mremove` y = x

class (MRemove a) => Group a where
    invert :: a -> a
    invert x = mempty `mremove` x

-- | For defining MRemove in terms of Group
defaultMRemove :: (Group a) => a -> a -> a
defaultMRemove x y = x `mappend` (invert y)

MRemove
