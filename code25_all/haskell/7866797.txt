-- return True when `e` (haystack) starts with `s` (needle)
_startsWith :: String -> String -> Bool
-- Anything starts with the empty string
_startsWith _ "" = True
-- An empty string cannot start with a nonempty string 
_startsWith "" (h:t) = False 
_startsWith (eh:et) (sh:st) = (eh==sh) && (_startsWith et st)

-- look for all occurences of `s` (needle) in `e` (haystack), accumulating 
-- start indices of occurences in `is`
_findAll :: [Integer] -> Integer -> String -> String -> [Integer]
_findAll is i e s
    | null e = is -- end of haystack reached, return indices found so far
    | _startsWith e s = i:(rest $ length s) -- needle found, skip its length
    | otherwise = rest (1::Int) -- needle not found, advance by one character
          -- search the rest of the string after advancing by `skip` characters
    where rest skip = _findAll is (i+skip) (drop skip e) s

Couldn't match expected type `Int' with actual type `Integer'
In the first argument of `drop', namely `skip'
In the third argument of `_findAll', namely `(drop skip e)'
In the expression: _findAll is (i + skip) (drop skip e) s

Type error in application
*** Expression     : i + skip
*** Term           : i
*** Type           : Integer
*** Does not match : Int

skip
Int
Integral
_findAll
