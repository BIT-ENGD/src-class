Applicative
newtype Parser m s a = Parser { getParser :: [s] -> m ([s], a) }

Monad m
Applicative m
Functor
Functor m
instance Functor m => Functor (Parser m s) where
  fmap f (Parser g) = Parser (fmap (fmap f) . g)


instance Monad m => Applicative (Parser m s) where
  pure a = Parser (\xs -> pure (xs, a))

  Parser f <*> Parser x = Parser h
    where
      h xs = f xs >>= \(ys, f') -> 
        x ys >>= \(zs, x') ->
        pure (zs, f' x')

>>=
join
Monad
instance Applicative.Applicative (ParsecT s u m) where
    pure = return
    (<*>) = ap

