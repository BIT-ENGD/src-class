data CreatureType = Bot | Player deriving (Generic, Typeable, Show, Read)
data Creature = Creature CreatureType deriving (Typeable, Show)

instance FromJSON Creature where
    parseJSON (A.Object v) = Creature <$> read <$> (v .: "type")  
    parseJSON _          = mzero

readMay
mzero
readMay
Nothing
readMay
mzero
instance FromJSON Creature where
    parseJSON (A.Object v) = do
        let t = (v .: "type") :: Parser String
            mt = readMay <$> t :: Parser (Maybe CreatureType)
        -- ?? 
        -- guard -- I can't use this because it wants a Bool, and I only have Parser Bool
        -- Creature <$> read <$> mt
    parseJSON _          = mzero

mt
Parser (Maybe CreatureType)
Nothing
Data.Aeson
Control.Applicative
Data.Aeson
