import qualified Codec.Binary.Base64 as C
import System.Environment

main = do
    [arg] <- getArgs
    print $ length $ C.encode $ replicate (read arg) 80

doEnc acc (o1:o2:o3:os) = doEnc (acc ++ enc3 [o1, o2, o3]) os
doEnc acc os = EPart acc (eI os)

encode ws = case ws of
    [] -> [] 
    o1:ws2 -> case ws2 of
        [] -> take 2 (enc3 [o1,0,0]) ++ "=="
        o2:ws3 -> case ws3 of
            [] -> take 3 (enc3 [o1,o2,0]) ++ "="
            o3:ws4 -> enc3 [o1,o2,o3] ++ encode ws4

import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import System.Environment

main = do
    [arg] <- getArgs
    print $ B.length $ B64.encode $ B.replicate (read arg) 80

