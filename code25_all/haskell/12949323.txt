_+_
Nat
i + 0 == i
swap : {A : Set}{m n : Nat} -> Vec A (n + m) -> Vec A (m + n)

n
swap 0 xs     = xs
swap n (x:xs) = swap (n-1) (xs ++ [x])

swap : {A : Set}{m n : Nat} -> Vec A (n + m) -> Vec A (m + n)    
swap {_} {_} {zero} xs          = xs 
swap {_} {_} {suc i} (x :: xs)  = swap {_} {_} {i} (xs ++ (x :: []))

{zero}
swap
.m != .m + zero of type Nat
when checking that the expression xs has type Vec .A (.m + zero)

m == m + zero
swap
