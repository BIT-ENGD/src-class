import Data.Map (Map)
import qualified Data.Map as M hiding (Map)

newtype GenEnv elt = Env (Map Id elt)

newEnv :: GenEnv elt                             -- initialise
newEnv = Env M.empty
newtype GenEnv elt = Env (Map Id elt)

newEnv :: GenEnv elt                             -- initialise
newEnv = Env M.empty

getEnv :: GenEnv elt -> Id -> Maybe elt          -- G(x) (key function)
getEnv (Env env) var = M.lookup var env

union  :: GenEnv elt -> (Id,elt) -> GenEnv elt    -- G[x:v]
union  (Env env) (key,elt) = Env (M.insert key elt env)

-- foldr is faster than addToFM_list!
unionL :: GenEnv elt -> [(Id,elt)] -> GenEnv elt -- list union
unionL (Env env) pairs  = Env $ foldr (\(k,e) g -> M.insert k e g) env pairs

