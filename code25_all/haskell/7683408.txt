Enumerator
type Enumerator a m b = Step a m b -> Iteratee a m b

Iteratee
Enumerator
enumStream :: (Monad m) => Stream a -> Enumerator a m b
enumStream stream step =
    case step of
        Continue k -> k stream
        _          -> returnI step  -- Note: 'stream' is discarded

enumEOF
Iteratee
Continue
EOF
Iteratee
Step
runIteratee
Step
Stream
Iteratee
-- | Like 'enumStream', but consume and discard a chunk from the input stream
--   simply because we can.
enumStreamWeird :: (Monad m) => Stream a -> Enumerator a m b
enumStreamWeird stream step = do
    _ <- continue return            -- Look, mommy, I'm consuming input!
    case step of
        Continue k -> k stream
        _          -> returnI step

Enumeratee
type Enumeratee ao ai m b = Step ai m b -> Iteratee ao m (Step ai m b)

Enumerator
enumStreamWeird
Enumerator
enumStreamWeird
Enumerator
