every :: Int -> [a] -> [a]
every _ [] = []
every n xs = [x | (x,i) <- zip xs [1..], i `mod` n == 0]

repeatInts :: Int -> [Int]

repeatInts 3
[1,2,3,1,2,3,1,2,3,1,2,3,..]
every
every :: Int -> [a] -> [a]
every _ [] = []
every n xs = [x | (x,i) <- zip xs (repeatInts n), i == n]

repeatInts
