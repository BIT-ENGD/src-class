g::Int
g = 300

func::Int->Int
func arg = arg + g

main = do
  print (func 4)

import MyMod

func::Int->Int
func arg = arg + g

main = do
  print (func 4)

module MyMod where

g::Int
g = 300

g::Int
g = 300

h::Int
h = 400

i::Int
i = g + h

divisibleRec :: Int -> Int -> Bool
divisibleRec i j 
  | j == 1         = False 
  | i `rem` j == 0 = True 
  | otherwise      = divisibleRec i (j-1)

divisible::Int->(Int -> Int -> Bool)-> Bool
divisible i fn= (fn i (i-1))

main :: IO()
main = print(length([ x | x <- [2..1000], (divisible x divisibleRec) == False]))

