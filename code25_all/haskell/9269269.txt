appendMsg :: String -> (String, Integer) -> Map.Map (String, Integer) [String] -> Map.Map (String, Integer) [String]
appendMsg  a (b,c) m = do
      let Just le1 = length . concat <$> Map.lookup (b,c) m
          le2 = le1 + length a
      if le2 < 1400 then (let m2 = Map.adjust (x ++ [a]) (b, c) m) else (print (le1, le2))
      return (m2)

parse error on input `)'
parse error on input `else'
f x = x ++ [a]
m2 = Map.adjust f (b, c) m

if le2 < 1400 then let m2 = Map.adjust (++ [a]) (b, c) m in return (m2) else return ()
 No instance for (Monad (Map.Map (String, Integer)))
      arising from a use of `return'

