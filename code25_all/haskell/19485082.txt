closure :: Ord a => (a -> a) -> [a] -> [a]
closure f xs = first_dup (iterate (\xs -> nub $ sort $ xs ++ map f xs) xs) where
    first_dup (xs:ys:rest) = if xs == ys then xs else first_dup (ys:rest)

closure' :: Ord a => (a -> a) -> [a] -> [a]
closure' f xs = stable (iterate close (xs, [])) where
    -- return list when it stabilizes, i.e., when fringe is empty
    stable ((fringe,xs):iterates) = if null fringe then xs else stable iterates

    -- one iteration of closure on (fringe, rest);  key invariants:
    -- (1) fringe and rest are disjoint; (2) (map f rest) subset (fringe ++ rest)
    close (fringe, xs) = (fringe', xs') where
        xs' = sort (fringe ++ xs)
        fringe' = filter (`notElem` xs') (map f fringe)

xs
[0..19]
closure' (\x->(x+3)`mod`20) xs
[0]
[0,1]
[0,4,8,12,16]
