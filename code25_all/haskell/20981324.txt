data Suit = Hearts
      | Diamonds
      | Spades
      | Clubs
        deriving(Show, Eq)

type CardValue = Int

data Card = Ace   {cSuit :: Suit}
          | Two   {cSuit :: Suit}
          | Three {cSuit :: Suit}
          | Four  {cSuit :: Suit}
          | Five  {cSuit :: Suit}
          | Six   {cSuit :: Suit}
          | Seven {cSuit :: Suit}
          | Eight {cSuit :: Suit}
          | Nine  {cSuit :: Suit}
          | Ten   {cSuit :: Suit}
          | Jack  {cSuit :: Suit}
          | Queen {cSuit :: Suit}
          | King  {cSuit :: Suit}
            deriving(Show, Eq)

type Hand = [Card]
type Deck = [Card]

cardValue :: Card -> Int
cardValue card =
      | card.ValueConstructorName == Ace   = 11
      | card.ValueConstructorName == Seven = 10
      | otherwise                          = 0

