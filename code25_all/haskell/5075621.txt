newtype Procedure a = { runProcedure :: ? }

type ID = Int
data Record = { ... }
type ProcedureState = Map ID Record

-- Declare the current procedure invalid and bail (similar to some definitions of fail for class Monad)
abort :: Procedure ()
-- Get a record from the shared state; abort if the record does not exist.
retrieve :: ID -> Procedure Record
-- Store (or overwrite) a record in the shared state.
store :: ID -> Record -> Procedure ()

Map.lookup
<|>
orElse
State
Maybe
-- Which to choose?
type Procedure a = StateT ProcedureState Maybe a
type Procedure a = MaybeT (State ProcedureState) a

Maybe
State
runMaybeT
runStateT
Maybe (ProcedureState, a)
