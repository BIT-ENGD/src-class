import Data.Char
import Data.Maybe
import Control.Monad
import Control.Applicative

testA :: [Int] -> Maybe Int -> Maybe Int
testA [] _       = Nothing
testA _  Nothing = Nothing
testA (x:xs) v = case x of
  1         -> (+) <$> v <*> return x
  otherwise -> testA xs v

testB :: (MonadPlus m, Applicative m) => [Int] -> m Int -> m Int
testB [] _     = mzero
testB _  mzero = mzero
testB (x:xs) v = case x of
  1         -> (+) <$> v <*> return x
  otherwise -> testB xs v

main = do
  let xpto = testA [1,2,3,1,5] (Just 5)
  print xpto
  let ypto = testB [1,2,3,1,5] (Just 5)
  print ypto

Pattern match(es) are overlapped
In an equation for `testB': testB (x : xs) v = ..

Just 6 (correct)
Just 5 (incorrect)

