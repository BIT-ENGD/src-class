data Expr = Con Value
          | And Expr Expr

data Value = IntValue  Int
           | BoolValue Bool

est :: Expr -> Val
est (Con v) = v
est (And x y) = 
  case (est x, est y) of
    (BoolValue bool1, BoolValue bool2) -> BoolValue $ bool1 && bool2
    _                    -> error "And: expected Boolean arguments"

Expr
data Expr e where
  Con :: Val -> Expr Val
  And :: Expr e -> Expr e -> Expr e

est :: Expr e -> e
est _ = -- implement this

