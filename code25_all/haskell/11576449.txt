type Runtime a = {- More or less a StateT on top of an Either monad -}

-- The list of strings in Fn is a bunch of parameter names, the values of
-- which are pushed into the state of the runtime before executing the actual
-- function expr
data Expr = Num Int
          | Str T.Text
          | Fn [T.Text] (Runtime Expr)
          | {- Bunch of other constructors -}

eval :: Expr -> Runtime Expr
parseExp :: Parser Expr

Fn
Expr
Lift
Data
Typeable
Expr
dataToExpQ
Runtime Expr
instance Lift Expr where
  lift (Fn ps e) = [| Fn ps ...? |]

Expr
Data
instance Data (StateT (...) (Either ...) Expr) where
  -- Something

Either
