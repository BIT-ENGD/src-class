a -> b
(->) a b
(->)
a
b
Functor
Applicative
instance Functor ((->) a) where
  fmap = (.)


instance Applicative ((->) a) where
  pure = const
  (<*>) f g x = f x (g x)

fmap (+1) (*2) 3
(+1) . (*2) $ 3
3*2+1
7
(+1)
Int -> Int
(->) Int Int
Functor
Int
Maybe Int
Just 1
(->) Int Int
Int
((->) Int Int)
Int
Nothing
(->)
Lens
Arrow
Num a => a
Int
Foo a
Foo
a
