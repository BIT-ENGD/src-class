Foo
{-# LANGUAGE TypeFamilies #-}

class Foo a where
    type Bar a
    foo :: a -> Bar a

Show
data Baz a = Baz (Bar a) deriving (Show)

Show
Bar a
No instance for (Show (Bar a))
  arising from the 'deriving' clause of a data type declaration

FlexibleContexts
UndecidableInstances
Show
{-# LANGUAGE FlexibleContexts, UndecidableInstances #-}

data Baz a = Bar a

instance (Show a, Show (Bar a)) => Show (Baz a) where
    showsPrec _ (Baz x) = showString "Baz " . shows x

Baz
