example           :: [Char] -> [Char]
example myString  = ...................
                    where
                      pat        = "something"
                      returnList = myString =~ pat :: [(MatchOffset,MatchLength)]

myString =~ pat :: [(MatchOffset,MatchLength)]
No instance for (RegexContext
                   Regex [Char] [(MatchOffset, MatchLength)])
  arising from a use of `=~'
Possible fix:
  add an instance declaration for
  (RegexContext Regex [Char] [(MatchOffset, MatchLength)])
In the expression: myString =~ pat :: [(MatchOffset, MatchLength)]
In an equation for `returnList':
    returnList = myString =~ pat :: [(MatchOffset, MatchLength)]
In an equation for `example':
    example myString
      = ....................
      where
          pat = "something"
          returnList = myString =~ pat :: [(MatchOffset, MatchLength)]

