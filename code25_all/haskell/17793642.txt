data type
G
_repr :: Data.Graph.Inductive.Gr String String
Gr
LNode a
(Int, a)
add
addx
Data.Graph.Inductive.newNodes
addx
addx :: String -> G -> Int
G
lens :: (a -> c) -> (a -> d -> b) -> Lens a b c d
c
d
b
import qualified Data.Graph.Inductive     as DG

data G = G { _repr :: DG.Gr String String, _name::String} deriving ( Show )

empty :: G
empty = G DG.empty ""

add :: DG.LNode String -> G -> G
add node g = g{_repr = DG.insNode node $ _repr g}

-- is it possible to define it?
addx :: String -> G -> Int
addx name g = undefined

main :: IO ()
main = do
    let g = add (1, "test2")
          $ add (0, "test1")
          $ empty

        n1 = addx "test2" g
        g2 = DG.insEdge(n1,0)
           $ DG.insEdge(0,1)

    print $ g

