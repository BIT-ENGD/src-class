 data NestedList a=Elem a | List [NestedList a] deriving Show

 append::NestedList a->NestedList a->Either String (NestedList a)
 append (Elem x) (Elem y) = Right $ List [Elem x, Elem y]
 append (_) (Elem _)=Left "Elements are not allowed"
 append (Elem _) (_)=Left "Elements are not allowed"
 append (List a) (List b)=List(a++b)`

Either String (NestedList a)'
                with actual type
List'
    In the expression: List (a ++ b)
    In an equation for
data NestedList a=Elem a | List [NestedList a]
NestedList
Elem
List
of NestedList
 append::NestedList a->NestedList a->Either String (NestedList a)

String
NestedList
List(a++b)
List
flatten ::NestedList a->[a]
flatten (Elem x)=[x]
flatten (List(x:xs))=flatten(x)++flatten(List xs)
--flatten NestedList (x:xs)=flatten(x)++flatten(List xs)
flatten(List [])=[]

NestedList
flatten
(List(x:xs))
List(x:xs)
List
