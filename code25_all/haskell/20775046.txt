minusx :: Piece -> [Piece] -> Bool
minusx _ [] = False
minusx (a,b,(x,y)) ((w,v,(x1,y1)):ts) = let xm = show (rInt x-1)
                                    in if (xm == x1 && y == y1 ) then True
                                       else minusx (a,b,(x,y)) ts

minusy :: Piece -> [Piece] -> Bool
minusy _ [] = False
minusy (a,b,(x,y)) ((w,v,(x1,y1)):ts) = let ym = show (rInt y-1)
                                    in if (x == x1 && ym == y1 ) then True
                                       else minusx (a,b,(x,y)) ts

possibleplay :: Piece -> WithdrawPiece -> [Piece]    
possibleplay ("B","N",(x,y)) "E" = [("E","N",(x-1,y-1)),("E","S",(x-1,y-1))]

if minusx == False then possibleplayX bla bla bla

type Piece = (String,String,(String,String))
type WithdrawPiece = String

