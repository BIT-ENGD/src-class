relations :: [(A, B)]
instance Monoid A
instance Monoid B

A
B
A
B
mappend
B
A
mappend
A
B
Ord
Hashable
A
HashSet
B
Vector
let s = size (mappend a b); s >= size a; s >= size b
a, b :: B; mappend a b /= mappend b a <=> a, b not mempty; a > b => (mappend a c) > b
<a, b>
Set.fromList [a, b]
[(<1>, [a]), (<4>, [d]), (<2>, [b]), (<5>, [e]), (<1>, [b]), (<2>, [a]), (<3>, [c])]
-- Merge `A`s for equal `B`s
[(<1,2>, [a]), (<4>, [d]), (<1,2> [b]), (<5>, [e]), (<3>, [c])]
-- Merge `B`s for equal `A`s
[(<1,2>, [a, b]), (<4>, [d]), (<5>, [e]), (<3>, [c])]
-- All values are distinct, so we're done.

