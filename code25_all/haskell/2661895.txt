newtype Runtime a = R { 
  unR :: State EInfo a
} deriving (Monad)

GeneralizedNewtypeDeriving
newtype RuntimeT m a = RuntimeT {
  runRuntimeT :: m (Runtime a)
} 

instance (Monad m) => Monad (RuntimeT m) where
    return a = RuntimeT $ (return . return) a
    x >>= f =  runRuntimeT x >>= id >>= f

>>=
m
runRuntimeT x >>=
Runtime a
id >>=
a
f :: (Monad m) => a -> RuntimeT m b
f
Core.hs:34:4:
    Occurs check: cannot construct the infinite type: m = RuntimeT m
    When generalising the type(s) for `>>='
    In the instance declaration for `Monad (RuntimeT m)'
Failed, modules loaded: none.

