iterate
import Control.Monad.State

example :: State Int [[String]]

step :: [String] -> State Int [String]
step l = do
         currentState <- get
         let result = if (currentState == 1)
                          then "foo":l
                          else "bar":l
         put (currentState + 1)
         return result

example = do
          sequence $ take 3 . iterate (>>= step) $ return []

evalState example 1

[[],["foo"],["bar","bar"]]

iterate
step
step ["foo"]
["bar", "bar"]
step
iterate
iterate
example2 = do
           firstResult <- step []
           secondResult <- step firstResult
           return $ [[], firstResult, secondResult]

evalState example2 1

[[],["foo"],["bar","foo"]]

example2
iterate
iterate
iterate
iterate' f x = x : rest
               where previous = f x
                     rest = previous `seq` iterate f previous

