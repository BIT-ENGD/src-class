data Seq a = Nil | Cons a (Seq (a,a))

type tree = Leaf of int | Node of int * tree * tree;; 

let l = Leaf 3;; 

let a = Node (1, l, l);; 

let a = Node (1, a, l);; 

let a = Node (1, a, l);; 

let a = Node (1, a, l);; 

let a = Node (1, a, l);; 

let rec value tree = match tree with 
| Leaf x -> x 
| Node (v, x, y) -> v + (value x) + (value y);; 

let rec len tree = match tree with 
| Leaf x -> 1 
| Node (v, x, y) -> 1 + (len x) + (len y);; 

value a;; 
len a;; 



# #use 
"1.ml";; 
type tree = Leaf of int | Node of int * tree * tree 
val l : tree = Leaf 3 
val a : tree = Node (1, Leaf 3, Leaf 3) 
val a : tree = Node (1, Node (1, Leaf 3, Leaf 3), Leaf 3) 
val a : tree = Node (1, Node (1, Node (1, Leaf 3, Leaf 3), Leaf 3), Leaf 3) 
val a : tree = 
Node (1, Node (1, Node (1, Node (1, Leaf 3, Leaf 3), Leaf 3), Leaf 3), 
Leaf 3) 
val a : tree = 
Node (1, 
Node (1, Node (1, Node (1, Node (1, Leaf 3, Leaf 3), Leaf 3), Leaf 3), 
Leaf 3), 
Leaf 3) 
val value : tree -> int = <fun> 
val len : tree -> int = <fun> 
- : int = 23 
- : int = 11

