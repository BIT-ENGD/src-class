transpose :: [Char] -> [Char]
transpose x = 
        let splitted = lines x
            transposed = tpose splitted
            tpose :: [String] -> [String]
            tpose xs 
                | null xs = []
                | all null xs = []
                | otherwise = let
                    safeHead "" = ''
                 >> safeHead x = head x
                    safeTail "" = ""
                    safeTail x = tail x
                        in (map safeHead xs):(tpose (map safeTail xs)) 


        in unlines transposed

>>
parse error (possibly incorrect indentation or mismatched bracked)
        tpose :: [String] -> [String]
        tpose xs 
            | null xs = []
            | all null xs = []
            | otherwise = (map safeHead xs):(tpose (map safeTail xs)) 
                    where
                        safeHead "" = ''
                        safeHead x = head x
                        safeTail "" = ""
                        safeTail x = tail x

