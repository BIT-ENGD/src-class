data Hybridization = SP | SP2 | SP3 deriving(Eq,Ord,Read,Show)
data AtomProperty = AtomProperty {                                
                                valence' :: Int,
                                lonePairs' :: Int,
                                hybridization' :: [(Int,Hybridization)],    {--Int is an order --}                              
                                electronDonated' :: [(Hybridization,Int)]   
                            } deriving(Read)

atomPropMap = fromList (read $ "[(\"C\",(4,0,[(1,SP3),(2,SP2),(1,SP)],[(SP2,1)]))," ++
                "(\"H\",(1,0,[],[]))," ++
                "(\"N\",(3,1,[(1,SP3),(2,SP2)],[(SP3,2),(SP2,1)]))," ++
                "(\"O\",(2,2,[(2,SP2)],[(SP2,2)])),"  ++
                "(\"S\",(2,2,[(2,SP2)],[]))," ++
                "(\"F\",(1,3,[],[]))," ++
                "(\"Cl\",(1,3,[],[]))," ++
                "(\"Br\",(1,3,[],[]))," ++
                "(\"I\",(1,3,[],[]))]" :: [(String,(AtomProperty))]) 

*** Exception: Prelude.read: no parse

atomPropMap = fromList (read $ "[(\"C\",(4,0,[(1,SP3),(2,SP2),(1,SP)],[(SP2,1)]))," ++
                    "(\"H\",(1,0,[],[]))," ++
                    "(\"N\",(3,1,[(1,SP3),(2,SP2)],[(SP3,2),(SP2,1)]))," ++
                    "(\"O\",(2,2,[(2,SP2)],[(SP2,2)])),"  ++
                    "(\"S\",(2,2,[(2,SP2)],[]))," ++
                    "(\"F\",(1,3,[],[]))," ++
                    "(\"Cl\",(1,3,[],[]))," ++
                    "(\"Br\",(1,3,[],[]))," ++
                    "(\"I\",(1,3,[],[]))]" :: [(String,(Int,Int,[(Int,Hybridization)],[(Hybridization,Int)]))])

fromList [("Br",(1,3,[],[])),("C",(4,0,[(1,SP3),(2,SP2),(1,SP)],[(SP2,1)])),("Cl",(1,3,[],[])),("F",(1,3,[],[])),("H",(1,0,[],[])),("I",(1,3,[],[])),("N",(3,1,[(1,SP3),(2,SP2)],[(SP3,2),(SP2,1)])),("O",(2,2,[(2,SP2)],[(SP2,2)])),("S",(2,2,[(2,SP2)],[]))]

AtomProperty
(Int,Int,[(Int,Hybridization)],[(Hybridization,Int)])
