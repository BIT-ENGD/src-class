{-# LANGUAGE ExistentialQuantification,
             TemplateHaskell,
             BangPatterns,
             RecursiveDo,
             GeneralizedNewtypeDeriving,
             MagicHash #-}
module Game
( Game (..)
) where
import Entity
import Util
import GUtil
import Resources
import Control.Lens
import Control.Monad.State.Lazy
import Graphics.Rendering.OpenGL hiding (get)
import Graphics.UI.GLUT hiding (get)
import Data.IORef
import qualified System.IO.Unsafe --I'm so so sorry, it's to initialize some global references since the callbacks don't have parameters

data Game = Game
          { _root :: Entity
          , _resources :: [Resource]
          }
$(makeLenses ''Game) 

gameRef :: IORef Game
gameRef = System.IO.Unsafe.unsafePerformIO (newIORef $ (Game (Entity ENull EDataNull []) []))

main :: IO ()
main = do
    (progname, _) <- getArgsAndInitialize
    createWindow "Hello World"
    idleCallback $= doUpdateGame
    displayCallback $= display
    reshapeCallback $= Just reshape
    mainLoop
reshape s@(Size w h) = do
    viewport $= (Position 0 0, s)
    postRedisplay Nothing

display :: IO ()
display = do
    clear [ ColorBuffer ]
    flush

doUpdateGame :: Maybe (IO ())
doUpdateGame = Just $ do
                modifyIORef gameRef (snd . runState updateGame)
updateGame :: State Game ()
updateGame = do 
                return ()

