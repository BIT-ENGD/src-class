f :: (Num a) => a -> [a] -> [a]
f c xs = map (c*) xs

c
xs
c
Num
data Foo = Scalar c
         | Vec Bool v -- the bool indicates which domain v is in

instance Num Foo where
    (*) (Scalar c) = \x -> case x of
                         Scalar d -> Scalar (c*d)
                         Vec b v-> Vec b $ map (c*) v
    (*) v1 = let Vec True v = fft v1
             in \x -> case x of
                    Scalar d -> Vec True $ map (c*) v
                    v2 -> Vec True $ zipWith (*) v (fft v2)

f
Num
c=Vec False v
f
g :: Foo -> [Foo] -> [Foo]
g c xs = let c' = fft c
         in map (c'*) xs

g
fft c
f
(*)
f
(*)
Num
f
(*)
(*)
map (*c) xs

(map (c*) xs))
(*c)
(*)
(*c)
(c*)
(c*)
c
*
(*c)
c
*
*
