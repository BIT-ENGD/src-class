{-# LANGUAGE GADTs #-}
data Val where
  Val :: Eq a => a -> Val

l = [Val 5, Val True, Val "Hello!"]

Eq
instance Eq Val where
  (Val x) == (Val y) = x == y -- type error

Could not deduce (a1 ~ a)
x
y
Data.Typeable
data Val2 where
  Val2 :: (Eq a, Typeable a) => a -> Val2

instance Eq Val2 where
  (Val2 x) == (Val2 y) = fromMaybe False $ (==) x <$> cast y

x
y
Eq
False
nonsense = Val2 True == Val2 "Hello"
nonsense
sensible = Val2 True == Val2 False
False
