f
Prelude> applyTwice :: (a -> a) -> a -> a
Prelude> let applyTwice f x = f (f x)

Prelude> applyTwice (`subtract` 3) 10
Output: 10

Prelude> applyTwice (3 `subtract`) 10
Output: 4

subtract
applyTwice (`subtract` 3) 10
10 `subtract` 3 `subtract` 3

4
10
applyTwice (3 `subtract`) 10
4
10
