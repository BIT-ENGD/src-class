Dig ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
 Int ::= Dig | Dig Int
 Var ::= a | b | ... z | A | B | C | ... | Z
 Expr ::= Int | - Expr | + Expr Expr | * Expr Expr | Var | let Var = Expr in Expr
* + -
parse :: String -> AST
data AST = Leaf Int | Sum AST AST | Min AST | ...
tokens::String -> [String]
ast::[String] -> (AST,[String])
printE: AST -> String
printE(parse "* 5 5")
"5*5"
"(5*5)"
evali :: AST -> Int
