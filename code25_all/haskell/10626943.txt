+++
[x, y, z]
(+++) :: (Num a) => [a] -> [a] -> [a]
(+++) = zipWith (+)

[x, y]
(x, y, z)
type Triple a = (a, a, a)

merge :: (a -> b -> c) -> Triple a -> Triple b -> Triple c
merge f (a, b, c) (x, y, z) = (f a x, f b y, f c z)

(+++) :: (Num a) => Triple a -> Triple a -> Triple a
(+++) = merge (+)

zipWith
z
[x, y, 0]
(x, y, z)
