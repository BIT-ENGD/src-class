connection
IO Connection
{-# LANGUAGE OverloadedStrings #-}

import Database.MySQL.Simple

-- This returns `IO Connection'
connection :: Connection
connection = do
             c <- connect defaultConnectInfo
                          { connectPassword = "password",
                            connectDatabase = "database" }
             return c
-- Possibly need to do something to `c', but don't know what

first_table :: IO String
first_table = do
              [Only i] <- query_ connection "show tables"
              return i

test_query :: IO Int
test_query = do
             [Only i] <- query_ connection "select 2 + 2"
             return i

{-# LANGUAGE OverloadedStrings #-}

import Database.MySQL.Simple
-- I need, instead of this function something that only connects once to the databse.
connection :: IO Connection
connection = do
             c <- connect defaultConnectInfo
                          { connectPassword = "password",
                            connectDatabase = "database" }
             return c

first_table :: IO String
first_table = do
              c <- connection
              [Only i] <- query_ c "show tables"
              return i

test_query :: IO Int
test_query = do
             c <- connection
             [Only i] <- query_ c "select 2 + 2"
             return i

connection
public Connection getConnection() {
    if (connection == null) connection = /* JDBC does it's dirty job 
                             and creates connection handle */
    return connection;
}

