Foo
gen :: Int -> [Foo]
Foo
data FooTest = FooTest Int

instance Foo FooTest where
  gen n = replicate n (FooTest 0)

Bar
bar :: Bar -> IO ()
Foo
Bar
Bar
class Foo f where
  gen :: Int -> [f]

class Bar b where
  bar :: b -> IO ()

instance Bar Foo where -- obviously that doesn’t work
  bar _ = putStrLn "bar through any Foo instance"

instance (Foo f) => Bar f where -- this needs the FlexibleInstance GHC extension first, then it still throws shit saying that the constraint is not smaller that I don’t shit
  bar _ = putStrLn "bar through any Foo instance"

