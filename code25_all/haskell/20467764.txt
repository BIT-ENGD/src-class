timeFetch :: Pipe -> UUID.UUID -> IO ()
timeFetch pipe uuid' = do
  lrResult <- access pipe master "MyDB" $ (findOne (select ["uid" =: ["$in" =: [(uuidToBUUID uuid')]]] "uidCollection") :: Action IO (Maybe Document))
  case lrResult of
    Right _ -> do
      printCrntTm "Right has result"
      timeFetch pipe uuid'
    Left _  -> printCrntTm "Left err"

printCrntTm
uuidToBUUID
timeFetch
2013-12-09 09:35:52.307008 UTC Right has result
2013-12-09 09:35:52.348027 UTC Right has result
2013-12-09 09:35:52.389047 UTC Right has result
2013-12-09 09:35:52.430041 UTC Right has result
2013-12-09 09:35:52.471031 UTC Right has result
2013-12-09 09:35:52.512061 UTC Right has result
2013-12-09 09:35:52.553043 UTC Right has result

2013-12-09 09:36:38.109144 UTC Right has result
2013-12-09 09:36:38.110297 UTC Right has result
2013-12-09 09:36:38.111248 UTC Right has result
2013-12-09 09:36:38.112398 UTC Right has result
2013-12-09 09:36:38.113185 UTC Right has result
2013-12-09 09:36:38.114248 UTC Right has result

*** Exception: thread blocked indefinitely in an MVar operation
newCursor :: (MonadIO m, MonadBaseControl IO m) => Database -> Collection -> BatchSize -> DelayedBatch -> Action m Cursor
-- ^ Create new cursor. If you don't read all results then close it. Cursor will be closed automatically when all results are read from it or when eventually garbage collected.
newCursor db col batchSize dBatch = do
    var <- newMVar dBatch
    let cursor = Cursor (db <.> col) batchSize var
    mkWeakMVar var (closeCursor cursor)
    return cursor
#if !MIN_VERSION_base(4,6,0)
  where mkWeakMVar = addMVarFinalizer
#endif

base
Database.MongoDB
