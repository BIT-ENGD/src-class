import Foreign

data FullData type1 type2 = FullData {first::type1, second::type2}

instance (Storable type1, Storable type2)=>Storable (FullData type1 type2) where
    sizeOf _ = sizeOf (undefined::type1) + sizeOf (undefined::type2)
    alignment _ = 0 --I am just setting this to zero for testing....

main = putStrLn $ show $ sizeOf (undefined::FullData Int Char)

storableTest.hs:13:44:
Could not deduce (Storable a1) arising from a use of `sizeOf'
from the context (Storable type1, Storable type2)
  bound by the instance declaration at storableTest.hs:12:10-74
The type variable `a1' is ambiguous
Possible fix: add a type signature that fixes these type variable(s)
Note: there are several potential instances:
  instance (Storable type1, Storable type2) =>
           Storable (FullData type1 type2)
    -- Defined at storableTest.hs:12:10
  instance Storable Bool -- Defined in `Foreign.Storable'
  instance Storable Char -- Defined in `Foreign.Storable'
  ...plus 16 others
In the second argument of `(+)', namely
  `sizeOf (undefined :: type2)'
In the expression:
  sizeOf (undefined :: type1) + sizeOf (undefined :: type2)
In an equation for `sizeOf':
    sizeOf _
      = sizeOf (undefined :: type1) + sizeOf (undefined :: type2)

