import Text.ParserCombinators.ReadP

-- slower
operators = [("Equality",'='),("Sum",'+'), ("Product",'*'), ("Division",'/'), ("Power",'^')]
-- faster
-- ~ operators = [("Sum",'+'), ("Product",'*'), ("Power",'^')]

skipWhitespace = do 
                 many (choice (map char [' ','\n']))
                 return ()

brackets p = do 
             skipWhitespace
             char '('
             r <- p
             skipWhitespace
             char ')'
             return r

data Tree op = Apply (Tree op) (Tree op) | Branch op (Tree op) (Tree op) | Leaf String deriving Show

leaf = chainl1 (brackets tree
              +++ do
                     skipWhitespace
                     s <- many1 (choice (map char "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-[]" ))
                     return (Leaf s))
             (return Apply)
tree = foldr (\(op,name) p ->
             let this = p +++ do 
                                 a <- p +++ brackets tree
                                 skipWhitespace
                                 char name
                                 b <- this
                                 return (Branch op a b)
              in this)
           (leaf +++ brackets tree)
           operators


readA str = fst $ last $ readP_to_S tree str 


main = do loop

loop = do 
    -- ~ try this
    -- ~ (a+b+(c*d))
    str <- getLine
    print $ last $ readP_to_S tree str
    loop

