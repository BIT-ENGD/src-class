data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)
if dataOfNode == ')'
dataOfNode == ')'
buildTreeHelper :: (Ord a) => String -> a -> Int -> String -> Tree a -> Tree a
buildTreeHelper str blank turn path t
 | str == [] = t
 | front == '(' = buildTreeHelper (tail str) blank 1 ('L':path) (expandTree (reverse path) blank t)
 | front == ')' = buildTreeHelper (tail str) blank 2 (tail path) t
 | turn == 1 = buildTreeHelper (tail str) blank 2 (tail path) (expandTree (reverse path) front t)
 | turn == 2 = buildTreeHelper (tail str) blank 3 ('R':path) (expandTree (reverse path) front t)
 | turn == 3 = buildTreeHelper (tail str) blank 2 (tail path) (expandTree (reverse path) front t)
 where 
  front = head str

type a
type char
