data DataDirectory = 
  DataDirectory { _dataEntryList ::  [DataEntry] } deriving (Show, Eq, Ord)

data DataEntry = DataEntry
  { _virtAddr :: Word32            -- VirtualAddress ^ relative virtual address of the table
  , _size :: Word32                -- Size ^ size of the table in bytes
  } deriving (Show, Eq, Ord)

parseDataDir :: Word32 -> Get DataDirectory
parseDataDir n = do
  -- PE Files have a maximum of 16 sections in the DataDir
  -- most windows tools just set this to 16 by default
  -- instead of hard-coding 16 sections we will verify
  let nDirs = fromIntegral (min mAX_NUMBEROF_DIRECTORY_ENTRIES n) :: Int
  dd_dentries <- parseDataEntry nDirs

  return $ DataDirectory dd_dentries

parseDataEntry :: Int -> [Get DataEntry] -- Not exactly sure on return type here
parseDataEntry n = 
  Prelude.replicate n $ getWord32le >>= \vAddr -> getWord32le >>= \ddSize -> return $ DataEntry vAddr ddSize

