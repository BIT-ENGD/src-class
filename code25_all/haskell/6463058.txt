fmap
join
return
>>=
instance Monad []
return x = repeat x

ap = zapp
ap
ap :: Monad m => m (s -> t) -> m s -> m t
ap mf ms = do
    f <- mf
    s <- ms
    return (f s)

ap mf ms = mf >>= (\f -> (ms >>= \s -> return (f s)))

zapp
zapp (f:fs) (s:ss) = f s : zapp fs ss

mf :: m (a -> b)
[(a -> b)]
>>=
(f:fs) >>= mu

mu = (\f -> (ms >>= \s -> return (f s)))
fs >>= mu
ms
ap
fmap
join
fmap = map
join
\x -> zipWith ((!!) . unL) x [0..]
newtype L a = L [a] deriving (Eq, Show, Ord)
unL (L lst) = lst
liftL :: ([a] -> [b]) -> L a -> L b
liftL f = L . f . unL

joinL :: L (L a) -> L a
joinL = liftL $ \x -> zipWith ((!!) . unL) x [0..]

instance Functor L where
    fmap f = liftL (map f)

instance Monad L where
    return x = L $ repeat x
    m >>= g = joinL (fmap g m)

