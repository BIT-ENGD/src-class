class A  where
    foo ::  () ->  ()

instance A IO where
    foo x = do
        print "prefix"
        x
        print "suffix"

instance A  => A (MyMonadTransformerT γ )

foo
foo x = lift (foo (unlift x))
unlift
t () -> t ()
t
class Monad  => A'  where
    foo' :: Monad t =>
        (forall z .  z -> t z) -- lifting function
        -> t ()
        -> t ()
    foo ::  () ->  ()
    foo = foo' id

instance A' IO where
    foo' lift x = do
        lift (print "prefix")
        x
        lift (print "suffix")

instance A'  => A' (StateT γ ) where
    foo' lift' x = foo' (lift' . lift) x

computation :: Num a => StateT a IO ()
computation = do
    foo (put 1 >> lift (print "middle"))
    v <- get
    lift $ print ("value", v)

run_computation :: Num a => IO a
run_computation = execStateT computation 0

