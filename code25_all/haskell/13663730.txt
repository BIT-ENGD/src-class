(chr (fromEnum $ getMem state))
    '.' -> do hPutChar stdout (chr (fromEnum $ getMem state))
            hFlush stdout
            return state { prog_pointer = prog_pointer state}

The function `hPutChar' is applied to six arguments,
but its type `Handle -> Char -> IO ()' has only two

In a stmt of a 'do' block:
  hPutChar
    stdout
    (chr (fromEnum $ getMem state))
    hFlush
    stdout
    return
    (state {prog_pointer = prog_pointer state})

iterateBF :: BFState -> IO BFState
iterateBF state = case (program state !! prog_pointer state) of
    --some more cases here--
    '.' -> do hPutChar stdout (chr (fromEnum $ getMem state))
            hFlush stdout
            return state { prog_pointer = prog_pointer state}

iterateBF :: BFState -> IO BFState
iterateBF state = case (program state !! prog_pointer state) of
    --some more cases here--
    '.' -> do hPutChar stdout (chr (fromEnum $ getMem state))
           hFlush stdout
           return state { prog_pointer = prog_pointer state}

parse error on input 'hFlush'
