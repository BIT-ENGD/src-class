class Number a where
compareN :: [a] -> [(String,String,Int)]

type Name = String
type Nr = Int
data N = Nums Name Nr

compareNum :: N -> N -> Int
compareNum (Nums a b) (Nums c d) = abs(b-d) 

nameOfNum :: N -> String
nameOfNum (Nums a b) = a 

instance Number N where
    compareN [] = []
    compareN [nr] = [(a,b,c) | a <- [nameOfNum nr], b <- [nameOfNum nr], c <- [compareNum nr nr]]

    compareN [(Nums "one" 1),(Nums "two" 2)]

[("one","one",0)，("one","two",1)，("two","one",1)，("two","two",0)]

compareN (nr:nrs) = [(a,b,c) | a <- [nameOfNum nr], b <- [nameOfNum nr], c <- [compareNum nr nr] : (compareN nrs)]

