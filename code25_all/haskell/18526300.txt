data Tree a = EmptyTree
            | Node a 
            (Tree a) (Tree a) deriving (Show,Eq)

treeinsert :: (Ord a) => a -> Tree a -> Tree a
treeinsert x EmptyTree = leaf x

treeinsert x (Node a left right)
         | x == a = Node x left right
         | x < a  = Node a (treeinsert x left) right
         | x > a = Node a left (treeinsert x right)

    ghci> let nums = [8,6,4,1,7,3,5]  
    ghci> let numsTree = foldr treeInsert EmptyTree nums  
    ghci> numsTree  
Node 5 (Node 3 (Node 1 EmptyTree EmptyTree) (Node 4 EmptyTree EmptyTree)) (Node 7 (Node 6 EmptyTree EmptyTree) (Node 8 EmptyTree EmptyTree))

:type numsTree
numsTree :: Tree Integer

