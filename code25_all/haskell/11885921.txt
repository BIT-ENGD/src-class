Data.Tree
Parser ASTNode
Parser (Tree ASTNode)
Data.Tree
import Text.ParserCombinators.Parsec


data ASTNode 
  = Application ASTNode [ASTNode]
  | Symbol String
  | Number Float
  deriving (Show)


int :: Parser ASTNode
int = many1 digit >>= (return . Number . read)


symbol :: Parser ASTNode
symbol = many1 (oneOf ['a'..'z']) >>= (return . Symbol)


whitespace :: Parser String
whitespace = many1 (oneOf " \t\n\r\f")


app :: Parser ASTNode
app =
  char '(' >>
  sepBy1 expr whitespace >>= (\(e:es) ->
  char ')' >>
  (return $ Application e es))


expr :: Parser ASTNode
expr =  symbol  <|>  int  <|>  app

ghci> parse expr "" "(a 12 (b 13))"
Right 
  (Application 
    (Symbol "a") 
    [Number 12.0, Application 
                    (Symbol "b") 
                    [Number 13.0]])

Data.Tree
import Text.ParserCombinators.Parsec
import Data.Tree


data ASTNode 
  = Application (Tree ASTNode)
  | Symbol String
  | Number Float
  deriving (Show)


int :: Parser (Tree ASTNode)
int = many1 digit >>= (\x -> return $ Node (Number $ read x) [])


symbol :: Parser (Tree ASTNode)
symbol = many1 (oneOf ['a' .. 'z']) >>= (\x -> return $ Node (Symbol x) [])


whitespace :: Parser String
whitespace = many1 (oneOf " \t\n\r\f")


app :: Parser (Tree ASTNode)
app =
  char '(' >>
  sepBy1 expr whitespace >>= (\(e:es) ->
  char ')' >>
  (return $ Node (Application e) es))


expr :: Parser (Tree ASTNode)
expr =  symbol  <|>  int  <|>  app

ghci> parse expr "" "(a 12 (b 13))"
Right
 (Node
   (Application 
     (Node (Symbol "a") []))
   [Node (Number 12.0) [],
    Node 
      (Application 
        (Node (Symbol "b") []))
      [Node (Number 13.0) []]])

