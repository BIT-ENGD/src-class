import Data.CSV.Enumerator
import qualified Data.Map as M
import Data.Either
import Control.Monad
...
csvMode = CSVS { csvSep = ';'
               , csvQuoteChar = Just '"'
               , csvOutputQuoteChar = Just '"'
               , csvOutputColSep = ';'
               }
...
updateCSV :: FilePath -> IO (Either SomeException Int)
updateCSV fn = do
  ...
  csv <- readCSVFile csvMode fn >>= return . (either (const []) (id :: [MapRow]->[MapRow]))
  hdr <- readCSVFile csvMode fn >>= return . head .(either (const []) (id :: [Row]->[Row]))
  ...
  -- reorder MapRow
  outMapRow=M.fromAscList $ map (\k -> (k, (M.!) (head csv) k)) hdr
  ...

