T Foo<T>(T x){ return x; }

int y = Foo<int>(3);

Foo :: forall T. T -> T

Foo(3)
Foo<int>(3)
f
forall T. T -> T
Q
f<Q>
Q -> Q
f
f
f<int> = (x => x+1)
f<T> = (x => x)

f<int>
int -> int
f<Q>
Q -> Q
f
forall T. T -> T
forall n in Integers: P(n)

forall n in Integers: P(n) == forall(Integers,P)

forall :: Set<T> -> (T -> bool) -> bool

forall(S,P) = P(S[0]) ∧ P(S[1]) ∧ P(S[2]) ...

exists(S,P) = P(S[0]) ∨ P(S[1]) ∨ P(S[2]) ...

forall(S,P) = P(S[0]) ∩ P(S[1]) ∩ P(S[2]) ...
exists(S,P) = P(S[0]) ∪ P(S[1]) ∪ P(S[2]) ...

forall, exists :: Set<T> -> (T -> Type) -> Type

Types
->
=>
forall(Types, t => (t -> t))

forall T:Type. T -> T
id :: forall T:Type. T -> T
id = (x => x)

id2 = id :: int -> int

id
int -> int
int -> int
id<int>
