test.h
int inc (int x);

test.c
#include "test.h"
int inc(int x) {return x + 1;}

Test.hc
{-# LANGUAGE ForeignFunctionInterface #-}
module Test (inc) where
import Foreign
import Foreign.C
foreign import ccall unsafe "test.h inc" c_inc :: CInt -> CInt
inc = fromIntegral . c_inc . fromIntegral
{-# INLINE c_inc #-}
{-# INLINE inc #-}

Main.hs
import System.Environment
import Test
main = do {args <- getArgs; putStrLn . show . inc . read . head $ args }

$ gcc -O2 -c test.c
$ ghc -O3 test.o Test.hs
$ ghc --make -O3 test.o Main
$ objdump -d Main > Main.as

Main.as
callq  <inc>
inc
