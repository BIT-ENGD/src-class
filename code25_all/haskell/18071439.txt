show
Tagged s b
instance Kit acc => Show (acc aenv a) where

Show
*->*->*
{-# LANGUAGE FlexibleContexts, OverlappingInstances, IncoherentInstances #-}

import Data.Array.Accelerate
import Data.Tagged

main :: (Show (Tagged Int Int)) => IO ()
main = let x = Tagged 3
   in print (x::Tagged Int Int)

    Overlapping instances for Show (Tagged * Int Int)
      arising from a use of `print'
    Matching instances:
      instance Show b => Show (Tagged k s b) -- Defined in `Data.Tagged'
      instance [overlap ok] accelerate-0.13.0.5:Data.Array.Accelerate.Trafo.Base.Kit
                          acc =>
                        Show (acc aenv a)
    -- Defined in `Data.Array.Accelerate.Pretty'

OverlappingInstances
IncoherentInstances
Show (Tagged k s b)
instance Show b => Show (Tagged s b) where

Tagged
Accelerate.Base.Kit
OverlappingInstances
IncoherentInstances
