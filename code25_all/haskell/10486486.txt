import qualified Data.Vector as V
import qualified Data.Vector.Mutable as MV
import Data.Binary


instance (Binary a) => Binary (V.Vector a) where
    put = vput
    get = vget

vput v = (put (V.length v)) >> (put `V.mapM_` v)

vget
V.create
vget :: (Binary a) => Get (V.Vector a)
vget = do
    size <- get
    vec <- liftM V.create $ do
        v <- (liftM MV.new) size
        forM_ [0..(size-1)] $ \i -> do
            val <- get
            (liftM3 MV.write) v i val
        return v -- This is line 22
    return vec

SerializeVector.hs:22:16:
    Couldn't match expected type `forall s. ST s (MV.MVector s a0)'
            with actual type `Get a10'

liftM
