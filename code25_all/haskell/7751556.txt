randomIs g n = fill g 0
  where
    v = enumFromN 0 n

    fill g i = when (i < n) $ do
            let (x,g') = randomR (i, n-1) g
            G.swap v i x
            fill g' (i+1)

G
Data.Vector.Generic.Mutable
v
Data.Vector Int
G.swap
Data.Vector.Generic
import qualified Data.Vector.Unboxed as UVect
import qualified Data.Vector.Unboxed.Mutable as UMVect
import qualified System.Random as R
import Control.Monad
import Control.Monad.ST

randomPermutation :: forall a. (R.RandomGen a) => a -> Int -> UVect.Vector Int
randomPermutation g n = runST newVect
    where
      newVect :: ST s (UVect.Vector Int)
      newVect = UVect.unsafeThaw (UVect.enumFromN 0 n) >>= \v ->
                fill v 0 g >>
                UVect.unsafeFreeze v

      fill x i gen = when (i < n) $
                     let (j, gen') = R.randomR (i, n-1) gen in
                     UMVect.unsafeSwap x i j >>
                     fill x (i+1) gen'

Data.Vector.Generic
ST
fill
UMVect.MVector (ST s (UVect.Vector Int)) Int -> Int -> a -> ST s ()

fill
randomPermutation
fill
