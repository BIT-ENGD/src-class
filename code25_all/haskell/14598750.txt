data Zero=Zero
data Succ n = Succ n
class Countable t where
      count :: t -> Int
instance Countable Zero where
      count Zero = 0

instance (Countable n) => Countable (Succ n) where
      count (Succ n) = 1 + count n

f
count (f n) = n
f::(Countable k)=> Int -> k
f 0 = Zero
f n = Succ $ f (n-1)

Data.HList
shuffle
n
n
l=1:"Hello":32:500
shuffle 1 l
1:32:500:"Hello"
shuffle0
shuffle 0
shuffle0 ::(HAppend rest (HCons fst HNil) l')=>HCons fst rest -> l'
shuffle0 (HCons fst rest) = hAppend rest (HCons fst HNil)

next
next (shuffle n) = shuffle (n+1)
next :: (forall l l'. l -> l') -> (forall e l l'.(HCons e l) -> (HCons e l'))
next f = \(HCons e l)-> HCons e  $ (f l) 

shuffle 0=shuffle0
shuffle n= next (shuffle (n-1))

HLength
