xs
mapM f xs
zipMapM f xs = fmap (zip xs) (mapM f xs)

zipMapM = liftM2 fmap zip . mapM

liftM2 :: Monad m   => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
fmap   :: Functor f => (a -> b) -> f a -> f b
zip    ::              [a] -> [b] -> [(a, b)]
mapM   :: Monad m   => (a -> m b) -> [a] -> m [b]

liftM2 :: Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
liftM2 fmap :: (Monad m, Functor f) => m (a -> b) -> m (f a) -> m (f b)

liftM2 fmap zip :: Functor f => ([a] -> f [b]) -> [a] -> f [(a, b)]

