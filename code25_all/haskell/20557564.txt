data Movie = Movie 
    { adult :: Bool, 
      backdrop_path :: Maybe String,
      id :: Int,
      original_title :: String,
      release_date :: String,
      poster_path :: Maybe String,
      popularity :: Int, 
      title :: String,
      vote_average :: Double,
      vote_count :: Int
    } deriving (Show)

data MovieList = MovieList {getMovies ::[Movie]} deriving (Show)

instance FromJSON Movie where
    parseJSON (Object v) = Movie <$>
                   (v .: "adult") <*>
                   (v .:? "backdrop_path") <*> -- Optional
                   (v .: "id") <*>
                   (v .: "original_title") <*>
                   (v .: "release_date") <*>
                   (v .:? "poster_path") <*> -- Optional
                   (v .: "popularity") <*>
                   (v .: "title") <*>
                   (v .: "vote_average") <*>
                   (v .: "vote_count")

instance FromJSON MovieList where
    parseJSON (Object o) = MovieList <$> o .: "results"
    parseJSON _          = mzero

movieAPIRequest :: String -> IO String
movieAPIRequest movieURI =
    do resp <- simpleHTTP request
       case resp of
         Left x -> return $ "Error connecting: " ++ show x
         Right r ->
             case rspCode r of
               (2,_,_) -> return $ rspBody r -- Request Fulfilled
               _ -> return $ show r -- Request Failed
    where request = Request {rqURI = uri, rqMethod = GET, rqHeaders = [], rqBody = ""}
          uri = fromJust $ parseURI movieURI

convertToByteString s = BS.pack s

main = do
    response <- movieAPIRequest url 
    decoded <- decode (convertToByteString response):: Maybe MovieList
    return $ decoded

movieAPIRequest
IO String
convertToByteString
decode
MovieDataType.hs:62:20:
    Couldn't match type `Maybe' with `IO'
    Expected type: IO MovieList
      Actual type: Maybe MovieList
    In a stmt of a 'do' block:
      decoded <- decode (convertToByteString response) :: Maybe MovieList
    In the expression:
      do { response <- movieAPIRequest url;
           decoded <- decode (convertToByteString response) ::
                        Maybe MovieList;
           return $ decoded }
    In an equation for `main':
        main
          = do { response <- movieAPIRequest url;
                 decoded <- decode (convertToByteString response) ::
                              Maybe MovieList;
                 return $ decoded }
Failed, modules loaded: none.

