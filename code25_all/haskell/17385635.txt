proc x -> f -< x + 1
arr (\x -> x + 1) >>> f
proc x -> g x -< ()
arr (\x -> ()) >>> g x
x
ArrowApply
app
proc x -> g x -<< ()
arr (\x -> (g x, ())) >>> app
accumHold
a -> SF (Event (a -> a)) a
accumHoldNoiseR :: (RandomGen g, Random a) => (a,a) -> g -> SF (Event (a -> a)) a
accumHoldNoiseR r g = proc f -> do
  n <- noiseR r g -< ()
  accumHold n -< f

n
SF
accumHold
accumHold' :: SF (a,Event (a -> a)) -> a
accumHold' = ...

ArrowApply
accumHoldNoiseR :: (RandomGen g, Random a) => (a,a) -> g -> SF (Event (a -> a)) a
accumHold' :: SF (a,Event (a -> a)) -> a
ArrowApply
SF
