data (Coord a) => Triangle a = Triangle{t0 :: a, t1 :: a, t2 :: a}

* -> *', but
*'
      In the class declaration for
class (Traversable p, Functor p, Foldable p, Applicative p) => Coord p where

getComponents :: Num a => p a -> [a]
getComponents = toList

fromComponents :: Num a => [a] -> p a

magSq :: Num a => p a -> a
magSq = Prelude.sum . map (\x -> x * x) . getComponents

dotProduct :: Num a => p a -> p a -> a
dotProduct a b = Prelude.sum $ zipWith (*) (getComponents a) (getComponents b)

