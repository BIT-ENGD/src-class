data Tree a = Node a (Tree a) (Tree a)
            | Empty
            deriving (Show)

(+)
(+) a b
Node (+) a (Node (+) Empty Empty) (Node a Empty Empty))  

 functionToTree :: (t1 -> t2) -> Tree a

functionToTree :: (a -> b) -> Tree a -> Tree b
                      (+) a 
                        /  \
                      (+)   a

f
a
b
c
                     f a b 
                      /   \
                    f a    b
                    /  \
                   f    a

data Li a = Cons a (Li a)
          | Empty
          deriving (Show, Eq, Order)

