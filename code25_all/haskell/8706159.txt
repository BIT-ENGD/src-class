Occurs check: cannot construct the infinite type: p0 = Maybe p0
    Expected type: PSQ.PSQ (t1, t2, (t0, [a0])) (Maybe p0)
      Actual type: PSQ.PSQ (t1, t2, (t0, [a0])) p0
    In the third argument of `PSQ.insert', namely `q'
    In the expression: PSQ.insert test' time q

time = Just (PSQ.lookup test time)
import Data.Time
import Data.Time.Clock.POSIX
import qualified Data.PSQueue as PSQ
import Data.Maybe
import Data.Label
import Control.Category
import Prelude hiding ((.))

test = ("192.168.1.1", 3455, (1234566, msgs))
msgs = ["aaa", "bbbb", "ccccc"]

second2 = lens (\(a,b) -> b)   (\b (a,_) -> (a,b))
third3  = lens (\(a,b,c) -> c) (\c (a,b,_) -> (a,b,c))
messages = second2 . third3

append x = modify messages (x :)

newRq = do
      time <- getPOSIXTime
      let q = PSQ.singleton test time
      return q

appendMsg a q = do
      let time = PSQ.lookup test q
      let test' = append a test
      let q' = PSQ.insert test' time q
      let q = PSQ.delete test q' 
      return q

--insertNewRec a q = do 
--     time <- getPOSIXTime
--     let q' = PSQ.insert a time q
--     return q

main :: IO()
main = do
     q <- newRq
     let q' = appendMsg "first" q
     print (q')

<<loop>>
appendMsg :: String -> PSQ.PSQ (String, Integer, (Integer, [String])) POSIXTime -> PSQ.
PSQ (String, Integer, (Integer, [String])) POSIXTime 
appendMsg a q = q
      where 
       Just time = PSQ.lookup test q
       test2 = append a test
       q' = PSQ.insert test2 time q
       q = PSQ.delete test q' 

