\n
\t
\NUL
let s = "Newline: \\n Tab: \\t"

escape :: String -> String
"Newline: \n Tab: \t"

readLitChar :: ReadS Char
escape2 [] = []
escape2 xs = case readLitChar xs of
    [] -> []
    [(a, b)] -> a : escape2 b

import Text.ParserCombinators.ReadP
import Text.Read.Lex

escape xs 
    | []      <- r = []
    | [(a,_)] <- r = a
    where r = readP_to_S (manyTill lexChar eof) xs 

