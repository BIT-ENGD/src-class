import System.Environment
import System.IO

fieldArg :: Int -> [String] -> String
fieldArg x a = if length a > 2
                then if x < 4 then a !! x else "field number is too high"
                else "field number is too low"

lineArg :: Int -> [String] -> String
lineArg x a
    | x > length a = "line number is too big"
    | x < 1        = "line number is too low"
    | otherwise    = a !! x

extrcta :: Int -> Int -> String -> String
extrcta x n = fieldArg x . words . lineArg n . lines


argList :: String -> [((Int, String), String -> String)]
argList n = let n1 = read n
            in [((1, n), extrcta 1 n1)
               ,((2, n), extrcta 2 n1)
               ,((3, n), extrcta 3 n1)
               ]


main :: IO ()
main = do
        args <- getArgs
        case args of
                   (path: opt1: opt2: _) -> case (read opt1, opt2) `lookup` argList opt2 of
                                                                                       Nothing -> putStrLn $ "Wrong argument " ++ opt1 ++ " or " ++ opt2
                                                                                       Just act -> withFile path ReadMode (\handle -> do
                                                                                                                                       contents <- hGetContents handle
                                                                                                                                       putStrLn $ act contents)
                   (path: _) -> withFile path ReadMode (\handle -> do
                                                                    contents <- hGetContents handle
                                                                    (print (length $ lines contents)))
                   _ -> putStrLn "Wrong number of argument"

