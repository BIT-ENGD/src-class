{-# LANGUAGE RecordWildCards, OverloadedStrings, PackageImports #-}

module Main where

import RODB
import ROOutput
import System.Environment
import Database.HDBC
import Network.Socket(withSocketsDo)
import Network.CGI
import Text.XHtml
import qualified "bytestring" Data.ByteString.Lazy.Char8 as LBS
import Data.Aeson

page :: Html
page = body << h1 << str

main = runCGI $ handleErrors cgiMain

cgiMain :: CGI CGIResult
cgiMain =
    do out <- getTopBrands 10 1
       setHeader "Content-type" "application/json"
       output $ renderHtml page out

getTopBrands :: Integer -> Integer -> IO [Char]
getTopBrands limit sorted =
    do let temp = 0
       dbh <- connect "127.0.0.1" "ReachOutPublicData" "root" "admin" "/tmp/mysql.sock"
       if sorted == 1
       then do brandlist <- getBrands dbh limit True
               json <- convPublicBrandEntrytoJSON brandlist
               return $ LBS.unpack json
       else do brandlist <- getBrands dbh limit False
               json <- convPublicBrandEntrytoJSON brandlist
               return $ LBS.unpack json

