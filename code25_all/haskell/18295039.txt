{-# LANGUAGE TypeFamilies, MultiParamTypeClasses, FlexibleInstances #-}

data Vec2 a = Vec2 (a,a) deriving (Show, Eq, Read)

class Vector a where
    (<+>) :: a -> a -> a

class VectorMul a b where
    type Result a b
    (<*>) :: a -> b -> Result a b

instance (Num a) => Vector (Vec2 a) where
    Vec2 (x1,y1) <+> Vec2 (x2,y2) = Vec2 (x1+x2, y1+y2)

instance (Num a) => VectorMul (Vec2 a) a where
    type Result (Vec2 a) a = (Vec2 a)
    Vec2 (x,y) <*> a = Vec2 (x*a, y*a)

works :: (Num a) => Vec2 a -> a -> Vec2 a
works a b = a <*> b

works
Vec2 (3,4) <*> 5
(Num xx)
works
