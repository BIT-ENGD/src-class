interface Accepter<T> {
    void accept(T t);
}

<T> T getFromDoubleAccepter(Accepter<Accepter<T>> acc){
    final List<T> l = new ArrayList<T>();
    acc.accept(new Accepter<T>(){

        @Override
        public void accept(T t) {
            l.add(t);
        }

    });
    return l.get(0); //Not being called? Exception!
}

callCC
getFromDoubleAccepter :: (forall b. (a -> b) -> b) -> a

(a -> b) -> b
a
Cont
ContT
RWS
Maybe
getFromDoubleAccepter f = f id
forall
a
b
getFromDoubleAccepter :: ((a -> ()) -> ()) -> a

getFunctionFromAccepter :: (((a -> b) -> b) -> b) -> a -> b

getFunctionFromAccepter f = \a -> f $ \x -> x a

exeMain = do
    print $ getFunctionFromAccepter (\f -> f (\x -> 10)) "Example 1" -- 10
    print $ getFunctionFromAccepter (\f -> 20) "Example 2" -- 20
    print $ getFunctionFromAccepter (\f -> 10 + f (\x -> 30)) "Example 3" --40, should be 30

30
40
type (a,b) = (a->b->())->()
fst
snd
