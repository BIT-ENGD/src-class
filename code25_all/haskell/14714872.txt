A
B
B
C
C
D
f0
f1
f2
f0 :: A -> [B]
f1 :: B -> [C]
f2 :: C -> [D]

f3
f3 :: A -> (A, [(B, [(C, [D])])])

f4 :: A -> (A, [B])
f4 = id &&& f0

[B]
[(B, [C])]
data A = A
data B = B
data C = C
data D = D

f0 :: A -> [B]
f0 = undefined

f1 :: B -> [C]
f1  = undefined

f2 :: C -> [D]
f2 = undefined

pairFun f = id &&& f

foo :: A -> (A, [(B, [C])])
foo = fmap (map (pairFun f1)) . pairFun f0

f2
foo = (fmap . map) ((fmap . map) (pairFun f2) . pairFun f1) . pairFun f0

