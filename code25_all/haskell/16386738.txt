let
img_list :: Netpbm.PPM -> [CUChar]
display_image :: Graphics.UI.Gtk.Image -> Netpbm.PPM -> IO ()
display_image canvas image_bitmap =
    let get_rgb_vector = Netpbm.pixelVectorToList . (\(Netpbm.PpmPixelDataRGB8 v) -> v) . Netpbm.ppmData
        vector_to_cuchar_list = map CUChar . concat . map (\(Netpbm.PpmPixelRGB8 r g b) -> r:g:b:[])
        img_list = vector_to_cuchar_list . get_rgb_vector
        len = length . img_list
        width = Netpbm.ppmWidth . Netpbm.ppmHeader
        height = Netpbm.ppmHeight . Netpbm.ppmHeader
    in do
    img_ptr <- mallocBytes (len image_bitmap)
    mapM_ (\(b, off) -> pokeByteOff img_ptr off (b :: CUChar)) (zip (img_list image_bitmap) [0,1..])
    pb <- pixbufNewFromData img_ptr ColorspaceRgb False 8 (width image_bitmap) (height image_bitmap) ((width image_bitmap) * 3)
    imageSetFromPixbuf canvas pb

Ptr CUChar
[Word8]
[Word8] -> Ptr CUChar
operation that generates a ByteString of pnm data ---> GtkImage

