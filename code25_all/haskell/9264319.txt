-- Local client state.  Actual game state is stored on the server
-- and is updated/synced separately.
data ClientState = […]

-- Keyboard state, mouse state, quadtree of clickables, list of
-- widgets.
data UIState = […]

uiCycle :: UIState -> ClientState -> IO ()
uiCycle uiState clientState = do
  event <- waitEvent
  let widget = findWidget uiState event
  let (uiState', clientStateAction, ioAction) =
        uiTransition widget event uiState clientState
  -- Update game state (execute game logic).
  let clientState' = clientStateAction clientState
  -- Redraw appropriate surfaces etc.
  ioAction
  uiCycle uiState' clientState'

data Widget =
  Widget { wtType          :: WidgetType
         , wtParent        :: Maybe Widget
         --, wtRelated       :: [Widget] -- Feels hacky.
         , wtBox           :: Rect
         , wtPosition      :: WidgetPosition
         , wtAnchors       :: [WidgetAnchor]
         , wtEventHandlers :: Map Event EventHandler
         , wtDisabled      :: Bool
         }

type EventHandler = (Event -> (UIState, ClientState) ->
                    (UIState, ClientState, IO ()))

wtEventHandlers
QuadTree
findWidget
Monad
mkGameScreenButtons = runGuiDef $ do
  panicExitButton /// MouseDown ==> liftM exitGameNow
  panicExitButton /// MouseIn ==> do hideGameScreen
                                     muteSounds
                                     muteMusic
  panicExitButton /// MouseOut ==> do unhideGameScreen
                                      unmuteSounds
                                      unmuteMusic
  gameSpeedSlider /// MouseUp ==> changeSpeed (wtValue gameSpeedSlider)
  [...]
 where panicExitButton = mkButton (5, 5) [AnchorTop, AnchorRight] "BOSS BUTTON"
 [...]

