data Rec = Rec {
    alpha :: Int,
    beta  :: Double,
} deriving (Show)
defaultRec = Rec 0 0 0

data Record r = Record { runRecord :: Rec -> (Rec, r) }
instance Monad Record where
    return r = Record $ \s -> (s, r)
    a >>= b  = Record $ \s -> let (q, r) = runRecord a s in runRecord (b r) q

createRecord f = fst $ runRecord f defaultRec

changeAlpha x  = Record $ \s -> (s { alpha = x }, ())

myRecord = createRecord (changeAlpha 9)

changeBeta x = $(makeChange beta) x

changeBeta x = Record $ $([| \z -> \s -> (s { beta = z }, ()) |]) x

changeBeta f x = Record $ $([| \z -> \s -> (s { f = z }, ()) |]) x

TestTH.hs:21:49: `f' is not a (visible) constructor field name

