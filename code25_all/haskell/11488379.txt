Typeable1
    {-# LANGUAGE StandaloneDeriving #-}
    {-# LANGUAGE DeriveDataTypeable #-}

    import Data.Typeable (Typeable,Typeable1)

    newtype FooM m a = Foo { unFoo :: (a -> Bar m) -> Bar m }
    newtype Bar m = Atom (m (Maybe (Bar m)))
    type Baz m = Waldo (FooM m ())
    type Waldo a = a

    data Qux m = Qux {
        baz :: Baz m
      , num :: Int
    } -- deriving Typeable1 [1]

    -- deriving instance Typeable1 Qux [2]

    Cannot derive well-kinded instance of form `Typeable1 (Qux ...)'
          Class `Typeable1' expects an argument of kind `* -> *'
        In the data type declaration for `Qux'

    Kind mis-match
    The first argument of `Typeable1' should have kind `* -> *',
    but `Qux' has kind `(* -> *) -> *'
    In the stand-alone deriving instance for `Typeable1 Qux'

Typeable
Typeable1
Qux
