pipes
Pipes.Concurrent
spawn
Output
main = do
 (output1, input1) <- spawn Unbounded
 (output2, input2) <- spawn Unbounded
 let effect1 = fromInput input1 >-> pipe1
 let effect2 = fromInput input2 >-> pipe2
 let effect3 = P.stdinLn >-> toOutput (output1 <> output2)
 ...

main = do
 let effect3 = P.stdinLn >-> (pipe1 <> pipe2)
 ...

Pipe
Monoid
