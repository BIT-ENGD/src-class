{-# LANGUAGE KindSignatures, DataKinds #-}

data Nat = O | S Nat

class NatToInt (n :: Nat) where
    natToInt :: n -> Int

instance NatToInt O where
    natToInt _ = 0

instance (NatToInt n) => NatToInt (S n) where
    natToInt _ = 1 + natToInt (undefined :: n)

OpenKind
natToInt
Nat
data NatToOpen :: Nat -> *

n
NatToOpen n
natToInt
*
foo :: (a :: *) -> (a :: *)
foo = id

bar = foo (S O)

*
Nat
