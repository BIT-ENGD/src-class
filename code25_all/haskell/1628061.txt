type BitWord = [Bool]

data Tree = Bs Tree Tree  -- Bs (zero_bit) (one_bit)
          | X -- incomplete word
          | B -- final bit of word

seenPreviously :: BitWord -> Tree -> (Tree,Bool)

BitWord
Tree
BitWord
BitWord
[BitWord]
parallelMapSt :: [ BitWords ] -> Tree -> [Bool]
parallelMapSt [] _ = []
parallelMapSt (w:ws) t = let (b,t') = seenPreviously w t
                             bs     = parralelMapSt ws t'
                          in t' `par` bs `pseq` (b:bs)

b
BitWords
w
