Main> symbol 3  
1: *  
2: **  
3: ***  

First Player  
Line: 3  
Symbols: 2  

1: *  
2: **  
3: *  

Second Player  
Line: 1  
Symbols: 1  

1:  
2: **    
3: *  

First Player   
Line: 3  
Symbol: 1  

1:  
2: **  
3:  

Second Player   
Line: 2  
Symbols: 2  

Second Player Wins!  

import System.IO    
import Data.List  

--The Game Data Structure  

data Player = Player Bool   
instance Show Player where 
show ( Player False ) = " First "  
show ( Player True ) = " Second "  
First : : Player  
First = Player False  
next : : Player −> Player  
next ( Player b ) = Player ( not b )  

type Symbol = Int  
type Line = Int  

-- The Function to update the game each time something happens  

updateGame :: [ Symbol ] −> Line −> Symbol −>  [ Symbol ]  
updateGame game line symbol = take ( line − 1) game ++  
game !! (line − 1) − symbol : drop line game  

getLine : : [ Symbol ] −> IO Line  
getLine game = getNumber "Line: "  
(\n −> n >= 1 && n <= length game &&  
game !! (n − 1) /= 0)  

getSymbols : : [ Symbol ] −> Line −> IO Symbol  
getSymbols game line = getNumber "Symbols: "  
(\n−> n> 0 && n<=game !! (line−1))  

endOfGame : : [ Symbol ] −> Bool   
endOfGame game = sum gane == 0   

symbol :: Int −> IO ()  
symbol n = do  
winner <− play [1..n] first  
putStrLn $ show winner ++ " Player Won! "  

getNumber :: String −> (Int −> Bool) −> IO Int  
getNumber = do  
    num <- fmap read getLine  
    if num > 0 || num <= (y :: Line)   
    then return (Just num)  
    else putStrln "Invalid Number!" >> return Nothing  

showGame :: [Symbol] −> IO ()    
play :: [Symbol] −> Player −> IO Player    

