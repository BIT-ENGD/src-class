put_debug, put_err :: String -> IO ()
put_foo :: String -> StateT [String] m ()

pdebug = gprint put_debug
perr = gprint put_err
pfoo = gprint put_foo

pdebug
perr
pfoo
printf
pdebug "Hi"
pdebug "my value: %d" 1
pdebug "two values: %d, %d" 1 2

Printf
class PrintfTyp r where
    type AppendArg r a :: *
    spr :: (String -> a) -> String -> [UPrintf] -> AppendArg r a

class PrintfTyp r where
    type KRetTyp r :: *
    spr :: (String -> KRetTyp r) -> String -> [UPrintf] -> r

r
AppendArg
instance PrintfTyp a
