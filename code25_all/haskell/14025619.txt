module Dice where

import qualified Data.IntMap as IM
import System.Random


data Side = Side {
            value :: Char, 
            points :: Int
            } deriving Show



data Dice = Dice (IM.IntMap (Side))

dice = Dice $ IM.fromList[(0,Side '1' 1),(1,Side '2' 2),
                                        (2 ,Side '3' 3),(3,Side '4' 4),
                                        (4,Side '5' 5),(5,Side 'W' 5)]



throwDice :: Dice -> Side
throwDice (Dice (intMap)) = intMap IM.!(randomRIO (1,6 :: Int))

Dice.hs:22:41:
    Couldn't match expected type `IM.Key' with actual type `IO a0'
    In the return type of a call of `randomRIO'
    In the second argument of `(IM.!)', namely
      `(randomRIO (1, 6 :: Int))'
    In the expression: intMap IM.! (randomRIO (1, 6 :: Int))

