data A = A String deriving Show
data B = B String deriving Show

class X a where
    spooge :: a -> Q

[ Some implementations of X for A and B ]

show' :: X a => a -> String
read' :: X a => String -> a

f :: String -> [Q]
f d = map (\x -> spooge $ read' x) d

[show' (A "foo"), show' (B "bar")]

data XWrap = AWrap A | BWrap B deriving (Show)

