class Animation a where
    event :: a -> Event -> Writer [Event] a
    paint :: a -> IO ()

event
Button
MouseClickEvent
CloseEvent
paint
--a user defined Animation, say a button
data MyChild = MyChild
instance Animation Child where
    ... anything

--a library defined Animation which is a composition of other animations
data LibWrapper = LibWrapper (Event -> Writer [Event] LibWrapper) (IO ())
mkWrapper :: (Animation a) => a -> LibWrapper
mkWrapper a = LibWrapper (\ev -> mkWrapper <$> event a ev) (paint a)
instance Animation LibWrapper where
    event (LibWrapper e _) = e
    paint (LibWrapper _ p) = p

--a user defined Animation for which the 'event' and 'paint' will be called 
data MyRoot = MyRoot LibWrapper
instance Animation MyRoot where
    event (MyRoot a) ev = MyRoot <$> event a ev
    paint (MyRoot a) = paint a

game = MyRoot (mkWrapper Child)

class Animation a e where
    event :: a -> e -> Writer [e] a
    paint :: a -> IO ()

LibWrapper
instance Animation LibWrapper anyevent
MyChild
instance Animation  MyChild MyEvent
LibWrapper
instance Animation (LibWrapper event) event
event
class Animation a where
    event :: a e -> e -> Writer [e] (a e)
    paint :: a e -> IO ()

LibWrapper MyEvent
MyChild MyEvent
instance MyChild MyEvent
MyEvent
MyRoot
class Animation a e where
    event :: a e -> e -> Writer [e] (a e)
    paint :: a e -> IO ()

