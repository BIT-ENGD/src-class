type PhonemeClassMap = Map Char String
type ContextElement = Parser String

phonemeContext :: Parsec String PhonemeClassMap ContextElement
phonemeContext = do
    c <- lower
    return $ char c

char
Parsec
ParsecT
phonemeContext :: Parsec String PhonemeClassMap ContextElement
phonemeContext = liftM char lower

import Data.Map (insert)

phonemeClassDefinition :: Parsec String PhonemeClassMap ()
phonemeClassDefinition = do
    upperChar <- upper
    lowerChars <- char ':' >> spaces >> many1 lower
    modifyState (insert upperChar lowerChars)

insert :: Char -> String -> PhonemeClassMap -> PhonemeClassMap
phonemeClassDefinition = do
    f <- liftM2 insert upper (char ':' >> spaces >> many1 lower)
    modifyState f

modifyState :: Monad m -> (u -> u) -> ParsecT s u m ()
