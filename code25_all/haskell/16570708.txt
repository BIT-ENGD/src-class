From: "John Doe" <john@doe.org>

[
  From,
  DisplayName "John Doe",
  Email,
  LocalName "john",
  Domain "doe.org"
]

let s = "From: <john@doe.org>"
alexScanTokens s

[From*** Exception: lexical error

let s = "From: \"John Doe\" <john@doe.org>"
alexScanTokens s

Alex
\"[a-zA-Z ]+\"      { \s -> DisplayName (init (tail s)) }

Alex
\"[a-zA-Z ]+\"

{ \s -> DisplayName (init (tail s)) }

{
module Main (main) where
}

%wrapper "basic"

$digit = 0-9            -- digits
$alpha = [a-zA-Z]       -- alphabetic characters

tokens :-

  $white+                    ;
  From:                     { \s -> From }
  \"[a-zA-Z ]+\"            { \s -> DisplayName (init (tail s)) }
  \<                        { \s -> Email }
  [$alpha]+@                 { \s -> LocalPart (init s) }
  [$alpha\.]+>               { \s -> Domain (init s) }

{
-- Each action has type :: String -> Token

-- The token type:
data Token =
    From                               |
    DisplayName String                 |
    Email                              |
    LocalPart String                   |
    Domain String       
    deriving (Eq,Show)

main = do
  s <- getContents
  print (alexScanTokens s)
}

