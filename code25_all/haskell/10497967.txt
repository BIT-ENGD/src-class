data State = S { 
      modes :: [Mode]
}

data Mode a = Mode { 
      complF :: String -> IO [String]
      action :: State -> String -> X a
}

data State a = S { 
      modes :: [Mode a]
}

initState :: (String -> IO [String]) -> (State -> String -> X a) -> State a
initState c a = {
      modes = [buildMode c a]
}

buildMode :: (String -> IO [String]) -> (State -> String -> X a) -> Mode a
buildMode c a = {
       complF = c
     , action = a
}

Mode a
State a
Mode String
Mode ()
class Mode a where
       complF :: String -> IO [String] 
       action :: State -> String -> X a

data State = S {
       modes :: (Mode a) => [a]
}

complF
action
instance Mode DefaultMode where
       complF :: .. 
       action :: ..

