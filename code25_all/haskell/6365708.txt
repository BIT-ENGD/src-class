fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

(zipWith (+))
zipWith::(a -> b -> c) -> [a] -> [b] -> [c]
fibs
(tail fibs)
take 10 fibs
0
1
fibs==[0,1,?,?...]
(tail fibs)==[1,?,?,?]
fibs
[0,1,0+1,?,..]
[0,1,0+1,1+(0+1),?,?..]
fibs !! 4
filterAbort :: (a -> Bool) -> [a] -> [a]
filterAbort p (x:xs) = if p x then x : filterAbort p xs else []

main :: Int
main = primelist !! 10000
         where primelist = 2 : 3 : 5 : [ x | x <- [7..], odd x, all (\y -> x `mod` y /= 0) (filterAbort (<= (ceiling (sqrt (fromIntegral x)))) primelist) ]

all (\y -> x mod y /= 0)...
