{-# LANGUAGE ScopedTypeVariables #-}
class IntegerAsType a where
  value :: a -> Integer   

class BaseRing a where
  primroot :: a -> Integer -> a

newtype Zq q = Zq Integer deriving (Eq)

instance (IntegerAsType q) => Num (Zq q) where
...
negate (Zq x) = Zq ((value (undefined :: q)) - x) --THIS WORKS

instance (IntegerAsType q) => BaseRing (Zq q) where
primroot = (xyz::(Zq q)) m = (value q)+m --(as an example), DOES NOT WORK

Not in scope 'q'

