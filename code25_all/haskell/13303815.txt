(defun winG (qty pb ps)
    (- (* qty ps (- 1 SXF YHS)) (* 2 GHF) (* qty pb (+ 1 SXF))))

(defun winQ (qty pb ps)
    (- (* qty ps (- 1 SXF)) (* 2 GHF) (* qty pb (+ 1 SXF))))

(defun stopLoss (qty pb &optional (lossRate 0.02))
    (let ((tot (* qty pb (+ 1 SXF))))
        (format t "Stop Loss at:~$~%" (- pb (/ (* tot lossRate) qty)))
        (format t "Lost Money:~$(~d%)~%" (* tot lossRate) (* 100 lossRate))))

(defun div618 (p1 p2)
    (let ((ratio '(0. 0.191 0.236 0.382 0.5 0.618 0.809 1.))
        (price #'(lambda (r) (if (<= p1 p2) (+ p1 (* (- p2 p1) r)) (- p1 (* (- p1 p2) r))))))
        (if (<= p1 p2)
            (dolist (r (reverse ratio)) (format t "-------~3$   ~$-------~%" r (funcall price r)))
            (dolist (r ratio) (format t "-------~3$  ~$-------~%" r (funcall price r))))))

