f1 :: String -> String -> ... -> String -> ()
f1 a b ... z = g [("a", a), ("b", b), ... ("z", z)]
...
fn :: String -> Int -> String -> ... -> String -> ()
fn a b ... z = g [("a", a), ("b", show b), ... ("z", z)]

f1 "abc" "def"
fk (A "abc") (B "def")
data
data Value = A String
           | B String
           | C Int
           | D String
           ...

 unpack :: Value -> String
 unpack (A a) = a
 unpack (B b) = b
 unpack (C c) = show c
 unpack (D c) = d

GeneralizedNewtypeDeriving
  {-# LANGUAGE GeneralizedNewtypeDeriving #-}

  class Value a where
    unpack :: a -> String
  instance Value String where
    unpack = id
  instance Value Int where
    unpack = show

  newtype A = A String deriving Value
  newtype B = B String deriving Value
  newtype C = C Int deriving Value
  newtype D = D String deriving Value

  ...

fk
   fk a b ... z = g [("a", unpack a), ("b", unpack b), ... ("z", unpack z)]

fk a b ... z = g [("a", a), ("b", b), ... ("z", z)]
g = h . map (second unpack)
