mapLift :: Monad m => (a -> b) -> [m a] -> [m b]
mapLift f = map (liftM f)

actuals     = zipWith mapLift (mapLift eval wffs) assignments

eval :: Wff -> Assignment -> Maybe Bool
wffs :: [Either String Wff]
assignments :: [Assignment]

Couldn't match expected type `a0 -> Wff'
            with actual type `Either String Wff'
Expected type: [a0 -> Wff]
  Actual type: [Either String Wff]
In the second argument of `mapLift', namely `wffs'
In the second argument of `zipWith', namely `(mapLift eval wffs)'

eval
wffs
Left
actuals :: [Either String (Maybe Bool)]
eval
eval :: Wff -> Assignment -> Either String Bool
actuals :: [Either String Bool]
assignments
assignments :: [[Assignment]]

