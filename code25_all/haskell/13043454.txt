import Prelude hiding (id, (.))
import Control.Category
import Control.Monad ((<=<))

-- | Intended law:
--
--     map forward . backward == id
--
data Invertible a b = 
    Invertible { forward :: a -> b
               -- Maybe switch from [a] to Monad m => m a? (Requires RankNTypes)
               , backward :: b -> [a] }

instance Category Invertible where
    id = Invertible id (:[])
    f . g = Invertible { forward  = forward f . forward g
                       , backward = backward g <=< backward f
                       }

Invertible a
Functor
fmap :: (a -> r) -> Invertible a b -> Invertible a r
backward . fmap f
(a -> r) -> (b -> [a]) -> r -> [a]
