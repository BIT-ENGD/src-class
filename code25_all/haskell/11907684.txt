Pipe
{-# LANGUAGE ExistentialQuantification, PolymorphicComponents #-}

data PipeD p = forall cat . PipeD {
    isoI        :: forall a b   m r . Iso (->) (p a b m r) (cat m r a b),
    categoryI   :: forall       m r . (Monad m) => CategoryI (cat m r)  ,
    monadI      :: forall a b   m   . (Monad m) => MonadI (p a b m)     ,
    monadTransI :: forall a b       . MonadTransI (p a b)               }

(PipeLike p)
(MonadTrans (p a b), Monad (p a b m)
(Category "\a b -> p a b m r")
CategoryI
MonadI
Category
Monad
MonadTrans
PipeLike
Iso
data Iso (~>) a b = Iso {
    fw :: a ~> b ,
    bw :: b ~> a }

