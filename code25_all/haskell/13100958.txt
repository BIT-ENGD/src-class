Monoid
data R a = R String (Maybe (String → a))

instance Monoid (R a) where
  mempty = R "" Nothing
  R s f `mappend` R t g = R (s ++ t) (case g of Just _ → g; Nothing → f)

R a
t
{-# LANGUAGE DataKinds, KindSignatures #-}

data K = T1 | T2
data R (t ∷ K) a = R String (Maybe (String → a))

instance Monoid (R t a) where …

v1 ∷ R T1 Int
v2 ∷ R T2 Int
-- v1 <> v2 => type error

v ∷ R t Int
-- v <> v1 => ok
-- v <> v2 => ok

v30
data K = T1 | … | T30
