{-# LANGUAGE RankNTypes #-}

rank0 :: [Int] -> Bool
rank0 x = null x

rank1a :: [a] -> Bool
rank1a x = null x

rank1b :: forall a. [a] -> Bool
rank1b x = null x

rank2 :: (forall a. [a]) -> Bool
rank2 x = null x

GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> :load example01
[1 of 1] Compiling Main             ( example01.hs, interpreted )
Ok, modules loaded: Main.
*Main>

*Main> rank0 []
True
*Main> rank1a []
True
*Main> rank1b []
True
*Main> rank2 []
True
*Main>

rank1a
rank1b
*Main> rank0 [1,2,3]
False
*Main> rank1a [1,2,3]
False
*Main> rank1b [1,2,3]
False
*Main> rank2 [1,2,3]

<interactive>:10:8:
    No instance for (Num a)
      arising from the literal `1'
    In the expression: 1
    In the first argument of `rank2', namely `[1, 2, 3]'
    In the expression: rank2 [1, 2, 3]
*Main>

1
*Main> rank2 ([1,2,3] :: [Int])

<interactive>:11:8:
    Couldn't match type `a' with `Int'
      `a' is a rigid type variable bound by
          a type expected by the context: [a] at <interactive>:11:1
    Expected type: [a]
      Actual type: [Int]
    In the first argument of `rank2', namely `([1, 2, 3] :: [Int])'
    In the expression: rank2 ([1, 2, 3] :: [Int])
*Main>

*Main> [1,2,3] :: [a]

<interactive>:12:2:
    No instance for (Num a1)
      arising from the literal `1'
    In the expression: 1
    In the expression: [1, 2, 3] :: [a]
    In an equation for `it': it = [1, 2, 3] :: [a]
*Main>

*Main> ([1,2,3] :: [Int]) :: [a]

<interactive>:15:2:
    Couldn't match type `a1' with `Int'
      `a1' is a rigid type variable bound by
           an expression type signature: [a1] at <interactive>:15:1
    Expected type: [a]
      Actual type: [Int]
    In the expression: ([1, 2, 3] :: [Int]) :: [a]
    In an equation for `it': it = ([1, 2, 3] :: [Int]) :: [a]
*Main>

show
rank2
