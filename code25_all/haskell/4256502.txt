A { a :: Int }
B { b :: Char }
C { c :: Bool }

X
Y
X
A
B
C
data X = A {...} | B {...} | C {...}

Y
A
B
data Y = A {...} | B {...}

foo :: X -> Int -- can pattern match
foo (A _) = 1
foo (B _) = 2
foo (C _) = 3
bar :: Y -> Bool -- also can pattern match with the same constructors
bar (A _) = true
bar (B _) = false
baz = A 1 -- baz is inferred to be a type that can fit in both X and Y

X
Y
data X = XA A | XB B | XC C
data Y = YA A | YB B

XA A
A
B
C
X
Y
A
func1 :: [XY Y_] -- returns a list of items that can only be A or B
func1 = ...
func2 = func1 ++ [C True] -- adding a C item to the list

func2
[XY X_]
