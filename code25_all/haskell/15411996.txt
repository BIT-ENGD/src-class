getMidi = do
  header <- grabHeader
  tracks <- grabTracks (numTracks header)
  return (header, tracks)

grabTracks :: Integer -> Get [Track]
grabTracks numT = do
  if numT == 0
     then do
       return []
     else do
       myTrack <- grabTrack
       otherTracks <- grabTracks (numT-1)
       return myTrack : otherTracks

grabTrack :: Get Track
grabTrack = do
  chunkId <- getByteString 4
  chunkSize <- getWord32be
  events <- getLazyByteString (fromIntegral chunkSize)
  return Track {trackSize=(fromIntegral chunkSize), eventData=events}

numT
Couldn't match expected type `Get [a]' with actual type `[a0]'
    In a stmt of a 'do' block: return myTrack : otherTracks
    In the expression:
      do { myTrack <- grabTrack;
           otherTracks <- grabTracks (numT - 1);
           return myTrack : otherTracks }
    In a stmt of a 'do' block:
      if numT == 0 then
          do { return [] }
      else
          do { myTrack <- grabTrack;
               otherTracks <- grabTracks (numT - 1);
               return myTrack : otherTracks }

Get
