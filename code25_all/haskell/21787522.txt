data MyState = MyState { doc :: [Document] }

run :: UserAction -> State MyState ()
run a = do s <- get ; put $ s { doc = map (edit a) (doc s) }

Document
data Document = Document [Stuff] [OtherStuff]
edit :: Document -> UserAction -> Document

class Document d where edit :: d -> UserAction -> d
instance Document MemoryDocument where edit = ... -- as before
instance Document RemoteDocument where edit = ... -- use HDBC etc

data (Document a) => MyState a = MyState { doc :: [a] }

a
data MyState = MyState { doc :: [DocumentWrapper] }
data DocumentWrapper = MD MemoryDocument | RD RemoteDocument

import Control.Applicative
instance Document DocumentWrapper where
  edit (MD d) = MD <$> edit d
  edit (RD d) = RD <$> edit d

