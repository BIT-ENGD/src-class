main :: IO ()
main = do 
        putStrLn  "Choose a definition to be implemented:\n 1 - Def 1 dealing with a Generalised class of CRS terms without permutations,\n 2 - Def 2 which is an extension of Def 1 with permutations,\n 3 - Def 4 which takes a closed nominal term-in-context, returning a closed CRS (meta)term,\n 4 - Def 6 which extends on Def 4 by adding a ground nominal substitution to the arguments.\n Definition number: "
        num <- getChar
        unless (isDigit num)   (return ())
        def num       
        main

def :: Char -> IO String
def num = do
           putStrLn "write a nominal term-in-context: "
           hFlush stdout
           str <- getLine  
           case num of
               '1'   -> (return . readExp1) str
               '2'   -> (return . readExp2) str
               '3'   -> (return . readExp4) str
               '4'   -> do
                         putStrLn "write a nominal term and the variable it substitutes:"              
                         sub <- getLine
                         let term = readExp6 str (readSub sub)
                         return term

{- reads and ouputs type TrmCxt ((atm,Var),Trm)         -}  
readExp1 :: String -> String
readExp1 s = case (inputL parseT s) of
           Left err -> "error: " ++ err
           Right (fc , t) -> show $ translate1 [] fc  t

