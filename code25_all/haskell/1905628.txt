
split                :: [a] -> [([a],[a])]
split []              = [([],[])]
split (x:xs)          = ([],x:xs) : [(x:ls,rs) | (ls,rs)  [([a],[a])]
nesplit               = filter ne . split

ne                   :: ([a],[b]) -> Bool
ne (xs,ys)            = not (null xs || null ys)

exprs                :: [Int] -> [Expr]
exprs []              = []
exprs [n]             = [Val n]
exprs ns              = [e | (ls,rs) 


I have my own split given 1 2 3 4 it spits out,

(((1) (2 3 4)) ((1 2) (3 4)) ((1 2 3) (4)))



(defn split [v]
  (if (= (count v) 1)
    (list (first v))
    (map #(list (take % v) (drop % v)) (range 1 (count v)))))

(defn exprs [v]
  (if (= (count v) 1) 
    v
    (map #(concat (exprs (first %)) (exprs (second %))) v)))

(exprs (split [1 2 3 4]))



that gives me,


(((1) (2 3 4)) ((1 2) (3 4)) ((1 2 3) (4)))


(defn split [v]
  (if (= (count v) 1)
    (list (first v))
    (map #(list (take % v) (drop % v)) (range 1 (count v)))))

(defn exprs [v]
  (if (= (count v) 1) 
    v
    (map #(concat (exprs (first %)) (exprs (second %))) v)))

(exprs (split [1 2 3 4]))


java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Integer

