type Broadcast = Int
type BroadcastChan = TChan Broadcast

data SessionState = SessionState
  { _broadcastChan :: BroadcastChan
  }

makeLenses ''SessionState

type Session m = StateT SessionState m
type SessionIO = Session IO

-- This function requires the state and IO...
processBroadcast :: Broadcast -> Conduit Broadcast SessionIO Packet
processBroadcast = undefined

-- | Handles networking
protocol :: Conduit Packet SessionIO Packet
protocol = do
  ch <- lift $ use broadcastChan
  -- line 51:
  whileJust_ (liftIO . atomically $ tryReadTChan ch) (\x -> yield $ processBroadcast x)
  liftIO $ putStrLn "End"

src\Burrito\Network.hs:51:61:
    Couldn't match expected type `Packet'
                with actual type `Conduit Broadcast SessionIO Packet'
    Expected type: ConduitM Packet Packet SessionIO b0
      Actual type: ConduitM
                     Packet (Conduit Broadcast SessionIO Packet) m0 ()
    In the expression: yield $ processBroadcast x
    In the second argument of `whileJust_', namely
      `(\ x -> yield $ processBroadcast x)'

processBroadcast
