data Term a = 
      Var a
    | Lambda a (Term a)
    | Apply (Term a) (Term a)

(Term a -> Term a) -> Term a -> Term a

fmap' :: (Term a → Term a) → Term a → Term a 
fmap' f (Var v) = f (Var v)
fmap' f (Lambda v t) = Lambda v (fmap' f t)
fmap' f (Apply t1 t2) = Apply (fmap' f t1) (fmap' f t2)

Functor
