data Z
data S n

type One = S Z
type Two = S (S Z)

type family Plus m n :: *
type instance Plus Z n = n
type instance Plus (S m) n = S (Plus m n)

ghci> :t undefined :: Plus One Two
undefined :: Plus One Two :: S * (S * (S * Z))

Z
S
data Nat = Z | S Nat

Nat
type family Plus m n :: Nat

Kind mis-match
Expected kind `OpenKind', but `Plus One Two' has kind `Nat'
In an expression type signature: Plus One Two
In the expression: undefined :: Plus One Two

