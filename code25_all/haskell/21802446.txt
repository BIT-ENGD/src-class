data Function = Function String                                             
data Predicate = Predicate String                                           

data Type_ = TPoint | TSet | TFunction | TPositiveRealNumber | TSequence | TNaturalNumber | TGroup

data VariableType = VTNormal | VTDiamond | VTBullet                         

data Dependencies = Dependencies [Term] {-dep-} [Term] {-indep-}            

data Variable = Variable String Int Type_ VariableType Dependencies          

data Term = VariableTerm Variable
          | ApplyFn Function [Term]                                         

data Formula = AtomicFormula Predicate [Term]
             | Not Formula
             | And [Formula]
             | Or [Formula]
             | Forall [Variable] Formula
             | UniversalImplies [Variable] [Formula] Formula
             | Exists [Variable] Formula    

Term
Formula
f :: (FormulaWithTermShapedHole -> Term -> a) -> Formula -> [a]

mapTermInFormulaM :: Monad m => (Term -> m Term) -> Formula -> m Formula 

