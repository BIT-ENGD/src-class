rulesApply :: [PhrasePair] -> Phrase ->  Phrase

rulesApply pp = try (transformationsApply "*" reflect  pp )

try :: (a -> Maybe a) -> a -> a
try f x = maybe x id (f x)
transformationsApply :: Eq a => a -> ([a] -> [a]) -> ([([a], [a])] -> ([a] -> Maybe [a]))
transformationsApply wc f pfPair list = foldr1 orElse (map (transformationApply wc f list) pfPair)


 rulesApply pp = try (transformationsApply "*" reflect  pp )

(transformationsApply "*" reflect ) pp
Eq a => ([([a], [a])] -> ([a] -> Maybe [a]))
try :: (a -> Maybe a) -> a -> a

(a -> Maybe a)
(transformationsApply "*" reflect ) pp
([a] -> Maybe [a]))
rulesApply pp = try . (transformationsApply "*" reflect) pp

