class C t where
  g :: t

instance C Int where
  g = 42

f1 :: Int -> Int
f1 x = x * x

Data.Has
IxSet
X
type family X
type instance X = Int

X
f2 :: X -> X
f2 x = x * x + 1

C X
C Int
instance C X where
  g = 43

X
'C X'
newtype NewX = NewX X

instance C NewX where
  g = 43

(Num NewX)
'43'
newtype
newtype
import Data.Has
import Data.IxSet

data Col1 = Col1; type instance TypeOf Col1 = Text
data Col2 = Col2; type instance TypeOf Col2 = Text

type Row = FieldOf Col1 :&: FieldOf Col2;

instance Indexable Row where
  empty = ixSet [ixFun $ (\x -> [ Col1 ^. x ]) ] -- Maybe add some more indexes later

Row
'Indexable Row'
Row
newtype
newtype Row = Row (FieldOf Col1 :&: FieldOf Col2)
  deriving 
  (
    Contains (Labelled Col1 Text), -- Add this for every column
    Contains (Labelled Col2 Text)  -- ...
  )

Contains (Labelled x (TypeOf x))
HasCol x
