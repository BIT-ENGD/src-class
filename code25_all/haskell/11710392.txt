enumerate :: (Enum a, Bounded a) => [a]
enumerate = [minBound .. maxBound]

data Attribute a = Attribute { test :: a -> Int
                             , vals :: [Int]
                             , name :: String }

vals
data Foo = Zero | One | Two deriving (Enum,Bounded)

vals
[0,1,2]
a
attribute :: (Enum b, Bounded b) => (a -> b) -> String -> Attribute a
attribute f str = Attribute (fromEnum . f) vs str
  where
    vs = map fromEnum enumerate

enumerate
b
vs = map fromEnum $ enumerate :: [b]

b
b1
attribute :: (Enum b, Bounded b, b ~ c) => {- ... -}
vs = map fromEnum $ enumerate :: (Enum c,Bounded c) => [c]

c
c1
b
Attribute
b
test
a -> Int
vals
[Int]
