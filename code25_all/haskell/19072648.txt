c
gfoldl :: Data a =>
  (forall d b. Data d => c (d -> b) -> d -> c b)
   -> (forall g. g -> c g)
   -> a
   -> c a

c
c
data C a
instance (HBuild' '[] g,
        Typeable (HList a),
        HFoldl (GfoldlK C) (C g) a (C (HList a)))
  => Data (HList a) where

    gfoldl k z xs = c3 $ hFoldl
                                (c1 (GfoldlK k))
                                (c2 (z hBuild))
                                xs
        where
              c1 :: forall c a. GfoldlK c -> GfoldlK C
              c1 = unsafeCoerce

              c2 :: forall c. c g -> C g
              c2 = unsafeCoerce

              c3 :: forall c. C (HList a) -> c (HList a)
              c3 = unsafeCoerce

