module Main where

import System
import Data.Char

lowercase = map toLower


main = do (arg1:arg2:arg3:arg4:arg5:_) <- getArgs
          txt <- getContents
          putStr ( redact txt arg1 arg2 arg3 arg4 arg5 )


redact file w1 w2 w3 w4 w5 = unlines [ process line | line <- lines file ]
       where process line = unwords [ f word | word <- words line ]
             f w | lowercase(w) == lowercase(w1)   = convertWord w 1
                 | lowercase(w) == lowercase(w2)   = convertWord w 1
                 | lowercase(w) == lowercase(w3)   = convertWord w 1
                 | lowercase(w) == lowercase(w4)   = convertWord w 1
                 | lowercase(w) == lowercase(w5)   = convertWord w 1
                 | otherwise = w

convertWord :: Eq a => [a] -> [a] -> [a] -> [a]
convertWord [] _ = []

convertWord word count = temp
       where if count == 1 then let temp = ""
             if count <= length( word )
                        then temp = temp ++ "*"
                             convertWord word count+1

