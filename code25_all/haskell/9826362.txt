import Data.List
main = print $ foldl1 (+) goodOnes

pands = [read x :: Integer | x <- permutations "0123456789", head x /= '0']

cut3from :: Integer -> Integer -> Integer
cut3from x n = mod (div x nd) 1000
    where
        l = fromIntegral $ length $ show x :: Integer
        nd = 10 ^ (l - 3 - n)

cut :: Integer -> [Integer]
cut x = map (cut3from x) [1..7]

testDiv :: Integral a => [a] -> Bool
testDiv l = and zipped
    where
        zipped = zipWith mult l [2, 3, 5, 7, 11, 13, 17]

mult :: Integral a => a -> a -> Bool
mult a b = mod a b == 0

goodOnes = filter (testDiv.cut) pands

-O2
+RTS -s
