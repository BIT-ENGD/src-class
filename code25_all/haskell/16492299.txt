data Tree a = Leaf | Node a (Tree a) (Tree a) deriving Show
let test = Node 1 (Node 2 (Node 4 Leaf Leaf) Leaf) (Node 3 Leaf (Node 5 Leaf Leaf))
let nextChild = concatMap (\x -> case x of; Leaf -> []; Node n l r -> [l,r])

let bfLc xs   | null xs = [] | otherwise = [ n | Node n _ _ <- xs] ++ (bfLc $ nextChild xs)   
let bfDo xs   | null xs = [] | otherwise = (do {Node n _ _ <- xs; return n})  ++ (bfDo $ nextChild xs)
let bfBind xs | null xs = [] | otherwise = (xs >>= \(Node n _ _) -> [n]) ++ (bfBind $ nextChild xs)

bfLc [test]
[1,2,3,4,5]

bfDo [test]
[1,2,3,4,5]

bfBind [test]
[1,2,3,4*** Exception: <interactive>:103:53-72: Non-exhaustive patterns in lambda

  do e1 ; e2      =  e1 >> e2  
  do p <- e1; e2  =  e1 >>= \p -> e2  

bfBind
bfDo
