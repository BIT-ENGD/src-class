{-# LANGUAGE ExistentialQuantification #-}
data Showable = forall a. Show a => Showable a

showableList :: [Showable]
showableList = [Showable "frodo", Showable 1]

instance Show Showable where
  show a = ...

instance Show Showable where
  show a = show a

data Showable = forall a. Show a => Showable a
  deriving Show

Can't make a derived instance of `Show Showable':
  Constructor `Showable' does not have a Haskell-98 type
  Possible fix: use a standalone deriving declaration instead
In the data type declaration for `Showable'

