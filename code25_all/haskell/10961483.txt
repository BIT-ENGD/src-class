(+)
(++)
mappend
(+)
(++)
mappend
(+)
--old and new
1 + 2
--result
3

--old
"Hello" ++ " " ++ "World"
--new
"Hello" + " " + "World"
--result
"Hello World"

--old
Just [1, 2, 3] `mappend` Just [4..6]
--new
Just [1, 2, 3] + Just [4..6]
--result
Just [1, 2, 3, 4, 5, 6]

fmap
map
(.)
liftM
mapM
forM
fmap
(*)
(+)
mappend
(*)
Monoid
mempty
mconcat
mappend
class Monoid m where
    mappend :: m -> m -> m

class Monoid m where
    mappend :: m -> m -> m
    mmultiply :: m -> m -> m

3 * 3
mempty + 3 + 3 + 3
0 + 3 + 3 + 3
9

Just 3 * Just 4
Just (3 * 4)
Just (3 + 3 + 3 +3)
Just 12

[1, 2, 3] * [10, 20, 30]
[1 * 10, 2 * 10, 3 * 10, ...]
[10, 20, 30, 20, 40, 60, ...]

Monoid
Monoid
(-)
(/)
Sum
Product
mappend
(+)
mmultiply
(*)
mempty
(*)
MonoidOperator
Monoid
class (Monoid m) => MonoidOperator mo m where
    mempty :: m
    mappend :: m -> m -> m

instance MonoidOperator (+) m where
    mempty = 0
    mappend = --definition of (+)

instance MonoidOperator (*) where
    --...

class Monoid m where
    -...

