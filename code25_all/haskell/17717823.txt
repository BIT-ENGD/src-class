import Data.Text (unpack, singleton)
import Data.Maybe 

one = singleton '1' -- convert char to Text, required by fromMaybe

getTestPanelR :: Handler Html
getTestPanelR = do
    ptext <- lookupGetParam "p" -- guessing returns Maybe Text
    p <- fromMaybe one ptext -- ??? does  not work
    -- pn <- ??? Once p is extracted successfully, how to convert to an integer?

    s <- runDB $ selectList [] [Asc PersonName, LimitTo 10 , OffsetBy $ (pn - 1) * 10]
    (widget, enctype) <- generateFormPost $ entryForm Nothing
    defaultLayout $ do
        $(widgetFile "person")

No instance for (MonadHandler Maybe)
  arising from a use of `lookupGetParam'
Possible fix: add an instance declaration for (MonadHandler Maybe)
In the second argument of `($)', namely `lookupGetParam "p"'
In a stmt of a 'do' block:
  p <- fromMaybe one $ lookupGetParam "p"
In the expression:
...

 #{show ptext}
Just "1"
Prelude Data.Maybe Data.Text> let one = singleton '1' 
Prelude Data.Maybe Data.Text> let x = Just $ singleton '5'
Prelude Data.Maybe Data.Text> let y = fromMaybe one x
Prelude Data.Maybe Data.Text> y
"5"
Prelude Data.Maybe Data.Text> read $ Data.Text.unpack y ::Int -- This is probably unsafe because I cannot trust 'y' in my web app
5

pageNumber <- (lookupGetParam "p" >>= return . (read :: String -> Int) . fromMaybe "1")
Couldn't match expected type `String' with actual type `Text'
Expected type: Maybe Text -> String
  Actual type: Maybe Text -> Text
In the return type of a call of `fromMaybe'
In the second argument of `(.)', namely `fromMaybe "1"'
Build failure, pausing...

Data.Text.singleton '1'
