Eval [a]' against inferred type
module Main where   

import Control.Parallel(par,pseq)   
    import Text.Printf   
    import Control.Exception   
    import System.CPUTime   
    import Data.List   
    import IO   
    import Data.Char   
    import Control.DeepSeq  
    import Control.Parallel.Strategies 

--Calcula o tempo entre o inicio e o fim de rodagem do programa   
    time :: IO t -> IO t   
    time a = do   
        start <- getCPUTime   
        v <- a 
        end   <- getCPUTime   
        let diff = (fromIntegral (end - start)) / (10^12)   
        printf "Computation time: %0.3f sec\n" (diff :: Double)   
        return v   

learquivo :: FilePath -> IO ([[Int]])   
    learquivo s = do    
                conteudo <- readFile s    
                return (read conteudo)    

main :: IO ()   
    main = do    
        t1 <- getCPUTime  
        conteudo <- learquivo "list.txt"  
        let !mapasort = (map qsort conteudo) `using` (parList rdeepseq)  
        t2 <- getCPUTime  
        let difft2t1 = (fromIntegral (t2 -t1)) / (10^12)  
        printf "Computation time %0.3f sec" (difft2t1 :: Double)  

qsort [] = []  
    qsort [x] = [x]  
    qsort (x:xs) =  
`           losort ++ (x:hisort) `using` strategy  `
        where  
            losort = qsort [y|y <- xs, y < x]  
            hisort = qsort [y|y <- xs, y >= x]  
            strategy result = rnf losort `par`  
                        rnf hisort `pseq`  
                        rnf result

