glAttachShader program vShader
 let points = [0.0, 0.0, (0.0 :: GLdouble)]
      numPoints = (fromIntegral $ (length points) `div` 3)
  verticesPtr <- newArray points

  -- Buffer object to hold the vertices.                                                                                                                                             
  bufferPtr <- malloc :: IO (Ptr GLuint)
  glGenBuffers 1 bufferPtr
  bufferId <- peek bufferPtr
  glBindBuffer gl_ARRAY_BUFFER bufferId
  glBufferData gl_ARRAY_BUFFER
    (fromIntegral ((sizeOf (1.0 :: GLdouble)) * (length points)))
    verticesPtr gl_STATIC_DRAW

  -- Shaders                                                                                                                                                                         
  program <- glCreateProgram
  bindAttribLocation program 0 "position"

  vShader <- glCreateShader gl_VERTEX_SHADER
  vSource <- readFile "shaders/test.vert"                                                                                                                                            
  loadShaderSource vShader vSource                                                                                                                                                   
  glCompileShader vShader                                                                                                                                                            
  glAttachShader program vShader         

  glLinkProgram program
  glUseProgram program

#version 410 core

layout(location = 0) in vec3 position;

void main() {
  gl_Position = vec4(position, 1.0);
}

