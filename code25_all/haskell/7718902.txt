module Data where

data Cons a = Con (a -> Bool)
   deriving (Show)           

twoCons :: Cons a -> Cons a -> Cons a
twoCons (Con a) (Con b) = Con (twoCons' a b)

twoCons' :: (a -> Bool) -> (a -> Bool) -> (a -> Bool)
twoCons' c1 c2 x = (c1 x) && (c2 x)

deriving (Show)
Con
(>1)
(<10)
