Show
Read
class Show a where show :: a -> String
class Read a where read :: String -> a

read
data ShowVal where
    ShowVal :: forall a. Show a => a -> ShowVal

:: [ShowVal]
l = [ShowVal 4, ShowVal 'Q', ShowVal True]

:: [String]
l = [show 4, show 'Q', show True]

ShowVal
show
show
String
String
ShowVal
exists a. (a -> String, a)
Show
Read
data ReadVal where
    ReadVal :: (forall a. Read a => a) -> ReadVal

read
ReadVal
Show
:: [ReadVal]
l = [ReadVal (read "4"), ReadVal (read "'Q'"), ReadVal (read "True")]

Show
:: [ReadVal]
:: [String]
l = ["4", "'Q'", "True"]

String
newtype Foo = Foo String
instance Read Foo where read = Foo

Read
ReadVal
forall a. (String -> a) -> a
Read
ReadVal
String
Show
read
String
data ReadVal = ReadVal { asInt :: Int, asChar :: Char, asBool :: Bool }

ReadVal { asInt = read s, asChar = read s, asBool = read s }

ReadVal
String
ReadVal
Show
Typeable
