m = return ('I', (("don't", "really"), "care", ["what", "this"], "type"), "is") 

b = isJust m

isJust m
b
m
Maybe <something>
m
m
<something> (Char, ((String, String), String, [String], String), String)
m
Maybe
m
return
m :: Maybe a
m = return ('I', (("don't", "really"), "care", ["what", "this"], "type"), "is")

Maybe a
a
Maybe a
a
m :: Maybe _
_
m :: Maybe a
m :: Maybe (Char, ((String, String), String, [String], String), String)
m = return ('I', (("don't", "really"), "care", ["what", "this"], "type"), "is")

Maybe
a
m = (return :: a -> Maybe a) ('I', (("don't", "really"), "care", ["what", "this"], "type"), "is")

m
m
m = return ('I', (("don't", "really"), "care", ["what", "this"], "type"), "is") 

b = isJust m

m = Just ('I', (("don't", "really"), "care", ["what", "this"], "type"), "is")

Maybe
* -> *
Int
Int
Int
Int
return
