map
filter
concat
f1
xs
(a, b, cs)
a
b
Int
c
[Int]
(a · b, b + c)
(a · b) > b + c
f1  [(10,20,[1,10,100]),  (4,5,[5,15,25])] 

[(200,21),(200,30),(200,120),(20,10)]

f1 :: Int -> Int -> [Int] -> [(Int, Int)]
f1 a b cs = [(a*b, b+c)| c<-cs, (a*b)>(b+c)]

f1 :: [(Int, Int, [Int])] -> [(Int, Int)]

f1 xs = [((xs !! 0)*(xs !! 1), (xs !! 1)+c)| c<-(xs !! 2), ((xs !! 0)*(xs !! 1))>((xs !! 1)+c)]

f1 let (a, b, cs) = xs = [(a*b, b+c)| c<-cs, (a*b)>(b+c)]

f1 (a b cs) = [(a*b, b+c)| c<-cs, (a*b)>(b+c)]

f1 :: [(Int, Int, [Int])] -> [(Int, Int)]
f1 xs = [ (a*b, b+c) | (a, b, cs) <- xs, c <- cs, (a*b)>(b+c) ]

g1 [(1,2),(3,4),(5,6)] returns [1,2,3,4,5,6]

g1 :: [(Int, Int)] -> [Int]
g1 xs = [a,b | (a,b)<-xs]

g1 xs = [a | (a,b)<-xs]

g1 xs = [a+b | (a,b)<-xs]

