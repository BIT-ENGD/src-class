Arrow
Free
MonadFree
class (Functor f, Monad m) => MonadFree f m where ...

data Free f a = Impure (f (Free f a)) | Pure a

m
f
Kleisli
f
Kleisli
MonadFree
class Arrow a => ArrowFunctor f a | a -> f where
    afmap :: a b (f c)

newtype FKleisli f m a b = FKleisli { runFKleisli :: a -> f (m b) }

instance (Functor f, Monad m, MonadFree f m) => 
         ArrowFunctor (FKleisli f m a) where ...

