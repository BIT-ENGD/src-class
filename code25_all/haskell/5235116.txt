exists
data Accum a = exists s. MkAccum s (a -> s -> s) (s -> a)
exists
forall
exists
forall a . a -> Int
a
a -> Int
myF1 :: forall a . a -> Int
myF1 _ = 123
-- okay, that function (`a -> Int`) does exist for any `a`
-- because we have just defined it

exists a . a -> Int
a
a -> Int
myF2 :: exists a . a -> Int
myF2 _ = 123
-- okay, there is at least one type `a` for which there is such function
-- because, in fact, we have just defined it for any type
-- and there is at least one type...
-- so these two lines are equivalent to the two lines above

