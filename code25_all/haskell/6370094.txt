(Stream s Identity t)
parse :: (Stream s Identity t)
  => Parsec s () a -> SourceName -> s -> Either ParseError a

Stream
class Monad m => Stream s m t | s -> t where

xxx :: yyy
(Show a) =>

a
Show
(Stream s Identity t) => 

t
=>
module RunParse where
import System.IO
import Data.Functor.Identity (Identity)
import Text.Parsec.Prim (Parsec, parse, Stream)

--what should I write "runIOParse :: ..."
--runIOParse :: (Stream s Identity t, Show a) => Parsec s () a -> String -> IO ()
runIOParse pa filename =
  do
    inh <- openFile filename ReadMode
    outh <- openFile (filename ++ ".parseout") WriteMode
    instr <- hGetContents inh
    let result = show $ parse pa filename instr
    hPutStr outh result
    hClose inh
    hClose outh

