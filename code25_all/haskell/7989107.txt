data Expr = Num Integer
      | Var String
      | Bin Op Expr Expr deriving Show

data Statement = Assign String Expr
                | If Expr Statement Statement
                | While Expr Statement
                | Compound [Statement] deriving Show

env = [("n",1), ("fact", 1)]

eval (Num x) _ = x
eval (Var v) e = xlookup v e
   where xlookup v ((w, x):r) | v==w = x
                              | otherwise = xlookup v r
eval (Bin op l r) e = kop op (eval l e) (eval r e)
  where kop Mul x y = x * y
        kop Sub x y = x - y
        kop Add x y = x + y
        kop Gt  x y | x > y = 1
                    | otherwise = 0

eval (While exp s) e = 0

factorial = (Compound [
               (Assign "n" (Num 7)),
               (Assign "fact" (Num 1)),
               (While (Bin Gt (Var "n") (Num 1))
                  (Compound [
                      (Assign "fact" (Bin Mul (Var "fact") (Var "n"))),
                      (Assign "n" (Bin Sub (Var "n") (Num 1)))
                  ])
               )
            ])

Hugs> :l while.hs
ERROR "while.hs":37 - Type error in function binding
*** Term           : eval
*** Type           : Statement -> [([Char],Integer)] -> Integer
*** Does not match : Expr -> [([Char],Integer)] -> Integer

