newtype Matrix e = Matrix (Array Int (UArray Int e))

IArray UArray e
Matrix
FlexibleContexts
detST :: (IArray UArray e, MArray (STUArray s) e (ST s),
          Num e, Eq e, Division e)
   => Array Int (UArray Int e) -> ST s e

MArray (STUArray s) e (ST s)
main = do
    let m@(Matrix x) = matrix [ [1,-2,3,234]
                              , [5,2,3,-3]
                              , [7,18,3,40]
                              , [2,9,71,0] ]
        d = runST (detST x) :: Int -- needed for type check, ambiguous otherwise

print d

Matrix
det :: Matrix e -> e

det (Matrix arr) = runST (detST arr)

detST
IArray UArray e, MArray (STUArray s) e (ST s), Num e, Eq e, Division e
det
det :: (IArray UArray e, MArray (STUArray s) e (ST s),
          Num e, Eq e, Division e) => Matrix e -> e

Could not deduce (MArray (STUArray s) t (ST s))
  arising from a use of `detST'

add (MArray (STUArray s) t (ST s)) to the context of
  a type expected by the context: ST s t
  or the inferred type of
     det :: (Eq t, Num t, IArray UArray t, Division t) => Matrix t -> t
or add an instance declaration for (MArray (STUArray s) t (ST s))

(MArray ...)
s
detST
s
s
det
det
det
FlexibleContexts
-Wall
