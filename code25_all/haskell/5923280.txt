-- Data type for n-array tree structure
-- holds Strings of words and their commonness
data Trie = Trie { commonness :: Maybe Int
                 , children :: [(Char, Trie)]
                 } deriving (Eq, Read, Show)

-- Returns all words and its commonness from a tree
dict :: Trie -> [(String, Int)]
dict (Trie freq []) = case freq of
                        Just f -> [("", f)]
                        _ -> error "String not terminated with commonness !"
dict (Trie (Just freq) chld) = ("", freq):getWords chld
dict (Trie _ chld) = getWords chld
getWords :: [(Char, Trie)] -> [(String,Int)]
getWords ch = concatMap ( \(c, tr) -> map (\(s, f) -> (c:s, f)) (dict tr) ) ch

