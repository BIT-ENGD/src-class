data SumTerm = 
     St_TotalSum TotalSum
    |St_SumInS SumInS
    |St_SumInT SumInT
    |St_HTerm HTerm

data Monomial  = Monomial {
    mSumTerm :: SumTerm,
    xPower :: Int,
    yPower :: Int,
    coefficient :: Int
    }

newtype Polynomial = Polynomial [ Monomial ]

{- Ok, here I'm lost, VERY lost -}
toMonomial :: (forall {- a which can be in a SumTerm constructor -} ) 
              => a -> SumTerm
toMonomial sum_term = ....

class ToSumTerm a where
     toSumTerm :: a -> SumTerm 

instance ToSumTerm TotalSum where
     toSumTerm total_sum = St_TotalSum total_sum
instance ToSumTerm SumInS where
     toSumTerm sum_in_s = St_SumInS sum_in_s
...

toMonomial :: ToSumTerm a => a -> Monomial 
toMonomial x = Monomial ( toSumTerm a ) 0 0 1 

ToSumTerm
