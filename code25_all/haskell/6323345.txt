--Standered Diviation 
module SD where
diviation:: IO()
diviation = 
    do
       putStrLn ("Enter Students Marks")
       marks <- getLine
       let m = ( read marks)::[Float]
       let x = sum' m
       let mean = (fromIntegral x)/(fromIntegral $ length )
       let len = (read (length(m)))::Float
       let divia = divi mean l 
       let std = map (^2) divia
       let stdd = xx length(m-1) m
       let final = map sqrt stdd
       let tot = sum final 

       if(m==[])
              then
                putStrLn("empty List" ++ show(tot))
           else do
                putStrLn("The Standered Divation is" ++ (show(tot)))


sum' :: (Num a) => [a] -> a
sum' = foldl (+) 0

avg::Float->Float->Float
avg a b = (fromIntegral a)/(fromIntegral b)

divi::Float->[Float]->[Float]
divi a xs = [x-a | x <- xs]

xx::Float->[Float]->[Float]
xx a xs = [x/a|x<-xs]

ERROR file:.\SD.hs:11 - Type error in application
*** Expression     : read (length m)
*** Term           : length m
*** Type           : Int

