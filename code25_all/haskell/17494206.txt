data BinTree a = Leaf a | Node a (BinTree a) (BinTree a) 
    deriving (Eq, Ord, Show, Read) 

Node x l r >>= f = Node (f x) (l >>= f) (r >>= f)
                 __________^

Couldn't match type `b' with `BinTree b'
`b' is a rigid type variable bound by
  the type signature for
    >>= :: BinTree a -> (a -> BinTree b) -> BinTree b
  at test.hs:153:5
 In the return type of a call of `f'
 In the first argument of `Node', namely `(f x)'
 In the expression: Node (f x) (l >>= f) (r >>= f)

