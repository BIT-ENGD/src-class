import Data.Conduit
import qualified Data.Conduit.List as CL

source = CL.sourceList [1,2,3,4,5,2,3] :: Source IO Int

-- Extract the consequent 2 and 3 number
extract23 :: Conduit Int IO Int
extract23 = do
  a <- await
  b <- await
  case (a,b) of
    (Just a,Just b) ->
      if a == 2 && b == 3
      then do yield a
              yield b
              extract23
      else extract23
    _ -> return ()

conduit1 :: Conduit Int IO String
conduit1 = CL.map show

sink1 :: Sink String IO ()
sink1 = CL.mapM_ putStrLn

main :: IO ()
main = source $= (extract23 =$= conduit1) $$ sink1

main
2
3
2
3

