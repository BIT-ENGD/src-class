sendRecv s newmsgs q m = do
     m' <- atomically $ readTVar m
     time <- getPOSIXTime
     result <- appendMsg newmsgs key m
     when (result > 0) (atomically $ do 
                           mT <- readTVar m
                           qT <- readTVar q
                           --let Just messages = Map.lookup key mT in sendq s (B.pack $ unwords messages) "192.168.1.1" 4711 
                           let mT' = Map.delete key mT
                               qT' = PSQ.delete key qT
                           writeTVar q (PSQ.insert key time qT')
                           writeTVar m (Map.insert key [newmsgs] mT'))
     when (result > 0) (let Just messages = Map.lookup key m' in sendq s (B.pack $ unwords messages) "192.168.1.1" 4711) 

sendq :: Socket -> B.ByteString -> String -> PortNumber -> IO ()
sendq s datastring host port = do
      hostAddr <- inet_addr host
      sendAllTo s datastring (SockAddrInet port hostAddr)
      return ()

newTVarIO
import System.IO.Unsafe
unsafePerformIO
IO()
atomically $ do
