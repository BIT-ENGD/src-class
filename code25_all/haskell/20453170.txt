countElems
Int
[Int]
Int
countElems :: Int -> [Int] -> Int
countElems n (x:xs)
| xs == []   = 0
| n == x     = 1 + countElems n xs
| n /= x     = countElems n xs

countElems 9 [5, 3, 9, 3, 9]
1
2
xs == []
n == x
Non-exhaustive pattern
countElems :: Int -> [Int] -> Int
countElems _ [] = 0
countElems n (x:xs)
| n == x     = 1 + countElems n xs
| n /= x     = countElems n xs

