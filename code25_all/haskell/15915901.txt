import qualified Data.Set as Set

substr :: String -> Int -> Int -> String
substr s start end = take (end - start) . drop start $ s

substrs :: String -> Set.Set (Char, String)
substrs s = let len = length s
            in foldl (\acc x -> Set.insert (s !! x, ((substr s 0 x)++(substr s (succ x) len))) acc) Set.empty [0..len-1]

-- not sure about the type
permute [] = Set.empty
permute s = Set.map recurFunc (substrs s)
  where recurFunc (c, s) = Set.map (c:) (permute s)

main :: IO ()
main = print $ permute "foo!"

permute.hs:12:21:
Couldn't match expected type `String'
            with actual type `Set.Set [Char]'
Expected type: (Char, String) -> String
  Actual type: (Char, String) -> Set.Set [Char]
In the first argument of `Set.map', namely `recurFunc'
In the expression: Set.map recurFunc (substrs s)

Set.map
(a -> b) -> Set a -> Set b
recurFunc
(Char, String)
substrs
(Char, String)
