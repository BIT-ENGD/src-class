module Main where

main :: IO()
main = do
   ne <- getLine
   c <- getLine
   putStrLn $ show $ foo c (words ne)

foo :: String -> [String] -> Integer
foo c (n:e:_) =
   foo' (read c::Integer) (read e::Integer) (read n::Integer) [2..]
   where foo' c e n (x:xs)
      | mod (x^e) n == c = mod x n
      | otherwise = foo' c e n xs

9 3 
2

foo'
2 9 3
mod (2^9) 3 == 2
mod 2 9
