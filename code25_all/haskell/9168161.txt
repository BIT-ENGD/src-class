onData :: IO ([Float]) -> IO ()
onData vals =
    do
    let res = liftM fsum vals
    putStrLn " * Processing ... "
    putStrLn res
    putStrLn " * Sum : "
    putStrLn " * Done Processing"
    return ()

    fsum :: [Float] -> Float
    fsum []     = 0
    fsum (x:xs) = x + fsum(xs)

HaskellParseData.hs:20:14:
    Couldn't match expected type `[Char]' with actual type `IO Float'
    Expected type: String
      Actual type: IO Float
    In the first argument of `putStrLn', namely `res'
    In a stmt of a 'do' expression: putStrLn res

