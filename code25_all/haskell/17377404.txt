-- Simple expressions
--
data Expr = Const Int
          | Add   Expr Expr       -- arguments must be Ints
          | Equal Expr Expr       -- arguments must be of same type
          | If    Expr Expr Expr  -- 1st argument must be a Bool

-- Evaluation results
--
data Value = IntV  Int
           | BoolV Bool
           deriving Show

-- Evaluate a simple expression.
--
eval :: Expr -> Value
eval (Const i)     = IntV i
eval (Add e1 e2)   = 
  case (eval e1, eval e2) of
    (IntV i1, IntV i2) -> IntV $ i1 + i2
    _                  -> error "Add: Int expected"
eval (Equal e1 e2) =
  case (eval e1, eval e2) of
    (IntV  i1, IntV  i2) -> BoolV $ i1 == i2
    (BoolV b1, BoolV b2) -> BoolV $ b1 == b2
    _                    -> error "Equal: same types expected"
eval (If ec et ee) =
  case eval ec of
    BoolV flag
      | flag      -> eval et
      | otherwise -> eval ee
    _             -> error "If: conditional must be Bool"

