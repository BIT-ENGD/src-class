import Math.LinearAlgebra.Sparse hiding (mulMV,dot)
import qualified Data.IntMap as IM
import qualified Data.Vector.Unboxed as V

type IdxM = (Int,Int)

data SKYSpM = SKYSpM {val   :: V.Vector Double                   
                     ,rcIdx :: V.Vector (Int, Int)           
                     ,dims  :: IdxM
                     }deriving(Show)

skySpM :: Int -> SKYSpM
skySpM i = SKYSpM (V.empty::V.Vector Double) (V.empty::V.Vector (Int,Int)) (i,i)


toSKY :: SparseMatrix Double -> SKYSpM
toSKY m = SKYSpM v' (V.snoc idxs' $ V.last idxs') d' 
  where (SKYSpM v' idxs' d')  = foldl f (skySpM $ height m) [1..(height m)]
        f (SKYSpM v idxs d) i = SKYSpM (v V.++ v') (V.snoc idxs (V.length v,jmin-1)) d
          where v' = foldl (\acc x -> V.snoc acc (r ! x)) V.empty [jmin..jmax]
                (jmin,_) = (IM.findMin $ vec r) 
                (jmax,_) = (IM.findMax $ vec r) 
                r        = row m i

