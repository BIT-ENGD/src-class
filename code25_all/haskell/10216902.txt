data Value = Int Integer
           | Float Double
           | Complex (Complex Double)
           | ... (other, non-numeric types)

data ValueError = TypeMismatch Value | ... (other constructors)

type ThrowsError = Either ValueError

binaryOp :: Num a => (a -> a -> a) -> Value -> Value -> ThrowsError Value 

(binaryOp (+)) (Int 1) (Int 1)      ==> Right (Int 2)
(binaryOp (+)) (Int 1) (Float 1.0)  ==> Right (Float 2.0)
(binaryOp (+)) (Int 1) (String "1") ==> Left (TypeMismatch (String "1"))

data NumType = IntType | FloatType | ComplexType

typeOf :: Value -> NumType
typeOf (Int _) = IntType
...

promote :: Value -> Value
promote (Int n)   = Float (fromInteger n)
promote (Float n) = Complex (n :+ 0)

binaryOp :: Num a => (a -> a -> a) -> [Value] -> ThrowsError Value

foldl1
