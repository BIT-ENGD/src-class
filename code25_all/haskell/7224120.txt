class Monad m => FcnDef β m | β -> m where
    def :: String -> β -- takes a name

instance Monad m => FcnDef (m α -> m α) m where
    def s body = body

dummyTest :: forall m. Monad m => m ()
dummyTest = def "dummy" ((return ()) :: m ())

:: m ()
No instance for (FcnDef (m0 () -> t0) m0)
  arising from a use of `def'

def
def "dummy2" "input" $ \in -> return ()

dummyTest = def "dummy" (return ())
g :: IO ()
g = dummyTest

