 {-# LANGUAGE OverloadedStrings #-}

import Data.Text
import Data.Aeson
import Control.Applicative ((<$>),(<*>))
import Control.Monad

instance FromJSON Person where
  parseJSON (Object v) = Person <$>
                         v .: "name" <*>
                         v .: "age"
  -- A non-Object value is of the wrong type, so fail.
  parseJSON _          = mzero

data Person = Person
              { name :: Text
              , age  :: Int
              } deriving Show

ghci> decode "{\"name\":\"Joe\",\"age\":12}" :: Maybe Person

Couldn't match expected type `Data.ByteString.Lazy.Internal.ByteString'
            with actual type `[Char]'
In the first argument of `decode', namely
  `"{\"name\":\"Joe\",\"age\":12}"'
In the expression:
    decode "{\"name\":\"Joe\",\"age\":12}" :: Maybe Person
In an equation for `a':
    a = decode "{\"name\":\"Joe\",\"age\":12}" :: Maybe Person

