-- type class  Group a ---------------------------------------------------------

class (Eq a, Show a, Read a, Num a) => Group a where 
add :: a -> a -> a
identity :: a 
invers :: a -> a

-- Group Integer  ----------------------------------------------------------------

instance Group Integer where 
  add x y = x+y
  invers x = -x
  identity = 0

-- expression tree with values having Group property ---------------------------

 data  Expr a = Lit a | Invers (Expr a) | Add (Expr a) (Expr a) deriving (Eq, Read)

x `add` idenity = x
idenity `add` x = x
x `add` (invers x) = identity
(invers x) `add` x = identity

-- simplify --------------------------------------------------------------------

-- simplify simplifies expression trees applying Group laws as follows ---------
--   add x zero = x
--   add zero x = x
--   add x (minus x) = zero 
--   add (minus x) x = zero 

----- Match for any axiom ----
simplify :: (Group a) =>  Expr a -> Expr a
simplify (Add(Lit x) (Invers (Lit y)))  | x == y  = Lit identity
simplify (Invers (Invers (Lit x))) = Lit x
simplify (Invers (Lit identity)) = Lit identity
simplify (Add(Lit x) (Lit identity)) = Lit x
simplify (Add(Lit identity) (Lit x)) = Lit x

----- No axiom found, so call simplify recusively ---- 
simplify (Invers x) = simplify (x) --  x is a sub    expression
simplify (Add x y) = Add (simplify x) (simplify y) -- x and/or y are sub expressions

simplify (Invers (Lit identity)) = Lit identity

simplify (Invers (Lit x)) = Lit x

