data Term = Monom(Float, Integer)
        | Addition(Term, Term) 
        | Subtraktion(Term, Term)
        | Multiplikation(Term, Term) 
        | Division(Term, Term) 

(+ (+ Monom Monom) Monom)
2
Monom(2,0)
2x^5
Monom(2,5)
instance Read Term where 
    readsPrec _ inp = let [(a,b)] = lex inp in
        case a of
        -- these are control characters for making the input look nicer
        "(" -> readsPrec 0 b
        ")" -> readsPrec 0 b
        " " -> readsPrec 0 b
        -- end character -> nothing to do here
        ""  -> []
        -- operators
        "+" -> let res = readsPrec 0 b in [Addition(res)]  
        "-" -> let res = readsPrec 0 b in [Subtraktion(res)]
        "*" -> let res = readsPrec 0 b in [Multiplikation(res)]
        "/" -> let res = readsPrec 0 b in [Division(res)]
        -- monom
        c -> let res  = readsPrec 0 b in [Monom(read c::Float,0),res]

Couldn't match expected type `(Term, String)'
            with actual type `Term'
In the return type of a call of `Addition'
In the expression: Addition (res)
In the expression: [Addition (res)]

(Term,String)
