data Z a b = Z ([a], b, [a])

moveLeft
moveRight
moveLeft  :: (b -> a -> a) -> (a -> b -> b) -> Z a b -> Z a b
moveLeft listF currentF (Z (x:xs, c, ys)) = Z (xs, g x c, ((f c x):ys))

moveRight :: (b -> a -> a) -> (a -> b -> b) -> Z a b -> Z a b
moveRight listF currentF (Z (xs, c, y:ys)) = Z (((f c y):xs), g y c, ys)

listF
currentF
moveLeftSameType :: Z a a -> Z a a
moveLeftSameType = moveLeft const const

listF
currentF
Z a b
a :: Char
b :: Int
moveLeft
moveRight
class CPos a where
    listF :: c -> d -> d
    currentF :: d -> c -> c
    moveLeft :: a -> a
    moveRight :: a -> a

moveLeft/Right
listF
currentF
The class method `listF' mentions none of the type variables of the class CPos a

listF
currentF
moveLeft . moveRight = id

