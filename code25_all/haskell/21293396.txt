children ["+ 1 2","* 3 4"]
"
rnd3 :: Int->IO Int
rnd3 x= do 
  oldState <- getStdGen
  let (result,newState) = randomR (1,x) oldState
  setStdGen newState
  return (result)

gNt :: String->Int->String
gNt l n = unwords ( gNtWords n (words l) )


opX :: [String] -> [String]
opX (fst:x) = helper 1 x []
     where
    helper 0 l ans = reverse ans
    helper n (fst:x) ans = if ( fst == "+" || fst == "-" || fst == "*" || fst == "/" ) then helper (n+1) x (fst:ans)
                        else helper (n-1) x (fst:ans)

opY :: [String] -> [String]
opY (fst:x) = helper 1 x []
     where
    helper 0 l ans = l
    helper n (fst:x) ans = if ( fst == "+" || fst == "-" || fst == "*" || fst == "/" ) then helper (n+1) x (fst:ans)
                        else helper (n-1) x (fst:ans)


gNtWords:: Int -> [String] -> [String]

gNtWords n [] = []
gNtWords 0  l = l
gNtWords 1 l = (opX l)
gNtWords 2 l = (opY l)
gNtWords n l = if( n < (length (opX l) + 2 ) ) then  gNtWords (n - 2 )  (opX l) 
            else  gNtWords (n - (length (opX l)) - 1 ) (opY l)
-- ( gNtWords (n + nodeCount (opX l) ) (opY l) ) )

rNt :: String->String->Int->String
rNt expTree newExp n = unwords (rNtWord n (words expTree) (words newExp) )

rNtWord:: Int -> [String] -> [String] -> [String]

rNtWord n l newExp = replacer n l newExp 
                            where 
replacer 0 l newExp  = newExp       
replacer 1 (l) newExp  = (   (++) [head l]  (  (++) newExp (opY l)  )   )
replacer 2 (l) newExp = (  (++) [head l] ( (++) (opX l) newExp )  )
replacer n l newExp = if( n < (length (opX l) + 2 ) ) then (++) [head l]  ((++) (replacer (n - 2)(opX l) newExp ) (opY l))
                            else (++) [head l] (  (++) (opX l) (replacer(n-(length(opX l))-1)(opY l) newExp ))

crossover :: String->String->String

crossover exp1 exp2 = let rnd1 = ( unsafePerformIO (rnd3 (nCount exp1) ) ) -1
                        ;rnd2 = (unsafePerformIO (rnd3 (nCount exp2) )) - 1
                        in  rNt exp1 (gNt exp2 rnd2) rnd1

norm :: Int -> Float

norm size =  let sizeF = fromIntegral (size) 
                ;rnd1 = ( fromIntegral ( unsafePerformIO (rnd3 2000 ) ) )/1000 - 1
                ;rnd2 = ( fromIntegral ( unsafePerformIO (rnd3 2000 ) ) )/1000 - 1
                ;s = rnd1*rnd1 +rnd2*rnd2
                in  ( cos (2.0 * 3.14 * rnd1 ) * sqrt( -2.0*log(rnd2) ))

parent:: [String] -> String

parent pop = let rnd =  ( unsafePerformIO (rnd3 (length pop) ) ) - 1   
            in (!!) pop rnd 

children:: [String] -> String
children pop = crossover (parent pop) (parent pop)

(parent pop)
(++) (parent pop) (parent pop)
