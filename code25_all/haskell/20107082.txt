token: Parser a -> Parser a
token p = do space
             v <- p
             space  
             return v

let token = compose {
        let! _ = space
        let! v = parser
        let! _ = space
        return v
    }

let! _ =
>>=
let (>>=) (p: Parser<'a>) (f: 'a -> Parser<'b>) : Parser<'b> 

type ParserComposer() = 
  member x.Bind(p, f) = p >>= f
  member x.Return(y) = ret y
  member x.Zero() = failure

>>
