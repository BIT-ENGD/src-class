module UserType where

data ThisModulesData = UserData String | ThisModulesInternal Int

moduleMethod :: (ThisModulesData -> Int) -> ThisModulesData -> Int
moduleMethod func dat = case dat of
    UserData _             -> func dat
    ThisModulesInternal i -> i

processList :: (ThisModulesData -> Int) -> [ThisModulesData] -> Int
processList func xs = sum $ map (moduleMethod func) xs

dataList :: [ThisModulesData]
dataList = [UserData "Type1", UserData "Type2", ThisModulesInternal 8]

processFunction :: ThisModulesData -> Int
processFunction (UserData command) = case command of
    "Type1" -> 1
    "Type2" -> 2
    _       -> 0
processFunction _ = 0

result :: Int
result = processList processFunction dataList

dataList = [UserData "Wrong", UserData "ThisIsWrong", ThisModulesInternal 97]

