f :: MonadIO m => ReaderT FooBar m Answer;
f = (liftIO getArgs) >>= ...

mapReaderT (withArgs args) :: ReaderT r IO b -> ReaderT r IO b

import System.Environment (setArgs, freeArgv);
withArgv new_args act = do {
  pName <- liftIO System.Environment.getProgName;
  existing_args <- liftIO System.Environment.getArgs;
  bracket (liftIO $ setArgs new_args)
          (\argv -> do {
                      _ <- liftIO $ setArgs (pName:existing_args);
                      liftIO $ freeArgv argv;
                    })
          (const act);
};

withArgs xs act = do {
  p <- liftIO System.Environment.getProgName;
  withArgv (p:xs) act;
};

withX :: X -> IO a -> IO a
