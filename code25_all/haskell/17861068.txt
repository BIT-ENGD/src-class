insertWith
insertWith :: (Ord b) => (a -> b) -> BinTree a -> a -> BinTree a
insertWith _ EmptyTree    y = Node y EmptyTree EmptyTree
insertWith f (Node x l r) y =
    case compare (f y) (f x) of
        LT -> Node x (insertWith f l y) r
        EQ -> Node x l r
        GT -> Node x l (insertWith f r y)

fst
let
let insertWith_ = insertWith fst
:t insertWith_
insertWith_ :: BinTree ((), b) -> ((), b) -> BinTree ((), b)

let
:t insertWith fst
insertWith fst
  :: (Ord a) => BinTree (a, b) -> (a, b) -> BinTree (a, b)

