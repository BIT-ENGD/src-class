FormSuccess
postContactR
runFormPost
postContactR
Nothing
ContactData
contactForm
ContactData
RootR

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TemplateHaskell #-}
module Handler.Contact where
import Control.Applicative ((<$>), (<*>))
import Data.Text (Text)
import Foundation
import Network.Mail.Mime
data ContactData = ContactData
                   { contactName    :: Text
                   , contactEmail   :: Text
                   , contactMessage :: Textarea
                   }
                 deriving Show
contactForm d = \html -> do
    (r1, v1) <- mreq textField "Your name:" (contactName <$> d)
    (r2, v2) <- mreq emailField "Your e-mail:" (contactEmail <$> d)
    (r3, v3) <- mreq textareaField "Message:" (contactMessage <$> d)
    let views = [v1, v2, v3]
    return (ContactData <$> r1 <*> r2 <*> r3, $(widgetFile "contact-form"))
getContactR :: Handler RepHtml
getContactR = do
    ((_, form), _) <- runFormPost (contactForm Nothing)
    defaultLayout $ do
        setTitle "contact"
        addWidget $(widgetFile "contact")
postContactR :: Handler RepHtml
postContactR = do
    ((r, form), _) <- runFormPost (contactForm Nothing)
    case r of
        FormSuccess d -> do
            sendEmail d
            setMessage "Message sent"
            redirect RedirectTemporary RootR
        _ -> getContactR

