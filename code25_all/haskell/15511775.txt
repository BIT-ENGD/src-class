data WAtom a = WAtom {innerVal :: a, temper :: WPart a -> WPart a }

data WPart a where 
     WUnit :: WAtom a -> WPart a
     WCompound :: WAtom a -> WAtom a -> WPart a

atomize :: WPart a -> a
atomize (WUnit a) = innerVal a
{- Write one for compound too -}

bind
temper
instance Monad (WPart) where
     return a = WUnit $ WAtom a
     (WUnit c) >>= f = let new_part = f $ innerVal c in
                           (temper $ atomize new_part) (WUnit c)

f
WAtom Int
f
temper
