isSquare :: Int -> Bool
isSquare x = truncate(sqrt(x)) * truncate(sqrt(x)) == x

Prelude> :load "some.hs"
[1 of 1] Compiling Main             ( some.hs, interpreted )

some.hs:2:13:
    No instance for (RealFrac Int)
      arising from a use of `truncate' at some.hs:2:13-29
    Possible fix: add an instance declaration for (RealFrac Int)
    In the first argument of `(*)', namely `truncate (sqrt (x))'
    In the first argument of `(==)', namely
        `truncate (sqrt (x)) * truncate (sqrt (x))'
    In the expression: truncate (sqrt (x)) * truncate (sqrt (x)) == x

some.hs:2:22:
    No instance for (Floating Int)
      arising from a use of `sqrt' at some.hs:2:22-28
    Possible fix: add an instance declaration for (Floating Int)
    In the first argument of `truncate', namely `(sqrt (x))'
    In the first argument of `(*)', namely `truncate (sqrt (x))'
    In the first argument of `(==)', namely
        `truncate (sqrt (x)) * truncate (sqrt (x))'
Failed, modules loaded: none.

Prelude> truncate(sqrt(9))*truncate(sqrt(9))==9
True

