data Piece = Naught | Cross deriving (Show, Eq)
data Result = Win | Lose | Draw deriving (Show, Eq)
type Board = Array Integer (Maybe Piece)

emptyBoard :: Board
evaluateBoard :: Board -> (Maybe Result)
allPossibleMoves :: Board -> [Board]

walkPaths :: Bool -> Board -> [Result]
walkPaths inv b = 
    if result /= Nothing
        then [fromJust result]
        else concat $ map (walkPaths (not inv)) (allPossibleMoves $ invertBoard b)
    where 
        result = if inv then invertResult evald else evald
        evald = evaluateBoard b 

allGamesResults = walkPaths False emptyBoard

