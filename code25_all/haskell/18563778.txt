mirror :: BinTree a -> BinTree a    
mirror (Node x tL tR) = Node x (mirror tR) (mirror tL)

hw1.hs:84:30:
    Couldn't match expected type `a' with actual type `BinTree a'
      `a' is a rigid type variable bound by
          the type signature for mirror :: BinTree a -> BinTree a
          at hw1.hs:83:11
    In the first argument of `Node', namely `x'
    In the expression: Node x (mirror tR) (mirror tL)
    In an equation for `mirror':
        mirror (Node tL x tR) = Node x (mirror tR) (mirror tL)

hw1.hs:84:33:
    Couldn't match expected type `a' with actual type `BinTree a'
      `a' is a rigid type variable bound by
          the type signature for mirror :: BinTree a -> BinTree a
          at hw1.hs:83:11
    In the return type of a call of `mirror'
    In the second argument of `Node', namely `(mirror tR)'
    In the expression: Node x (mirror tR) (mirror tL)
Failed, modules loaded: none.

data BinTree a = Empty | Node (BinTree a) a (BinTree a) deriving (Eq,Show)

mirror :: BinTree a -> BinTree a
mirror Empty = Empty
mirror (Node tL x tR) = Node (mirror tR) x (mirror tL)

