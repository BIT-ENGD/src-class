f  n = sum $ map fac (decToList n)
sf n = sum $ decToList (f n) 
g  i = head [ n | n <- [1..], sf n == i]
sg i = sum $ decToList (g i)

answer = sum [ sg i | i <- [1 .. 150] ]

f (n)
n
sf (n)
f (n)
g (i)
sf (i)
sf (i)
sg (i)
g (i)
g (i)
fac
`fac 0 = 1`

`fac n = n * fac (n-1)`

decToList
decToList1 x = reverse $ decToList' x
where
decToList' 0 = []
decToList' y = let (a,b) = quotRem y 10 in [b] ++ decToList' a

