randShuffleST arr gen = runST $ do
    _ <- getBounds arr
    return (arr, gen)

arr
gen
(MArray (STArray s) e (ST s))
getBounds
randShuffleST
Could not deduce (MArray a e (ST s))
  arising from a use of `getBounds'
from the context (Ix i)
  bound by the inferred type of
           randShuffleST :: Ix i => a i e -> t -> (a i e, t)
  at CGS/Random.hs:(64,1)-(66,25)
Possible fix:
  add (MArray a e (ST s)) to the context of
    a type expected by the context: ST s (a i e, t)
    or the inferred type of
       randShuffleST :: Ix i => a i e -> t -> (a i e, t)
  or add an instance declaration for (MArray a e (ST s))
In a stmt of a 'do' block: _ <- getBounds arr
In the second argument of `($)', namely
  `do { _ <- getBounds arr;
        return (arr, gen) }'
In the expression:
  runST
  $ do { _ <- getBounds arr;
         return (arr, gen) }

randShuffleST arr gen = do
    _ <- getBounds arr
    return (arr, gen)

randShuffleST :: (Ix i, MArray a e m) => a i e -> t -> m (a i e, t)

