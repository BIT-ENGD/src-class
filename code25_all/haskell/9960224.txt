import Data.Char
import Math.NumberTheory.Powers

extendedGcd::Integer->Integer->(Integer, Integer)
extendedGcd a b | r == 0 = (0, 1)
                | otherwise = (y, x - (y * d))
                where
                    (d, r) = a `divMod` b
                    (x, y) = extendedGcd b r

modularInverse::Integer->Integer->Maybe Integer
modularInverse n b | relativelyPrime n b = Just . fst $ extGcd n b
                   | otherwise = Nothing
                   where
                        extGcd = extendedGcd

relativelyPrime::Integer->Integer->Bool
relativelyPrime m n | gcd m n == 1 = True
                    | otherwise = False

textToDigits::String->[Integer]
textToDigits p = map (\x->toInteger (ord x - 97)) p

digitsToText::[Integer]->String
digitsToText d = map (\x->chr ((fromIntegral x) + 97)) d

exptEncipher::Integer->Integer->Integer->Maybe Integer
exptEncipher m k p | relativelyPrime k (p - 1) = Just $ powerMod p k m 
                   | otherwise = Nothing

exptDecipher::Integer->Integer->Integer->Integer
exptDecipher m q c = powerMod c q m

exptEncipherString::Integer->Integer->String->[Maybe Integer]
exptEncipherString m k p = map (exptEncipher m k) plaintext
    where
        plaintext = textToDigits p

exptDecipherString::Integer->Integer->[Maybe Integer]->Maybe String
exptDecipherString m k c = (fmap digitsToText) plaintext
    where
        q = modularInverse k (m - 1)
        plaintext = map (fmap $ exptDecipher m q) c

