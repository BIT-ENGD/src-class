appendMsg :: String -> (String, Integer) -> Map.Map (String, Integer) [String] -> Map.Map (String, Integer) [String]
appendMsg  a (b,c) m = do
      let Just l = length . concat <$> Map.lookup (b,c) m
          l' = l + length a
      --guard $ l' < 1400
      --return $ Map.adjust (++ [a]) (b, c) m
      if l' < 1400 then let m2 = Map.adjust (++ [a]) (b, c) m in return m2 else return (m)

No instance for (Monad (Map.Map (String, Integer)))
      arising from a use of `return'

