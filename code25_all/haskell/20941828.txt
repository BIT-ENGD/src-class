  encode, decode :: Int -> String -> String

*** Failed! Falsifiable (after 8 tests and 4 shrinks):
"\254"
0

   *Main> decode 0 ( encode 0 "\254")
   "c"

import Data.Char
let2int c =  ord c - ord 'a'

int2let n =  chr (ord 'a' + n)

shift :: Int -> Char -> Char
shift n c | isLower c   =  int2let ((let2int c + n) `mod` 26)
          | otherwise   =  c

encode, decode :: Int -> String -> String
encode n xs  = [shift n x | x <- xs]
decode n     = encode (-n)

quickCheck $ (\s n-> (decode n $ encode n s) == s)

