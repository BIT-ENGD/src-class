data Step =
  Match Char |
  Options [Pattern]

type Pattern = [Step]

match :: Pattern -> String -> Bool
match [] _ = True
match _  "" = False
match (s:ss) (c:cs) =
  case s of
    Match   c0 -> (c == c0) && (match ss cs)
    Options ps -> any (\ p -> match (p ++ ss) (c:cs)) ps

Pattern
String
Step
Match
[
  Match '*',
  Options
    [
      [Match 'F', Match 'o', Match 'o'],
      [Match 'F', Match 'o', Match 'b']
    ],
  Match '*'
]

*Foo*
*Fob*
[Match '*', Match 'F', Match 'o', Options [[Match 'o'], [Match 'b']], Match '*']

Options
Options []
