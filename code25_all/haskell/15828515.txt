module Transitions.For_Ordered_Lists_2D (
   transition_world -- :: Ordered_Lists_2D Cell -> Sparse_Line Cell
) where

import Data.Cell (Cell (Head, Tail, Conductor, Empty))
import Data.Coordinates
import Data.Ordered_Lists_2D


-- Replace this function with something more meaningful:


xandy :: Element_w_Coord Cell -> Coord
xandy (e, (x, y)) = (x, y)

transition_sc :: Ordered_Lists_2D Cell -> Placed_Elements Cell -> Sparse_Line Cell
transition_sc world pec = case world of
Sparse_Line{y_pos = y, entries =  xline}: rest_of_sparse_lines  -> case pec of
        Placed_Element{x_pos = x, entry =  Head} : rest_of_placed_elements   -> (Sparse_Line{y_pos = y, entries = Placed_Element{x_pos = x, entry =  Tail} :  rest_of_placed_elements}) 
        Placed_Element{x_pos = x, entry =  Tail} : rest_of_placed_elements   -> (Sparse_Line{y_pos = y, entries = Placed_Element{x_pos = x, entry =  Conductor} : rest_of_placed_elements}) 
        Placed_Element{x_pos = x, entry =  Empty} : rest_of_placed_elements   -> (Sparse_Line{y_pos = y, entries = Placed_Element{x_pos = x, entry =  Empty} : rest_of_placed_elements}) 
        Placed_Element{x_pos = x, entry =  Conductor} : rest_of_placed_elements
            |element_occurrence Head neighbours == 1 || element_occurrence Head neighbours == 2    -> (Sparse_Line{y_pos = y, entries = Placed_Element{x_pos = x, entry =  Head} : rest_of_placed_elements}) 
            |otherwise                                                                             -> (Sparse_Line{y_pos = y, entries = Placed_Element{x_pos = x, entry =  Conductor} : rest_of_placed_elements}) 
                where
                    neighbours = local_elements (xandy (Conductor, (x, y))) world


transition_world :: Ordered_Lists_2D Cell -> Ordered_Lists_2D Cell
transition_world world = fmap (transition_sc world) world      

--the end
--the end
--the end

u5363876@n114lt20:~/Desktop/lalal$ ./make_Wireworld
[10 of 20] Compiling Transitions.For_Ordered_Lists_2D ( Sources/Transitions/For_Ordered_Lists_2D.hs, x86_64/Transitions/For_Ordered_Lists_2D.o )

Sources/Transitions/For_Ordered_Lists_2D.hs:35:53:
    Couldn't match expected type `Placed_Elements Cell'
                with actual type `Sparse_Line Cell'
    Expected type: [Placed_Elements Cell]
      Actual type: Ordered_Lists_2D Cell
    In the second argument of `fmap', namely `world'
    In the expression: fmap (transition_sc world) world

type Ordered_Lists_2D e = [Sparse_Line e]

data Sparse_Line e = Sparse_Line {y_pos :: Y_Coord, entries :: Placed_Elements e}

data Placed_Element  e = Placed_Element {x_pos :: X_Coord, entry :: e}
type Placed_Elements e = [Placed_Element e]

