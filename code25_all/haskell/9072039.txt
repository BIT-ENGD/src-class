{-# LANGUAGE NoMonomorphismRestriction #-}
import qualified Text.Parsec.Token as P
import Text.Parsec.Language (haskellDef)
(P.TokenParser { P.identifier = ident }) = P.makeTokenParser haskellDef

ident
Text.Parsec.Prim.ParsecT String GHC.Prim.Any Data.Functor.Identity.Identity String
haskell = P.makeTokenParser haskellDef
ident = P.identifier haskell

Text.Parsec.Prim.ParsecT String u Data.Functor.Identity.Identity String
infixl 4 <++>
(<++>) = liftM2 (++)

(P.TokenParser { P.identifier = ident }) = P.makeTokenParser haskellDef
suitable_macro = ident

parseMacro = many space *> suitable_macro

parseMacro' =
    try (string "{{" *> parseMacro <* string "}}")

parseAll = many (noneOf "{") <++>
    option "" (parseMacro' <|> (string "{" <++> parseAll))

*Hz2.Preproc> parseTest parseAll "asdf{{b}}"

<interactive>:0:11:
    Couldn't match expected type `()' with actual type `GHC.Prim.Any'
    Expected type: Parsec String () a0
    Actual type: ParsecT
                    String GHC.Prim.Any Data.Functor.Identity.Identity [Char]
    In the first argument of `parseTest', namely `parseAll'
    In the expression: parseTest parseAll "asdf{{b}}"

