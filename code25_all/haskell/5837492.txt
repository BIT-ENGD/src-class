<*>
fmap fmap
Functor f => f (a -> b) -> f (f a -> f b)
(Functor f1, Functor f2) => f1 (a -> b) -> f1 (f2 a -> f2 b)
let q = fmap fmap

<interactive>:1:8:
    Ambiguous type variable `f1' in the constraint:
      `Functor f1' arising from a use of `fmap' at <interactive>:1:8-16
    Probable fix: add a type signature that fixes these type variable(s)

<interactive>:1:13:
    Ambiguous type variable `f' in the constraint:
      `Functor f' arising from a use of `fmap' at <interactive>:1:13-16
    Probable fix: add a type signature that fixes these type variable(s)

:t fmap fmap
fmap fmap
