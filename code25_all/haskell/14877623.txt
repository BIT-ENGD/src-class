tadd todo = do
    td <- getLine
    td:todo

tdel todo = do
    trem <- getLine
    let rid = read trem :: Int
    [todo !! x | x <- [0..(length todo-1)], not $ x == rid]

tls todo = do
    mapM putStrLn [ (show x) ++ (todo !! x) | x <- [0..(length todo -1)] ]
    todo

mtodo "add" todo = tadd todo
mtodo "del" todo = tdel todo
mtodo "ls"  todo = tls todo


bege = do
    com <- getLine
    mtodo com []

main = bege

mtodo :: [IO String] -> [IO String] -> [IO String]
:: [IO String] -> [IO String]
[1 of 1] Compiling Main             ( todo.hs, todo.o )

todo.hs:3:9:
    Couldn't match type `[]' with `IO'
    Expected type: IO String
      Actual type: [String]
    In a stmt of a 'do' block: td : todo
    In the expression:
      do { td <- getLine;
           td : todo }
    In an equation for `tadd':
        tadd todo
          = do { td <- getLine;
                 td : todo }

todo.hs:8:9:
    Couldn't match expected type `IO' with actual type `[]'
    In a stmt of a 'do' block:
      [todo !! x | x <- [0 .. (length todo - 1)], not $ x == rid]
    In the expression:
      do { trem <- getLine;
           let rid = ...;
           [todo !! x | x <- [0 .. (length todo - 1)], not $ x == rid] }
    In an equation for `tdel':
        tdel todo
          = do { trem <- getLine;
                 let rid = ...;
                 [todo !! x | x <- [0 .. (length todo - 1)], not $ x == rid] }

todo.hs:12:9:
    Couldn't match type `[]' with `IO'
    Expected type: IO [Char]
      Actual type: [[Char]]
    In a stmt of a 'do' block: todo
    In the expression:
      do { mapM
             putStrLn [(show x) ++ (todo !! x) | x <- [0 .. (length todo - 1)]];
           todo }
    In an equation for `tls':
        tls todo
          = do { mapM
                   putStrLn [(show x) ++ (todo !! x) | x <- [0 .. (length todo - 1)]];
                 todo }

