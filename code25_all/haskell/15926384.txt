pop :: State [Int] Int
pop = do
        (x:xs) <- get
        put xs
        return x

push :: Int -> State [Int] ()
push x = do 
            xs <- get
            put (x:xs)

doStuff :: State [Int] ()
doStuff = do
            pop
            x <- pop
            push 5
            push x

doStuff
pop >>= (\_ -> pop >>= (\x -> push 5 >>= (\_ -> push x)))

>>=
push 5 >>= (\_ -> push x)
pop >>= (\x -> s1)
pop >>= (\_ -> s2)
do
