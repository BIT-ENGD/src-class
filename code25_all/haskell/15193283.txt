parMap
parMap rseq
parMap rpar
parMap
parList
rseq
rpar
parMap strat f = (`using` parList strat) . map f

parList = parTraversable

parTraversable strat = evalTraversable (rpar `dot` strat)

evalTraversable = traverse

strat2 `dot` strat1 = strat2 . runEval . strat1

parMap rseq
rpar `dot` rseq

rpar . runEval . rseq

(\x -> x `par` return x) . runEval . (\x -> x `pseq` return x)

(\x -> x `par` return x)

dot
dot
parMap rpar
