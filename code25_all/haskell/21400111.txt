Data.Tree
import Data.Tree

tree = Node 1 [Node 2 [Node 3 []], Node 4 []]

1
|
+- 2
|  |
|  `- 3
|
`- 4

pathToNode
pathToNode 0 tree => []
pathToNode 1 tree => [1]
pathToNode 2 tree => [1, 2]
pathToNode 3 tree => [1, 2, 3]
pathToNode 4 tree => [1, 4]

pathToNode :: (Eq a) => a -> Tree a -> [a]
pathToNode x (Node y ys) | x == y    = [x]
                         | otherwise = case concatMap (pathToNode x) ys of
                                         [] -> []
                                         path -> y:path

Data.Foldable
Data.Traversable
