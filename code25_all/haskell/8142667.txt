reader | handler | writer

handler
reader
writer
run
define handler.run:
  while (reader.has_next) {
    data = reader.next
    output = ...some function of data...
    writer.put(output)
  }

reader <- handler -> writer

reader | tweaker | handler | writer

tweaker
reader
tweaker
define tweaker.has_next:
  return reader.has_next

define tweaker.next:
  value = reader.next
  result = ...some function of value...
  return result

tweaker
handler
tweaker
reader | p

p
handler | writer
handler
Haskell
functional programming
                     handler1
                   /          \
reader | partition              writer
                   \          /
                     handler2

<
>
