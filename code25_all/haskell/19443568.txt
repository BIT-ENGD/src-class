{-# LANGUAGE GADTs, KindSignatures, ScopedTypeVariables, DataKinds #-}

import GHC.TypeLits
import Unsafe.Coerce

data Var (i :: Nat) where
    Var :: (Num a, Integral a) => a -> Var i
    {- other constructors .... -}

Num
instance Num (Var i) where
    (Var a) + (Var b) = Var (a + b)

a
Var
forall (i :: Nat) a. Num a => a -> Var i
Var
Var
Var i0 ~ Var i1 => a0 ~ a1
Var i a
Var i0 ~ Var i1 => a0 ~ a1
unsafeCoerce
(Var (a :: n)) + (Var b) = Var (a + (unsafeCoerce b :: n))

unsafeCoerce
>instance Show (Var i) where {show (Var a) = "Var " ++ show a}
>import Data.Word
>Var (1000 :: Word16) + Var (255 :: Word8)
Var 1255
>Var (255 :: Word8) + Var (1000 :: Word16)
Var 231

