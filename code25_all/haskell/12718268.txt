{-# LANGUAGE DeriveFunctor #-}

data T a = T a deriving (Functor)

class C t where
    toInt :: t -> Int

instance C (T a) where
    toInt _ = 0

T a
a
f t = toInt $ fmap Left t

toInt
T a
a
f :: (Functor t, C (t a)) => t a -> Int

fmap
Either a b
f :: (Functor t, C (t (Either a b))) => t a -> Int

b
f :: (Functor t, C (t x)) => t a -> Int

forall x
x
