func (x1:x2:x3:xs) = xs
x1,x2,x3
[]
xs
[]
[a]
[a,a,a]
[a]
[a,a,a]
myIsPrefixOf :: (Eq a) => [a] -> [a] -> Bool
[]     `myIsPrefixOf`  []      = True
[]     `myIsPrefixOf`  (x:xs)  = True
list   `myIsPrefixOf`  []      = False
(l:ls) `myIsPrefixOf`  (x:xs)  = if l == x then ls `myIsPrefixOf` xs
                                 else False
myIsPrefixOf :: (Eq a) => [a] -> [a] -> Bool
[]     `myIsPrefixOf`  (x:xs)  = True
list   `myIsPrefixOf`  []      = False
(l:ls) `myIsPrefixOf`  (x:xs)  = if l == x then ls `myIsPrefixOf` xs
                                 else False
[] `myIsPrefixOf` [] 
(x:xs)
x
list   `myIsPrefixOf`  []      = False
(x:xs)
x
[]
list
[]
[a]
[a,a,a]
list
[]
[a]
[a,a,a]
[]     myIsPrefixOf  (x:xs)  = True

myIsPrefixOf
[]     `myIsPrefixOf`  list  = True
[] `myIsPrefixOf` []
[] `myIsPrefixOf` [1,2,3]
 [] `myIsPrefixOf` list = True
myIsPrefixOf :: (Eq a) => [a] -> [a] -> Bool
[]     `myIsPrefixOf`  list  = True
list   `myIsPrefixOf`  []      = False
(l:ls) `myIsPrefixOf`  (x:xs)  = if l == x then ls `myIsPrefixOf` xs
                                 else False
myIsPrefixOf :: (Eq a) => [a] -> [a] -> Bool
[]     `myIsPrefixOf`  list  = True
(l:ls) `myIsPrefixOf`  (x:xs)  = if l == x then ls `myIsPrefixOf` xs
                                 else False
[1,2] `myIsPrefixOf` [1]
(l:ls) `myIsPrefixOf` (x:xs) = if l == x then ls `myIsPrefixOf` xs
                               else False
[1,2] `myIsPrefixOf` [1]
l == x
1
(2:[]) `myIsPrefixOf` ([]:[])
l == 2
x == []
l == x
'a' == 'b'
1 == 3
