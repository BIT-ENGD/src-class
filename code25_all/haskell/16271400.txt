--Tokens for the parser
data Token = Kw Keyword
| Num Int
| Op Operator
| Str String
| Sym Symbol
deriving Show 

-- Integer expressions
data IntExpr = Const Int 
         | Var Iden --Iden=String
         | Neg IntExpr
         | IBin OpInt IntExpr IntExpr
         deriving Show

type TParser = Parsec [Token] ()

--Internal representation of the commands
data Comm = Skip 
      | Assign Iden IntExpr
      | If Assert Comm Comm
      | Seq Comm Comm
      | While Assert Comm
      | Newvar Iden IntExpr Comm
        deriving Show

--Parser for non sequential commands
pComm' :: TParser Comm
pComm' = choice [pif,pskip,pAssign,pwhile,pNewVar]

--Parser for the assignment command
pAssign :: TParser Comm
pAssign = do v <- pvar
             _ <- silentOp Colon
             _ <- silentOp Equal
             e <- pIntExp
             return $ Assign v e 

-- Integer expressions parser
pIntExp :: TParser IntExpr
pIntExp = choice [ var'  --An intexp is either a variable
                  , num  --Or a numeric constant
                  , pMul --Or <intexp>x<intexp>
                  , pSum --Or <intexp>+<intexp>
                  , pRes --Or <intexp>-<intexp>
                  , pDiv --Division
                  , pMod --Modulus
                  , pNeg --Unary "-"
                 ]

-- Parser for <intexp>+<intexp>
pSum :: TParser IntExpr
pSum = do 
    e <- pIntExp
    _ <- silentOp Lexer.Plus
    e' <- pIntExp
    return $ IBin Lang.Plus e e'

