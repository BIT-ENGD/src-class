data = Graph w = Graph {vertices :: [(Char, w)],
                        edges :: [(Char, Char, w)]} deriving Show

f
g
a
b
f(w)
g(w)
weight_of_longest_path :: (Ord w) => Graph w -> Char -> Char 
                                             -> (w -> w) -> (w -> w) -> w
weight_of_longest_path  (Graph v w) startVert endVert f g =
  let 
    topSort = dropWhile (/= startVert) $ topological_ordering (Graph v w)
    distList = zip topSort $ 
                 (snd $ head $ filter (\(a,b) -> a == startVert) v) 
                 : (repeat (-999999999))
    finalList = getFinalList (Graph v w) topSort distList f g
  in 
    snd $ head $ filter (\(a,b) -> b == endVert) finalList

getFinalList :: (Ord w) => Graph w -> [Char] -> [(Char, w)] 
                                   -> (w -> w) -> (w -> w) -> [(Char, w)]
getFinalList _  [] finalList _ _ = finalList
getFinalList (Graph v w) (firstVert:rest) distList f g =
  let 
    neighbours = secondNodes $ filter (\(a,b,w) -> a == firstVert) w
    finalList = updateList firstVert neighbours distList (Graph v w) f g
  in  
    getFinalList (Graph v w) rest finalList f g

updateList :: (Ord w) => Char -> [Char] -> [(Char, w)] -> Graph w 
                              -> (w -> w) -> (w -> w) -> [(Char, w)]
updateList _ [] updatedList _ _ _ = updatedList
updateList firstVert (neighbour:rest) distList (Graph vertices weights) f g =
  let 
    edgeWeight = selectThird $ head 
          $ filter (\(a,b,w) -> a == firstVert && b == neighbour) weights
    verticeWeight = snd $ head 
          $ filter (\(a,b) -> a == neighbour) vertices
    newDist = calcDist firstVert neighbour verticeWeight edgeWeight 
                       distList f g
    updatedList = replace distList neighbour newDist
  in  
    updateList firstVert rest updatedList (Graph vertices weights) f g


calcDist :: (Ord w) => Char -> Char -> w -> w -> [(Char, w)] 
                            -> (w -> w) -> (w -> w) -> w
calcDist firstVert neighbour verticeWeight edgeWeight distList f g =
  if (compareTo f g 
         (snd $ head $ filter (\(a,b) -> a == neighbour) distList) 
         (snd $ head $ filter (\(a,b) -> a == firstVert) distList) 
         edgeWeight verticeWeight) == True
  then 
     (f (snd $ head $ filter (\(a,b) -> a == firstVert) distList))
     + (g edgeWeight) + (f verticeWeight)
  else 
     (f (snd $ head $ filter (\(a,b) -> a == neighbour) distList))

replace :: [(Char, w)] -> Char -> w -> [(Char, w)]
replace distList vertice value = 
    map (\p@(f, _) -> if f == vertice then (vertice, value) else p) 
        distList

