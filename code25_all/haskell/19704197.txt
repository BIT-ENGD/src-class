--import Haste hiding (eval)
--import Haste.Graphics.Canvas
import Data.Maybe
import Expr

-- calculates all points of the graph in pixels
points :: Expr -> Double -> (Int,Int) -> [Point]
points exp sca (w,h) = [(x,realToPix(eval exp(pixToReal x))) | x<- [0..w]]      
 where        
   pixToReal :: Int -> Double 
   pixToReal x = sca*((fromIntegral x)-(fromIntegral w)/2) 
   realToPix :: Double -> Int 
   realToPix x = round ((x/sca) + ((fromIntegral w)/2))        

-- calculates the lines that are going to be drawn between the points
linez :: Expr -> Double -> (Int,Int) -> [(Point,Point)]
linez exp sca (w,h) = zip (points exp sca (w,h)) (drop 1 (points exp sca (w,h)))

-- width and height of the window
sizeX, sizeY :: Int
sizeX = 300
sizeY = 300

  --main :: IO ()
  --main = do 
  --Just can <- getCanvasById "canvas" 
  --Just canElem <- elemById "canvas" 
  --Just func <- elemById "formula" 
  --Just d <- elemById "draw" 
  --onEvent d OnClick $ \_ (x,y) -> do 
      --f <- getProp func "value" 
      --w <- getProp canElem "width" 
      --h <- getProp canElem "height" 
      --render can (stroke (path (points (fromJust (readExpr f)) 0.04 (read w,read h))))
  --return()                             

