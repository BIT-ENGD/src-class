Data.Vector
Dog
House
dogs_by_houses dogs h = [ d | d <- Vec.toList dogs, h == house d ]

dogs
dogs_by_houses dogs
h
Data.Vector
dogs_by_houses :: Vec.Vector Dog -> Int -> [Dog]
dogs_by_houses dogs = let {
        dog_house = house_id . house ;
        v0 = Vec.replicate (maximum . map dog_house $ Vec.toList dogs) [] ;
        f v d = let { h = dog_house d } in v // [(h,d:v!h)] ;
        dbh = Vec.foldl' f v0 dogs
   } in (dbh !)

dbh
dogs
dbh
MVector
create
MVector
create
do
fold (>>)
dbh
MVector
primes !! n
vector_indexer idx vec = \i -> (Vec.!) t i
  where m = maximum $ map idx $ Vec.toList vec
        t = Vec.accumulate (flip (:)) (Vec.replicate m []) 
               $ Vec.map (\v -> (idx v, v)) vec
dogs_by_houses = vector_indexer (house_id . house)

my_d_by_h = dogs_by_houses my_dogs
my_d_by_h
