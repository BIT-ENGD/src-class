x = 3
y = 4
plus(x,y)

(Assignment "x" "3")
(Assignment "y" "4")
(Invocation "plus" ["x","y"])

parse parseTester "bla" "{plus(3,4)\nmin(2,3)\nx=3\n"
Right (Body [Invocation "plus",Invocation "min",Assignment "x" "3"])
parse parseBody "bla" "{plus(3,4)\nmin(2,3)\nx=3\n}"
Left "bla" (line 4, column 2):
unexpected end of input
expecting white space or "="

data Body = Body [Statement]
    deriving (Show)

data Arguments = Arguments [String]
    deriving (Show)

data Statement = Assignment String String
               | Invocation String
    deriving (Show)


parseBody :: Parser Body
parseBody = do
    char '{'
    statements <- many1 parseStatement
    char '}'
    return $ Body statements

parseTester :: Parser Body
parseTester = do 
    char '{'
    x <- many1 parseStatement
    return $ Body x

parseStatement :: Parser Statement
parseStatement = do
        x <- try parseInvocation <|> parseAssignment <?> "statement"
        return x

parseInvocation :: Parser Statement
parseInvocation = do
    spaces
    name <- many1 (noneOf " (")
    spaces
    char '('
    spaces
    bla <- many1 (noneOf " )")
    spaces
    char ')'
    char '\n'
    return $ Invocation name

parseAssignment :: Parser Statement
parseAssignment = do
    spaces
    var <- many1 (noneOf " =")
    spaces
    char '=' <?> "equal in assignment"
    spaces
    value <- many1 (noneOf "\n")
    char '\n'
    spaces
    return $ Assignment var value

