eq?
(define lst
  (let (x (list 'a 'b))
    (cons x x)))

(eq? (car x) (cdr x))

(car x)
(cdr x)
data Tree a = Tip | Bin a (Tree a) (Tree a)

left  (Bin _ l _) = l
right (Bin _ _ r) = r

mkTree n :: Int -> Tree Int
mkTree 0 = Tip
mkTree n = let t = mkTree (n-1) in Bin n t t

let tree = mkTree 30
left tree
right tree
unsafe
