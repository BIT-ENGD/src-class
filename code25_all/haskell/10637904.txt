withDB :: (forall c. IConnection c => c -> IO b) -> IO b
withDB fn = bracket (connectSqlite3 "int/db.sqlite3") disconnect fn

MonadIO m
bracket
scope
scope :: MonadIO m => m a -> (a -> m b) -> (a -> m c) -> m c
scope before after action = do
    x <- before
    r <- action x
    _ <- after x
    return r

withDB :: MonadIO m => (forall c. IConnection c => c -> m b) -> m b
withDB fn = liftIO $ scope
                       (liftIO $ connectSqlite3 "int/db.sqlite3")
                       (\x -> liftIO $ disconnect x) fn

Could not deduce (m ~ IO)
from the context (MonadIO m)
  bound by the type signature for
    withDB :: MonadIO m => (forall c. IConnection c => c -> m b) -> m b
  at src\...
  'm' is a rigid type variable bound by
    the signature for
      withDB :: MonadIO m => (forall c. IConnection c => c -> m b) -> m b
Expected type: IO b
  Actual type: m b
In the third argument of 'scope' namely 'fn'
In the second argument of '($)', namely
  'scope
    (liftIO $ connectSqlite3 "int/db.sqlite3")
    (\x -> liftIO $ disconnect x)
    fn'

liftIO $
scope
liftIO
m
IO
fn
m
