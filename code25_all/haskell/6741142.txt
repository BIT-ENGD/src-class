Arrow
ArrowChoice
[a] -> [b]
a -> m b
Kleisli
mapA
mapA f = arr listcase >>>
         arr (const []) ||| (f *** mapA >>> arr (uncurry (:)))

listcase :: [a] -> (Either () (a,[a]))
listcase [] = Left ()
listcase (x:xs) = Right (x,xs)

helper :: (Bool,a) -> [a] -> Either (a,[a]) [a]
helper (True,x)  y = Left (x,y)
helper (False,x) y = Right y

test :: Arrow a => (b -> Bool) -> a (b,c) ((Bool,b), c)
test p = first (arr p &&& arr id)

filterA :: Arrow a => (b -> Bool) -> a [b] [c]
filterA p = f >>> (g ||| (h >>> (j ||| (filterA p))))
   where f = arr listcase
         g = arr (const [])
         h = test p >>> (uncurry helper)
         j = (arr id *** (filterA p)) >>> (arr (uncurry (:)))

filterA
listcase
map
p
map
listcase
g
|||
(a,[a])
head
tail
h
head
((Bool, head),tail)
(uncurry helper)
head
Bool
Either
(|||)
(j ||| (filterA p))
True
j
head
tail
head
id
filter p
tail
arr (uncurry (:))
map
tail
filterA p
