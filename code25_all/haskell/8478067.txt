> tTable (\x y -> not (x || y))
output:
F F | T
F T | F
T F | F
T T | F

tbl p = [(uncurry p) tuple | tuple <- allval]
        where allval=[(x,y) | x <- [False,True], y <- [False,True]]

argsFromList f []     = f
argsFromList f (x:xs) = argsFromList (f x) xs

 Occurs check: cannot construct the infinite type: t = t1 -> t
   Expected type: t -> [t1] -> t1 -> t
   Inferred type: (t1 -> t) -> [t1] -> t1 -> t
 In the expression: argsFromList (f x) xs

