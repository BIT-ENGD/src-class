type Program = Array Int Opcode
type Labels = Map String Int
type Stack = [Integer]
type Memory = Map String Integer
type VarList = [(String, Integer)]

runFrom :: Int -> Program -> VarList -> String
runFrom i p vars = step i [] (fromList vars) [] where
  labels = labelMap p
  step i stack mem out =
    case ((Array.!) p i, stack) of
      (CALL name, s) -> step ((Map.!) labels name) ((i+1):s) mem out
      (INT n, s)     -> step (i+1) (n:s) mem out
      (J name, s)    -> step ((Map.!) labels name) s mem out

