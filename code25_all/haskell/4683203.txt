 import Data.Char


blCo :: String -> String
blCo xs = concatMap  lett2num) xs            

lett2num :: Char ->  Int
lett2num y 
   | (ord 'A' <= ord y) ord 'z') =  (ord y - ord 'a') +1


num2bin :: Int -> String
num2bin n
  | n >= 0     =  ctive number"
  where n2b 0  =  []
        n2b n  =  n `mod` 2 : n2b (n `div` 2)

Couldn't match expected type `Char' against inferred type `String'
In the first argument of `(:)', namely `num2bin (lett2num x)'
In the expression: num2bin (lett2num x) : blCo xs
In the definition of `blCo':
    blCo (x : xs) = num2bin (lett2num x) : blCo xs

