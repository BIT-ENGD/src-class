{-# LANGUAGE MultiParamTypeClasses, FunctionalDependencies, DataKinds #-}

data Field = Speed | Name | ID
data Value = VFloat Float | VString ByteString | VInt Int

class Pair f b | f -> b where
    toPair :: f -> b -> (f, b)
    toPair = (,)

instance Pair Speed (VFloat f) 
instance Pair ID (VInt i)

Speed
ByteString
Speed
Float
Kind mis-match
The first argument of `Pair' should have kind `*',
but `VInt' has kind `Value'
In the instance declaration for `Pair Speed (VFloat f)'

-XKindSignatures
class Pair (f :: Field) (b :: Value) | f -> b where
    toPair :: f -> b -> (f, b)
    toPair = (,)

Kind mis-match
Expected kind `OpenKind', but `f' has kind `Field'
In the type `f -> b -> (f, b)'
In the class declaration for `Pair'

toPair
Field
Value
GADT
type Record = Map Field Value

mkRecord :: [Field] -> [Value] -> Record
mkRecord = (fromList .) . zipWith toPair

Map
test1 = mkRecord [Speed, ID] [VFloat 1.0, VInt 2]

test2 = mkRecord [Speed] [VInt 1]

data Foo = FooInt | FooFloat
data Bar = BarInt Int | BarFloat Float

Foo
Bar
FooInt
FooFloat
Bar
data Foo :: * -> * where
    FooInt   :: Foo Int
    FooFloat :: Foo Float

data Bar :: * -> * where
    BarInt   :: Int   -> Bar Int
    BarFloat :: Float -> Bar Float

Pair
Foo
Bar
instance Pair (Foo a) (Bar a)

test1 = toPair FooInt (BarInt 1)   -- type-checks
test2 = toPair FooInt (BarFloat 1) -- no instance for Pair (Foo Int) (Bar Float)

xs = [FooInt, FooFloat]
Map
type FooBar = Map (Foo ?) (Bar ?)
Map
Int
Float
