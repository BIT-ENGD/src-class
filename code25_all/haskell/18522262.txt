after
after "sample" 'a'
after "sample" "am"
after
afterList
after :: (Eq a) => [a] -> a
after :: (Eq a) => [a] -> [a]
{-# LANGUAGE MultiParamTypeClasses #-}
sub :: (Eq a) => [a] -> Int -> [a]
sub [] _ = []
sub _ 0 = []
sub (x:xs) c = sub xs (c - 1)

pos :: (Eq a) => [a] -> a -> Int
pos [] _ = 0
pos (x:xs) c
  | x == c = 0
  | otherwise = 1 + pos xs c

class (Eq a) => Continuous [a] a where
  after x c = sub x (pos x c)

instance (Eq a) => Continuous [a] [a] where
  after [] _ = []
  after x c
    | take (length c) x == c = sub x ((length c)+1)
    | otherwise = after (tail x) c

test.hs:13:28:
  Unexpected type `[a]' where type variable expected
  In the declaration of `Continuous [a] a'
Failed, modules loaded: none.

