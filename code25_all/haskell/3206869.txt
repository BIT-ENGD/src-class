class Monad m => FS m where
  isDirectory  :: Path -> m Bool
  children     :: Path -> m [Path]
  ...

cd
ls
cat
fsop :: FS m => Operation -> m Response

Operation
Response
Operation
loop :: Path -> IO ()
loop currentDir = do
        op <- getLine
        case read op of
          ChangeDir d -> loop d -- should test 'isDirectory d', but let's not
          Ls -> do { files <- children currentDir
                   ; mapM_ putStrLn files
                   ; loop currentDir }
          Exit -> return ()

Control.Monad.State
newtype Filesystem a = Filesystem (State (Data.Map.Map Path Contents) a)

instance Monad Filesystem ...
instance FS Filesystem ...

FS
step :: FS fs => Path -> Operation -> fs (Path, Response)
step currentDir op = 
        case op of
          ChangeDir d -> return (d, "")
          Ls -> do { files <- children currentDir
                   ; return (currentDir, unlines files) }

Operation
Response
IO
step
