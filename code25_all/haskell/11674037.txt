type Parser a = String -> [(a,String)]

item :: Parser Char
item = \ s -> case s of
    [] -> []
    (x:xs) -> [(x,xs)]

returnP :: Parser a
returnP a  = \s -> [(a,s)] 


(>>=) :: Parser a -> (a -> Parser b) -> Parser b
p>>=f = \s -> case p s of
    [(x,xs)]-> f x xs
    _ -> []


twochars :: Parser (Char,Char)
twochars= item >>= \a -> item >>= \b -> returnP (a,b)

