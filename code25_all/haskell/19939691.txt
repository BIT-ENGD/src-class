GADT
data Client
data Temporary
data Permanent

data Token ty where
  ClientToken :: Token Client
  TemporaryToken :: ByteString -> ByteString -> Token Temporary
  PermanentToken :: ByteString -> ByteString -> Token Permanent

deriving instance Eq (Token Client)
deriving instance Eq (Token Temporary)
deriving instance Eq (Token Permanent)

> ClientToken == ClientToken
True
> TemporaryToken "" "foo" == TemporaryToken "" "bar"
False

src/Network/HTTP/Conduit/OAuth/Types/Credentials.hs:72:1:
    Couldn't match type `Client' with `Temporary'
    Inaccessible code in
      a pattern with constructor
        TemporaryToken :: S8.ByteString
                          -> S8.ByteString -> Token Temporary,
      in an equation for `=='
    In the pattern: TemporaryToken a1 a2
    In an equation for `==':
        == (TemporaryToken a1 a2) (TemporaryToken b1 b2)
          = (((a1 == b1)) && ((a2 == b2)))
    When typechecking the code for  `=='
      in a standalone derived instance for `Eq (Token Client)':
      To see the code I am typechecking, use -ddump-deriv
    In the instance declaration for `Eq (Token Client)'

-fno-warn-*
