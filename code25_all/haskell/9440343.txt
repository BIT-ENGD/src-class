initializeClient clientSocket = do
    clientDataTVar <- atomically $ newTVar (UnregisteredClientData clientSocket)
    _ <- forkIO $ clientSocketReadLoop clientDataTVar

data UnregisteredClientData = UnregisteredClientData {
  ucdSocket :: Socket
}

data CustomerClientData = CustomerClientData {
  ccdSocket :: Socket,
  ccdName :: Text
}

writeTVar unregisteredClientDataTVar $ CustomerClientData clientSocket theirName

class ClientData a where
  cdSocket :: a -> Socket

instance ClientData UnregisteredClientData where
  cdSocket = ucdSocket

instance ClientData CustomerClientData where
  cdSocket = ccdSocket

class ClientData a where
  cdSocket :: a -> Socket
  handleMessage :: a -> String -> IO ()

instance ClientData UnregisteredClientData where
  cdSocket = ucdSocket
  handleMessage unregisteredClientDataTVar msg = (implementation)

instance ClientData CustomerClientData where
  cdSocket = ccdSocket
  handleMessage customerClientDataTVar msg = (implementation)

