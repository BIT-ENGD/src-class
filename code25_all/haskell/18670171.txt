type myType = [Int] -> (Tree Int,[Int])
Int
data Colour = R | B deriving (Show, Read, Eq)
data Tree elt = E | T Colour (Tree elt) elt (Tree elt) deriving (Show, Read, Eq)

type Set a = Tree a

type Funcs = [elt] -> (Tree elt, [elt])

Funcs
treeify_zero :: Treeify_t
treeify_zero lst = (E,lst)

treeify_one :: Treeify_t
treeify_one (h:t) = ((T R E h E), t)

type Funcs = forall elt. [elt] -> (Tree elt, [elt])
type Funcs elt = [elt] -> (Tree elt, [elt])
treeify_zero/one
