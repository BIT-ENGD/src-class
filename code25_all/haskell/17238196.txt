data UAC = UAC (AID,PlayerCommand) deriving Show
makeNetworkDescription :: forall t . Frameworks t =>
                      TChan UAC ->
                      AddHandler () ->
                      TChan GameState ->
                      Moment t ()
makeNetworkDescription commandChannel tickHandler gsChannel = do
   eTick <- fromAddHandler tickHandler
   bCChannel <- fromPoll $ grabCommands commandChannel
   let eCChannel = bCChannel <@ eTick
...
   reactimate ...



grabCommands :: TChan UAC -> IO [UAC]
grabCommands unval = do
  (atomically $ readTChan unval) `untilM` (atomically $ isEmptyTChan unval)

fromPoll
eTick
Event t [UAC]
