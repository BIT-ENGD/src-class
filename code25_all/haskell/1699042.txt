
    --main.hs
    data AST = Add (AST) (AST)|
               Sub  (AST) (AST)|
               Mult (AST) (AST)|
               Ident Char|
               Num Int
               deriving Show

    aSTLeft (Num    l   ) = (Num l)
    aSTLeft (Ident  l   ) = (Ident l)
    aSTLeft (Add  l _   ) = l
    aSTLeft (Sub  l _   ) = l
    aSTLeft (Mult l _   ) = l
    aSTRight    (Num    r   ) = (Num r)
    aSTRight    (Ident  r   ) = (Ident r)
    aSTRight    (Add  _ r   ) = r
    aSTRight    (Sub  _ r   ) = r
    aSTRight    (Mult _ r   ) = r

    isNum (Num x) = True
    isNum (Ident x) = False
    isNum (Add  (x)(y)) = False
    isNum (Sub  (x)(y)) = False
    isNum (Mult (x)(y)) = False

    --a lot more functions here



    --ASTADT.hs
    module ASTADT (AST,aSTLeft,aSTRight) where
    data AST =    Add (AST) (AST)|
                  Sub  (AST) (AST)|
                  Mult (AST) (AST)|
                  Ident Char|
                  Num Int
                  deriving Show

    aSTLeft     (Num    l   ) = (Num l)
    aSTLeft     (Ident  l   ) = (Ident l)
    aSTLeft     (Add  l _   ) = l
    aSTLeft     (Sub  l _   ) = l
    aSTLeft     (Mult l _   ) = l
    aSTRight        (Num    r   ) = (Num r)
    aSTRight        (Ident  r   ) = (Ident r)
    aSTRight        (Add  _ r   ) = r
    aSTRight        (Sub  _ r   ) = r
    aSTRight        (Mult _ r   ) = r


    --main.hs
    import ASTADT
    isNum (Num x) = True
    isNum (Ident x) = False
    isNum (Add  (x)(y)) = False
    isNum (Sub  (x)(y)) = False
    isNum (Mult (x)(y)) = False
    --a lot more functions here


    Undefined data constructor "Num"

