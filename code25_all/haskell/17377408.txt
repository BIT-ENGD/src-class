import Data.Vector as V
import Data.Vector.Mutable as MV
import Control.Monad.ST

type DoubleVec = V.Vector Double

incrAndSwap :: DoubleVec -> Int -> Int -> Int -> DoubleVec
incrAndSwap vec i a b = runST $ do
  mvec <- V.thaw vec
  oldval <- MV.read mvec i                          -- 1
  MV.write mvec i (val + 1)                         -- 2
  MV.swap mvec a b
  V.freeze mvec

incrAndSwap :: DoubleVec -> Int -> Int -> Int -> DoubleVec
incrAndSwap vec i a b = runST $ do
  mvec <- V.thaw vec
  incrAt mvec i
  MV.swap mvec a b
  V.freeze mvec

incrAt i
MV.write
import Control.Monad.Primitive

type MDoubleVec s = MV.STVector s Double

incrAt :: (PrimMonad m) => MDoubleVec (PrimState m) -> Int -> m ()
incrAt mvec i = MV.write mvec i (val + 1)
  where
    val = MV.read mvec i          -- val is stuck in monad m0

val
m0
