import Data.List

wiener e n = factors
    where euclid = euclidean e n
          cs = 1 : head euclid : rest cs euclid
          ds = 0 : 1 : rest ds euclid
          ns = filter isInt $ drop 2 $ zipWith (\x y -> (x * e - 1) / y) ds cs
          qs = map (\x -> quad 1 (x - n - 1) n) ns
          factors = find (\(p, q) -> isInt p && 0 < p && p < n 
                                  && isInt q && 0 < q && q < n) qs
          rest xs ys = zipWith (+) xs (zipWith (*) (tail ys) (tail xs))

euclidean _ 0 = []
euclidean a b = a `div` b : euclidean b (a `mod` b)

quad a b c
    | d > 0     = ((-b + sqrt d) / (2 * a), (-b - sqrt d) / (2 * a))   
    | otherwise = (0.0, 0.0) 
    where d = b * b - 4 * a * c

isInt x = x == fromInteger (round x)

wiener 238123333 293719721
No instance for (RealFrac a0) arising from a use of `wiener'
The type variable `a0' is ambiguous
Possible fix: add a type signature that fixes these type variable(s)

No instance for (Num a0) arising from the literal `238123333'
The type variable `a0' is ambiguous
Possible fix: add a type signature that fixes these type variable(s

