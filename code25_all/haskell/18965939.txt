{-# LANGUAGE TypeFamilies #-}

module Test where

import qualified Data.Set as D

class SetKey a where
    data Set a :: *
    empty :: Set a
    insert :: a -> Set a -> Set a
    member :: a -> Set a -> Bool
    toList :: Set a -> [a]

instance SetKey Bool where
    data Set Bool = BoolSet Bool Bool
    empty = BoolSet False False
    insert x (BoolSet t f) = case x of
        True -> BoolSet True f
        False -> BoolSet t True
    member x (BoolSet t f) = case x of
        True -> t
        False -> f
    toList (BoolSet t f) = if t && f
        then [True, False]
        else if t
            then [True]
            else if f
                then [False]
                else []

instance (Ord a) => SetKey a where
    newtype Set a = Wrap { unWrap :: D.Set a }
    empty = Wrap . D.empty
    insert x = Wrap . D.insert x . unWrap
    member x = Wrap . D.member . unWrap
    toList = D.toList . unWrap

class SetKey a where
    data Set a :: *
    data Set a = D.Set a
    empty :: Set a
    empty = D.empty
    insert :: a -> Set a -> Set a
    insert = D.insert
    member :: a -> Set a -> Bool
    member = D.member
    toList :: Set a -> [a]
    toList = D.toList

