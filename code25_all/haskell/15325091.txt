transf :: Queue -> [Char]
transf emptyQueue = []  
transf queue = [front queue] ++ transf (dequeue queue)

newtype Queue = Q [Char] deriving (Show)

emptyQueue :: Queue
emptyQueue = Q []

queueIsEmpty :: Queue -> Bool
queueIsEmpty (Q []) = True
queueIsEmpty (Q _) = False

enqueue :: Char -> Queue -> Queue
enqueue x (Q q) = Q (q ++ [x])

dequeue :: Queue -> Queue
dequeue (Q (_:xs)) = Q xs
dequeue (Q []) = error "dequeue: empty queue"

front :: Queue -> Char
front (Q (x:_)) = x
front (Q []) = error "front: empty queue"

