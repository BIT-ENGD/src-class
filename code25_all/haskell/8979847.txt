{-# LANGUAGE Rank2Types, MultiParamTypeClasses, FunctionalDependencies, FlexibleInstances #-}
{-# OPTIONS_GHC -fno-cse -fno-full-laziness -fno-float-in #-}

import Control.Applicative
import Data.Proxy

newtype Zero = Zero Zero deriving (Show)

class ReifiesNum s where
  reflectNum :: Num a => proxy s -> a

instance ReifiesNum Zero where
  reflectNum = pure 0

>:t Zero
Zero :: Zero -> Zero

>:t reflectNum
reflectNum :: (ReifiesNum s, Num a) => proxy s -> a

>let x = Just (undefined::Zero)
>reflectNum x

>:t (reflectNum Zero)
(reflectNum Zero) :: Num a => a

