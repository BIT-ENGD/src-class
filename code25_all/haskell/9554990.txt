f
xs
f
xs
x
fs
fs
x
f1(x), f2(x), ...
f3 (f2 (f1 (x)))
f1 (f2 (f3 (x)))
f1(x), f2(x), ...
fs
functionise
rev = \x y -> y x

mapf :: a -> [a -> b] -> [b]
mapf x fs = map (rev x) fs

reducef :: a -> [a -> a] -> a
reducef x fs = foldl rev x fs

filterf :: a -> [a -> Bool] -> [a -> Bool]
filterf x fs = filter (rev x) fs

