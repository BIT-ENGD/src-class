*Main Data.List> factorsets 7
[([2],2),([2,3],1),([3],1),([5],1),([7],1)]

chooseP 3 (factorsets 7)
cons
[[([5],1),([3],1),([2],2)]
,[([7],1),([3],1),([2],2)]
,[([7],1),([5],1),([2],2)]
,[([7],1),([5],1),([2,3],1)]
,[([7],1),([5],1),([3],1)]]

[([7],1),([5],1),([3],1)]
[([7],1),([5],1),([2],2)]
[[([5],1),([3],1),([2],2)]
,[([7],1),([3],1),([2],2)]
,[([7],1),([5],1),([3],1)]
,[([7],1),([5],1),([2,3],1)]
,[([7],1),([5],1),([3],1)]]

snd
chooseP k xs = chooseP' xs [] 0 where
  chooseP' [] product count = if count == k then [product] else []
  chooseP' yys product count
    | count == k = [product]
    | null yys   = []
    | otherwise  = f ++ g
   where (y:ys) = yys
         (factorsY,numY) = y
         f = let zzs = dropWhile (\(fs,ns) -> not . and . map (null . intersect fs . fst) $ product) yys
             in if null zzs
                   then chooseP' [] product count
                   else let (z:zs) = zzs in chooseP' zs (z:product) (count + 1)
         g = if and . map (null . intersect factorsY . fst) $ product
                then chooseP' ys product count
                else chooseP' ys [] 0

