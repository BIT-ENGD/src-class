<|>
newtype Parser t = Parser (String -> [(t, String)])

parse (Parser p) s = p s

instance Functor ....
instance Applicative ....

empty1 = Parser $ \s -> []

orp :: Parser t -> Parser t -> Parser t
-- orp :: (Eq t) => Parser t -> Parser t -> Parser t  -- this works too
p1 `orp` p2 = Parser $ \s -> let p1out = parse p1 s
                                 e     = parse empty1 s
                             in
                              if p1out == e
                              then parse p2 s
                              else p1out     

{- 
instance Alternative Parser where
  empty = Parser $ \s -> []

  (<|>) = orp -- fails to compile
-}
Eq
Eq
