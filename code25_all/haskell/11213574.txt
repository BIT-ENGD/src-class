StdGen
bind :: (a -> StdGen -> (b,StdGen)) -> (StdGen -> (a,StdGen)) -> (StdGen -> (b,StdGen))

bind :: (a -> c -> (b,c)) -> (c -> (a,c)) -> (c -> (b,c))

bind f x seed = let (x',seed') = x seed 
                 in f x' seed'

rndf1 :: (Num a, Num b) => a -> b -> (a,b)
rndf1 a s = (a+1,s+1)

rndf2 :: (Num a, Num b) => a -> b -> (a,b)
rndf2 a s = (a+8,s+2)

:t bind rndf2
bind rndf2 :: (Num a, Num c) => (c -> (a, c)) -> c -> (a, c)

rndf2
:t bind rndf2 . rndf1

bind rndf2 . rndf1 :: (Num a, Num c) => a -> c -> (a, c)

bind rndf2 . rndf1

rndf1
rndf1
rndf2
rndf2
rndf1
a -> c
rndf2
(a, c)
bind rndf2 . rndf1 :: (Num a, Num c) => a -> c -> (a, c)

bind f :: (a -> b -> (c, d)) -> (c, d) -> (e, f)

bind
rndf1
rndf2
