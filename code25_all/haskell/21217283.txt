DAWG
(Ord b, Binary b) => Binary (DAWG a b)
encode
import qualified Data.DAWG.Dynamic as Dawg
import qualified Data.Binary as Bin

Bin.encode $ Dawg.fromList [("foo",1),("bar",2)]

no instance for (Bin.Binary (Dawg.DAWG Char b0))
Bin.encode $ Dawg.fromList [("foo"::String,1::Int),("bar",2)]
<interactive>:19:1:
    No instance for (Bin.Binary (Dawg.DAWG Char Int))
      arising from a use of `Bin.encode'
    Possible fix:
      add an instance declaration for (Bin.Binary (Dawg.DAWG Char Int))
    In the expression: Bin.encode
    In the expression:
      Bin.encode
      $ Dawg.fromList [("foo" :: String, 1 :: Int), ("bar", 2)]
        In an equation for `it':
        it
          = Bin.encode
            $ Dawg.fromList [("foo" :: String, 1 :: Int), ("bar", 2)]

