pipes
Proxy
class ProxyC p where
    idT   :: (Monad m) => b' -> p a' a b' b m r
    (<-<) :: (Monad m)
          => (c' -> p b' b c' c m r)
          -> (b' -> p a' a b' b m r)
          -> (c' -> p a' a c' c m r)
    ... -- other methods

Proxy
instance (ProxyC p) => ProxyC (SomeExtension p) where ....

m
Monad
p a' a b' b m
Monad
a'
a
b'
b
ProxyC
    (<-<) :: (Monad m, Monad (p b' b c' c m), Monad (p a' a b' b m))
          => (c' -> p b' b c' c m r)
          -> (b' -> p a' a b' b m r)
          -> (c' -> p a' a c' c m r)

(Monad (SomeExtension p a' a b' b m))
(Monad (p a' a b' b m))
instance (Monad (p a b m)) => Monad (SomeExtension p a b m) where ...

Monad
ProxyC
class ProxyC p where
    return' :: (Monad m) => r -> p a' a b' b m r
    (!>=) :: (Monad m) => ...

ProxyC
Monad
Monad
Monad
