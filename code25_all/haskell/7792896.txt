// foo.h
extern "C" {
int foo (const char* arg0, int arg1);
}

// foo.cpp
#include "foo.h"
// implementation of foo

foo.o
libfoo.a
lib
-- Foo.hs
{-# LANGUAGE ForeignFunctionInterface #-}
module Foo where

foreign import ccall "foo"
    c_foo :: CString -> CInt -> IO (CInt)

extra-libraries
.cabal
...
extra-libraries: foo, stdc++

foo
.dist-scion\build\path\to\Foo.o:fake:(.text+0x514): undefined reference to `foo'

nm
foo
cabal configure
cabal build

Loading object (dynamic) foo ... ghc.exe: foo: ....
<command line>: user specified .o/.so/.DLL could not be loaded (addDLL: could not load DLL)

.o/.so/.DLL
.a
-optl-lfoo -optl-lstdc++
.cabal
extra-libraries
extern "C"
#ifdef __cplusplus
extern "C" {
#endif

extern int foo (const char*, int);

#ifdef __cplusplus
}
#endif

cabal build
