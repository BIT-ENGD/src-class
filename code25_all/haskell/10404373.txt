data RGBdata= RGB Int Int Int
data PBMfile= PBM Int Int [[RGBdata]]

instance Show RGBdata where
 show (RGB r g b) = (show r)++" "++(show g)++" "++(show b)

instance Show PBMfile where
 show (PBM width height l) = "P3\n"++(show width)++" "++(show height)++"\n255\n"++(foldr (++) "" (map myshow l))

myshow [] = "\n"
myshow (h:t) = (show h)++" "++(myshow t)

cargarPBM name = readFile name >>= return . rLines . lines
rLines (_:x:_:xs)= (\[a,b]->(PBM (read a) (read b) (rLines' (read a) (concat $map words xs)))) $ words x 
rLines' _ []= []
rLines' a x= (rLine (take (a*3) x): rLines' a (drop (a*3) x))
rLine []= []
rLine (r:g:b:xs)= ((RGB (read r) (read g) (read b)):rLine xs)

aplicar funcion origen destino= cargarPBM origen >>= writeFile destino . show . funcion

negative :: PBMfile -> [Int] 
negative PBM x y z = [1,2,3]

ERROR file:.\haha.hs:32 - Constructor "PBM" must have exactly 3 arguments in pattern

