import Control.Monad
import Data.List(permutations)

permutationsUpTo :: Int -> [a] -> [[a]]
permutationsUpTo 0 _ = []
permutationsUpTo _ [] = []
permutationsUpTo n (x:xs) = (permutationsUpTo (n) (xs)) ++ permutations (x:xs)

-- function borrowed from rosetta code
nthRoot n x = fst $ until (uncurry(==)) (\(_,x0) -> (x0,((n-1)*x0+x/x0**(n-1))/n)) (x,x/n)

integerNthRoot n = ceiling . (nthRoot n) . fromIntegral

algorithm :: Int -> Int -> [[Int]]
algorithm x n = do
    perm <- permutationsUpTo x [1..(integerNthRoot n x)]
    guard ((sum perm) == x)
    return perm

No instance for (RealFrac Int)
  arising from a use of `integerNthRoot'
Possible fix: add an instance declaration for (RealFrac Int)
In the expression: (integerNthRoot n x)
In the second argument of `permutationsUpTo', namely
  `[1 .. (integerNthRoot n x)]'
In a stmt of a 'do' block:
  perm <- permutationsUpTo x [1 .. (integerNthRoot n x)]

