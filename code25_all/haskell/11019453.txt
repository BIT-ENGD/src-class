divisible :: Integer -> Integer -> Bool
divisible x 2 = even x
divisible x y = ((x `mod` y) /= 0) && not (divisible x (y-1))
isPrime :: Integer -> Bool
isPrime x = not (even x) && not (divisible x (x-1))

ghci> isPrime 9
False
ghci> isPrime 13
True

isPrime x = not (even x) && not (divisible x (ceiling(sqrt(fromIntegral(x-1)))))

ghci> isPrime 9
False
ghci> isPrime 13
False

ghci> ceiling(sqrt(13))
4

