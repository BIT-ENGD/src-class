Read
data Nat = Null | Succ Nat

readNatNat :: String -> Nat
readNatNat xs   |first == '(' = readNatNat (tail xs)
                |first == ' ' = readNatNat (tail xs)
                |firstFour == "Succ" = (Succ (readNatNat(drop 4 xs)))
                |firstFour == "Null" = Null
                |b `elem` [0..] = toNatInt(b)
                 where b = (read(xs)::Int)
                    first = head xs
                    firstFour = take 4 xs

toNatInt :: Int -> Nat
toNatInt x | x==0 = Null
       | x<0 = error "Unter Null gibts kein Int 2 Nat"
       | otherwise = Succ(toNatInt(x-1))

readNatNat
Read
Couldn't match type `[Char]' with `Int'
Expected type: Int -> ReadS Nat
  Actual type: String -> Nat
In the expression: readNatNat
In an equation for `readsPrec': readsPrec = readNatNat
In the instance declaration for `Read Nat'
Failed, modules loaded: none.

Enum
Eq
Show
Read
Read
show
String
Show
instance Show Nat where
     show (Succ a) = showsRealSucc(Succ a)
     show Null = show "Null"

showsRealSucc :: Nat -> String
showsRealSucc Null = "Null"
showsRealSucc (Succ a) = (if a/= Null then ("Succ ("++showsRealSucc(a)++")") 
                                      else "Succ Null")

Nat
readNatNat "3"
"(Succ(Succ(Succ Null)))"
