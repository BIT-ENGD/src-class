data MsgString = Definition_msg {
      msg_no        :: Word16
    } deriving (Show)

parseDef :: Get MsgString
parseDef = do
    msg_no   <- getWord16le
    return $ Definition_msg msg_no

parseMain :: Get [MsgString]
parseMain =  do
      bit <- getWord8
      msg <- parseDef
      return msg:parseMain

Prelude> :l example.hs 
[1 of 1] Compiling Main             ( example.hs, interpreted )

example.hs:23:17:
    Couldn't match expected type `[m MsgString]'
           against inferred type `Get [MsgString]'
    In the second argument of `(:)', namely `parseMain'
    In the expression: return msg : parseMain
    In the expression:
        do { bit <- getWord8;
             msg <- parseDef;
               return msg : parseMain }
Failed, modules loaded: none.

