findKey :: (Eq k) => k -> [(k,v)] -> Maybe v
findKey key [] = Nothing
findKey key ((k,v): xs) = 
        if key == k
           then Just v
           else findKey key xs

takeValuesFromMap (x:str) m result
        |x == [] = result
        |findKey x m == Nothing = takeValuesFromMap str m (result++[x])
        |otherwise = takeValuesFromMap str m result++[fromJust (findKey x m)]

takeValuesFromMap ["x","+","y","-","5"] (Map.fromList [("x","5"),("y","4")]) []

Solver.hs:63:48:
Couldn't match expected type `[([Char], [Char])]'
            with actual type `Map.Map [Char] [Char]'
In the return type of a call of `Map.fromList'
In the second argument of `takeValuesFromMap', namely
  `(Map.fromList [("x", "5"), ("y", "4")])'
In the expression:
  takeValuesFromMap
    ["x", "+", "y", "-", ....]
    (Map.fromList [("x", "5"), ("y", "4")])
    []

