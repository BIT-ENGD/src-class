class Silly (t :: * -> *) where
    -- details

class (Silly s) => Willy (s t) where
    -- details

data Reasoner logic atoms a = Reasoner { unReasoner :: MassAssignment atoms -> a }

Applicative
run
run
class RunReasoner r where
    type MassType r
    type ResultType r
    run :: r -> MassType r -> ResultType r

instance RunReasoner (Reasoner l as a) where
    type MassType (Reasoner l as a) = MassAssignment as
    type ResultType (Reasoner l as a) = a
    run = -- details

instance (RunReasoner (r2 t)) => RunReasoner (Compose (Reasoner l1 as1) r2 t) where
    type MassType (Compose (Reasoner l1 as1) r2 t) = MassAssignment as1
    type ResultType (Compose (Reasoner l1 as1) r2 t) = r2 t
    run = -- details

expression `run` mass1 `run` mass2 `run` ... `run` massN

Reasoner l as
Reasoner l as a
RunReasoner
