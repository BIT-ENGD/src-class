type Wrap a = ReaderT Env ( StateT Int ( StateT Int Identity ) ) a

type Env = Map.Map Char Integer

runWrap :: Env -> Int -> Int -> Wrap a -> a
runWrap env st1 st2 m = runIdentity $ evalStateT ( evalStateT ( runReaderT m env ) st2 ) st1

tock :: (Num s, MonadState s m) => m ()
tock = do modify (+1)

aWrap :: Wrap ( Int, Int )
aWrap = do
    lift tock
    lift . lift $ tock
    x    <- get
    y    <- lift . lift $ get
    return ( x, y )

env = Map.fromList [('x', 1)]
runWrap env 1 200 aWrap
// answer: (201,2)

lift
(201,2)
aWrap :: Wrap ( Int, Int )
aWrap = do
    tock
    lift . lift $ tock
    x    <- get
    y    <- lift . lift $ get
    return ( x, y )

tock
lift
tock
Env
