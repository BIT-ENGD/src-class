chain :: (Integral a) => a -> [a]  
chain 1 = [1]  
chain n  
    | even n =  n:chain (n `div` 2)  
    | odd n  =  n:chain (n*3 + 1)  

numLongChains :: Int  
numLongChains = length (filter isLong (map chain [1..100]))  
    where isLong xs = length xs > 15  

numLongChains' :: [Int]  
numLongChains' = filter isLong (map chain [1..100])
    where isLong xs = length xs > 15    

Couldn't match expected type `Int' with actual type `[a0]'
Expected type: Int -> Bool
  Actual type: [a0] -> Bool
In the first argument of `filter', namely `isLong'
In the expression: filter isLong (map chain [1 .. 100])

