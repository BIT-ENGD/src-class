Maybe List
Maybe
Nothing
[]
Just
(:)
toStd . toExp == id
data List a = List a (Maybe (List a))
    deriving (Eq, Show, Read)

toExp [] = Nothing
toExp (x:xs) = Just (List x (toExp xs))

toStd Nothing = []
toStd (Just (List x xs)) = x : (toStd xs)

type Tree a = List (Tree a, Tree a)

