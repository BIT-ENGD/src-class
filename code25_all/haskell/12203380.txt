$ cat inputfile.txt | myFilter > outputfile.txt

sort
Event
data Event = ...

Ord
instance Ord Event where
    x < y = ...

sort
p :: String -> [Event]

lines
g :: [Event] -> [[Event]]

sort
f :: [[Event]] -> String

main = interact (f . (map sort) . g . p)

mySort :: [Event] -> [Event]
mySort [] = []
mySort (e:es) = let h = [j | j <- es, j < e]
                    t = [j | j <- es, e < j]
                in
                  (mySort h) ++ [e] ++ (mySort t)


main = interact (f . (map mySort) . g . p)

mySort
t
                    t = [j | j <- es, e <= j]

<
<=
<=
<
