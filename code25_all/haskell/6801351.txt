numCapabilities
    listChunkSize = numCapabilities

    chunk n [] = []
    chunk n xs = ys : chunk n zs
      where (ys,zs) = splitAt n xs

    parfoldr f z [] = z
    parfoldr f z xs = res
      where
            parts = chunk listChunkSize xs
            partsRs = map (foldr f z) parts `using` parList rdeepseq
            res = foldr f z partsRs

(a -> b -> b) -> b -> [a] -> b
foldr (+) 0 [1..10]
foldr (\i acc -> (i>5) && acc) True [1..10]
b
a
parfoldr :: (NFData a) => (a -> a -> a) -> a -> [a] -> a
    input = [1..1000000]
    seqfold = foldr (+) 0
    parfold = parfoldr (+) 0

    $ ./test
    seqfold: 4.99s
    parfold: 25.16s

    $ ./test
    seqfold: 5.32s
    parfold: 25.55s
    $ ./test +RTS -N1
    seqfold: 5.32s
    parfold: 25.53s
    $ ./test +RTS -N2
    seqfold: 3.48s
    parfold: 3.68s
    $ ./test +RTS -N3
    seqfold: 3.57s
    parfold: 2.36s
    $ ./test +RTS -N4
    seqfold: 3.03s
    parfold: 1.70s

