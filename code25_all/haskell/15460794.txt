data FailList a e = Done | Next a (FailList a e) | Fail e

data Sum f g a = InL (f a) | InR (g a)

data Success a = Success [a]
data Failure e a = Failure e [a]

Success
Const [a]
Failure e
pure
instance Functor Success where
  fmap f (Success a) = Success a

instance Functor (Failure e) where
  fmap f (Failure e a) = Failure e a

instance Apply (Failure e) where
  (Failure e a) <.> (Failure _ b) = Failure e a

instance Apply Success where
  (Success a) <.> (Success b) = Success (a <> b)

instance Applicative Success where
  pure = const (Success [])
  a <*> b = a <.> b

instance (Apply f, Apply g, Applicative g, Natural g f) => Applicative (Sum f g) where
  pure x = InR $ pure x
  (InL f) <*> (InL x) = InL (f <*> x)
  (InR g) <*> (InR y) = InR (g <*> y)
  (InL f) <*> (InR x) = InL (f <.> eta x)
  (InR g) <*> (InL x) = InL (eta g <.> x)

instance Natural Success (Failure e) where
  eta (Success a) = Failure ???? a

Failure
InR (Success ...) <*> InL (Failure ...)
