module ExampleProblem (Value,read',load,incr) where
newtype Value a = Value Int deriving (Eq,Read,Show)

read':: Value Int -> Int
read' (Value a) = a

load:: Int -> Value Int
load a = Value a

incr:: Value Int -> Value Int
incr (Value a) = Value (a+1)


main =  do
        (Value ab) <- (load 42)
        if (read'( Value ab) /= 42)
        then show "Failure to load"
        else do
             Value b <- incr( Value ab)
             Value c <- incr( Value b)
             if ((Value c) == Value 44)
             then show "Example finished"
             else show "error"
             return

Couldn't match expected type `Int' with actual type `Value t0'
In the pattern: Value ab
In a stmt of a 'do' expression: (Value ab) <- (load 42)
In the expression:
  do { (Value ab) <- (load 42);
       if (read' (Value ab) /= 42) then
           show "Failure to load"
       else
           do { Value b <- incr (Value ab);
                .... } }

Not in scope: data constructor `Value'

