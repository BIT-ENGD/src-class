  group :: (Eq a) => [Int] -> [[a]] -> [[[[a]]]]
  group []     _  = []
  group (i:is) xs 
    | sum (i:is) /= length xs = error "invalid arguments"
    | otherwise               = ...

group (i:is) xs 
     | (sum (i:is) == length xs) = ...
     | otherwise                 = error "invalid arguments"

 group (i:is) xs 
     | (sum (i:is) == length xs) = filter (/= []) $ concatGroups (combinations i xs) (group is xs)
     | otherwise                 = error ("invalid arguments: " ++ show (sum(i:is)) ++ "/=" ++ show(length xs))

group is xs
