{-# LANGUAGE GADTs, KindSignatures, DataKinds #-}
module Data.GADTTest where

data Height = Zero | Inc Height deriving (Show, Eq)

data TestGADT :: Height -> * where
    TypeCons1 :: TestGADT Zero
    TypeCons2 :: Int -> TestGADT h -> TestGADT (Inc h)

testFunc :: TestGADT h -> TestGADT h -> Int
testFunc TypeCons1 TypeCons1            = 1
testFunc (TypeCons2 {}) (TypeCons2 {})  = 2

-fwarn-incomplete-patterns
Pattern match(es) are non-exhaustive
    In an equation for `testFunc':
        Patterns not matched:
            TypeCons1 (TypeCons2 _ _)
            (TypeCons2 _ _) TypeCons1

testFunc TypeCons1 (TypeCons2 {})       = 3

Couldn't match type 'Zero with 'Inc h1
Inaccessible code in
  a pattern with constructor
    TypeCons2 :: forall (h :: Height).
                 Int -> TestGADT h -> TestGADT ('Inc h),
  in an equation for `testFunc'
In the pattern: TypeCons2 {}
In an equation for `testFunc':
    testFunc TypeCons1 (TypeCons2 {}) = 3

testFunc _ _ = undefined
warn-incomplete-patterns
