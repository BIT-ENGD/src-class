handleReplace
handleReplace :: Character -> T.Text -> T.Text

data Character  = Character (String, String, String, String) [(String,String)] Case String Stringderiving (Read, Show)

/
handleReplace :: Character -> T.Text -> T.Text
handleReplace (Character _ []   _ _ _)        s = s
handleReplace (Character _ ((a, b):xs) _ _ _) s = handleReplace emptyCharacter string
                                                where emptyCharacter = Character ([], [], [], []) xs Normal [] []
                                                      string         = T.unwords $ map (\ x 
                                                                                         -> if (T.head x) == '/'
                                                                                                then x
                                                                                                else T.replace (T.pack a) (T.pack b) s
                                                                                      ) $ T.words s

handleReplace (Character ([],[],[],[]) [("u","U"),("v","wv")] Normal [] []) $ T.pack "/uu v uu vvuu"

"/uu wv UU wvwvUU"
"/uu /UU /uu /UU wv UU wvwvUU /UU wv UU wvwvUU /UU wv UU wvwvUU ...

