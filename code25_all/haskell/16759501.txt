import Text.Parsec
import Text.Parsec.String
import Text.Parsec.Expr
import Text.Parsec.Token
import Text.Parsec.Language

data Expr = Num Int | Var String | Add Expr Expr | Sub Expr Expr | Mul Expr Expr | Div Expr Expr deriving Show

expr :: Parser Expr
expr = buildExpressionParser table factor
  <?> "expression"
table = [[op "*" Mul AssocLeft, op "/" Div AssocLeft],
      [op "+" Add AssocLeft, op "-" Sub AssocLeft]]
      where
        op s f assoc = Infix (do{ string s; return f}) assoc
factor = do{ char '('
        ; x <- expr
        ; char ')'
        ; return x}
    <|> number
    <|> variable
    <?> "simple expression"
number :: Parser Expr
number = do{ ds<- many1 digit
      ; return (Num (read ds))}
  <?> "number"
variable :: Parser Expr
variable = do{ ds<- many1 letter
        ; return (Var ds)}
  <?> "variable"

