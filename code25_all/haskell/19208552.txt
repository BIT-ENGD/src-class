femin,femin,1,f,woman,women,
aqu,aqu,1,f,water,waters,
..

noun(femin,femin,1,f,trans(woman,women)).
noun(aqu,aqu,1,f,trans(water,waters)).
..

-- get from "femin, femin, 1, f, woman, women" to noun(femin, femin, 1, f ,trans(woman,women)). 
import qualified Data.Attoparsec as P


data NounClause = NounClause
    {
        nom :: String,
        gen :: String,
        declension :: String,
        gender :: String,
        sgtrans :: String,
        pltrans :: String
    } deriving Show 

parseNounClause :: P.Parser NounClause

parseNounClause = do 
    nom <- String
    char ","
    gen <- String
    char ","
    declension <- String
    char ","
    gender <- String
    char ","
    sgtrans <- String
    char ","
    pltrans <- String
    return $ NounClause nom gen declension gender sgtrans pltrans

c = ","
convert :: NounClause -> String
convert NounClause = "noun(" ++ nom ++ c ++ gen ++ c ++ declension ++ c ++ gender ++ "trans(" ++ sgtrans ++ c ++ pltrans ++ "))."

