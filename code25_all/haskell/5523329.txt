import Data.Array

horizontal inArray limit listLen = [ findProd i j | i<-[1..limit], j<-[1..(limit - listLen)]]
            where 
            findProd a b = product [ inArray!(a,b+k) | k<-[0..(listLen-1)] ]

vertical inArray limit listLen = [ findProd i j | i<-[1..(limit-listLen)], j<-[1..limit]]
            where 
            findProd a b = product [ inArray!(a+k,b) | k<-[0..(listLen-1)] ]

rightDiag inArray limit listLen = [ findProd i j | i<-[1..(limit - listLen)], j<-[1..(limit - listLen)] ]
            where
            findProd a b = product [ inArray!(a+k,b+k) | k<-[0..(listLen-1)] ]

leftDiag inArray limit listLen= [ findProd i j | i <-[1..(limit - listLen)],j<-[listLen..limit] ]
            where
            findProd a b = product [ inArray!(a+k,b-k) | k<-[0..(listLen-1)] ]

solve = do
        x <- readFile "matrix.txt"              
        let limit = 20
        let listLen = 4
        let inArray = listArray ((1,1),(limit,limit)) $ ( map read (words x))
        let maxprod = maximum $ map maximum $ map (\f -> f inArray limit listLen) [horizontal,vertical,rightDiag,leftDiag]
        print inArray

let maxprod = maximum $ map maximum $ map (\f -> f inArray limit listLen) [horizontal,vertical,rightDiag,leftDiag]
