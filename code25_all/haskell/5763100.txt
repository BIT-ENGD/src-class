[Rectangle 1 33 33, Rectangle 2 23 45, Rectangle 3 34 56]

modifyRectangle :: [RectangleType] -> Int -> Int -> Int -> IO [RectangleType]
modifyRectangle [] _ _ _ = return []
modifyRectangle x idRectangle new_width new_height = do
    let (Rectangle id width height) = fromJust (findRectangle idRectangle x)
    -- what next ???????
    return x

findRectangle :: Int -> [RectangleType] -> Maybe RectangleType
findRectangle _ [] = Nothing
findRectangle n ((Rectangle id width height) : xs) =
    if n == id then Just (Rectangle id width height)
    else findRectangle n xs

data RectangleType = Rectangle Int Int Int deriving(Show, Read)

addRectangle :: RectangleType -> [RectangleType] -> [RectangleType]
addRectangle x [] = [x]
addRectangle x xs = x:xs

