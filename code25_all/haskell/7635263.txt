module Consonant where

import Char

type Name = String
type ConOrNot = String
data Consonant = Cons Name ConOrNot
    deriving (Show,Eq)


isVowel = "AEIOU"

cheak :: String -> Consonant

cheak [] = ""
cheak (char:chars) =
if  elem (toUpper char) isVowel  == false
then    cheak chars
else    cheak = Cons (char:chars) "Not Consonant"   
-- here I want to use "break", but I don't know how to use it in Haskell...  

cheak = Cons (char:chars) "Is Consonant"  

   module Consonant where

   import Char

   type Word = String
   type ConOrNot = String
   data Consonant = Cons Word ConOrNot
       deriving (Show,Eq)


   isConsonant = "BCDFGHJKLMNPQRSTVWXYZ"

   cheak :: String -> Consonant

   cheak [] = Cons "" ""


   cheak (char:chars) 
       |elem (toUpper char) isCosonant = cheak chars  --if all the letters are cosonant, I want it return (Cons (char:chars) "is Consonant").. still working on it
       |otherwise              = Cons (char:chars) "Not Consonant"

