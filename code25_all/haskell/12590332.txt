x
my_iter :: (a -> (a, b)) -> a -> [b]
my_iter f x = y : my_iter f x'
   where (x',y) = f x

fibs:: [Integer]
fibs = my_iter (\(a,b) -> let c = a+b in ((b, c), c)) (0,1)
-- [1, 2, 3, 5, 8...

iterate
my_iter f x = map f2 $ iterate f1 x
    where f1 = fst . f
          f2 = snd . f

my_iter f x = map snd . tail $ iterate (f.fst) (x, undefined)

