import Text.XML.HXT.Core
import Data.Char(toUpper)
import Data.Tree.NTree.TypeDefs

play filename = do 
                  results <- runX (getAllAddresses filename) 
                  results2 <- runX (getAllAddressesUsages filename) 
                  print results 
                  print results2 



getAllAddresses :: FilePath -> IOSArrow XmlTree [(String,NTree XNode)]
getAllAddresses filename =
    readDocument [withValidate no] filename >>>
    getChildren >>>
    isElem >>> hasName "main" >>>
    getChildren >>>
    isElem >>> hasName "part1" >>>
    getChildren >>>
    isElem >>> hasName "address" >>>
    listA(getAddress)                 -- create a list for each variable, so use listA



getAddress :: IOSArrow XmlTree (String,NTree XNode)
getAddress =
    getChildren >>>
    isElem >>>
         (
          neg ( hasName "location") >>>   -- all elements being no "location"
          getName &&& (getChildren)       -- get the name and the value for each element
         ) 
    <+>     
    ( 
      hasName "location" >>>              -- work on all nodes within the  "location" subcontainer
      getChildren >>> 
      isElem >>>
      ( getName &&& (getChildren) )       -- get the name and the value for each element
     )




getAllAddressesUsages :: FilePath -> IOSArrow XmlTree [(String,NTree XNode)]
getAllAddressesUsages filename =
    readDocument [withValidate no] filename >>>
    getChildren >>>
    isElem >>> hasName "main" >>>
    getChildren >>>
    isElem >>> hasName "part2" >>>
    getChildren >>>
    listA(getAddressUsagePurpose2)                 -- create a list for each variable, so use listA

getAddressUsagePurpose2 :: IOSArrow XmlTree (String,NTree XNode)
getAddressUsagePurpose2 =
    hasName "use_obj-names_for_purpose_2" >>>            -- work on all nodes with usage 2
    ( getName &&& (getChildren) )                        -- get the name and the value for each element

<main>
 <part1>
  <address>
    <obj-name>one</obj-name>
    <name>peter 1</name>
    <street>streetname 1</street>
    <location>
      <country>Germany</country>
      <state>Baden Wuerttemberg</state>
   </location>
   </address>
  <address>
    <obj-name>two</obj-name>
    <name>peter 2</name>
    <street>streetname 2</street>
    <location>
      <country>Germany</country>
      <state>Nordrhein Westfalen</state>
      </location>
   </address>
 </part1>
 <part2>
   <use_obj-names_for_purpose_1>
     <obj-name>two</obj-name>
   </use_obj-names_for_purpose_1>
   <use_obj-names_for_purpose_2>
     <obj-name>two</obj-name>
   </use_obj-names_for_purpose_2>
 </part2>
</main>

readXmlDocument :: String -> IOSArrow XmlTree (NTree XNode)
readXmlDocument filename = readDocument [withValidate no] filename

play filename = do 
             document <- readXmlDocument filename
             allAddresses <- getAllAddresses document
             allPurposes <- getAllAddressesUsages document
             result <- processLogics allAddresses allPurposes 
             print result

