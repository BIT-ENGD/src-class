transition_from_conductor :: Element_w_Coord Cell -> List_2D Cell -> Cell
transition_from_conductor element world = case num_of_heads_around_conductor (0, element) world of
    1 -> Head
    2 -> Head
    _ -> Conductor
    where
        num_of_heads_around_conductor :: (Int, Element_w_Coord Cell) -> List_2D Cell -> Int
        num_of_heads_around_conductor (i, (cell, (x, y))) ((w_cell, (w_x, w_y): rest)) = case rest of
            [] -> i
            _  -> case (w_cell, w_x, w_y) of
                (Head, (x + 1),  y)        -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                (Head, (x + 1), (y + 1))   -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                (Head, (x + 1), (y - 1))   -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                (Head, (x - 1),  y)        -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                (Head, (x - 1), (y + 1))   -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                (Head, (x - 1), (y - 1))   -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                (Head,  x,      (y + 1))   -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                (Head,  x,      (y - 1))   -> num_of_heads_around_conductor ((i + 1), (cell, (x, y))) (rest)
                _                          -> num_of_heads_around_conductor ( i     , (cell, (x, y))) (rest)

(Head, (x + 1), y) .....

type List_2D e = [Element_w_Coord e]
type Element_w_Coord e = (e, Coord)
type Coord = (X_Coord, Y_Coord)
type X_Coord = Integer
type Y_Coord = Integer

