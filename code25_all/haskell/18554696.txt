mapM
m (Maybe b)
Just
findM :: (Monad m) => (a -> m (Maybe b)) -> [a] -> m (Maybe b)

Just
Maybe
find
Maybe
findM f xs = fmap (fmap fromJust . find isJust) $ mapM f xs

find
ghci> findM (\x -> print x >> return (Just x)) [1,2,3]
1
2
3
-- returning IO (Just 1)

ghci> findM (\x -> print x >> return (Just x)) [1,2,3]
1
-- returning IO (Just 1)

ghci> findM (\x -> print x >> return (Just x)) [1..]
1
-- returning IO (Just 1)

