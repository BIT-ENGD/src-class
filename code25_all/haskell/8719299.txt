genTupleCount :: [F.Record] -> [(String, Int)] -> [(String, Int)]
genTupleCount [] tuples = tuples
genTupleCount (x:xs) tuples | mElem (F.club x) (map fst tuples) = genTupleCount xs $ getNewTuples tuples existing
                            | otherwise = genTupleCount xs $ (F.club x, 1):tuples
                        where 
                            existing = getExisting x tuples

getExisting :: F.Record -> [(String, Int)] -> (String, Int)                         
getExisting x tuples = head $ filter ((==F.club x).fst) tuples

getNewTuples :: [(String, Int)] -> (String, Int) -> [(String, Int)]
getNewTuples old e = (fst e, 1 + (snd e)):(delete e old)

mElem :: String -> [String] -> Bool
mElem _ [] = False
mElem str (x:xs) = (map toLower str) == (map toLower x) || mElem str xs

