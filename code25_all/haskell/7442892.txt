simplify'
simplify'(x) == x
simplify :: Expr -> Expr
simplify expr =
    let iterations = iterate simplify' expr
        neighbours = zip iterations (tail iterations)
        simplified = takeWhile (\(a, b) -> a /= b) neighbours
    in  snd $ last ((expr, expr) : simplified)

simplify' :: Expr -> Expr

simplify expr =
    let next = simplify' expr
    in  if next == expr
        then expr
        else simplify next

