No instance for MonadIO
iterateetests.hs:29:17:
    No instance for (MonadIO (Iteratee Int IO))
      arising from a use of `enumeratorFile' at iterateetests.hs:29:17-32
    Possible fix:
      add an instance declaration for (MonadIO (Iteratee Int IO))
    In the first argument of `(==<<)', namely `enumeratorFile h'
    In the first argument of `run_', namely
        `(enumeratorFile h ==<< summer)'
    In the expression: run_ (enumeratorFile h ==<< summer)

import Data.Enumerator
import qualified Data.Enumerator.List as EL
import System.IO
import Control.Exception.Base
import Control.Monad.Trans

summer :: (Monad m) => Iteratee Int m Int
summer = do
  m <- EL.head
  case m of
       Nothing -> return 0
       Just i -> do
     rest <- summer
     return (i+rest)

enumeratorFile h (Continue k) = do
  e <- liftIO (hIsEOF h)
  if e
     then k EOF
     else do
       l <- liftIO $ hGetLine h
       k (Chunks [read l]) >>== enumeratorFile h
enumeratorFile _ step = returnI  step

main = do
  bracket
    (openFile "numberlist" ReadMode)
    (hClose)
    (\h -> run_ (enumeratorFile h ==<< summer))

