data HuffTree = Node Int HuffTree HuffTree | Leaf (Int, Char)
insTree :: HuffTree -> HuffTree -> HuffTree
makePair :: HuffTree -> HuffTree -> HuffTree
value :: HuffTree -> Int
makeHuffTree :: [(Int, Char)] -> HuffTree
makeHuffTree :: [(Int, Char)] -> HuffTree
makeHuffTree lst = merge leafList
    where
        leafList = map (\ ((x,c)) -> Leaf (x,c)) lst
        merge [] = []
        merge [t] = [t]
        merge (t1 : t2 : tree) = insTree (makePair t1 t2) tree

Couldn't match expected type `[a0]' with actual type `HuffTree'
In the return type of a call of `insTree'
In the expression: insTree (makePair t1 t2) tree
In an equation for `merge':
    merge (t1 : t2 : tree) = insTree (makePair t1 t2) tree

