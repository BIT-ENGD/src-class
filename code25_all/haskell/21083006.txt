Integer
Double
id
+
negate
-
Either Integer Double
{-# LANGUAGE RankNTypes #-}

-- (...)

data Expr = IntExpr Integer | DoubleExpr Double
pSign :: Num a => MyParser (a -> a) -- returns id for + or negate for -
pReal :: (forall a. Num a => a -> a) -> Either Integer Double -> MyParser Expr

pNum :: MyParser Expr
pNum = do
    sign <- pSign
    numVal <- ParsecToken.naturalOrFloat lexer
    pReal sign numVal

let
pNum :: MyParser Expr
pNum = do
    sign <- pSign
    numVal <- ParsecToken.naturalOrFloat lexer
    let t = sign 1
        sign' :: Num a => a -> a
        sign' = if t == 1 then id else negate
    pReal sign numVal

sign
Integer -> Integer
sign :: Num a => a -> a
pReal :: (forall a. Num a => a -> a) -> ...
sign'
sign
pReal
sign'
sign
pNum = pSign >>= \(sign :: Num a => a -> a) -> do ...

sign
