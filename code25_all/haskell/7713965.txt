type Pattern = [PatternPart]

data PatternPart =
    MatchTuple [PatternPart] |
    Named String |
    MatchAny    

data ArguementIndex =
    InTuple Int ArguementIndex | -- arguement is in tuple at index Int, then at index...
    ArgIndex Int

testPattern = [Any, MatchTuple[Any, Named "hello"]]

getArgIndex :: Pattern -> String -> Maybe ArguementIndex

getArgIndex
testPattern
"hello"
InTuple 1 (ArgIndex 1)
getArgIndex [Any, Any, MatchTuple [Named "hi"]] "hi" = Just (InTuple 2 (ArgIndex 0))

