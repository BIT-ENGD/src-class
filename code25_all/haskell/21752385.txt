data Sudoku = Sudoku { getSudoku :: [[Maybe Int]] } deriving (Show, Eq)

printSudoku :: Sudoku -> IO ()
printSudoku s = do
putStrLn . unlines . map (map (maybe '.' (head . show))) $ rows s

stringToSudoku :: String -> [[Maybe Int]]
stringToSudoku [] = []
stringToSudoku s = (f x):stringToSudoku y
    where (x,y) = splitAt 9 s
        f = map (\x -> if (digitToInt x)==0 then Nothing else Just (digitToInt x))


readSudoku :: FilePath -> IO Sudoku
readSudoku path = do
    handle <- openFile path ReadMode
    contents <- hGetContents handle
    return $ Sudoku $ stringToSudoku contents

readSudoku "sudoku.txt" >>= printSudoku 
.......1.
4........
.2.......
....5.4.7
..8...3..
..1.9....
3..4..2..
.5.1.....
...8.6...

