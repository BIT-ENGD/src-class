takesSingleArg :: (String -> IO ()) -> [String] -> IO ()
takesSingleArg act [arg] = act arg
takesSingleArg _   _     = showUsageMessage

takesTwoArgs :: (String -> String -> IO ()) -> [String] -> IO ()
takesTwoArgs act [arg1, arg2] = act arg1 arg2
takesTwoArgs _   _            = showUsageMessage

generateArgumentWrapper<2, showUsageMessage>

\fn args -> case args of
                 [a, b] -> fn a b
                 _      -> showUsageMessage

generateArgumentWrapper
generateArgumentWrapper<2, asInt, asFilePath, showUsageMessage>

\fn args -> case args of
                 [a, b] -> fn (asInt a) (asFilePath b)
                 _      -> showUsageMessage

[String]
