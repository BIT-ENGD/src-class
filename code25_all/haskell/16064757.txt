class Foo f where
    frobnicate :: f -> Float

instance
Foo
 data Bar = Bar { <here> }

-- Typically lightweight geometric objects, e.g. spheres
class Shape s where
    intersect :: (RealFrac t, Floating t, Ord t, Shape s)
              => Ray t -> s t -> Maybe (DifferentialGeometry t)

-- Primitives contain higher level informations, like material properties
class Primitive p where
    intersect :: (RealFrac t, Floating t, Ord t, Primitive p)
              => Ray t -> p t -> Maybe (Intersection t)

Primitive.intersect
Shape.intersect
Shape
Primitive
data ShapeWrapperPrimitive t = ShapeWrapperPrimitive {
                                  shape :: (Shape s) => s t
                               }

shape
Shape
Illegal polymorphic or qualified type
