DataKinds
Vec
data Nat = Z | S Nat deriving (Eq, Show)

data Vec :: Nat -> * -> * where
    Nil :: Vec Z a
    Cons :: a -> Vec n a -> Vec (S n) a

fromList
fromList : ∀ {a} {A : Set a} → (xs : List A) → Vec A (List.length xs)

fromList :: (ls :: [a]) -> Vec (length ls) a
fromList [] = Nil 
fromList (x:xs) = Cons x (fromList xs)

parse error on input 'a'
GADTs, DataKinds, KindSignatures, TypeOperators, TypeFamilies, UndecidableInstances
bla :: (n :: Nat) -> a -> Vec (S n) a
bla = undefined

Kind mis-match Expected kind 'ArgKind', but 'n' has kind 'Nat'
fromList
DataKinds
