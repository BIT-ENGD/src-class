HList
HBetween
HNat
HNat
HRange
hRange :: l -> u -> r
l
u
hRange
{-# LANGUAGE MultiParamTypeClasses, FunctionalDependencies, 
    FlexibleInstances, FlexibleContexts, UndecidableInstances #-}
module Data.HList.HNats where
import Data.HList.CommonMain
class (HNat l, HNat u) => HRange l u r | l u -> r where
  hRange :: l -> u -> r
instance HNat l => HRange l (HSucc l) (HCons l HNil) where
  hRange _ _ = undefined
instance HRange l u r => HRange l (HSucc u) (HCons u r) where
  hRange _ _ = undefined

*Data.HList.HNats Data.HList> :load Data/HList/HNats
[1 of 1] Compiling Data.HList.HNats ( Data/HList/HNats.hs, interpreted )
Ok, modules loaded: Data.HList.HNats.
*Data.HList.HNats Data.HList> hRange hZero (hSucc hZero )

<interactive>:24:1:
    Overlapping instances for HRange
                                HZero (HSucc HZero) (HCons HZero HNil)
      arising from a use of `hRange'
    Matching instances:
      instance HNat l => HRange l (HSucc l) (HCons l HNil)
        -- Defined at Data/HList/HNats.hs:14:10
      instance HRange l u r => HRange l (HSucc u) (HCons u r)
        -- Defined at Data/HList/HNats.hs:20:10
    In the expression: hRange hZero (hSucc hZero)
    In an equation for `it': it = hRange hZero (hSucc hZero)
*Data.HList.HNats Data.HList> 

hRange hZero (hSucc hZero )
instance HRange l u r => HRange l (HSucc u) (HCons u r)
