User
    ident Text
    password Text Maybe
     UniqueUser ident
    deriving Typeable

Payment
    timestamp UTCTime
    from UserId
    to UserId
    amount Int

getPaymentsR :: Handler Html
getPaymentsR = do
    let payments = map addFromTo $ runDB $ selectList [] [Desc PaymentTimestamp]
    defaultLayout
        [whamlet|
            <h3> Payments
            <ul>
                $forall (key, value, from, to) <- payments
                    <li>
                        <a href=@{UserR $ paymentFrom value}> #{from} </a> paid #{paymentAmount value} to <a href=@{UserR $ paymentTo value}> #{to} </a> on #{printDay $ paymentTimestamp value}
            $if null payments
                <ul>
                    <li> No payments
        |]
    where 
        addFromTo :: Entity Payment -> (Key Payment, Payment, Text, Text)
        addFromTo (Entity key val) = do
            let from = runDB $ get404 $ paymentFrom val
            let to = runDB $ get404 $ paymentTo val
            (key, val, userIdent from, userIdent to)

Handler/Payment.hs:9:36:
    Couldn't match expected type `[Entity Payment]'
                with actual type `HandlerT site0 IO [Entity Payment]'
    In the second argument of `($)', namely
      `runDB $ selectList [] [Desc PaymentTimestamp]'
    In the expression:
      map addFromTo $ runDB $ selectList [] [Desc PaymentTimestamp]
    In an equation for `payments':
        payments
          = map addFromTo $ runDB $ selectList [] [Desc PaymentTimestamp]

Handler/Payment.hs:26:34:
    Couldn't match expected type `User'
                with actual type `HandlerT site0 IO User'
    In the first argument of `userIdent', namely `from'
    In the expression: userIdent from
    In a stmt of a 'do' block: (key, val, userIdent from, userIdent to)

Handler/Payment.hs:26:50:
    Couldn't match expected type `User'
                with actual type `HandlerT site1 IO User'
    In the first argument of `userIdent', namely `to'
    In the expression: userIdent to
    In a stmt of a 'do' block: (key, val, userIdent from, userIdent to)

addFromTo :: Entity Payment -> (Key Payment, Payment, Text, Text)
addFromTo (Entity key val) = do
    from' <- runDB $ get404 $ paymentFrom val
    to' <- runDB $ get404 $ paymentTo val
    let from = userIdent from'
    let to = userIdent to'
    (key, val, from, to)

