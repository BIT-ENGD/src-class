State
newtype FooRead  a = FooRead  { runFooRead  :: Context -> (a,Context) }
newtype FooWrite a = FooWrite { runFooWrite :: Context -> (a,Context) }

FooRead
getVal :: FooRead a
getVal = do x <- ...
            return x

writeFunc :: FooWrite ()
writeFunc = do x <- liftVal getVal
            ...

liftVal :: FooRead a -> FooWrite a
FooRead
FooWrite
getVal
FooWrite
getVal
FooRead
FooWrite
lower :: FooWrite a -> FooRead a

