import System.IO
import System.Environment
import System.Directory

main = do
  unfiltered <- getArgs ; home <- getHomeDirectory ; let db = home ++ "/.grindstone"

  case unfiltered of
    (x:xs) -> return ()
    _      -> error "No command given. See --help for more info."
  command:args <- getArgs

  createDirectoryIfMissing True db

  let check = case args of
              [] -> error "No arguments given. See --help for more info."
              _  -> do let (params@(param:_),rest) = span (\(c:_) -> c=='-') args
                       if length params > 1 then error ("No arguments given for " ++ param)
                         else do
                       let (pArgs,_) = span (\(c:_) -> c/='-') rest
                       return (param, pArgs) :: Either (IO ()) (String, [String])

  let add = print "sup"

  let cmds = [("add", add)]
  let action = lookup command cmds

  case action of
    Nothing -> error "Unknown command."
    (Just action) -> action

grindstone.hs:21:23:
    No instance for (Monad (Either (IO ())))
      arising from a use of `return' at grindstone.hs:21:23-43
    Possible fix:
      add an instance declaration for (Monad (Either (IO ())))
    In the expression:
          return (param, pArgs) :: Either (IO ()) (String, [String])
    In the expression:
        do { let (pArgs, _) = span (\ (c : _) -> ...) rest;
               return (param, pArgs) :: Either (IO ()) (String, [String]) }
    In the expression:
        if length params > 1 then
            error ("No arguments given for " ++ param)
        else
            do { let (pArgs, _) = ...;
                   return (param, pArgs) :: Either (IO ()) (String, [String]) }

