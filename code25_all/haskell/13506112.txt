data Node a = Node a deriving (Show, Eq)

data Label a = Label a deriving (Show)

data Cost = CostI Int | CostF Float deriving (Show)

data Edge label node = Edge (Label label, (Node node,Node node), Cost) deriving (Show)

isEdge:: (Eq n) => (Edge l n) -> (Node n, Node n) -> Bool
isEdge (Edge (_, (n1,n2), _)) (n3, n4) = result
     where result = (n1 == n3) && (n2 == n4)

Node
data Node a = Node a deriving (Show, Eq)

