BaseTree
Tree
class BaseTree
  class BaseNode; end
  class NodeA < BaseNode; end
end

class Container
  class Tree < BaseTree; end
end

#initialize
class BaseTree::BaseNode
  def initialize x
    p x
  end
end

Container::Tree::NodeA.new(1)
# => 1

class Container::Tree::NodeA
  def some_method; end
end

NodeA
BaseNode
Container::Tree::NodeA.new(2)
# ~> -:30:in `initialize': wrong number of arguments(1 for 0) (ArgumentError)

class Container
  class Tree < BaseTree
    class NodeA < BaseNode; end # explicit inheritance
  end
end

class Container::Tree::NodeA
  def some_method; end
end

class Container::Tree::NodeA < Container::Tree::BaseNode
  def some_method; end
end

class Container::Tree::NodeA < BaseTree::BaseNode
  def some_method; end
end

class Container::Tree::NodeA
  def another_method; end
end

