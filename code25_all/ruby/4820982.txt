action
action.rb
module CampfireBot
  class Action
    @handlers = {}

    def initialize(room)
      @room = room
    end


    class << self
      attr_reader :handlers
      attr_reader :room

      def hear(pattern, &action)
        Action.handlers[pattern] = action
      end
    end
  end
end

@room
@handlers
class << self
hear
Foo.rb
class Foo < CampfireBot::Action

    hear /foo/i do
        @room.speak "bar"
    end
end

def load_handlers(room)
  actions = Dir.entries("#{BOT_ROOT}/actions").delete_if {|action| /^\./.match(action)}
  action_classes = []
  # load the source
  actions.each do |action|
    load "#{BOT_ROOT}/actions/#{action}"
    action_classes.push(action.chomp(".rb"))
  end

  # and instantiate
  action_classes.each do |action_class|
    Kernel.const_get(action_class).new(room)
  end

  @handlers =  Action.handlers

end

room.rb
handlers.each do |pattern, action|
  if pattern.match(msg)
    action.call($~)
  end
end

puts @room
Action
puts "foo"
Foo.rb
hear
foo
@room
class Foo < CampfireBot::Action

    hear /foo/i do
        say_bar
    end

    def say_bar
        @room.speak "bar"
    end
end

NoMethodError: undefined method 'say_bar' for Foo:Class
