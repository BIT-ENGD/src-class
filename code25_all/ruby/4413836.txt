specify { Factory.build(:address).should be_valid }


  ### first_name ###

  it "should be invalid without an first_name" do
    Factory.build(:address, :first_name => nil).should_not be_valid
  end


  context "first_name" do

    it "should be invalid with more than 20 chars" do
      Factory.build(:address, :first_name => "#{'b'*21}").should_not be_valid
    end

    it "should be invalid with less than 3 chars" do
      Factory.build(:address, :first_name => "ll").should_not be_valid
    end

    it "should be valid with an valid first_name" do      
       valid_names.each do |name|
        Factory.build(:address, :first_name => name).should be_valid
       end
    end

    it "should be invalid with an invalid first_name" do
      invalid_names.each do |name|
        Factory.build(:address, :first_name => name).should_not be_valid
      end
    end    
  end


  ### last_name ###

  it "should be invalid without an last_name" do
    Factory.build(:address, :last_name => nil).should_not be_valid
  end

  context "last_name" do
    it "should be invalid with more than 20 chars" do
      Factory.build(:address, :last_name => "#{'b'*21}").should_not be_valid
    end

    it "should be invalid with less than 3 chars" do
      Factory.build(:address, :last_name => "ll").should_not be_valid
    end

    it "should be valid with an valid last_name" do      
       valid_names.each do |name|
        Factory.build(:address, :last_name => name).should be_valid
       end
    end

    it "should be invalid with an invalid last_name" do
      invalid_names.each do |name|
        Factory.build(:address, :last_name => name).should_not be_valid
      end
    end    
  end
 def valid_names    
    ["Kai","Ülück's","Schmeißtzs","Rald","Dr. Franzen","rolfes","Lars Michael","Öcück","Mark-Anthony"] 
  end

  def invalid_names    
    ["-#+*32","         ","a& &lkdf","_-_.l##df"," aaadsa","M€lzer"]
  end

