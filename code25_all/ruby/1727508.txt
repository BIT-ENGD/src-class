    unless Rakismet::Base.rakismet_binding.nil?
      { :referrer => 'request.referer', :user_ip => 'request.remote_ip',
        :user_agent => 'request.user_agent' }.each_pair do |k,v|
          data[k] = eval(v, Rakismet::Base.rakismet_binding) || ''
      end
    end

module InstanceMethods
  def spam?
    data = akismet_data

    unless Rakismet::Base.rakismet_binding.nil?
      { :referrer => 'request.referer', :user_ip => 'request.remote_ip',
        :user_agent => 'request.user_agent' }.each_pair do |k,v|
          data[k] = eval(v, Rakismet::Base.rakismet_binding) || ''
      end
    end

    self.akismet_response = Rakismet::Base.akismet_call('comment-check', data)
    self.akismet_response == 'true'
  end

  class Base
    cattr_accessor :valid_key, :rakismet_binding

def rakismet(&block)
  Rakismet::Base.rakismet_binding = binding
  yield
  Rakismet::Base.rakismet_binding = nil
end
private :rakismet

