being_processed
class Example

  def initialize
    @threads      = ThreadGroup.new
    @page_queue   = Queue.new
    Thread.abort_on_exception = true
  end

  def start
    periodically_fill_page_queue
    periodically_process_page_queue
  end

  def periodically_fill_page_queue
    @threads.add(Thread.new do
      loop do
        if @page_queue.empty?
          Page.with_state(:waiting).each do |p|
            p.queued!
            @page_queue << f
          end
        end
        sleep 2
      end
    end)
  end

  def periodically_process_page_queue
    loop do
      until file = @page_queue.pop
        sleep 2
      end
      page.being_processed
      process(page)
    end
  end

  def process(page)
    sleep 120
    page.processed
  end

end


class Page < ActiveRecord::Base

  state_machine :state, :initial => :waiting do

    event :queued do
      transition :waiting => :queued
    end

    event :being_processed do
      transition :queued => :being_processed
    end

    event :processed do
      transition :being_processed => :processed
    end

  end

end

def initialize
  ...
  @mutex = Mutex.new
end

def periodically_process_page_queue
  loop do
    until file = @page_queue.pop
      sleep 2
    end
    @mutex.synchronize { page.being_processed }
    process(page)
  end
end

