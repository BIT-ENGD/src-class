require 'serialport.so'
class AlphaDisplay

  #STATES
  SOLID = "b"
  ROTATE = "a"
  BLINK = "c"
  #COLORS
  RED = "1"
  GREEN = "2"
  YELLOW = "3"
  ORANGE = "7"

  def self.message(address = 00, text = "ICS", color = AlphaDisplay::GREEN, state = AlphaDisplay::SOLID)
    address = address.to_s
    if address.length == 1
      address = "0#{address}"
    end
    string = 1.chr + 90.chr + address + 2.chr + 65.chr + 65.chr + 27.chr + 26.chr + state + 28.chr + color + text + 4.chr
    return string
  end
  def self.test(address = 00, text = "ICS", color = AlphaDisplay::GREEN, state = AlphaDisplay::SOLID)
    sp = SerialPort.new(0, 9600, 8, 1, SerialPort::NONE)
    sp.write(message(address,text,color,state))
    sp.close
  end   
end

def SerialPort::new(port, *params)
  sp = create(port)
  begin
    sp.set_modem_params(*params)
  rescue
    sp.close
    raise
  end
  return sp
end

def SerialPort::open(port, *params)
  sp = create(port)
  begin
    sp.set_modem_params(*params)
    if (block_given?)
      yield sp
      sp.close
      return nil
    end
  rescue
    sp.close
    raise
  end
  return sp
end

