Thing
Tree::TreeNode
Forwardable
class Thing < NoClassInheritancePlease
  extend Forwardable

  def initialize(title = "node")
    @node = Tree::TreeNode.new title

    # Collect node methods that should be delegated
    node_methods = @node.public_methods(false)
    node_methods += @node.protected_methods
    node_methods -= (public_methods(false) + protected_methods(false) + private_methods) # own methods should not been delegated

    # Set up delegation of specified node methods as singleton methods
    for method in node_methods
      Base.def_delegator :@node, method
    end
  end
end

TreeNode
self
def each(&block)             # :yields: node
  yield self
  children { |child| child.each(&block) }
end

my_thing.each {...}
self
Tree::TreeNode
my_thing
Thing
siblings = []
parent.children {|my_sibling| siblings << my_sibling if my_sibling != self}
siblings

Thing
my_sibling
Thing
self
Tree::TreeNode
Tree::TreeNode
Thing
