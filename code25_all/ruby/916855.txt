def make_wrapped_block(&block)
  puts "take_block:before"
  func = lambda do
    puts "Before calling make_wrapped_block's passed block"
    block.call
    puts "After calling make_wrapped_block's passed block"
  end
  puts "take block:after"
  func
end

def make_block
  make_wrapped_block do
    puts "Before return"
    return :pi
    puts "After return"
  end
end

make_block.call

make_block
make_wrapped_block
make_wrapped_block
make_block
[ cpm juno ~/tmp/local-jump ] ruby bad.rb
take_block:before
take block:after
Before calling make_wrapped_block's passed block
Before return
bad.rb:15:in `make_block': unexpected return (LocalJumpError)
        from bad.rb:5:in `call'
        from bad.rb:5:in `make_wrapped_block'
        from bad.rb:20:in `call'
        from bad.rb:20

def make_wrapped_block(block)
  puts "take_block:before"
  func = lambda do
    puts "Before calling make_wrapped_block's passed block"
    block.call
    puts "After calling make_wrapped_block's passed block"
  end
  puts "take block:after"
  func
end

def make_block
  make_wrapped_block(lambda {
    puts "Before return"
    return :pi
    puts "After return"
  })
end

make_block.call

lambda
Proc.new
