class Project < ActiveRecord::Base

  CHILDREN = []
  def self.inherited(child)
    super
    CHILDREN << child
    puts "CHILDREN.inspect: #{CHILDREN.inspect}"
  end
  def self.valid_child_types
    CHILDREN.collect{ |child| child.project_type}
  end
end

>> Project
require_or_load /Users/frankdrebin/Sites/cerp/app/models/project.rb
loading /Users/frankdrebin/Sites/cerp/app/models/project
require_or_load /Users/frankdrebin/Sites/cerp/app/models/status.rb
loading /Users/frankdrebin/Sites/cerp/app/models/status

=> Project(id: integer, url: string, deadline: date, state: string, type: string,  priority: integer, status_id: integer)
>> Project::CHILDREN
=> []
>> ArticleProject
require_or_load /Users/frankdrebin/Sites/cerp/app/models/projects/article_project.rb
loading /Users/frankdrebin/Sites/cerp/app/models/projects/article_project
CHILDREN.inspect: [ArticleProject(id: integer, url: string, deadline: date, state:  string, type: string, priority: integer, status_id: integer)]
require_or_load /Users/frankdrebin/Sites/cerp/vendor/gems/state_machine-  0.7.3/lib/state_machine.rb
loading /Users/frankdrebin/Sites/cerp/vendor/gems/state_machine-0.7.3/lib/state_machine

=> ArticleProject(id: integer, url: string, deadline: date, state: string, type: string,   priority: integer, status_id: integer)
>> Project::CHILDREN
=> [ArticleProject(id: integer, url: string, deadline: date, state: string, type: string,  priority: integer, status_id: integer)]
>> 

