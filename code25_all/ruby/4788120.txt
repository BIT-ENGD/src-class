require 'inventory'

class CustomerOrder < ActiveRecord::Base
  validates_presence_of :name
  validate :must_have_at_least_one_item, :items_must_exist
  before_save :convert_to_internal_items


  attr_accessor :items

  after_initialize do
    #convert the internal_items string into an array
    if internal_items
      self.items ||= self.internal_items.split(',').collect { |x| x.to_i }
    else 
      # only clobber it if it hasn't been set yet, like in the constructor
      self.items ||= []
    end
  end

  private
  def convert_to_internal_items
    #TODO: convert the items array into a string
    self.internal_items = self.items.join(',')
  end

  def must_have_at_least_one_item
    self.items.size >= 1
  end

  def items_must_exist
    self.items.all? do |item|
      Inventory.item_exists?(item)
    end
  end
end

class Inventory 

  def self.item_exists?(item_id)
    # TODO: pretend real code exists here
    # MORE CLARITY: this code should be replaced by the mock, because the actual
    # inventory service cannot be reached during testing.
  end
end

describe CustomerOrder do
    it "should not accept valid inventory items" do
        #magical mocking that makes Inventory.item_exists? return what I want
        magic.should_receive(:item_exists?).with(1).and_return(false)
        magic.should_receive(:item_exists?).with(2).and_return(true)

        co = CustomerOrder.new(:name => "foobar", :items => [1,2]
        co.should_not be_valid
    end
    it "should be valid with valid inventory items" do
        #magical mocking that makes Inventory.item_exists? return what I want
        magic.should_receive(:item_exists?).with(3).and_return(true)
        magic.should_receive(:item_exists?).with(4).and_return(true)

        co = CustomerOrder.new(:name => "foobar", :items => [3,4]
        co.should be_valid
    end  
end

