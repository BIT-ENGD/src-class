class ERB
  class Compiler # :nodoc:
..
 class Buffer # :nodoc:
  def compile(s)
   ...
   #It stores in a buffer each ruby chunk in the views inside of a Buffer.
  end
 end
   end
...
 # Here it is where is called compile method. 
 # The thing is that if my view is made up of several *.html.erb files such as partials this method will be invoked each time.        
        #INVOKED PER EACH html.erb file

 def initialize(str, safe_level=nil, trim_mode=nil, eoutvar='_erbout')
     puts ">>> initialize"    
     @safe_level = safe_level
    # ActiveSupport::CoreExtensions::Time::Conversions::DATE_FORMATS.update(:default => "%d %b %Y")
     compiler = ERB::Compiler.new(trim_mode)
    # raise "need a block" 
    # ActiveSupport::CoreExtensions::Time::Conversions::DATE_FORMATS.update(:default => nil)
     set_eoutvar(compiler, eoutvar)
     @src = compiler.compile(str)  
     @filename = nil
   end
 end
end

require 'delegate'
require 'optparse'
require 'fileutils'
require 'tempfile'
require 'erb'

module Rails
  module Generator
    module Commands

        class Create 

              # Generate a file for a Rails application using an ERuby template.
              # Looks up and evaluates a template by name and writes the result.
              #
              # The ERB template uses explicit trim mode to best control the
              # proliferation of whitespace in generated code.  <%- trims leading
              # whitespace; -%> trims trailing whitespace including one newline.
              #
              # A hash of template options may be passed as the last argument.
              # The options accepted by the file are accepted as well as :assigns,
              # a hash of variable bindings.  Example:
              #   template 'foo', 'bar', :assigns => { :action => 'view' }
              #
              # Template is implemented in terms of file.  It calls file with a
              # block which takes a file handle and returns its rendered contents.
              def template(relative_source, relative_destination, template_options = {})
                puts "EEEEEEEEEEEEEEEEEEEEEe"
                file(relative_source, relative_destination, template_options) do |file|
                  # Evaluate any assignments in a temporary, throwaway binding.
                  vars = template_options[:assigns] || {}
                  b = template_options[:binding] || binding
                  vars.each { |k,v| eval "#{k} = vars[:#{k}] || vars['#{k}']", b }

                  # Render the source file with the temporary binding.
                  ERB.new(file.read, nil, '-').result(b)
                end
             end

        end

    end
  end
end

/lib/*_extensions.erb
/config/initializers/extensions.rb
Dir[File.dirname(__FILE__) + "/../../lib/*_extensions.rb"].each do |fn|
  require fn
end

