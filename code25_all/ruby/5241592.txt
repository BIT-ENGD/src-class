<%= form_for(@project) do |f| %>
  <p>
    <%= f.label :title %><br />
    <%= f.text_field :title %>
  </p>

  <% f.fields_for :items do |builder| %>
    <%= render "item_fields", :f => builder %>
  <% end %>
  <p><%= link_to_add_fields "+item", f, :items %></p>

  <div class="actions"><%= f.submit %></div>
<% end %>

<div class="fields">
  <p>
    <%= f.label :name, "item" %>
    <%= link_to_remove_fields "remove", f %><br />
    <%= f.text_field :name %>
  </p>
</div>

  def link_to_remove_fields(name, f)
    f.hidden_field(:_destroy) + link_to_function(name, "remove_fields(this)")
  end

  def link_to_add_fields(name, f, association)
    new_object = f.object.class.reflect_on_association(association).klass.new
    fields = f.fields_for(association, new_object, :child_index => "new_#{association}") do |builder|
      render(association.to_s.singularize + "_fields", :f => builder)
    end
    link_to_function(name, h("add_fields(this, \"#{association}\", \"#{escape_javascript(fields)}\")"))
  end

function remove_fields(link) {
  $(link).previous("input[type=hidden]").value = "1";
  $(link).up(".fields").hide();
}

function add_fields(link, association, content) {
  var new_id = new Date().getTime();
  var regexp = new RegExp("new_" + association, "g")
  $(link).up().insert({
    before: content.replace(regexp, new_id)
  });
}

