class LocationTracker: NSObject, CLLocationManagerDelegate {

let locationManager = CLLocationManager()
let rootViewController = RootViewController()



func startTracking() {
  locationManager.delegate = self
  locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters

  locationManager.requestWhenInUseAuthorization()
  locationManager.startUpdatingLocation()
}

func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) {

var currentLocation: CLLocation = manager.location

var coordinates: String = "\(currentLocation.coordinate.latitude),\(currentLocation.coordinate.longitude)"


println(" Locations data: \(locations)")

getLocationPlacemark(currentLocation: currentLocation)
}


  func displayLocationInfo  (#Placemark: CLPlacemark) {

locationManager.stopUpdatingLocation()

self.rootViewController.lblCurrentLocation.text = "\(Placemark.administrativeArea), \(Placemark.locality)"
}


func getLocationPlacemark (#currentLocation:CLLocation)-> Void {

CLGeocoder().reverseGeocodeLocation(currentLocation, completionHandler: { (placemark, error) -> Void in

  if error == nil && placemark.count > 0 {

    var pMark = placemark [0] as CLPlacemark

    dispatch_async(dispatch_get_main_queue(), { () -> Void in

      self.displayLocationInfo(Placemark: pMark)
    })


  }else {

    self.rootViewController.lblCurrentLocation.text = "error!"
  }
})
}

let locationTracker = LocationTracker()

override func viewDidLoad() {
 super.viewDidLoad()
 // Do any additional setup after loading the view, typically from a nib.

 locationTracker.startTracking()
}

