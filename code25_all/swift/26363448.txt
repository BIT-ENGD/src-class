GeneratorOf<T>
SequenceOf<T>
ExampleType
GeneratorOf<T>
protocol ExampleType {

    typealias Element

    func functionWithElement(element: Element)
    func functionWithSequence<S: SequenceType where S.Generator.Element == Element>(sequence: S)
}


struct ExampleOf<T>: ExampleType {

    typealias Element = T

    private let _functionWithElement: (T) -> ()
    // how to declare _functionWithSequence?


    init<E: ExampleType where E.Element == T>(_ base: E) {
        _functionWithElement = { base.functionWithElement($0) }
        // how to assign _functionWithSequence?
    }

    func functionWithElement(element: Element) {
        _functionWithElement(element)
    }

    func functionWithSequence<S: SequenceType where S.Generator.Element == Element>(sequence: S) {
        // how to call _functionWithSequence?
    }
}

protocol ExampleType {

    typealias Element

    func functionWithElement(element: Element)
    func functionWithSequence<S: SequenceType where S.Generator.Element == Element>(sequence: S)
}



struct ExampleOf<T>: ExampleType {

    typealias Element = T

    private let _functionWithElement: (T) -> ()
    private let _functionWithSequence: <S: SequenceType where S.Generator.Element == Element>((S) -> ())
    // ERROR: Only syntactic function types can be generic


    init<E: ExampleType where E.Element == T>(_ base: E) {
        _functionWithElement = { base.functionWithElement($0) }
        _functionWithSequence = { base.functionWithSequence($0) }
    }

    func functionWithElement(element: Element) {
        _functionWithElement(element)
    }

    func functionWithSequence<S: SequenceType where S.Generator.Element == Element>(sequence: S) {
        _functionWithSequence(sequence)
    }
}

