chain
struct Chain<S: SequenceType> : SequenceType, GeneratorType {
    var sequences: [S]
    var generator: S.Generator

    init(sequences: [S]) {
        self.sequences = sequences.reverse()
        generator = self.sequences.removeLast().generate()
    }

    func generate() -> Chain<S> { // *** [1]
        return self
    }

    mutating func next() -> S.Generator.Element? {
        while true {
            let elem = generator.next()

            if elem != nil {
                return elem
            }

            if sequences.isEmpty {
                return nil
            }

            generator = sequences.removeLast().generate()
        }
    }
}

func chain<S: SequenceType>(sequences: S...) -> Chain<S> { // *** [2]
    return Chain(sequences: sequences)
}

GeneratorType
GeneratorOf<S.Generator.Element>
Chain<S>
GeneratorType
Chain<S>
GeneratorType
SequenceType
GeneratorType
id<GeneratorType>
