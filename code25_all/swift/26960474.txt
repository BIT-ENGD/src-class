Array index out of range
// Desired return dictionary: 'original', 'quantity', 'unit', 'item'

func extractGroceryTextData(string: String) -> Dictionary<String, AnyObject>? {
    var data: Dictionary<String, AnyObject> = Dictionary<String, AnyObject>()

    // Split the string by spaces
    var components = string.componentsSeparatedByString(" ")

    // Add the original string to the dictionary
    data["original"] = string

    // Array of words that can be used as measurable units
    let groceryUnits: Array<String> = [
        "loaf",       "loaves",
        "box",        "boxes",
        "pack",       "packs",      "packages",
        "can",        "cans",
        "container",  "containers",
        "bunch",      "bunches",
        "handful",    "handfuls",
        "cup",        "cups",
        "tablespoon", "tablespoons",
        "teaspoon",   "teaspoons",
        "bottle",     "bottles"
    ]

    // Array of words that we don't need
    let groceryTossWords: Array<String> = [
        " ", "of", "lot"
    ]

    // Iterate through each word and tokenize when possible
    for (index, component) in enumerate(components) {
        var string = component.lowercaseString

        // First word is 'a', second word is not 'lot': 1 quantity
        if index == 0 && string == "a" && components[1].lowercaseString != "lot" {
            data["quantity"] = 1
            components.removeAtIndex(index)
        // 'a lot' is the beginning of the string: remove
        } else if string == "a" && components[index + 1] == "lot" {
            components.removeAtIndex(index)
            components.removeAtIndex(index + 1)
        // Component is found in groceryTossWords array: remove
        } else if contains(groceryTossWords, string) {
            components.removeAtIndex(index)
        // Component is found in groceryUnits array: unit
        } else if contains(groceryUnits, string) {
            data["unit"] = string
            components.removeAtIndex(index)
        // Component is a number (has a range within decimalDigitCharacterSet): quantity
        } else if string.rangeOfCharacterFromSet(NSCharacterSet.decimalDigitCharacterSet(), options: nil, range: nil) != nil {
            data["quantity"] = string
            components.removeAtIndex(index)
        }
    }

    // Leftover components joined together: item
    data["item"] = " ".join(components)

    return data
}

