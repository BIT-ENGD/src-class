enum Direction:Int, Printable{
   case None = 0
   case North, South, East, West, NorthEast, NorthWest, SouthEast, SouthWest

   var description: String{
      switch (self){
      case .None:
        return "static"
      case .North:
        return "north"
      case .South:
        return "south"
      case .East:
        return "east"
      case .West:
        return "west"
      case .NorthEast:
        return "north-east"
      case .NorthWest:
        return "north-west"
      case .SouthEast:
        return "south-east"
      case .SouthWest:
        return "south-west"
      }
   }
}

extension Direction {
   func fromCGVector(vector:CGVector) -> Direction{
    var vectorDir = (dx:vector.dx, dy:vector.dy)
    switch(vectorDir){
    case (0.0, 0.0):
        return Direction.None
    case let (0.0,y) where y > 0.0:
        return Direction.North
    case let (0.0,y) where y < 0.0:
        return Direction.South
    case let (x, 0.0) where x > 0.0:
        return Direction.East
    case let (x, 0.0) where x < 0.0:
        return Direction.West
    case let (x, y) where x > 0.0 && y > 0.0:
        return Direction.NorthEast
    case let (x, y) where x > 0.0 && y < 0.0:
        return Direction.SouthEast
    case let (x, y) where x < 0.0 && y > 0.0:
        return Direction.NorthWest
    case let (x, y) where x < 0.0 && y < 0.0:
        return Direction.SouthWest
    default:
        return Direction.None
    }

 }
}

var test = Direction.fromCGVector(CGVector(dx:1.0, dy:1.0))

