class BViewController: UIViewController, UITabBarDelegate {

    @IBOutlet var item: UIBarButtonItem!
    var info: InfoVC = InfoVC(nibName: "InfoVC", bundle: nil )

    func tabBar( tabBar: UITabBar!, didSelectItem item: UITabBarItem!){
        if item.tag == 2{ // we are in new view controller
            info.modalTransitionStyle = UIModalTransitionStyle.CrossDissolve
            self.presentViewController(info, animated: true, completion: nil)
        }
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        println("info hash \(info.hashValue)")
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }


}

class ContainerViewController: UIViewController {

    // Outlet used in storyboard
    @IBOutlet var scrollView: UIScrollView?;

    override func viewDidLoad() {
        super.viewDidLoad();

        // 1) Create the three views used in the swipe
        var AVc: AViewController = AViewController(nibName: "AViewController", bundle: nil)
        var BVc: BViewController = BViewController(nibName: "BViewController", bundle: nil)

        // 2) Add in each view to the container view hierarchy
        //    Add them in opposite order since the view hieracrhy is a stack

        self.addChildViewController(BVc);
        self.scrollView!.addSubview(BVc.view);
        BVc.didMoveToParentViewController(self);

        self.addChildViewController(AVc);
        self.scrollView!.addSubview(AVc.view);
        AVc.didMoveToParentViewController(self);

        // 3) Set up the frames of the view controllers to align
        //    with eachother inside the container view
        var adminFrame :CGRect = AVc.view.frame;
        adminFrame.origin.x = adminFrame.width;
        BVc.view.frame = adminFrame;

        var BFrame :CGRect = BVc.view.frame;
        BFrame.origin.x = 2*BFrame.width;

        // 4) Finally set the size of the scroll view that contains the frames
        var scrollWidth: CGFloat  = 2 * self.view.frame.width
        var scrollHeight: CGFloat  = self.view.frame.size.height
        self.scrollView!.contentSize = CGSizeMake(scrollWidth, scrollHeight);
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}

