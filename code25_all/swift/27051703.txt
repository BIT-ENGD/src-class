SKAction.repeatActionForever
SKAction
override func didMoveToView(view: SKView) {
    let sequence = [
            SKAction.runBlock(spawnObstacle), //Missing argument for parameter 'queue' in call
            SKAction.waitForDuration(self.random(min: player.speed, max: player.speed * 2 as CGFloat))
    ]

    runAction(SKAction.repeatActionForever(SKAction.sequence(sequence)))

}
func random() -> CGFloat{
    return CGFloat(Float(arc4random()) / 0xFFFFFFFF)
}



func random(#min:CGFloat, max:CGFloat) -> CGFloat {
    return random() * (max - min) + min
}

spawnObstacle
player.speed
CGFloat
Missing argument for parameter 'queue' in call
SKAction.runBlock(spawnObstacle)
spawnObstacle()
func runBlock(_ block: dispatch_block_t,queue queue: dispatch_queue_t?) -> SKAction

func runBlock(_ block: dispatch_block_t) -> SKAction

SKAction.runBlock(spawnObstacle as dispatch_block_t)
SKAction.waitForDuration(self.random(min: player.speed, max: player.speed * 2 as CGFloat)) //Extra argument 'min' in call

random()
random(#min:CGFloat, max:CGFloat)
spawnObstacle()
func spawnObstacle() -> Void{

    let obst = Obstacle(
        color: UIColor.redColor(),
        size: CGSize(width: 50.0,height: 50.0))

    let node = SKSpriteNode(color: obst.color, size: obst.size)

    node.position = CGPoint(x: size.width, y: 0 + obst.size.height / 2)

    addChild(node)

    let duration = player.speed

    let actionMove = SKAction.moveTo(CGPoint(x:0 - obst.size.width / 2,y:node.position.y), duration: NSTimeInterval(duration))
    let actionMoveDone = SKAction.removeFromParent()

    node.runAction(SKAction.sequence([actionMove,actionMoveDone]))
}

