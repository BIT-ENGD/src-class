class TransmitViewController: UIViewController {
    var myTransmitter: AMiBeaconTransmitter!

    override func viewDidLoad() {
        super.viewDidLoad()

        self.myTransmitter = AMiBeaconTransmitter(UUID: "A valid UUID",
            identifier: "at.test",
            major: 1,
            minor: 1)
    }

    @IBAction func transmitBeacon(sender : UIButton) {
        self.myTransmitter.startTransmit()
    }
}

class AMiBeacon: NSObject {
    let UUID: NSUUID
    let identifier: String

    init(UUID: String, identifier: String) { 
        //Init
        self.UUID = NSUUID(UUIDString: UUID)
        self.identifier = identifier

        super.init()
    }
}

class AMiBeaconTransmitter: AMiBeacon, CBPeripheralManagerDelegate {

    let major: CLBeaconMajorValue
    let minor: CLBeaconMinorValue

    var tranmitting: Bool

    private var peripheralManager: CBPeripheralManager?
    private var beaconPheriphalData: NSDictionary?

    init(UUID: String, identifier: String, major: CLBeaconMajorValue, minor: CLBeaconMinorValue) {
        NSLog("init was called")

        self.major = major
        self.minor = minor
        self.tranmitting = false;

        super.init(UUID: UUID, identifier: identifier)
    }

    func startTransmit() {
        let beaconRegion = CLBeaconRegion(proximityUUID: self.UUID, major: self.major, minor: self.minor, identifier: self.identifier)
        self.beaconPheriphalData = beaconRegion.peripheralDataWithMeasuredPower(nil)
        self.peripheralManager = CBPeripheralManager(delegate: self, queue: nil)
    }

}

