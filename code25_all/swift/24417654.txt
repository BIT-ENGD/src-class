class func generatePuzzle(manager: MDLTileManager, withGivens givens:Array<Int>, atPositions positions:Array<TileIndexPath>){
    NSLog("\(givens.count), \(positions.count)");
    //Doesn't work
    for index in 0...positions.count-1{
        //Original code before anomaly:
        //var tileindex = positions[index].toIndex();
        //manager.tiles[tileindex].isGiven == true;

        //New code added to test anomaly:
        manager.tiles[index].currentValue == 8;
    }
    //Works
    for index in 0...positions.count-1{
        manager.tiles[index].currentValue = 8
    }

    for index in 0...manager.tiles.count-1{
        manager.tiles[index].currentValue = 8;
        manager.tiles[index].isGiven = true;
    }
}

MDLTileManager
struct TileModel{
        var ID = 0;
        var currentValue = 0;
        var solutionValue = 0;
        var possibleValues = Array<Int>();
        var isGiven = false;
        var isHighlighted = false;
        func isCorrect() -> Bool{
            return (solutionValue != 0) && (currentValue == solutionValue);
        }

        init(ID: Int, currentValue current: Int, solutionValue solution: Int, isGiven given:Bool, isHighlighted highlighted:Bool){
        self.ID = ID;
        self.currentValue = current;
        self.solutionValue = solution;
        self.isGiven = given;
        self.isHighlighted = highlighted;
    }

}

