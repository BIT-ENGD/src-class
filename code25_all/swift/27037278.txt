enum PhotoState: String {
  case New = "New"
  case Downloaded = "Downloaded"
  case Failed = "Failed"
}

class Photo: RLMObject {
  dynamic var id = 0
  dynamic var name = ""
  dynamic var imageURLString = ""

  var state = PhotoState.New

  override class func primaryKey() -> String! {
    return "id"
  }

  override class func ignoredProperties() -> [AnyObject]! {
    return ["state"]
  }
}

override func viewDidLoad() {
    super.viewDidLoad()

    photos = Photo.allObjects()
}

override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    // Return the number of rows in the section.
    if let count = photos?.count {
        return Int(count)
    }
    return 0
}

override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
    if let photo = photos?.objectAtIndex(UInt(indexPath.row)) as? Photo {
        downloadPhoto(photo, indexPath: indexPath)
    }
}

func downloadPhoto(photo: Photo, indexPath: NSIndexPath) {
    // Fake Download
    switch photo.imageURLString.lastPathComponent {
    case "7.png":
        photo.state = .Failed
    default:
        photo.state = .Downloaded
    }
    tableView.reloadRowsAtIndexPaths([indexPath], withRowAnimation: .Automatic)
}

