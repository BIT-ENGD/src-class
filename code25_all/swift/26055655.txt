enum PluginType
{
    case PluginC
    case PluginD
}

class Plugin
{
    var pluginType : PluginType
    var setter : Void -> Void
    var unsetter : Void -> Void

    init(pluginType : PluginType, setter : Void -> Void, unsetter : Void -> Void)
    {
        self.pluginType = pluginType
        self.setter = setter
        self.unsetter = unsetter
    }
}

@objc protocol BProtocol
{
    func getPlugins() -> [Plugin]
}

class B : BProtocol
{
    var a : AProtocol?

    func getPlugins() -> [Plugin]
    {
        return [Plugin(pluginType : .PluginC, setter : a!.setPluginC, unsetter : a!.unsetPluginC),
            Plugin(pluginType : .PluginD, setter : a!.setPluginD, unsetter: a!.unsetPluginD)]
    }
}

@objc protocol AProtocol
{
    func setPluginC()
    func unsetPluginC()
    func setPluginD()
    func unsetPluginD()
}

class A : AProtocol
{
    var b : BProtocol?

    func setPluginC()
    {

    }

    func unsetPluginC()
    {

    }

    func setPluginD()
    {

    }

    func unsetPluginD()
    {

    }
}

    func getPlugins() -> [Plugin]
    {
        return [Plugin(pluginType : .PluginC, setter : a!.setPluginC, unsetter : a!.unsetPluginC),
            Plugin(pluginType : .PluginD, setter : a!.setPluginD, unsetter: a!.unsetPluginD)]
    }

