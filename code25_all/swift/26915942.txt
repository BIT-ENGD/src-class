struct​ ​Point​ {
​    ​var​ ​x​ = ​0.0​, ​y​ = ​0.0
​}
​struct​ ​Size​ {
​    ​var​ ​width​ = ​0.0​, ​height​ = ​0.0
​}
​struct​ ​Rect​ {
​    ​var​ ​origin​ = ​Point​()
​    ​var​ ​size​ = ​Size​()
​    ​var​ ​center​: ​Point​ {
​        ​get​ {
​            ​let​ ​centerX​ = ​origin​.​x​ + (​size​.​width​ / ​2​)
​            ​let​ ​centerY​ = ​origin​.​y​ + (​size​.​height​ / ​2​)
​            ​return​ ​Point​(​x​: ​centerX​, ​y​: ​centerY​)
​        }
​        ​set​(​newCenter​) {
​            ​origin​.​x​ = ​newCenter​.​x​ - (​size​.​width​ / ​2​)
​            ​origin​.​y​ = ​newCenter​.​y​ - (​size​.​height​ / ​2​)
​        }
​    }
​}
​var​ ​square​ = ​Rect​(​origin​: ​Point​(​x​: ​0.0​, ​y​: ​0.0​),
​    ​size​: ​Size​(​width​: ​10.0​, ​height​: ​10.0​))
​let​ ​initialSquareCenter​ = ​square​.​center
​square​.​center​ = ​Point​(​x​: ​15.0​, ​y​: ​15.0​)
​println​(​"square.origin is now at (​\(​square​.​origin​.​x​)​, ​\(​square​.​origin​.​y​)​)"​)
​// prints "square.origin is now at (10.0, 10.0)”

struct anotherRect {
    var origin = Point()
    var size = Size()
    var center: Point{
        return Point(x: (origin.x + size.width/2), y: (origin.y + size.height/2))
    }
}

var anotherSquare = Rect(origin: Point(x: 20.0, y: 20.0), size: Size(width: 10.0, height: 10.0))
println("anotherSquare.center is (\(anotherSquare.center.x), \(anotherSquare.center.y))")
// prints "anotherSquare.center is (25.0, 25.0)"

anotherSquare.center = Point(x: 30.0, y: 30.0)
println("anotherSquare.origin is now at (\(anotherSquare.origin.x), \(anotherSquare.origin.y))")
// prints "anotherSquare.origin is now at (25.0, 25.0)"

