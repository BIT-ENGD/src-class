func applicationWillTerminate(application: UIApplication) {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    // Saves changes in the application's managed object context before the application terminates.
    self.saveContext()
}

func saveContext () {
    var error: NSError? = nil
    let managedObjectContext = self.managedObjectContext
        if managedObjectContext.hasChanges && !managedObjectContext.save(&error) {
            abort()
        }
}

// #pragma mark - Core Data stack

// Returns the managed object context for the application.
// If the context doesn't already exist, it is created and bound to the persistent store coordinator for the application.
var managedObjectContext: NSManagedObjectContext {
    var managedObjectContexta = NSManagedObjectContext()
        let coordinator: NSPersistentStoreCoordinator = persistentStoreCoordinator
        if (coordinator.isAccessibilityElement) {
            managedObjectContexta.persistentStoreCoordinator = coordinator
        }
        return managedObjectContexta
}

// Returns the managed object model for the application.
// If the model doesn't already exist, it is created from the application's model.
var managedObjectModel: NSManagedObjectModel {
        let modelURL = NSBundle.mainBundle().URLForResource("Meeter", withExtension: "momd")
            var managedObjectModela = NSManagedObjectModel(contentsOfURL: modelURL!)
        return managedObjectModela
     }

// Returns the persistent store coordinator for the application.
// If the coordinator doesn't already exist, it is created and the application's store added to it.
var persistentStoreCoordinator: NSPersistentStoreCoordinator {
        let storeURL = applicationDocumentsDirectory.URLByAppendingPathComponent("Meeter.sqlite")
        var error: NSError? = nil
        var persistentStoreCoordinatora = NSPersistentStoreCoordinator(managedObjectModel: managedObjectModel)
        if persistentStoreCoordinatora.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: storeURL, options: nil, error: &error) == nil {
            abort()
        }
        return persistentStoreCoordinatora
}

