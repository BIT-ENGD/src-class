func handleGesture<T: UIGestureRecognizer>(gesture: T, atPosition position : CGPoint)
    {
        if let hitLayer = hitTest(position)? as? THGestureProtocol
        {
            if let tapGesture = gesture as? UITapGestureRecognizer
            {
                hitLayer.handleTapGesture(tapGesture, atPosition: position)
            }
            else
            {
                hitLayer.handleGesture(gesture, atPosition: position)
            }
        }
    }

@objc protocol THGestureProtocol
{
    func handleGesture(gesture: UIGestureRecognizer,    atPosition position : CGPoint)
    func handleTapGesture(gesture: UITapGestureRecognizer, atPosition position : CGPoint)
    func handleDragGesture(gesture: UIPanGestureRecognizer, atPosition position : CGPoint)
}

func handleGesture<T: UIGestureRecognizer>(gesture: T, atPosition position : CGPoint)
    {
        if let hitLayer = hitTest(position)? as? THGestureProtocol
        {
            hitLayer.handleGesture(gesture, atPosition: position)
        }
    }


@objc protocol THGestureProtocol
{
    func handleGesture(gesture: UIGestureRecognizer,    atPosition position : CGPoint)
    func handleGesture(gesture: UITapGestureRecognizer, atPosition position : CGPoint)
    func handleGesture(gesture: UIPanGestureRecognizer, atPosition position : CGPoint)
}

