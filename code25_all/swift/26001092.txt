class List<T> {
    var items = [T]();
    func add(allItems:T...){
        items += allItems
    }
    subscript(i:Int) -> T? {
        return items[i]
    }
}

var l = List<Int>()
l.add(1,2,3,4)
l[2]! //3

SequenceType
T
_CollectionType
class List<T>:SequenceType {
    var items = [T]();
    func add(allItems:T...){
        items += allItems
    }

    func generate() -> GeneratorType<T>.Element {
        return IndexingGenerator()
    }

    subscript(i:Int) -> T? {
        return items[i]
    }
}

var l = List<Int>()
l.add(1,2,3,4)
l[2]!

