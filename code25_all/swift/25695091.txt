protocol Copyable {
    init(copy: Self)
    func copy() -> Self
}

copy()
func copy() -> Self {
   return self.dynamicType(copy: self)
}

func copy<T : Copyable>(makeCopy: T) -> T {
    return makeCopy.dynamicType(copy: makeCopy)
}

protocol Mutatable : Copyable {
    func mutated() -> Self
}

class C : Mutatable {

    var a = 0

    required init(_ a: Int) {
        self.a = a
    }

    required init(copy: C) {
        a = copy.a
    }

    func mutated() -> Self {
        let mutated = copy(self)

        mutated.a++

        return mutated // error: 'C' is not convertible to 'Self'
    }

}

mutated
mutated
(C)
required
func mutated()
required
inits
