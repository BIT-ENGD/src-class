import SpriteKit

class GameScene: SKScene {

var mainPipe: SKSpriteNode = SKSpriteNode()
var space:Float = 1000
var pipeCount:Int = 0


override func didMoveToView(view: SKView) {
    self.backgroundColor = SKColor.blackColor()
    self.size.width = 640
    self.size.height = 1136


}

func randomOffset() -> Float{


    var rNum:Float = Float(arc4random()%181)    // 0-180

    return rNum
}

var durations: CFloat = 5.0
var colorPipes:UIColor = UIColor.grayColor()


func spawnPipeRow(offs:Float){

    self.pipeCount = self.pipeCount + 1
    println("\(self.pipeCount)")

    //offs is the random number
    //let offset = offs + (space/2) - 105
    let offset = offs + Float(self.size.height/100) - 180

    // mainPipe = SKSpriteNode(color:colorPipes, size:CGSize(width: view.bounds.size.width/3, height:700))
    mainPipe = SKSpriteNode(color:colorPipes, size:CGSize(width: self.size.width/5, height:self.size.height/1.5))



    let pipeBottom = (mainPipe as SKSpriteNode).copy() as SKSpriteNode
    let pipeTop    = (mainPipe as SKSpriteNode).copy() as SKSpriteNode

    let xx = self.size.width * 2.0
    self.setPositionRelativeBot(pipeBottom, x:Float(xx), y: offset )
    self.setPositionRelativeTop(pipeTop, x:Float(xx), y: offset + space)

    pipeBottom.physicsBody = SKPhysicsBody(rectangleOfSize: pipeBottom.size)
    pipeTop.physicsBody = SKPhysicsBody(rectangleOfSize: pipeTop.size)

    pipeBottom.physicsBody?.dynamic = false
    pipeTop.physicsBody?.dynamic = false

    //pipeTop.physicsBody?.contactTestBitMask = birdCategory
    //pipeBottom.physicsBody?.contactTestBitMask = birdCategory


    self.addChild(pipeBottom)
    self.addChild(pipeTop)

    var actionArray1:NSMutableArray = NSMutableArray()

    actionArray1.addObject(SKAction.moveTo(CGPointMake(-1000, pipeBottom.size.height - 200), duration: NSTimeInterval(durations)))
    var actionArray2:NSMutableArray = NSMutableArray()

    actionArray2.addObject(SKAction.moveTo(CGPointMake(-1000, pipeTop.size.height - 200), duration: NSTimeInterval(durations)))

    actionArray1.addObject(SKAction.removeFromParent())
    actionArray2.addObject(SKAction.removeFromParent())

    pipeBottom.runAction(SKAction.sequence(actionArray1))
    pipeTop.runAction(SKAction.sequence(actionArray2))

}




override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
    /* Called when a touch begins */

    for touch: AnyObject in touches {

    }




}

override func update(currentTime: CFTimeInterval) {
    var timeSinceLastUpdate = currentTime - lastUpdateTimerInterval
    lastUpdateTimerInterval = currentTime

    if(timeSinceLastUpdate > 1){
        timeSinceLastUpdate = 1/60
        lastUpdateTimerInterval=currentTime


    }
    updateWithTimeSinceLastUpdate(timeSinceLastUpdate)



    /* Called before each frame is rendered */
}

func setPositionRelativeBot(node:SKSpriteNode, x: Float, y: Float){

    let xx = (Float(node.size.width)/2) + x
    let yy = (Float(self.size.height)/2) - (Float(node.size.height)/2) + y
    node.position.x = CGFloat(xx)
    node.position.y = CGFloat(yy)

}
func setPositionRelativeTop(node:SKSpriteNode, x:Float, y:Float){
    let xx = (Float(node.size.width)/2) + x
    let yy = (Float(self.size.height)/2) + (Float(node.size.height)/2) + y
    node.position.x = CGFloat(xx)
    node.position.y = CGFloat(yy)

}

var lastUpdateTimerInterval:NSTimeInterval = NSTimeInterval()
var lastYieldTimeInterval:NSTimeInterval = NSTimeInterval()
var speedOfBird: CDouble = 1.8
func updateWithTimeSinceLastUpdate(timeSinceLastUpdate:CFTimeInterval){
    lastYieldTimeInterval += timeSinceLastUpdate
    if(lastYieldTimeInterval > speedOfBird ){
        lastYieldTimeInterval=0
        self.spawnPipeRow(self.randomOffset())
        if speedOfBird > 0.8{
            speedOfBird -= 0.1}
    }
}

}

