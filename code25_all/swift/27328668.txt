func sync(lock: AnyObject, closure: () -> ())
{
    objc_sync_enter(lock)
    closure()
    objc_sync_exit(lock)
}

func sync<T>(lock: AnyObject, closure: () -> T ) -> T
{
    var t : T
    objc_sync_enter(lock)
    t = closure()
    objc_sync_exit(lock)
    return t
}

var semaphore = 2  // ->0 using sync() when all preparation is complete
fun call_me_when_semaphore_becomes_zero() { } 

// implementation
func sync_wait(lock: AnyObject, condition: (()->Bool), closure: (() -> ()))
{
    // NEED HELP HERE -------------------------------------------------------
    // using lock, wait until condition becomes true, and then call closure
    // ----------------------------------------------------------------------
}

// call
sync_wait( semaphore, condition: { semaphore==0 }, closure: { call_me_when_semaphore_becomes_zero() } )

