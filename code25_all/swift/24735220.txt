protocol EntityInitializable {
    typealias T : EntityInitializable
    init(initializer: (T) -> ())
}

class EntityMapper<T : EntityInitializable> {
    func f() -> T {
        var cb = {(entity: T) -> () in
        }

        return T(cb)
    }
}

class MyClass {
    init(initializer: (MyClass) -> ()) {
    }
}

class EntityMapper {
    func f() -> MyClass {
        var cb = {(entity: MyClass) -> () in
        }

        return MyClass(cb)
    }
}

