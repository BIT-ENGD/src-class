typedef void(^SocketConnectionLost)();
typedef void(^SocketIOCallback)(id argsData);

@interface SocketConnection

@property (strong, nonatomic) SocketIO *socketIO;

@property (strong, nonatomic) NSMutableArray *socketConnectionLosts;

-(void)sendEventWithName:(NSString*)eventName
                withData:(id)data
        onConnectionLost:(SocketConnectionLost)connectionLost
                onAnswer:(SocketIOCallback)answer;

@end

@implementation SocketConnection

- (void)init {
    self.socketIO = [[SocketIO alloc] initWithDelegate:self];
    [self.socketIO setReturnAllDataFromAck: YES];
    [self.socketIO connectToHost:kSocketHost onPort:kSocketPort withParams:params];
}

- (void) socketIODidDisconnect:(SocketIO *)socket
         disconnectedWithError:(NSError *)error {
    for(ServerRequestConnectionLost connectionLost in self.socketConnectionLosts)
        if(connectionLost)
            connectionLost();
    [self.socketConnectionLosts removeAllObjects];
}

-(void)sendEventWithName:(NSString*)eventName
                withData:(id)data
        onConnectionLost:(SocketConnectionLost)connectionLost
                onAnswer:(SocketIOCallback)answer {
    [self.socketConnectionLosts addObject:connectionLost];
    [self.socketIO sendEvent:eventName withData:data andAcknowledge:^(id argsData) {
        if(connectionLost)
            [self.socketConnectionLosts removeObject:connectionLost];
        if(answer)
            answer(argsData);
    }];
}

@end

var someBlock: ()->()
var connectionLosts = NSMutableArray()
connectionLosts.append(someBlock)

