import Foundation

class AntSchlumpf:NSObject , NSConnectionDelegate{

    func createConversationForConnection(conn: NSConnection!) -> AnyObject!{
        var any = []
        println("Geht delegater")
        return any

    }
    func connection(parentConnection: NSConnection,shouldMakeNewConnection newConnnection: NSConnection) -> Bool
    {
        newConnnection.runInNewThread()
        newConnnection.removeRunLoop(NSRunLoop.currentRunLoop())
        println("Geht")
        return true
    }

}

class AntServer:NSConnection{

    let id : NSNumber?
    let port : UInt16?
    var serverSock : NSSocketPort?

    init(port:UInt16!, id:NSNumber?, host: String?){
        self.id = id
        self.port = port
        serverSock = NSSocketPort(TCPPort: port!)
        var fd = serverSock?.socket
        println(fd)

        super.init(receivePort: serverSock, sendPort: nil)
        self.independentConversationQueueing = true
        NSNotificationCenter.defaultCenter().addObserver(self, selector:"clientHasConnected:" , name: NSConnectionDidInitializeNotification, object: nil)
        self.delegate = AntSchlumpf()
        if(self.multipleThreadsEnabled){
            println("Multithread enabled")
        }

}
func clientHasConnected(notification: NSNotification){
    println("Observer gestartet")
}

func startServer(){
    println("Starting Server...")
    if(self.serverSock){
        println("Port connected at \(self.port)")
        self.rootObject = self
        NSNotificationCenter.defaultCenter().addObserver(self, selector:"clientHasConnected:" , name: NSConnectionDidInitializeNotification, object: nil)

    }

}
func createConversationForConnection(conn: NSConnection!) -> AnyObject!{
    var any = []
    println("Geht")
    return any

}
}

