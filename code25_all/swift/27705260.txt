NSMutableArray
Tableviewcell
var AllNews:NSMutableArray! = NSMutableArray()

var myEditImage = UIImage(named: "create_new-32.png")

func gotoCompose () {
    self.performSegueWithIdentifier("gotoCompose", sender: self)
}

override func viewDidLoad() {
    super.viewDidLoad()

    //Getting the latest 5 news from the parse.com
    var getNews = PFQuery(className: "News")
    getNews.orderByDescending("CreatedAt")
    getNews.limit = 5
    getNews.findObjectsInBackgroundWithBlock {
        (objects:[AnyObject]!, error:NSError!)->Void in

        if error == nil{
            for object in objects {
                let news:PFObject = object as PFObject
                self.AllNews.addObject(news)
                //tableView.reloadData()
                //println(object)
            }
            let array:NSArray = self.AllNews.reverseObjectEnumerator().allObjects
            self.AllNews = NSMutableArray(array: array)
            self.tableView.reloadData()
        }
    }


    var homeButton: UIBarButtonItem =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Compose, target: self, action: Selector("gotoCompose"))
    self.navigationItem.rightBarButtonItem = homeButton

}

override func viewDidAppear(animated: Bool) {
    self.tableView.reloadData()
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}

// MARK: - Table view data source


override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    // #warning Incomplete method implementation.
    // Return the number of rows in the section.
    return 5
}


override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
    // #warning Potentially incomplete method implementation.
    // Return the number of sections.
    return 1
}

override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCellWithIdentifier("newsCell", forIndexPath: indexPath) as NewsTableViewCell

    let herzNews:PFObject = self.AllNews.objectAtIndex(indexPath.row) as PFObject
    var user = herzNews.objectForKey("newser") as? String
    var content = herzNews.objectForKey("content") as? String

    cell.userLabel.text = user!
    cell.newsTextView.text = content!


    return cell
}
    }

 [__NSArrayM objectAtIndex:]: index 0 beyond bounds for empty array'
*** First throw call stack:

