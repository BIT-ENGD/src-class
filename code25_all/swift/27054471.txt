    for s: GraphViewSegment in self.segments {
         var position = s.layer.position
        position.x += 1.0;
        s.layer.position = position;
        //s.layer.hidden = false
        s.layer.setNeedsDisplay()
    }

public func addSegment() -> GraphViewSegment {
    // Create a new segment and add it to the segments array.
    var segment = GraphViewSegment(coder: self.coder)
    // We add it at the front of the array because -recycleSegment expects the oldest segment
    // to be at the end of the array. As long as we always insert the youngest segment at the front
    // this will be true.
    self.segments.insert(segment, atIndex: 0)
 // this is now a weak reference

    // Ensure that newly added segment layers are placed after the text view's layer so that the text view
    // always renders above the segment layer.
    self.layer.insertSublayer(segment.layer, below: self.text.layer)
    // Position it properly (see the comment for kSegmentInitialPosition)
    segment.layer.position = kSegmentInitialPosition;
    //println("New segment added")
    self.layer.setNeedsDisplay()
    segment.layer.setNeedsDisplay()
    return segment;

}

override func viewDidLoad() {
    super.viewDidLoad()

    pause.possibleTitles?.setByAddingObjectsFromArray([kLocalizedPause, kLocalizedResume])
    isPaused = false
    useAdaptive = false
    self.changeFilter(LowpassFilter)

    var accelerometerQueue = NSOperationQueue()
    motionManager.accelerometerUpdateInterval = 1.0 / kUpdateFrequency 
    motionManager.startAccelerometerUpdatesToQueue(accelerometerQueue,
        withHandler:
            {(accelerometerData: CMAccelerometerData!, error: NSError!) -> Void in
                self.accelerometer(accelerometerData)})

    unfiltered.isAccessibilityElement = true
    unfiltered.accessibilityLabel = "unfiltered graph"
    filtered.isAccessibilityElement = true
    filtered.accessibilityLabel = "filtered graph"
}

func accelerometer (accelerometerData: CMAccelerometerData!) {
    if (!isPaused) {
        let acceleration: CMAcceleration = accelerometerData.acceleration
        filter.addAcceleration(acceleration)
        unfiltered!.addPoint(acceleration.x, y: acceleration.y, z: acceleration.z)
        filtered!.addPoint(filter.x, y: filter.y, z: filter.z)
        //unfiltered.setNeedsDisplay()
    }
}

