protocol Usable {
    func use()
}

class Thing: Usable {
    func use () {
        println ("you use the thing")
    }
}

let thing = Thing()

// Check whether or not a class is useable
if let usableThing = thing as Usable { // error here
    usableThing.use()
}
else {
    println("can't use that")
}

Bound value in a conditional binding must be of Optional Type

let thing:Thing? = Thing()

Cannot downcast from 'Thing?' to non-@objc protocol type 'Usable'

@objc
Forced downcast in conditional binding produces non-optional type 'Usable'

?
as
