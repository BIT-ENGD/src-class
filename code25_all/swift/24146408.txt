for
let suits: Array<String> = ["Spades", "Diamonds", "Clubs", "Hearts"]
let ranks: Array<Integer> = [1,2,3,4,5,6,7,8,9,10,11,12,13]
let rankMap: Dictionary<Int,String> = [1:"Ace", 11:"Jack", 12:"Queen", 13:"King"]

struct Card {
    let suit: String
    let rank: Integer
    let image: String? //There's some NSObject that corresponds to image resources. Later.
}

func buildDeck(NumberOfJokers:Int) -> Array<Card>{
    assert(NumberOfJokers <= 2, "Can't have more than two jokers in a deck")
    var retDeck: Array<Card> = []
    for s in suits {
        for r in ranks {
            let newSuit = rankMap[r]? //ERROR: Could not find an overload for subscript that accepts the supplied arguments
            retDeck.append(Card(suit:s, rank:r, image: nil))

        }
    }

    return retDeck
}

r
ranks
rankMap
r
