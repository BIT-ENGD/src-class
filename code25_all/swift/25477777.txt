var adbk : ABAddressBook!
var authDone = false

override func viewDidAppear(animated: Bool) {
    super.viewDidAppear(animated)
    if !self.authDone {
        self.authDone = true
        let stat = ABAddressBookGetAuthorizationStatus()
        switch stat {
        case .Denied, .Restricted:
            println("no access")
        case .Authorized, .NotDetermined:
            var err : Unmanaged<CFError>? = nil
            var adbk : ABAddressBook? = ABAddressBookCreateWithOptions(nil, &err).takeRetainedValue()
            if adbk == nil {
                println(err)
                return
            }
            ABAddressBookRequestAccessWithCompletion(adbk) {
                (granted:Bool, err:CFError!) in
                if granted {
                    self.adbk = adbk
                } else {
                    println(err)
                }//if
            }//ABAddressBookReqeustAccessWithCompletion
        }//case
    }//if
}//viewDidAppear

var person: ABRecord!

@IBAction func showPicker(sender: AnyObject) {
    var picker: ABPeoplePickerNavigationController =  ABPeoplePickerNavigationController()

    picker.peoplePickerDelegate = self
    self.presentViewController(picker, animated: true, completion:nil)
}//showPicker

func peoplePickerNavigationController(peoplePicker: ABPeoplePickerNavigationController!, didSelectPerson person: ABRecordRef!) -> Bool {
    self.person = person
    println(ABRecordCopyValue(person, kABPersonFirstNameProperty).takeUnretainedValue())
    var updateSucceeded = ABRecordSetValue(person,  kABPersonFirstNameProperty, "New First Name", nil)
    println("Did the update succeed? \(updateSucceeded)")
    println(ABRecordCopyValue(person, kABPersonFirstNameProperty).takeUnretainedValue())
    ABAddressBookSave(adbk, nil)
    println(ABRecordCopyValue(person, kABPersonFirstNameProperty).takeUnretainedValue())
}//navController

