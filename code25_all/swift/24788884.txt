class Bar<T> {
    init(_ v:T) {}

    func wrap<R>(f:()->R) -> Bar<R> {
        return Bar<R>(f())
    }
    func wrap(f:()->()) -> () {
        f()
    }
}

wrap
()
R
wrap
String
var bar :Bar<Int> = Bar<Int>(0)

let b0 = bar.wrap {
    return ""
}

wrap
Bar<String>
b0
main.swift:53:16: error: type '()' does not conform to protocol 'StringLiteralConvertible'
    return ""
           ^
main.swift:51:9: warning: constant 'b0' inferred to have type '()', which may be unexpected
let b0 = bar.wrap {
    ^
main.swift:51:9: note: add an explicit type annotation to silence this warning
let b0 = bar.wrap {
    ^
      : ()

let b1 = bar.wrap {
    () -> String in
    return ""
}
let b2:Bar<String> = bar.wrap {
    return ""
}

let b0 = bar.wrap { "" }

works: let b0 = bar.wrap { 0 }
fails: let b0 = bar.wrap { return 0 }

