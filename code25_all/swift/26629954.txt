protocol TreeNodeProtocol
{
typealias LeafType      : Comparable
var representedObject   : LeafType  { get set }
var parent                  : Self?     { get set }
var children                : [Self]?   { get set }
}

final class TreeNode<LeafType : Comparable> : TreeNodeProtocol, Comparable
{
var parent      : TreeNode?     = nil
var children    : [TreeNode]?   = nil
var representedObject : LeafType

init(representedObject : LeafType)
{
    self.representedObject = representedObject
}
}

func == <LeafType: Comparable> (left : TreeNode<LeafType>, right :    TreeNode<LeafType>) -> Bool
{
return left.representedObject == right.representedObject
 }

func < <LeafType: Comparable> (left : TreeNode<LeafType>, right : TreeNode<LeafType>) -> Bool
{
 return left.representedObject < right.representedObject
}


class Tree<LeafType : Comparable>
{
  typealias TreeNodeType = TreeNode<LeafType>

  var description : String { return "a Tree" }
  var rootNodes : [TreeNodeType] = []
  func insertRootNode(node : TreeNodeType, atIndex index: Int? = nil)
  {
    let assumedIndex = index ?? rootNodes.count
    assert(assumedIndex <= rootNodes.count, "Tree: index exceeds bounds")
    rootNodes.insert(node, atIndex: assumedIndex)
  }

func insertRootNode(representedObject : LeafType, atIndex index: Int? = nil)
{
    let newRootNode = TreeNodeType(representedObject: representedObject)
    let assumedIndex = index ?? rootNodes.count
    assert(assumedIndex <= rootNodes.count, "Tree: index exceeds bounds")
    rootNodes.insert(newRootNode, atIndex: assumedIndex)
}

}


let aTree = TreeNode<String>(representedObject: "d") //it doesn't go past this point
println(aTree)

