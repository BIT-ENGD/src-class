class CallbackDemo {

    var interface: CallbackInterface = CallbackInterface()

    func getString() -> String { return "0.1" }
    func getInt() -> Int { return 1 }
    func getIntMul(factor: Int) -> Int { return 2*factor }
    func getVoid() {}

    init() {
        interface.callbacks = [ "getString": getString,
            "getVoid": getVoid,
            "getInt": getInt,
            "getMul": {(factor:Int) -> Int in return factor * 10 }
        ]

        if let result = self.interface.call("getString") {
            println("%s", result)
        }

    }
}

class CallbackInterface {
    typealias GenericSignature = (Any...) -> Any?

    var callbacks: Dictionary<String, GenericSignature> = [:]

    func call(name: String, params: Any...) -> Any? {
        if let cb = callbacks[name] {
            return cb(params)
        }
        return nil
    }
}

