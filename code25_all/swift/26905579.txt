class Test {

    func func1(arg1: Int) -> Void {
        println(arg1)
    }

    var funcArr: Array< (Int) -> Void > = [func1] // (!) 'Int' is not a subtype of 'Test'
}

func1
func1
Test
class Test {

    func func1(arg1: Int) -> Void {
        println(arg1)
    }

    var funcArr = [func1]
}

Test().funcArr[0](Test()) // Compiles, but nothing gets printed.
Test().funcArr[0](1) // (!) Type 'Test' does not conform to protocol 'IntegerLiteralConvertible'
Test().func1(1) // Prints '1'

func1
func func1(arg1: Int) -> Void {
    println(arg1)
}

class Test {
    var funcArr = [func1]
}

Test().funcArr[0](1) // Prints '1'

Test
Test
testObject.funcArr[someInt](someParam)
testObject
