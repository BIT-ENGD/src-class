func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {
    var URLCache = NSURLCache(memoryCapacity: 500 * 1024 * 1024, diskCapacity: 500 * 1024 * 1024, diskPath: "bla")
    NSURLCache.setSharedURLCache(URLCache)
    sleep(1)
    return true
}

    let urlPath: String = "http://www.google.com"
    var url: NSURL = NSURL(string: urlPath)!

    var request: NSURLRequest = NSURLRequest(URL: url, cachePolicy: NSURLRequestCachePolicy.ReturnCacheDataElseLoad, timeoutInterval: 5000)
    var cachedURLResponse = NSURLCache.sharedURLCache().cachedResponseForRequest(request)

    // cachedURLResponse is always nil

    var connection: NSURLConnection = NSURLConnection(request: request, delegate: self, startImmediately: true)!
    connection.start()

func connection(connection: NSURLConnection, willCacheResponse cachedResponse: NSCachedURLResponse) -> NSCachedURLResponse? {
    var HTTPResponse = cachedResponse.response as NSHTTPURLResponse
    var modifiedHeaders = NSMutableDictionary(dictionary: HTTPResponse.allHeaderFields)
    modifiedHeaders["Cache-Control"] = "max-age=6000"
    modifiedHeaders.removeObjectForKey("Expires")
    var modifiedResponse = NSHTTPURLResponse(URL: HTTPResponse.URL!, statusCode: HTTPResponse.statusCode, HTTPVersion: "HTTP/1.1", headerFields: modifiedHeaders)
    return NSCachedURLResponse(response: modifiedResponse!, data: cachedResponse.data, userInfo: cachedResponse.userInfo, storagePolicy: cachedResponse.storagePolicy)
}

