func _writeData() {

    while (_session.outputStream.hasSpaceAvailable && _write.length > 0) {
    var bytesWritten: Int = _session?.outputStream.write(_write.bytes, _write.length);
        if(bytesWritten == -1){
            println("write error");
            break;
        }
        else if (bytesWritten > 0){
            _write.replaceBytesInRange(NSMakeRange(0, bytesWritten), withBytes: nil, length: 0);
        }
    }
}

//high level write data method
func writeData(data: NSData) {
    if(_write == nil) {
        _write = NSMutableData.alloc();
    }
    _write.appendData(data);
    self._writeData();
}

    _session = EASession(accessory: accessory, forProtocol: protocolString);

    if(_session != nil) {

        _session.inputStream.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode);
        _session.inputStream.open()

        _session.outputStream.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode);
        _session.outputStream.open();

    } else {
        println("Creating session failed");
    }
    return (_session != nil);
}

//close the session with the accessory
func closeSession() {

    _session.inputStream.close();
    _session.inputStream.removeFromRunLoop(NSRunLoop(), forMode: NSDefaultRunLoopMode);

    _session.outputStream.close();
    _session.outputStream.removeFromRunLoop(NSRunLoop(), forMode: NSDefaultRunLoopMode);
}

