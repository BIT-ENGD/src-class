import UIKit

class BrowseView: UIViewController, UITableViewDelegate, UITableViewDataSource {

@IBOutlet var tblTasks: UITableView!

override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}

//Returning to view
override func viewWillAppear(animated: Bool) {
    tblTasks.reloadData();
}

func tableView(tableView: UITableView!, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath!){

    if(editingStyle == UITableViewCellEditingStyle.Delete){
        TaskMgr.tasks.removeAtIndex(indexPath.row)
        tblTasks.reloadData()
    }

}

//UiTableViewDataSource
func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int{
    return TaskMgr.tasks.count
}

func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -> UITableViewCell!{


    let cell: UITableViewCell = UITableViewCell(style: UITableViewCellStyle.Value2, reuseIdentifier: nil)
    cell.textLabel.text = TaskMgr.tasks[indexPath.row].name
    cell.detailTextLabel.text = TaskMgr.tasks[indexPath.row].desc

    return cell

}

import UIKit

class CreateView: UIViewController, UITextFieldDelegate {

@IBOutlet var txtTask: UITextField!
@IBOutlet var txtDesc: UITextField!

override func viewDidLoad() {
    super.viewDidLoad()
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}

//Events
@IBAction func btnAddTask_Click(sender: UIButton){

    TaskMgr.addTask(txtTask.text,desc:txtDesc.text);
    self.view.endEditing(true)
    txtTask.text = ""
    txtDesc.text = ""
}

//IOS touch functions
override func touchesBegan(touches: NSSet!, withEvent event: UIEvent!) {
    self.view.endEditing(true)
}

//UITextFieldDelegate
func textFieldShouldReturn(textField: UITextField!) -> Bool{
    textField.resignFirstResponder();
    return true
}

import UIKit

var TaskMgr: TaskManager = TaskManager()

struct task{
var name = "Un-Named"
var desc = "Un-Described"

class TaskManager: NSObject {

var tasks = [task]()

func addTask(name: String, desc: String){
    tasks.append(task(name:name, desc:desc))
}

