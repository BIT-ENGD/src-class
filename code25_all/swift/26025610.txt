    //Protocol for any object to be used with an FAUAPIConnection
protocol FAUAPIModel{

    //Used to parse the object from a given dictionary to an object
    class func parseFromJSON(JSON:AnyObject) -> Self

    //Required default init
    init()

}

    func getSomeParsingDone<T:FAUAPIModel>(model:T.Type? = nil, getPath:path, callingObj:CallingClass) -> Void
    {
        //GetIt is inconsequential, just logic to get an object from a certain path
         var returnObj:AnyObject = GetIt.get(path)
         if(model != nil){
            returnObj = model!.parseFromJSON()  <<<<<< Type 'T' does not conform to protocol 'AnyObject'
         }
         callingObj.done(returnObj)
    }

import Foundation

class MyObj: FAUAPIModel{  

   var neededVal:String
   var nonneededVal:String

  required convenience init(){
    self.init(neededVal:"VALUE")
  }

  init(neededVal:String, nonneededVal:String = ""){
    self.neededVal = neededVal
    self.nonneededVal = nonneededVal
  }

  class func parseFromJSON(JSON:AnyObject) -> WGMPart
  {
     return WGMPart() <<<<<<<< Method 'parseFromJSON' in non-final class 'WGMPart' must return 'Self' to conform to protocol 'FAUAPIModel'
  }

}

