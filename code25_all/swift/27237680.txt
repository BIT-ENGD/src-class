class HomeViewController: UITableViewController, UITableViewDelegate {

    private var posts = [Post]()

    override func viewWillAppear(animated: Bool) {
        let fetchRequest = NSFetchRequest(entityName:"Post")
        var sorter: NSSortDescriptor = NSSortDescriptor(key: "date" , ascending: false)
        fetchRequest.sortDescriptors = [sorter]

        let fetchResultsPosts = CoreDataManager.sharedManager.managedObjectContext!.executeFetchRequest(fetchRequest, error: nil) as? [Post]
        println(CoreDataManager.sharedManager.managedObjectContext!) //NOT EMPTY
        println(fetchResultsPosts) //NOT EMPTY


        if let results = fetchedResults {
            posts = results //PRINT optional ([,  ,  ,  ])
        } 
    }

    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {

        let cell = tableView.dequeueReusableCellWithIdentifier("cell", forIndexPath:indexPath) as UITableViewCell

        let post = posts[indexPath.row] as Post
        println(post) // PRINT NOTHING
        println(post.valueForKey("title")) //PRINT Optional(Le titre de mon post)

        cell.textLabel.text = post.valueForKey("title") as String?


        return cell
    }

}

--->isam.HomeViewController - viewWillAppear<---
Optional(<NSManagedObjectContext: 0x7faa12649150>)
<NSFetchRequest: 0x7faa126919e0> (entity: Post; predicate: ((null)); sortDescriptors: ((
    "(date, descending, compare:)"
)); type: NSManagedObjectResultType; )
Optional([, , , ])
--->isam.HomeViewController - tableView(_:cellForRowAtIndexPath:)<---

Optional(Le titre de mon post)
--->isam.HomeViewController - tableView(_:cellForRowAtIndexPath:)<---

