func evaluatePostFix(expression:Array<Character>) -> Character
{
    var stack:Array<Character> = []
    var count = -1 // Start at -1 to make up for 0 indexing

    if expression.count == 0 {
        return "X"
    }

    while expression.count > 1 {
        if expression.count == 1 {
            let answer = expression[0]
            return answer
        }

        var expressionTokenAsString:String = String(expression[0])
        if let number = expressionTokenAsString.toInt() {
            stack.append(expression[0])
            expression.removeAtIndex(0)
            count++
        } else { // Capture token, remove lefthand and righthand, solve, push result
            var token = expression(count + 1)
            var rightHand = stack(count)
            var leftHand = stack(count - 1)
            stack.removeAtIndex(count)
            stack.removeAtIndex(count - 1)
            stack.append(evaluateSubExpression(leftHand, rightHand, token))
        }
    }
}

