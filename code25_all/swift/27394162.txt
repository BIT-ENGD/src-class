#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class nm_skin;
@class nm_theFeature;

SWIFT_CLASS("_TtC9Golf_Whiz5Shape")
@interface Shape : NSObject
- (NSString *)testFunction;
- (void)skinDetails:(nm_skin *)skinny feature:(nm_theFeature *)feature;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9Golf_Whiz12hiloBetFuncs")
@interface hiloBetFuncs : NSObject
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop

import Foundation

class hiloBetFuncs : NSObject {


    func hilo_updateAllBetsforHole ( var hole : Int, result : Int, arrayOfBets : [nm_bet]) -> Int {

        var returnCodeValue : Int = 0
        let numberOfBetsInArray = arrayOfBets.count
        var previousHoleBetResult : Int
        var newHoleBetResult : Int

        // we are only dealing with 9-hole bets so if on the back nine, go ahead and drop the hole value
        // by 9 so that we can use the same holes 0-9 regardless.  (just makes things easier)
        if hole > 8
            {hole -= 9}

        for bet in arrayOfBets {

            if hole == 0 {

                // hole 0 is a bit of a special case, just cause you are not building off the bet
                // status from the previous hole.  This hole will be an autonomous 0, 1, or -1
                // just set it to the 'result' paramater that was sent in.

                bet.holeResults[hole] = result;
                println("after one hole, the primary bet has been updated with a status of \(result)");

            } else {

                //get pointer to the bet status as of the previous hole
                previousHoleBetResult = bet.holeResults[hole - 1] as Int

                //establish the bet status for the new hole, building from the previous hole's bet status
                newHoleBetResult = previousHoleBetResult + result

                // update the current hole's bet results with the newly calculated value
                bet.holeResults[hole] = newHoleBetResult;

            }

            // we want to return the bet status from the last active bet - if 2 or -2 then calling function will know to start a new bet.
            returnCodeValue = bet.holeResults[hole] as Int

        }

        println("ok, done the deed")

        // since the home team could be 2 down, the bet status could be a negative number 
        // convert to abs before returning.  Just checking for bet status, not care about who is leading.
        return abs(returnCodeValue)

    }

}

