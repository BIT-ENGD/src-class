concatenate
Data.List.concat
protocol Concatenable {
    func +(lhs: Self, rhs: Self) -> Self
    init()
}

extension Array: Concatenable {}

func concatenate<S: SequenceType, C: Concatenable where S.Generator.Element == C>(seq: S) -> C {
    var result = C()
    for elem in seq {
        result = result + elem
    }
    return result
}

Concatenable
SequenceType
protocol Concatenable: SequenceType {
    // etc.
}

func foreach<S: SequenceType, T where T == S.Generator.Element>(seq: S, action: (T -> Void)) {
    for elem in seq {
        action(elem)
    }
}

protocol Concatenable: SequenceType {
    func +(lhs: Self, rhs: Self) -> Self
    init()
}

extension Array: Concatenable {}

func concatenate<S: SequenceType, C: Concatenable where S.Generator.Element == C>(seq: S) -> C {
    var result = C()
    for elem in seq {
        result = result + elem
    }
    return result
}

typealias AutoOptional = @autoclosure () -> Any?

func coalesce<S: SequenceType where S.Generator.Element == AutoOptional>(values: S) -> Any? {
    for value: () -> Any? in values {
        if let found = value() {
            return found
        }
    }
    return nil
}

func coalesce(values: @autoclosure () -> Any?...) -> Any? {
    return coalesce(values)
}

func any(values: [() -> Any?]) -> Any? {
    for value: () -> Any? in values {
        if let found = value() {
            if let truth = found as? Bool {
                if truth {
                    return truth
                }
            } else {
                return found
            }
        }
    }
    return nil
}

func any(values: @autoclosure () -> Any?...) -> Any? {
    return any(values)
}

func any<T>(test: T -> Bool, values: [@autoclosure () -> T]) -> T? {
    for value: () -> T in values {
        let found = value()
        if test(found) {
            return found
        }
    }
    return nil
}

func any<T>(values: [@autoclosure () -> T], test: T -> Bool) -> T? {
    return any(test, values)
}

func any<T>(test: T -> Bool, values: @autoclosure () -> T...) -> T? {
    return any(test, values)
}

func all(values: [@autoclosure () -> Any?]) -> Bool {
    for value: () -> Any? in values {
        if let found = value() {
            if let truth = found as? Bool {
                if !truth {
                    return false
                }
            }
        } else {
            return false
        }
    }
    return true
}

func all(values: @autoclosure () -> Any?...) -> Bool {
    return all(values)
}

func all<T>(test: T -> Bool, values: [@autoclosure () -> T]) -> Bool {
    for value: () -> T in values {
        if !test(value()) {
            return false
        }
    }
    return true
}

func all<T>(values: [@autoclosure () -> T], test: T -> Bool) -> Bool {
    return all(test, values)
}

func all<T>(test: T -> Bool, values: @autoclosure () -> T...) -> Bool {
    return all(test, values)
}

