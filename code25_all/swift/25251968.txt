class Bullet:SKShapeNode {
    var color:SKColor?
    var dx:CGFloat?
    var dy:CGFloat?
    var move:SKAction {
    get {
        if dx != nil && dy != nil {
            return SKAction.moveByX(dx!, y: dy!, duration: 0.4)
        } else {
            return SKAction.moveByX(0, y: 0, duration: 0)
        }
    }
}

required override init() {
    super.init()
    let circle = CGRectMake(0, 0, 40, 40)
    self.antialiased = true
    self.setScale(0.5)
    self.path = UIBezierPath(ovalInRect: circle).CGPath
    self.lineWidth = 1
    self.color = Random.randomColor()
    if let c = self.color {
        self.fillColor = c
        self.strokeColor = c
    } else {
        self.fillColor = SKColor.whiteColor()
        self.strokeColor = SKColor.whiteColor()
    }
    self.physicsBody = SKPhysicsBody(circleOfRadius: circle.width/2)
    self.physicsBody.affectedByGravity = false
    self.physicsBody.categoryBitMask = Collision.bulletCategory
    self.physicsBody.contactTestBitMask = Collision.enemyCategory
}


required init(coder aDecoder: NSCoder!) {
    super.init(coder: aDecoder)
}

func generateBullet(loc:CGPoint) {
    let dx = loc.x - self.player.position.x
    let dy = loc.y - self.player.position.y
    let norm = CGVectorMake(dx, dy).normalize()
    let b = Bullet()
    b.dx = norm.dx * 600
    b.dy = norm.dy * 600
    let height = self.player.size.height/4
    b.position = CGPointMake(self.player.position.x + norm.dx * height, self.player.position.y + norm.dy * height)
    self.addChild(b)
    b.runAction(b.move, completion: {
        b.removeFromParent();
    })
}

