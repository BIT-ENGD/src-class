dataSource
dataSource
graph.plotAreaFrame.masksToBorder = false
nil
graph.topDownLayerOrder
class TemperatureGraph: CPTGraphHostingView, CPTPlotSpaceDelegate {

    // Just needed to retain dataSource
    var dataSource: CPTPlotDataSource?

    required init(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    func setupGraphWithSession(session: Session?) {
        self.configureGraph()
        self.configurePlot()
        self.configureAxes()
        if (session != nil)
        {
            self.configureDataSource(session!)
        }
    }

    func configureGraph() {
        let graph: CPTGraph = CPTXYGraph(frame: self.bounds)
        graph.applyTheme(CPTTheme(named: kCPTSlateTheme))

        graph.title = "Temperature History (°F)"

        graph.paddingTop    = 0.0;
        graph.paddingBottom = 0.0;
        graph.paddingLeft   = 0.0;
        graph.paddingRight  = 0.0;

        //        graph.titleDisplacement = CGPoint(x: 0, y: 20)
        graph.plotAreaFrame.paddingTop    = 30.0;
        graph.plotAreaFrame.paddingBottom = 50.0;
        graph.plotAreaFrame.paddingLeft   = 50.0;
        graph.plotAreaFrame.paddingRight  = 10.0;

        // This doesn't help
        // graph.fill = nil;
        // graph.plotAreaFrame.fill = nil;

        // This doesn't help
        // graph.plotAreaFrame.masksToBorder = false

        // This doesn't help either
        //graph.topDownLayerOrder = [NSNumber(unsignedInt: CPTGraphLayerTypeAxisTitles.value)]

        // Some themes have a rounded border around the plot area. It looks bad since we removed the insets, so remove the border too.
        graph.plotAreaFrame.borderLineStyle = nil;
        graph.plotAreaFrame.cornerRadius = 0;
        self.hostedGraph = graph
    }

    func configurePlot() {
        let graph = self.hostedGraph
        var plot = CPTScatterPlot()
        // Make the data source line use curved interpolation
        // plot.interpolation = CPTScatterPlotInterpolationCurved;

        var lineStyle: CPTMutableLineStyle = plot.dataLineStyle.mutableCopy() as CPTMutableLineStyle
        lineStyle.lineWidth = 1.0;
        lineStyle.lineColor = CPTColor.redColor()
        plot.dataLineStyle = lineStyle;
        // For some reason, areaBaseValue isn't visible in swift. It's in the header and in Objective-C, don't know why it's not seen here.
        //plot.areaFill = CPTFill(color: lineStyle.lineColor.colorWithAlphaComponent(0.2))
        //plot.areaBaseValue = NSDecimalNumber.zero()

        graph.addPlot(plot)
    }

    func configureAxes() {
        let graph = self.hostedGraph
        let plot = graph.plotAtIndex(0)

        // The timestamps are large, which would make an inordinant number of axis label text by default, so to even render the graph in under a minute, simplify the axes.
        var axisSet: CPTAxisSet = graph.axisSet
        var axisTitleStyle = CPTMutableTextStyle()
        axisTitleStyle.color = CPTColor.blackColor()
        axisTitleStyle.fontName = "Helvetica-Bold"
        axisTitleStyle.fontSize = 12

        var xAxis = axisSet.axisForCoordinate(CPTCoordinateX, atIndex: 0)
        xAxis.labelingPolicy = CPTAxisLabelingPolicyNone
        xAxis.title = "Time"
        xAxis.titleOffset = 15
        xAxis.titleTextStyle = axisTitleStyle


        var yAxis = axisSet.axisForCoordinate(CPTCoordinateY, atIndex: 0)
//        yAxis.labelingPolicy = CPTAxisLabelingPolicyNone
        yAxis.title = "Temperature (°F)"
        yAxis.titleOffset = 25
        yAxis.titleTextStyle = axisTitleStyle
    }

    func configureDataSource(sesh: Session) {
        self.dataSource = TemperatureDatasource(session: sesh)

        let plot = self.hostedGraph.plotAtIndex(0)
        plot.dataSource = self.dataSource
        plot.plotSpace.scaleToFitPlots([plot])
        plot.plotSpace.allowsUserInteraction = true
        plot.plotSpace.delegate = self
    }

    func plotSpace(space: CPTPlotSpace!, shouldScaleBy interactionScale: CGFloat, aboutPoint interactionPoint: CGPoint) -> Bool {
        return true
    }

    func plotSpace(space: CPTPlotSpace!, willChangePlotRangeTo newRange: CPTPlotRange!, forCoordinate coordinate: CPTCoordinate) -> CPTPlotRange! {
        // Adjust axis to keep them in view at the left and bottom;
        // adjust scale-labels to match the scroll.
        var allowedRange = newRange
        if (coordinate.value == CPTCoordinateY.value) {
            let space = self.hostedGraph.defaultPlotSpace as CPTXYPlotSpace
            allowedRange = space.yRange
        }
        return allowedRange;
    }
}

