func paymentQueue(queue: SKPaymentQueue!, updatedDownloads downloads:[AnyObject]){
    for download:AnyObject in downloads {
        if let down:SKDownload = download as? SKDownload  {
            switch down.downloadState {
            case .Active:
                NSLog("Active %@ %@",down.progress,down.timeRemaining)
                break
            case .Cancelled:
                NSLog("%@","download cancelled")
                break
            case .Failed:
                NSLog("%@","download failed")
                productTitle.text = "Download Failed"
                break
            case .Finished:
                NSLog("%@","download finished")
                var source = down.contentURL.relativePath
                var path = NSBundle.mainBundle().pathForResource("Config", ofType: "plist")
                var dict = NSDictionary(contentsOfFile:source.stringByAppendingPathComponent(path))

                if !dict.objectForKey("Files"){
                    SKPaymentQueue.defaultQueue().finishTransaction(down.transaction)
                    return
                }



                if let arr = dict["Files"] as? [String] {
                    for file in arr {
                        let content:String = source.stringByAppendingPathComponent("Contents").stringByAppendingPathComponent(file)
                        self.copyPathToDocsFolder(source,target:content)
                    }
                }

                SKPaymentQueue.defaultQueue().finishTransaction(down.transaction)
                NSLog("Download Complete");
                productTitle.text = "Download Complete";

            case .Paused:
                    NSLog("%@","SKDownloadStatePaused")
                    break
            case .Waiting:
                    NSLog("%@","SKDownloadStateWaiting")
                    break
            default: break
            }
        }
    }
}

func copyPathToDocsFolder(source:String,target:String) {
    NSLog("Copy function called")
    let filemgr:NSFileManager = NSFileManager.defaultManager()
    let dirPaths = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as String

    let docsDir = dirPaths;

    let targetPath = docsDir.stringByAppendingPathComponent(target)

    var error:NSError?


    if (filemgr.copyItemAtPath(source, toPath:target, error:&error)) {
        NSLog("Great Success");
    }
    else {
        NSLog("Error copying file:");
    }
}

