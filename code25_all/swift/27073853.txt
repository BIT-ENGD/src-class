class ViewController: UITableViewController {

    var tableData = []

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    override func viewWillAppear(animated: Bool) {
        println("viewWillAppear was just called")
        super.viewWillAppear(true)

        self.displayTable()
    }

    func displayTable() {
        getJSONData("http://www.example.com/data.json") { (results, resultError) in

            if (resultError == nil) {
                if var results = results {
                    dispatch_async(dispatch_get_main_queue(), {
                        self.tableData = [] //create out data on subsequent refreshes
                        self.tableData = results
                        self.tableView.reloadData() //This doesn't appear to be working!
                    })
                } else {
                    self.displayErrorPopup()
                }
            } else {
                self.displayErrorPopup()
            }
        }
    }

    func displayErrorPopup() {
        let alertViewController = UIAlertController(title: "Error", message: "Couldn't connect to API", preferredStyle: .Alert)
        let okButton = UIAlertAction(title: "OK", style: .Default, handler: nil)
        let cancelButton = UIAlertAction(title: "Cancel", style: .Cancel, handler: nil)
        alertViewController.addAction(okButton)
        alertViewController.addAction(cancelButton)
        self.presentViewController(alertViewController, animated: true, completion: nil)
    }

    //todo - extract this method into it's own class
    func getJSONData(ttAPIURL : String, completion: (resultsArray: NSArray?, resultError: NSError?) -> ()){
        let mySession = NSURLSession.sharedSession()
        let url: NSURL = NSURL(string: ttAPIURL)!

        let networkTask = mySession.dataTaskWithURL(url, completionHandler : {data, response, error -> Void in
            var err: NSError?
            if (error == nil) {
                var theJSON = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: &err) as NSMutableDictionary
                let results : NSArray = theJSON["list"]!["times"] as NSArray
                completion(resultsArray: results, resultError: error)
            } else {
                completion(resultsArray: nil, resultError: error)
            }
        })
        networkTask.resume()
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return tableData.count
    }

    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("ttCell", forIndexPath: indexPath) as UITableViewCell
        let timesEntry = self.tableData[indexPath.row] as NSMutableDictionary
        cell.textLabel.text = (timesEntry["routeName"] as String)
        return cell
    }

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 1
    }

    @IBAction func refreshButtonTap(sender: AnyObject) {
        self.displayTable()
    }    
}

