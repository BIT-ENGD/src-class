public protocol ImageDownloaderDelegate {
    func imageDownloadFinished(success: Bool)
}

public class ImageDownloader {
    var list: [Int64] = []
    var observer: [Int64:[ImageDownloaderDelegate]] = [:]
    var downloading: Bool = false

    public func downloadImageWithId(immutableId: Int64, delegate: ImageDownloaderDelegate) {
        // Add Id to download list
        if (!contains(list, immutableId)) {
            list.append(immutableId)
        }

        // Add Observer
        var observerList = observer[immutableId]
        if (observerList == nil) {
            observerList = [delegate]
        } else if (!contains(observerList, delegate)) {
            observerList!.append(delegate)
        }
        observer[immutableId] = observerList

        // Start to download
        if (!downloading) {
            self.downloadNextImage()
        }
    }

    private func downloadNextImage() {
        ...
    }

    /// A shared instance of the class
    public class var defaultImageDownloader: ImageDownloader {
        struct Singleton {
            static let instance = ImageDownloader()
        }
        return Singleton.instance
    }
}

