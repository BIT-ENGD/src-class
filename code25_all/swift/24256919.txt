UITableViewController
classes
api.getRooms()
api.getRooms()
{}
api.getRooms(User.currentUser()!) { (roomsObj, error) in
    if let rooms = roomsObj as? Array<Room> {
        self.rooms = rooms
        self.tableView.reloadData()
        if (viaPullToRefresh) {
            self.refreshControl.endRefreshing()
        }
    }
}

class PullViewController: UITableViewController {
    var rooms = Array<Room>()

    init(coder aDecoder: NSCoder!) {
        super.init(coder: aDecoder)

        // Custom initialization
        assert(User.currentUser())
    }

    override func viewDidLoad() {
        self.refreshControl = UIRefreshControl()
        self.refreshControl.addTarget(self, action: Selector("refreshInvoked"), forControlEvents: UIControlEvents.ValueChanged)
        refresh()
    }

    override func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int {
        return rooms.count
    }

    override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath:NSIndexPath!) -> UITableViewCell! {
        var cell: UITableViewCell? = tableView.dequeueReusableCellWithIdentifier("Cell") as? UITableViewCell
        if !cell {
            cell = UITableViewCell(style: UITableViewCellStyle.Default, reuseIdentifier:"Cell")
        }

        let room = rooms[indexPath.row]
        cell!.textLabel.textColor = UIColor.blackColor()
        cell!.textLabel.text = "\(room.name)(\(room.messageCount))"
        return cell
    }

    func refreshInvoked() {
        refresh(viaPullToRefresh: true)
    }

    func refresh(viaPullToRefresh: Bool = false) {
        let api = API()
        api.getRooms(User.currentUser()!) { (roomsObj, error) in
            if let rooms = roomsObj as? Array<Room> {
                self.rooms = rooms
                self.tableView.reloadData()
                if (viaPullToRefresh) {
                    self.refreshControl.endRefreshing()
                }
            }
        }
    }
}

class User {

    init() {
    }

    class func currentUser() -> Bool {
        return true
    }
}

class Room {

    var name: String
    var messageCount: Int

    init() {
    }
}

class API {

    init() {
    }

    func getRooms(user: User) -> (Array<Room>, String) { // ??
        // ??
    }
}

