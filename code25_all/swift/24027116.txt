Array<T>
T[]
T[]
extension T[] : ArrayType {
    //...
    init()

    var count: Int { get }

    var capacity: Int { get }

    var isEmpty: Bool { get }

    func copy() -> T[]
}

extension T[] : ArrayType {
    func foo(){}
}

extension T[] {
    func foo(){}
}

T[]
Use of undefined type 'T'
extension Array<T> {
    func foo(){}
}

Array<T : Any>
Array<String>
extension Array {
    func each(fn: (Any) -> ()) {
        for i in self {
            fn(i)
        }
    }
}

[1,2,3].each(println)

extension Array {
    func find<T>(fn: (T) -> Bool) -> T[] {
        var to = T[]()
        for x in self {
            let t = x as T
            if fn(t) {
                to += t
            }
        }
        return to
    }
}

["A","B","C"].find { $0 > "A" }

Swift.String
String
["A","B","C"].find { ($0 as String).compare("A") > 0 }

