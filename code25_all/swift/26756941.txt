NSData
NSData
NSInputStream
func getBytesFromNSData(data: NSData, start: Int) -> [UInt8] {
    let count = data.length / sizeof(UInt8)
    let remaining = count - start
    let range = NSMakeRange(start, remaining )
    var dataArray = [UInt8](count: remaining, repeatedValue: 0)
    data.getBytes(&dataArray, range: range)
    return dataArray
}

class TestObject {
    var a: Byte
    var b: Byte

    init() {
        a = 0x01
        b = 0x02
    }

    init(data: NSData) {
        let dataBytes = getBytesFromNSData(data, 0)
        a = Byte(dataBytes[0])
        b = Byte(dataBytes[1])
    }

    func populateFromStream(data: NSData) {
        var stream = NSInputStream(data: data)
        stream.open()
        var bytesRead = stream.read(&a, maxLength: 1)
        println("\(bytesRead)")

        bytesRead = stream.read(&b, maxLength: 1)
        println("\(bytesRead)")
    }

    func toArray() -> [Byte] {
        var result = [Byte](count: 2, repeatedValue: 0)
        result[0] = a
        result[1] = b

        return result
    }
}

let test = TestObject()
let testArray = test.toArray()
let length = testArray.count
let testData = NSData(bytes: testArray, length: length)
println("\(testData)")

let testIn = [ Byte(0x0d), Byte(0x0e) ]
let testDataIn = NSData(bytes: testIn, length: testIn.count)
println("\(testDataIn)")

let testConstructor = TestObject(data: testDataIn)

var testObject = TestObject()
testObject.populateFromStream(testDataIn)

