Singleton var aurl
import Foundation
import UIKit

var globalHttpUrl: NSURL!
var aurl = NSString(string: "http://")
var url = NSURL(string: "\(aurl)\(globalHttpUrl)")

class SneakyViewController : UIViewController {


override func viewWillAppear(animated: Bool) {

    super.viewWillAppear(animated)
    println(self.title)

    func hexStringFromData(data: NSData) -> String {
        var hexString = NSMutableString()
        var buffer = [UInt8](count:data.length, repeatedValue:0)
        data.getBytes(&buffer, length:data.length)
        for var i=0; i<buffer.count; i++ {
            if i % 4 == 0 && i != 0 {
                hexString.appendString(" ")
            }
            hexString.appendFormat("%02x", buffer[i])
        }
        return hexString
    }    
 }

func hexStringFromData(data: NSData) -> String {
    var hexString = NSMutableString()
    var buffer = [UInt8](count:data.length, repeatedValue:0)
    data.getBytes(&buffer, length:data.length)
    for var i=0; i<buffer.count; i++ {
        if i % 4 == 0 && i != 0 {
            hexString.appendString(" ")
        }
        hexString.appendFormat("%02x", buffer[i])
    }
    return hexString
}  
}

class PinkViewController : SneakyViewController {

@IBOutlet weak var machineCode: UITextView!

override func viewDidLoad() {
    super.viewDidLoad()

    let task = NSURLSession.sharedSession().dataTaskWithURL(url) {(data, response, error) in

        var myText = NSString(data: data, encoding: NSASCIIStringEncoding)

        dispatch_async(dispatch_get_main_queue()) {

            self.machineCode.text = myText

        }
    }

    //NSASCIIStringEncoding
    task.resume()

}

override func viewWillAppear(animated: Bool) {

    let task = NSURLSession.sharedSession().dataTaskWithURL(url) {(data, response, error) in

        var myText = NSString(data: data, encoding: NSASCIIStringEncoding)

        dispatch_async(dispatch_get_main_queue()) {

            self.machineCode.text = myText

        }
    }

    //NSASCIIStringEncoding
    task.resume()

}    
}

class GreyViewController : SneakyViewController, UITextFieldDelegate {

@IBOutlet var neoCodeView: UIView!

@IBOutlet weak var userInput: UITextField!

//var burl = NSString(string: "http://")

@IBAction func buttonPressed(sender: AnyObject) {
}

override func viewDidLoad() {
    super.viewDidLoad()

userInput.clearsOnBeginEditing.description
userInput.clearButtonMode = UITextFieldViewMode.WhileEditing  
}

@IBAction func goToPinkViewController(sender: AnyObject) {

    globalHttpUrl = NSURL(string: self.userInput.text)

}

override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {

    self.view.endEditing(true)

}

 func textFieldShouldReturn(textField: UITextField) -> Bool {
   userInput.resignFirstResponder()
    return true 
}

override func viewWillAppear(animated: Bool) {

   func touchesBegan(touches: NSSet, withEvent event: UIEvent) {

        self.view.endEditing(true)

    }

    func textFieldShouldReturn(textField: UITextField) -> Bool {
        userInput.resignFirstResponder()
        return true
    }

    userInput.clearsOnBeginEditing.description
    userInput.clearButtonMode = UITextFieldViewMode.WhileEditing       

}

}

class BlueViewController : SneakyViewController {

@IBOutlet weak var humanCode: UITextView!

override func viewDidLoad() {
    super.viewDidLoad()

    let task = NSURLSession.sharedSession().dataTaskWithURL(url) {(data, response, error) in
        var length = data.length
        var chunkSize = 1024 * 10
        var offset = 0

        while offset < length {
            var currentChunkSize = length - offset>chunkSize ? chunkSize : length - offset
            var chunk = NSData(bytes: data.bytes + offset, length:currentChunkSize)
            offset += currentChunkSize
            var string = self.hexStringFromData(chunk)
            dispatch_sync(dispatch_get_main_queue()) {
                self.humanCode.text = self.humanCode.text + string
            }
        }
    }


    task.resume()

}

override func viewWillAppear(animated: Bool) {



    let task = NSURLSession.sharedSession().dataTaskWithURL(url) {(data, response, error) in

        var myText = NSString(data: data, encoding: NSASCIIStringEncoding)

        dispatch_async(dispatch_get_main_queue()) {

            self.humanCode.text = myText

        }
    }

    //NSASCIIStringEncoding
    task.resume()

}
}

