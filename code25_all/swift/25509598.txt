    var material = SCNMaterial()
    var program = SCNProgram()

    // Read the vertex shader file and set its content as our vertex shader
    if let vertexShaderPath = NSBundle.mainBundle().pathForResource("VertexShader", ofType:"vsh")
    {
        let vertexShaderAsAString = NSString(contentsOfFile: vertexShaderPath, encoding: NSUTF8StringEncoding, error: nil)
        program.vertexShader = vertexShaderAsAString
    }

    // Read the fragment shader file and set its content as our fragment shader
    if let fragmentShaderPath = NSBundle.mainBundle().pathForResource("FragmentShader", ofType:"fsh")
    {
        let fragmentShaderAsAString = NSString(contentsOfFile: fragmentShaderPath, encoding: NSUTF8StringEncoding, error: nil)
        program.fragmentShader = fragmentShaderAsAString
    }

    // Give a meaning to variables used in the shaders
    program.setSemantic(SCNGeometrySourceSemanticVertex, forSymbol: "a_position", options: nil)
    program.setSemantic(SCNModelViewProjectionTransform, forSymbol: "u_viewProjectionTransformMatrix", options: nil)

    material.program = program

    // retrieve the ship node
    let ship = scene.rootNode.childNodeWithName("shipMesh", recursively: true)
    ship.geometry.firstMaterial = material

#version 300 es

uniform mat4 u_viewProjectionTransformMatrix;
in vec4 a_position;
out vec4 outPosition;

void main()
{
   outPosition = u_viewProjectionTransformMatrix * a_position;
}

#version 300 es

out vec4 outColor;

void main()
{
    outColor = vec4(1.0, 0.0, 0.0, 1.0)
}

SceneKit: error, failed to link program: ERROR: 0:1: '' :  version '300' is not supported
ERROR: 0:1: '' : syntax error: #version

#version 200 es
