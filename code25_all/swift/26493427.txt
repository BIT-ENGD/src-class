  func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        let CHILDREN_TAB_INDEX = 1
        var navigationController = self.tabBarController?.viewControllers?[CHILDREN_TAB_INDEX] as UINavigationController
        if navigationController.topViewController is ChildrenVC {
            var childrenVC = navigationController.topViewController as ChildrenVC
            let parent = self.fetchedResultsController.objectAtIndexPath(self.menuTableView.indexPathForSelectedRow()!) as Parent
            childrenVC.currentParent = parent
            self.tabBarController?.selectedIndex = CHILDREN_TAB_INDEX
        }
    }

var _fetchedResultsController: NSFetchedResultsController? = nil

var fetchedResultsController: NSFetchedResultsController {
    if _fetchedResultsController != nil {
        return _fetchedResultsController!
    }
    let moc:NSManagedObjectContext = coreDataHelper.backgroundContext!
    let fetchRequest = NSFetchRequest()
    let entity = NSEntityDescription.entityForName("Child", inManagedObjectContext: moc)
    fetchRequest.entity = entity
    fetchRequest.fetchBatchSize = 20
    let sortDescriptor = NSSortDescriptor(key: "name", ascending: false)
    let predicate = NSPredicate(format: "parent == %@", self.currentParent)
    fetchRequest.predicate = predicate
    let sortDescriptors = [sortDescriptor]
    fetchRequest.sortDescriptors = [sortDescriptor]

    let aFetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: moc, sectionNameKeyPath: nil, cacheName: "Master")
        aFetchedResultsController.delegate = self
        _fetchedResultsController = aFetchedResultsController

    var error: NSError? = nil
    if !_fetchedResultsController!.performFetch(&error) {
        abort()
        }
    _fetchedResultsController?.delegate = self
    return _fetchedResultsController!
}

func addNewParent(parentName:String) {
    let moc:NSManagedObjectContext = coreDataHelper.backgroundContext!
    var parent:Parent = NSEntityDescription.insertNewObjectForEntityForName("Parent", inManagedObjectContext: moc) as Parent
    parent.name = parentName
    for n in 1...5 {
        var child:Child = NSEntityDescription.insertNewObjectForEntityForName("Child", inManagedObjectContext: moc) as Child
        child.name = "A"
        child.parent = parent
    }
    coreDataHelper.saveContext(moc)
    menuTableView.reloadData()
}

