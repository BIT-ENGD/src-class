map
class Point(object):
    def __init__(self, (x, y)):
        self.x = x
        self.y = y

coords = [(1., 2.), (3., 4.)]
pts = map(Point, coords)

Point
import Cocoa

class Point
{
    var x: Float
    var y: Float

    init(x: Float, y: Float) {
        self.x = x
        self.y = y
    }
}

var pt = Point(x: 1, y: 2) // works fine

.map
let coords: (Float,Float)[] = [(1, 2), (3, 4)]

// (Point).Type is not convertible to '(Float, Float) -> $T3'
var pts = coords.map(Point)
// Initializer cannot be referenced without arguments
var pts = coords.map(Point.init)

func wrapper(x: Float, y: Float) -> Point {
    return Point(x: x, y: y)
}

// This *is* successful
var ptsWrapped = coords.map(wrapper)

map
extension Point {
    func newPointByAdding(x: Float, y: Float) -> Point {
        return Point(x: self.x + x, y: self.y + y)
    }
}

// This works as expected
var origin = Point(x: 0, y: 0)
var ptsAdded = coords.map(origin.newPointByAdding)

map
init
func
