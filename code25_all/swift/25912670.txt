@interface SimplePingClient()
{
    NSMutableArray* _currentPings;
    NSMutableDictionary* _currentCallbacks;
}

@end

@implementation SimplePingClient

-(id)init
{
    if( self = [super init] )
    {
        _currentPings = [NSMutableArray new];
        _currentCallbacks = [NSMutableDictionary new];
    }

    return self;
}

-(void)pingHostname:(NSString*)hostName andResultCallBlock:(void(^)(NSString* latency))result
{
    TSimplePing* pingClient = [TSimplePing simplePingWithHostName:hostName];
    [_currentPings addObject:pingClient];
    [_currentCallbacks setObject:result forKey:[NSValue valueWithNonretainedObject:pingClient]];
    pingClient.delegate = self;
    //some other irrelevant code
    ...
}

- (void)simplePing:(TSimplePing *)pinger didReceivePingResponsePacket:(NSData *)packet
{
    void(^callback)(NSString* latency) = [_currentCallbacks objectForKey:[NSValue valueWithNonretainedObject:pinger]];
    if( callback )
    {
        //some irrelevant code
        ...
        callback(@"123");//hard coded for test, irrelevant code get this value correctly ;)
        [_currentCallbacks removeObjectForKey:[NSValue valueWithNonretainedObject:pinger]];
    }
    [_currentPings removeObject:pinger];
}

typealias callbackClosure = (String) -> ()

class SimplePingClient: NSObject
{
    // MARK: variables
    var _currentPings = [TSimplePing]()
    var _currentCallbacks: Dictionary<String, callbackClosure> = [String: callbackClosure]()

    private func ping(hostname: String, resultCallback:callbackClosure)
    {
        var pingClient = TSimplePing(hostName: hostname)
        pingClient.delegate = self
        _currentPings.append(pingClient)
        _currentCallbacks[pingClient.hostName] = resultCallback

        if let callback = _currentCallbacks[pingClient.hostName]
        {
            callback("123213")//here program CRASHES
        }
    }
}

