UIColor.blackColor().setFill()
UIColor(patternImage: UIImage(named: "normalpaper.jpg")).setFill()
<Error>: CGContextRestoreGState: invalid context 0x0. This is a serious error.
This application, or a library it uses, is using an invalid context  and is thereby
contributing to an overall degradation of system stability and reliability. This
notice is a courtesy: please fix this problem. It will become a fatal error in an
upcoming update.

functions
func drawCircle() {

    //Setting the draw color
    UIColor.blackColor().setFill()

    // Creating the rectangle's size
    var drawRect = roundDrawRect(10.0, angle: 7)

    //Incrementing the coords
    ++y
    ++x

    //Drawing the rectangle
    drawRect.fill()

}

func eraseCircle() {

    //Setting the eraser color
    UIColor(patternImage: UIImage(named: "normalpaper.jpg")).setFill()

    //Decrementing the coords
    eraseX = x - 2
    eraseY = y - 2

    // Creating the rectangle's size
    var eraseRect = roundEraseRect(10.0, angle: 7)

    //Drawing the rectangle
    eraseRect.fill()

}

//Creating a view capable of painting the circle
class CircleView: UIView {

//Starting X Pos
var x: CGFloat = 100
var eraseX: CGFloat = 100

//Starting Y Pos
var y: CGFloat = 100
var eraseY: CGFloat = 100

//Starting the loop of functions
override func drawRect(rect: CGRect) {

    //Creating the looping draw timer
    NSTimer.scheduledTimerWithTimeInterval(
        0.2,
        target: self,
        selector: Selector("timerDraw"),
        userInfo: nil,
        repeats: true)

    //Creating the looping erase timer
    NSTimer.scheduledTimerWithTimeInterval(
        0.3,
        target: self,
        selector: Selector("timerErase"),
        userInfo: nil,
        repeats: true)

}

func drawCircle() {

    //Setting the draw color
    UIColor.blackColor().setFill()

    // Creating the rectangle's size
    var drawRect = roundDrawRect(10.0, angle: 7)

    //Incrementing the coords
    ++y
    ++x

    //Drawing the rectangle
    drawRect.fill()

}

func eraseCircle() {

    //Setting the eraser color
    UIColor(patternImage: UIImage(named: "normalpaper.jpg")).setFill()

    //Decrementing the coords
    eraseX = x - 2
    eraseY = y - 2

    // Creating the rectangle's size
    var eraseRect = roundEraseRect(10.0, angle: 7)

    //Drawing the rectangle
    eraseRect.fill()

}

func timerDraw(){

    //DO DRAW LOOP HERE
    drawCircle()

}

func timerErase(){

    //DO ERASE LOOP HERE
    eraseCircle()

}

//Defining the rounded rect erasing (Circle)
func roundEraseRect(radius: CGFloat, angle: CGFloat) -> UIBezierPath {

    //Creating the rounded rect (Circle)
    var roundedRect = UIBezierPath()

    roundedRect.moveToPoint(CGPointMake(eraseX,eraseY))
    println(CGPointMake(eraseX,eraseY))

    roundedRect.addArcWithCenter(CGPointZero, radius: radius,
        startAngle: 0, endAngle: angle ,
        clockwise: true)

    return roundedRect
}

//Defining the rounded rect drawing (Circle)
func roundDrawRect(radius: CGFloat, angle: CGFloat) -> UIBezierPath {

    //Creating the rounded rect (Circle)
    var roundedRect = UIBezierPath()

    roundedRect.moveToPoint(CGPointMake(x,y))

    roundedRect.addArcWithCenter(CGPointZero, radius: radius,
        startAngle: 0, endAngle: angle ,
        clockwise: true)

    return roundedRect
}




}

class ViewController: UIViewController {

