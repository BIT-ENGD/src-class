Swift
Generator
Sequence
class Stack<T> {
    var items:Array<T>

    var depth : Int{ return items.count}



    init(){
        items = Array<T>()
    }

    func push(elm:T){
        items += elm
    }

    func pop()->T?{
        if depth > 0{
            return items.removeLast()
        }else{
            return nil
        }
    }
}

Generator
extension Stack{

    struct StackGenerator: Generator{

        var current = 0
        mutating func next() -> T?{
            let rc = items[current] // Get an error here: can't access items in Stack

        }
    }
}

Stack.items
StackGenerator
