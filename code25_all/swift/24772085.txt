func _executeOnBlockAndSurroundingBlocksRecursive(predicate : (block : Block) -> Void,
                      withBlockCondition conditionPredicate : ((block : Block) -> Bool)?,
                                 withStartBlock start_block : Block?,
          withRelativeBlockPositions relativeBlockPositions : [RelativeBlockPosition],
                            withVisitedBlocks visitedBlocks : [Block])
{
    if start_block
    {
        var block : Block = start_block!

        if !visitedBlocks.contains(block)
            && (!conditionPredicate || conditionPredicate!(block: block))
        {
            visitedBlocks += block  //**compile error** - '[Block]' is not convertible to '@lvalue UInt8'

            predicate(block: block)

            for relativeBlockPosition in relativeBlockPositions
            {
                var relativePositionedBlock = block.getBlockForRelativeBlockPosition(relativeBlockPosition: relativeBlockPosition)

                if relativePositionedBlock
                {
                    _executeOnBlockAndSurroundingBlocksRecursive(predicate, withBlockCondition: conditionPredicate, withStartBlock: relativePositionedBlock, withRelativeBlockPositions: relativeBlockPositions, withVisitedBlocks : visitedBlocks)
                }
            }
        }
    }
}

visitedBlocks += block
visitedBlocks.append(block)
inout withVisitedBlocks visitedBlocks: [Block]
func _executeOnBlockTypeGroupingOuterEdges(predicate : (edgeBlock : Block) -> Void, withStartBlock block : Block)
{
    _executeOnBlockTypeGroupingOuterEdgesRecursive(predicate, withStartBlock: block, withCurrentBlock: block, withVisitedBlocks: &[]) //**compile error** - '[Block]' is not a subtype of '@lvalue [Block]'
}

func executeOnBlockAndSurroundingBlocksRecursive(predicate : (block : Block) -> Void,
                     withBlockCondition conditionPredicate : ((block : Block) -> Bool)?,
                                      withStartBlock block : Block,
         withRelativeBlockPositions relativeBlockPositions : [RelativeBlockPosition])
{
    _executeOnBlockAndSurroundingBlocksRecursive(predicate, withBlockCondition: nil, withStartBlock: block, withRelativeBlockPositions: relativeBlockPositions, withVisitedBlocks : &[]) //**compile error** - Extra argument 'withBlockCondition' in call
}

