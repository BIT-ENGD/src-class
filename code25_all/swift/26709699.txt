 func centralManagerDidUpdateState(central: CBCentralManager!) {
    if central.state == CBCentralManagerState.PoweredOff
    {
        println("bluetooth is off")
    }
    else if central.state == CBCentralManagerState.PoweredOn
    {
        IBtblScanMenu!.reloadData()
        central.scanForPeripheralsWithServices(nil, options: [CBCentralManagerScanOptionAllowDuplicatesKey : false])
        println("bluetooth is on")

    }
    else if central.state == CBCentralManagerState.Unknown
    {
        println("bluetooth is unknown")
    }
    else if central.state == CBCentralManagerState.Unsupported
    {
        println("bluetooth is unsupported")
    }
}

func centralManager(central: CBCentralManager!, didDiscoverPeripheral peripheral: CBPeripheral!, advertisementData: [NSObject : AnyObject]!, RSSI: NSNumber!)
    {
        if peripheral != nil{
            arrPeripherals.addObject(peripheral)
            self.peripheral = peripheral
            self.IBtblScanMenu!.reloadData()
            IBtblScanMenu!.hidden = false
            println(peripheral.name)
        }
        else
        {
            println("No device found")
        }
        peripheral.delegate = self
    }
func centralManager(central: CBCentralManager!, didConnectPeripheral peripheral: CBPeripheral!)
    {
        println(flag)
        if flag == false{
            peripheral.discoverServices(nil)
            var state = peripheral.state == CBPeripheralState.Connected ? "yes" : "no"
            connected = "Connected \(state)"
            println("connected \(connected)")       
        flag = true
        }
        else
        {
            var alert:UIAlertView = UIAlertView(title: "Message", message: "Already connected", delegate: self, cancelButtonTitle: "OK")
            alert.show()
            println("already connected")
        }}

func peripheral(peripheral: CBPeripheral!, didDiscoverServices error: NSError!)
    {
        if error == nil {
            println(peripheral.services)

            for service in peripheral.services as [CBService]
            {
                var alert:UIAlertView?
                println("service Id is \(service.UUID)")
                arrServiceID.addObject(service.UUID)
                println(arrServiceID)
 if service.UUID.isEqual(CBUUID.UUIDWithString("F4F-BC76-D6341A"))
                {
                    peripheral.discoverCharacteristics(nil, forService: service as CBService)

                }
            }}
        else
        {
            println("error!!!!!! ")
        }

func peripheral(peripheral: CBPeripheral!, didDiscoverCharacteristicsForService service: CBService!, error: NSError!)
    {
if (service.UUID.isEqual(CBUUID.UUIDWithString("F4F-BC76-D6341A")))
        {
            arrCharacteristics = service.characteristics 
            var WriteID:CBUUID = arrCharacteristics!.objectAtIndex(1).UUID
            var ReadID:CBUUID = arrCharacteristics!.objectAtIndex(0).UUID

            /* Write data*/

            if WriteID.isEqual(CBUUID.UUIDWithString("D0F0C1-9DD7-0B07047"))

            {
          var str:NSString = "hii..!! hello..!!"
            data = str.dataUsingEncoding(NSASCIIStringEncoding)!

                if (dataLen > 0)
 {

for (var count:Int = 0 ; count < dataLen ; count++ )
                    {
peripheral.writeValue(self.data!.subdataWithRange(NSMakeRange(count, 1)), forCharacteristic: self.arrCharacteristics!.objectAtIndex(1) as CBCharacteristic , type: CBCharacteristicWriteType.WithResponse)

                    println("Write performed")
    }}}
func peripheral(peripheral: CBPeripheral!, didWriteValueForCharacteristic characteristic: CBCharacteristic!, error: NSError!) {
        if characteristic.UUID.isEqual(CBUUID.UUIDWithString("D0F0C1-9DD7-0B07047"))

        {
            var datastring = NSString(data: data!, encoding: NSASCIIStringEncoding)
            println(datastring)
            message = UIAlertView(title: "Response", message: datastring , delegate: self, cancelButtonTitle: "OK")

            peripheral.setNotifyValue(true, forCharacteristic: arrCharacteristics!.objectAtIndex(0) as CBCharacteristic)
        }
    }
func peripheral(peripheral: CBPeripheral!, didUpdateNotificationStateForCharacteristic characteristic: CBCharacteristic!, error: NSError!) {
        if characteristic.UUID.isEqual(CBUUID.UUIDWithString("C8853-C506-4835-A2AB1"))
        {
            if (characteristic.isNotifying)
            {
                println("notification began\(characteristic)")
                println(characteristic.value)
                peripheral.readValueForCharacteristic(arrCharacteristics!.objectAtIndex(0) as CBCharacteristic)
            }
            else
            {
                println("notification stopped")
            }

        }
    }
 func peripheral(peripheral: CBPeripheral!, didUpdateValueForCharacteristic characteristic: CBCharacteristic!, error: NSError!) {
if characteristic.UUID.isEqual(CBUUID.UUIDWithString("C8853-C506-4835-A2AB1"))
        {
            println(characteristic.value)
            println("Read performed")
            var str:NSString = NSString(data: characteristic.value, encoding: NSASCIIStringEncoding)
            println("bbbbb--- \(str)")

            var alert:UIAlertView = UIAlertView(title: "Message", message: str, delegate: self, cancelButtonTitle: "OK")
            alert.show()

        }

