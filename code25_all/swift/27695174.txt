import Foundation
import UIKit
import CoreData

class LendersViewController: UIViewController {

var lenders = Array<Lenders>()
let lendersModel = LendersModel()

//MARK: VC Delegate Methods
override func viewDidLoad() {


    // Get the data from CoreData and Put it into a variable that I can get to later.
    self.lenders = lendersModel.readLenderData() as Array

}


}

extension LendersViewController: UITableViewDelegate, UITableViewDataSource {


func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    //return lenderData.count!
    return self.lenders.count
}


func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{



    // Set the cell to reference the LendersViewCell class below.
    //  This contains all the connections to the cell.
    let cell: LendersViewCell = tableView.dequeueReusableCellWithIdentifier("LenderCell") as LendersViewCell
    let lendersNSArray = lenders as NSArray

    cell.cellLenderName.text = lendersNSArray[indexPath.row].valueForKey("corpName") as String?

    return cell
}
}


class LendersViewCell: UITableViewCell {
@IBOutlet weak var cellLenderLogo: UIImageView!
@IBOutlet weak var cellAprValue: UILabel!
@IBOutlet weak var cellDownValue: UILabel!
@IBOutlet weak var cellMonthlyValue: UILabel!
@IBOutlet weak var cellFavButtonLabel: UIButton!
@IBOutlet weak var cellLenderName: UILabel!
}

func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{



    // Set the cell to reference the LendersViewCell class below.
    //  This contains all the connections to the cell.
    let cell: LendersViewCell = tableView.dequeueReusableCellWithIdentifier("LenderCell") as LendersViewCell
    let lendersNSArray = lenders as NSArray

    cell.cellLenderName.text = lendersNSArray[indexPath.row].valueForKey("corpName") as String?

//Adding the below two lines causes an error.
var getLenderId = lendersNSArray[indexPath.row].valueForKey("lenderId") as? String
    self.lenderUserComments = lendersModel.readUserCommentsData(getLenderId!)

    return cell
}

"fatal error: unexpectedly found nil while unwrapping an Optional value"

import Foundation
import CoreData
import UIKit

class LendersModel:NSObject, NSFetchedResultsControllerDelegate{


//MARK: - Variables
// *** Setup the params used to work with the database.
private let entityName:String = "LenderUserComments"
private let entityName2:String = "Lenders"
private let appDel:AppDelegate = UIApplication.sharedApplication().delegate as AppDelegate


//Reads ALL lender data
func readLenderData()-> Array<Lenders>{
    // Setup database connection and save to context.
    var context:NSManagedObjectContext = appDel.managedObjectContext
    var request = NSFetchRequest(entityName: entityName2)
    request.returnsObjectsAsFaults = false;

    // Get the data and put it into a variable
    var results = context.executeFetchRequest(request, error: nil)

    return results as Array<Lenders>
}


// Reads User's comments on given data.
func readUserCommentsData(lenderId:String)-> Array<LenderUserComments>{

    // Setup database connection and save to context.
    var context:NSManagedObjectContext = appDel.managedObjectContext
    var request = NSFetchRequest(entityName: entityName)
    request.returnsObjectsAsFaults = false;
    request.predicate = NSPredicate(format: "lenderId = %@", lenderId)

    // Get the data and put it into a variable
    var results = context.executeFetchRequest(request, error: nil)

    return results as Array<LenderUserComments>
}

....

}

    var managedObjectContext: NSManagedObjectContext {

        let coordinator = self.persistentStoreCoordinator

            _managedObjectContext = NSManagedObjectContext()
            _managedObjectContext!.persistentStoreCoordinator = coordinator


    return _managedObjectContext!
}

    var managedObjectContext: NSManagedObjectContext {

    if (_managedObjectContext != nil)
    {
        return _managedObjectContext!; // making sure you don't reinitialise
    }
    let coordinator = self.persistentStoreCoordinator

    _managedObjectContext = NSManagedObjectContext(concurrencyType: NSManagedObjectContextConcurrencyType.PrivateQueueConcurrencyType)
    _managedObjectContext!.persistentStoreCoordinator = coordinator


    return _managedObjectContext!
}

