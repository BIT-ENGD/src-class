func loadData() {
    var query = PFQuery(className: "Items")
    query.includeKey("user")
    query.getObjectInBackgroundWithId(itemId) {
        (itemObject: PFObject!, error: NSError!) -> Void in
        if (error == nil) {


            var userObject = itemObject.objectForKey("user") as PFObject


            let userImageFile = userObject.objectForKey("file") as PFFile
            userImageFile.getDataInBackgroundWithBlock {
                (imageData: NSData!, error: NSError!) -> Void in
                if error == nil {
                    let image = UIImage(data:imageData)






                    self.detailDic?.setObject(itemObject.objectForKey("title"), forKey: "title")
                    self.detailDic?.setObject(itemObject.objectForKey("description"), forKey: "desc")
                    self.detailDic?.setObject(itemObject.objectForKey("location"), forKey: "point")
                    self.detailDic?.setObject(userObject.objectForKey("name"), forKey: "name")
                    self.detailDic?.setObject(userObject.objectForKey("gender"), forKey: "gender")
                   self.detailDic?.setObject(image, forKey: "image")

                    var relation = itemObject.relationForKey("file") as PFRelation
                    var imageQuery = relation.query() as PFQuery
                    imageQuery.findObjectsInBackgroundWithBlock { (imageObj: [AnyObject]!, error1: NSError!) -> Void in
                        if error1 == nil {

                            var imageDic:NSMutableArray = NSMutableArray()

                            let group = dispatch_group_create()

                            for obj in imageObj {
                                var imageObject = obj as PFObject
                                var thumbnail = imageObject.objectForKey("file") as PFFile
                                // Important: enter the group *before* starting the background task.
                                dispatch_group_enter(group)
                                thumbnail.getDataInBackgroundWithBlock {
                                    (imageData: NSData!, error: NSError!) -> Void in
                                    if error == nil {
                                        let theImage = UIImage(data:imageData)
                                        theImage.CGImage
                                        self.imageArray!.addObject(theImage)
                                        dispatch_group_leave(group)
                                    }
                                }
                            }

                            dispatch_group_notify(group, dispatch_get_main_queue()) {
                                self.tableView?.reloadData()
                            }







                        }


                    }



                }

            }




        }


    }

}

