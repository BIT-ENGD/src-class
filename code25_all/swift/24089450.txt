extension Array {
    func sum() -> Int {
        return self.map { $0 as Int }.reduce(0) { $0 + $1 }
    }
}

Int[]
[1,2,3].sum() //6

Double[]
[1.1,2.1,3.1].sum() //fails

protocol Addable {
    func +(lhs: Self, rhs: Self) -> Self
    init()
}

extension Int : Addable {
}

extension Double : Addable {
}

extension Array {
    func sum<T : Addable>(min:T) -> T
    {
        return self.map { $0 as T }.reduce(min) { $0 + $1 }
    }
}

[1,2,3].sum(0) //6
[1.1,2.1,3.1].sum(0.0) //6.3

func sum<T : Addable>(x:T...) -> T?
{
    return self.map { $0 as T }.reduce(T()) { $0 + $1 }
}

[1,2,3].sum(0) //6

[1,2,3].sum() //Could not find member 'sum'

Integer
func sum<T where T : Integer, T: Addable>() -> T?
{
    return self.map { $0 as T }.reduce(T()) { $0 + $1 }
}

let i:Int = [1,2,3].sum()
let d:Double = [1.1,2.2,3.3].sum()

