// Warning, this code will cause Xcode to hang if you run this in a playground
// Instead I recommend running it in the REPL  or running it with the command
// line tool

struct TakeGenerator<T: GeneratorType>: GeneratorType {
    typealias Element = T.Element

    var generator: T

    mutating func next() -> Element? {
        return self.generator.next()
    }
}

struct Take<T: SequenceType>: SequenceType {
    typealias Generator = TakeGenerator<T.Generator>

    let seq: T
    let test: ((element: T.Generator.Element) -> Bool)?

    func generate() -> Generator {
        return Generator(generator: seq.generate())
    }
}

// NOTE: The times below reflect how long it takes to run this code from 
// the command line with only that line uncommented (other than the type
// declarations)
//
// The command I use is: `time xcrun swift <filename>`

var array = [1,2,3,4]
Take(seq: array, test: {$0 < 3}) // 0.104 seconds to execute
Take(seq: [1,2,3,4], test: nil) // 0.100 seconds to execute
Take(seq: ([1,2,3,4] as [Int]), test: {$0 < 3}) // 0.140 seconds to execute
Take(seq: [1,2,3,4], test: {$0 < 3}) // 17.939 seconds to execute

let test: ((element: Int) -> Bool)?

