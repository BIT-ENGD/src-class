func enumerate2<Seq : SequenceType>(base: Seq?) -> EnumerateSequence<Seq> {
    // if optional sequence is specified
    if let b = base { return enumerate(b) }

    // enumerate empty sequence
    let a = Array<Seq.Generator.Element>()
    return Swift.enumerate(a)
}

func enumerate3<Seq : SequenceType, T where T == Seq.Generator.Element>(base: Seq?) -> EnumerateSequence<Seq> {
    // if optional sequence is specified
    if let b = base { return enumerate(b) }

    // enumerate empty sequence
    let a = Array<T>()
    return Swift.enumerate(a)
}

'Array<Seq.Generator.Element>' does not conform to protocol 'GeneratorType'
return Swift.enumerate(a)
EnumerateSequence<Seq>
GeneratorType
func enumerate<Seq : SequenceType>(base: Seq?) -> EnumerateSequence<Seq>? {
    return base != nil  ? enumerate(base) : nil
}

public func each<S:SequenceType, T where T == S.Generator.Element>
    (seq: S, with fn:(T)->()) {
        for s in seq { fn(s) }
}

public func each<S:SequenceType, T where T == S.Generator.Element>
    (seq: S?, with fn:(T)->()) {
        if let some = seq {
            for s in some { fn(s) }
        }
}


let es = enumerate(["a", "b", "c", "d"])
each(es) { p in
    println("\(p.0), \(p.1)")
}

let b:[Int]? = nil
let nes = enumerate(b)
each(nes) { p in
    println("\(p.0), \(p.1)")
}

println("done")

0, a
1, b
2, c
3, d
done

