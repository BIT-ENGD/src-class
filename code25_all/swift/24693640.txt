override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.

        array.addObject("a")
        array.addObject("b")
        array.addObject("c")
        array.addObject("d")
        array.addObject("e")

    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func collectionView(collectionView: UICollectionView!, numberOfItemsInSection section: Int) -> Int {
        return array.count
    }

    func numberOfSectionsInCollectionView(collectionView: UICollectionView!) -> Int {
        return 1
    }

    func collectionView(collectionView: UICollectionView!,
        layout collectionViewLayout: UICollectionViewLayout!,
        sizeForItemAtIndexPath indexPath: NSIndexPath!) -> CGSize{
            return CGSizeMake(197, 224);
    }

    func collectionView(collectionView: UICollectionView!, layout collectionViewLayout: UICollectionViewLayout!,        minimumInteritemSpacingForSectionAtIndex section:Int)->CGFloat{
            return 0
    }

    func collectionView(collectionView: UICollectionView!, layout collectionViewLayout: UICollectionViewLayout!, minimumLineSpacingForSectionAtIndex section:Int)->CGFloat{
        return 0
    }

    func collectionView(collectionView: UICollectionView!, cellForItemAtIndexPath indexPath: NSIndexPath!) -> UICollectionViewCell! {

        var cell:UICollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier("identifier", forIndexPath: indexPath) as UICollectionViewCell

        if (cell == nil)
        {
            cell = collectionView.dequeueReusableCellWithReuseIdentifier("identifier", forIndexPath: indexPath) as UICollectionViewCell
        }

        var ima:UIImageView
        ima = cell.viewWithTag(4) as UIImageView
        ima.image = UIImage(named: "anonymous.jpg")

        var name:UILabel = cell.viewWithTag(2) as UILabel
        name.text = "\(array.objectAtIndex(indexPath.row))"

        cell.layer.borderColor = UIColor.lightGrayColor().CGColor
        cell.layer.borderWidth = 0.5

        return cell
    }

    func collectionView(collectionView:UICollectionView!, itemAtIndexPath fromIndexPath:NSIndexPath!, willMoveToIndexPath toIndexPath:NSIndexPath)
    {

        var object:NSMutableArray = NSMutableArray()
        //object.addObject(array.objectAtIndex(fromIndexPath.item).mutableCopy())
        object = array.objectAtIndex(fromIndexPath.item).mutableCopy() as NSMutableArray

        NSLog("\(object)")

        array.removeObjectAtIndex(fromIndexPath.item)
        array.insertObject(object, atIndex: toIndexPath.item)

    }

    func collectionView(collectionView:UICollectionView!, itemAtIndexPath fromIndexPath:NSIndexPath!, didMoveToIndexPath toIndexPath:NSIndexPath)
    {

    }

    func collectionView(collectionView:UICollectionView!, itemAtIndexPath fromIndexPath:NSIndexPath!, canMoveToIndexPath toIndexPath:NSIndexPath) ->Bool
    {
        return true
    }

    func collectionView(collectionView:UICollectionView!, itemAtIndexPath canMoveItemAtIndexPath:NSIndexPath) -> Bool
    {
        return true
    }

    func collectionView(collectionView: UICollectionView!, layout collectionViewLayout: UICollectionViewLayout!, didBeginDraggingItemAtIndexPath indexPath: NSIndexPath!) {

    }

    func collectionView(collectionView: UICollectionView!, layout collectionViewLayout: UICollectionViewLayout!, didEndDraggingItemAtIndexPath indexPath: NSIndexPath!) {

    }

    func collectionView(collectionView: UICollectionView!, layout collectionViewLayout: UICollectionViewLayout!, willBeginDraggingItemAtIndexPath indexPath: NSIndexPath!) {

    }

    func collectionView(collectionView: UICollectionView!, layout collectionViewLayout: UICollectionViewLayout!, willEndDraggingItemAtIndexPath indexPath: NSIndexPath!){

    }
}

object = array.objectAtIndex(fromIndexPath.item).mutableCopy() as NSMutableArray

