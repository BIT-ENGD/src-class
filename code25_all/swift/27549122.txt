struct
    let crossSouthWest1 = getCrossProduct(x, y: y, from: .SouthWest)
    let crossSouthWest2 = getCrossProduct(x, y: y, from: .SouthWest)
    let crossSouthWest3 = getCrossProduct(x, y: y, from: .SouthWest)
    let crossSouthWest4 = getCrossProduct(x, y: y, from: .SouthWest)
    let crossSouthWest5 = getCrossProduct(x, y: y, from: .SouthWest)
    let crossSouthWest6 = getCrossProduct(x, y: y, from: .SouthWest)

struct
nil
breakpoint
func getCrossProduct(x: Int, y: Int, from planarDirection: PlanarDirection) -> Float3? {
    let u = getAdjacentVertex(x, y: y, from: planarDirection.cardinalDirections.0)
    let v = getAdjacentVertex(x, y: y, from: planarDirection.cardinalDirections.1)

    if let vNotNil = v {
        if let uNotNil = u {
            let from = getVertex(x, y)
            let toU = uNotNil.subtract(from)
            let toV = vNotNil.subtract(from)

            return toU.crossProductWith(toV)
        }
    }
    return nil
}

getAdjacentVertex
func getAdjacentVertex(x: Int, y: Int, from direction: Direction) -> Float3? {
    let modifierX       = (direction == .West) ? 1 : 0
    let modifierWidth   = (direction == .East) ? -1 : 0
    let modifierY       = (direction == .North) ? 1 : 0
    let modifierHeight  = (direction == .South) ? -1 : 0

    if x >= modifierX &&
        x < width + modifierWidth &&
        y >= modifierY &&
        y < height + modifierHeight {
        return getVertex(x - modifierX - modifierWidth, y - modifierY - modifierHeight)
    }
    return nil
}

