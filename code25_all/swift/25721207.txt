// ViewController.swift

import UIKit

class ViewController: UIViewController, UISearchBarDelegate {
    private let defaultPage : NSString = "http://xxx/index.xml"
    private var dataArray : NSArray = []     

    internal override func viewDidLoad() {
        super.viewDidLoad()
        var parser : XMLParser = XMLParser.alloc().initWithURL(NSURL.URLWithString(defaultPage)) as XMLParser
        parser.getViews().draw(self)
    }    

    func buttonAction(sender: UIButton!) {
        NSLog("Method1")
   }
}

// XMLParser
import Foundation
class XMLParser: NSObject, NSXMLParserDelegate {

    private var views: Views?
    private var view: View?
    private var menu: Menu?
    private var menuItem: MenuItem?
    private var button: Button?
    private var parser = NSXMLParser()
    private var elements = NSMutableDictionary()
    private var element = NSString()

    internal func initWithURL(url :NSURL) -> AnyObject {
        beginParsing(url)
        return self
    }    

    private func beginParsing(xmlUrl :NSURL) {
        parser = NSXMLParser(contentsOfURL: xmlUrl)
        parser.shouldProcessNamespaces = false
        parser.shouldReportNamespacePrefixes = false
        parser.shouldResolveExternalEntities = false
        parser.delegate = self
        parser.parse()
    }

    internal func getViews() -> View {
        return view!
    }

    internal func parser(parser: NSXMLParser!,didStartElement elementName: String!, namespaceURI: String!, qualifiedName : String!, attributes attributeDict: NSDictionary!) {
        element = elementName.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
        switch(element as NSString){
        /*...*/
        case "button":
                button = Button(id:"", link:attributeDict.objectForKey("link") as NSString, width:attributeDict.objectForKey("width") as NSString, gravity:attributeDict.objectForKey("gravity") as NSString, text: "")
                view!.appendButton(button!)
                break
            default:
                break
        }

    }
}

// ButtonClass
class Button{
    private var id: String
    private var link: String
    private var width: String
    private var gravity: String
    private var text: String    

    internal init(id: String, link: String, width: String, gravity: String, text: String){
        self.id = id
        self.link = link
        self.width = width
        self.gravity = gravity
        self.text = text
    }

    internal func draw(uiViewController: UIViewController, position: Int){

        /*Different operations ...*/
        var button = UIButton.buttonWithType(UIButtonType.System) as UIButton
        button.frame = CGRectMake(x!, 130+50*CGFloat(position), CGFloat(width!), 40)
        button.backgroundColor = UIColor.greenColor()
        button.setTitle(self.text, forState: UIControlState.Normal)
        //button.addTarget(uiViewController, action: "buttonAction:", forControlEvents: UIControlEvents.TouchUpInside)
        button.addTarget(self, action: Selector("buttonAction2"), forControlEvents: .TouchUpInside)
        uiViewController.view.addSubview(button)
    }

    func buttonAction2() {
        NSLog("h2")
    }

}

