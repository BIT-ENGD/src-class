let str = "012345,abc,officer"
let components = split(str, { return $0 == "," })
//               ^ error: 'NSString' is not a subtype of 'String'

return
let components = split(str, { $0 == "," })
// -> ["012345", "abc", "officer"]

{ expression }
{ return expression }
split
return
func mySplit(seq: String, isSeparator: ((Character) -> BooleanType)) -> [String]{
    var ret:[String] = []

    var startIdx = seq.startIndex;
    for var idx = seq.startIndex; idx < seq.endIndex; idx = idx.successor() {
        if isSeparator(seq[idx]) {
            ret.append(seq[startIdx ..< idx])
            startIdx = idx.successor()
        }
    }
    if(startIdx <= seq.endIndex) {
        ret.append(seq[startIdx ..< seq.endIndex])
    }

    return ret;
}

let result1 = mySplit(str, { $0 == "," })
let result2 = mySplit(str, { return $0 == "," })

split(str, { (chr:Character) -> Bool in return chr == "," })
split(str, { (chr:Character) -> Bool in chr == "," })
split(str, { chr -> Bool in return chr == "," })
split(str, { chr -> Bool in chr == "," })
split(str, { (chr:Character) in chr == "," })
split(str, { chr in chr == "," })
split(str, { $0 == "," })

split(str, { (chr:Character) in return chr == "," })
split(str, { chr in return chr == "," })
split(str, { return $0 == "," })

mySplit
func mySplit<R:BooleanType>(seq: String, isSeparator:(Character) -> R) -> [String] {

