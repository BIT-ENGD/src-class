func URLSession(_:NSURLSession, task:NSURLSessionTask, willPerformHTTPRedirection:NSHTTPURLResponse, newRequest:NSURLRequest, completionHandler:(NSURLRequest!) -> Void )
task.cancel()
func callURL (a: String, b: String) -> Void {
    // Define the URL
    var url = NSURL(string: "https://mycorrecturl.com");

    // Define the request object (via string)
    var request = NSMutableURLRequest(URL: url!)

    // Use default configuration
    let config = NSURLSessionConfiguration.defaultSessionConfiguration()

    // Create the NSURLSession object with default configuration, and self as a delegate (so calls delegate method)
    let session = NSURLSession(configuration: config, delegate: self, delegateQueue: nil)

    // Change from default GET to POST (needed to call URL properly)
    request.HTTPMethod = "POST"

    // Construct my parameters to send in with the URL
    var params = ["a":a, "b":b] as Dictionary<String, String>

    var err: NSError?
    request.HTTPBody = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: &err)

    var task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in
        // Do some other stuff after delegate has returned...
    })
    task.resume()
    return
}

func URLSession(_:NSURLSession, task:NSURLSessionTask, willPerformHTTPRedirection:NSHTTPURLResponse, newRequest:NSURLRequest, completionHandler:(NSURLRequest!) -> Void ) {
    // Check Cookies
    let url = NSURL(string: "https://mycorrecturl.com")
    var all = NSHTTPCookie.cookiesWithResponseHeaderFields(willPerformHTTPRedirection.allHeaderFields, forURL: url!)

    // Get the correct cookie
    for cookie:NSHTTPCookie in all as [NSHTTPCookie] {
        if cookie.name as String == "important_cookie" {
            NSHTTPCookieStorage.sharedHTTPCookieStorage().setCookie(cookie)
        }
    }
    task.cancel()
}

