+ (uint32_t)hash:(uint8_t *)a length:(uint32_t)length
{
    uint8_t *p;
    uint32_t x;

    p = a;
    x = *p << 7;
    for (int i=0; i<length; i++) {
        x = (1000003 * x) ^ *p++;
        x ^= length;
    }
    if (x == -1) {
        x = -2;
    }
    return x;
}

func hashFNV(data: UInt8[]) -> UInt32 {
    var x = data[0] << 7

    for byte in data {
        x *= 1000003
        x ^= byte
        x ^= data.count
    }
    if x == -1 {
        x = -2
    }
    return x
}

EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP,subcode=0x0)

Playground execution failed: error: Execution was interrupted, reason: EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0).
The process has been left at the point where it was interrupted, use "thread return -x" to return to the state before expression evaluation.
* thread #1: tid = 0x619fa, 0x000000010d119aad, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
  * frame #0: 0x000000010d119aad
    frame #1: 0x0000000100204880 libswift_stdlib_core.dylib`value witness table for Swift.Int + 160

func hashFNV(data: UInt8[]) -> UInt32 {
    var x = UInt32(data[0]) << 7

    for byte in data {
        x = 1000003 &* x
        x ^= byte
        x ^= data.count
    }
    if x == -1 {
        x = -2
    }
    return x
}

x ^= byte
byte
func hashFNV(data: UInt8[]) -> UInt32 {
    var x = Int(data[0]) << 7

    for byte in data {
        x = 1000003 &* x
        x ^= Int(byte)
        x ^= data.count
    }
    if x == -1 {
        x = -2
    }
    return UInt32(x)
}

