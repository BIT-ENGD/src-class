 @IBAction func createFav(sender: AnyObject) {
       //Defining variables to save at core data
        var newTextInput = textInput.text
        var trimmNewTextInput = newTextInput.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())
        var zipInStr: String = zipCode.text!


            var appDel: AppDelegate = (UIApplication.sharedApplication().delegate as AppDelegate)
            var context:NSManagedObjectContext = appDel.managedObjectContext!

            var newFav = NSEntityDescription.insertNewObjectForEntityForName("Cells", inManagedObjectContext: context) as NSManagedObject

            newFav.setValue(zipInStr, forKey: "favsDictKey")
            newFav.setValue(trimmNewTextInput, forKey: "favsDictValues")

            context.save(nil)

            println(newFav)

        textInput.text = String()

        }
    }

func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {

    var appDel: AppDelegate = (UIApplication.sharedApplication().delegate as AppDelegate)
    var context:NSManagedObjectContext = appDel.managedObjectContext!

    var request = NSFetchRequest(entityName: "Cells")
    request.returnsObjectsAsFaults = false


    let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as UITableViewCell

    var results: NSArray = context.executeFetchRequest(request, error: nil)!
    println(results)
    if (results.count == 0){
       println("Error")

    } else {

        for res in results{

            cell.textLabel?.text = res.valueForKey("favsDictValues") as? String
            cell.detailTextLabel?.text = res.valueForKey("favsDictKey") as? String
        }
    }
     return cell
}

results
