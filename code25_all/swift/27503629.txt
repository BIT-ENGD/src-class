import UIKit
import CoreLocation
import MapKit
var userLocationCity : String!
var userLocationDate : String!
var safeUsername : String!
class TinderViewController: UIViewController, CLLocationManagerDelegate    {

override func viewDidLoad() {
    super.viewDidLoad()

    PFGeoPoint.geoPointForCurrentLocationInBackground { (geopoint: PFGeoPoint!, error: NSError!) -> Void in

        if error == nil {
            println(geopoint)

            var longitude :CLLocationDegrees = geopoint.longitude
            var latitude :CLLocationDegrees = geopoint.latitude

            var location = CLLocation(latitude: latitude, longitude: longitude) //changed!!!
            println(location)
            var formatter: NSDateFormatter = NSDateFormatter()
            formatter.dateFormat = "dd-MM-yyyy"
            let stringDate: String = formatter.stringFromDate(NSDate())
            userLocationDate = stringDate

            println(userLocationDate)

            CLGeocoder().reverseGeocodeLocation(location, completionHandler: {(placemarks, error) -> Void in

                if error != nil {
                    println("Reverse geocoder failed with error" + error.localizedDescription)
                    return
                }

                if placemarks.count > 0 {
                    println(userLocationCity)
                    let pm = placemarks[0] as CLPlacemark
                    println(pm.locality)

                    println(userLocationCity)
                    userLocationCity = pm.locality
                    println(userLocationCity)
                    user["location"] = userLocationCity
                    user.save()

                    let string1 = PFUser.currentUser().objectId
                    let string2 = "ID_"
                    safeUsername = string2 + string1

                    var locate = PFObject(className: safeUsername)
                    locate.setObject(userLocationCity, forKey: "location")
                    locate.setObject(userLocationDate, forKey: "date")
                    locate.saveInBackgroundWithBlock {
                        (success: Bool!, error: NSError!) -> Void in

                        if success == true {
                            println("Score created with ID: \(locate.objectId)")
                        } else {
                            println(error)
                        }                       
                    }
                }
                else {
                    println("Problem with the data received from geocoder")
                }
            })

           // user["location"] = geopoint
           // user.save()
        }
    }
}

