class TransitionManager: NSObject,UIViewControllerTransitioningDelegate,UIViewControllerAnimatedTransitioning {

private var presenting = true

// MARK: UIViewControllerTransitioningDelegate methods
func animationControllerForPresentedController(presented: UIViewController, presentingController presenting: UIViewController, sourceController source: UIViewController) -> UIViewControllerAnimatedTransitioning? {
    self.presenting = true
    return self
}

func animationControllerForDismissedController(dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
    self.presenting = false
    return self
}

// MARK: UIViewControllerAnimatedTransitioning methods
func transitionDuration(transitionContext: UIViewControllerContextTransitioning) -> NSTimeInterval {
    return 1.0
}

func animateTransition(transitionContext: UIViewControllerContextTransitioning) {

    let container = transitionContext.containerView()

    container.backgroundColor = UIColor.blackColor()

    let fromViewController = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey)!
    let toViewController = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey)!

    let fromView = fromViewController.view
    let toView = toViewController.view

    container.addSubview(toView)
    container.addSubview(fromView)

    let duration = self.transitionDuration(transitionContext)

    UIView.animateWithDuration(duration, delay: 0.0, options: .CurveEaseInOut , animations: { () -> Void in
        fromView.alpha = 0.0
    }) { (finished) -> Void in
        transitionContext.completeTransition(true)
        UIApplication.sharedApplication().keyWindow.addSubview(toView)
    }
}
}

prepareForSegue
let toViewController = segue.destinationViewController as UIViewController
    toViewController.transitioningDelegate = self.transitionManager

self.performSegueWithIdentifier("mySegue", sender:self)
UIViewController
