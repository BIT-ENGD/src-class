struct Set<T : Hashable>: Sequence {
    var items: Dictionary<Int, T> = [:]

    func append(o: T?) {
        if let newValue = o {
            items[newValue.hashValue] = newValue
        }
    }

    func generate() -> TypeGenerator<T> {
        return TypeGenerator ( Slice<T>( items.values ) )
    }
}

items[newValue.hashValue] = newValue

newValue
T
T?
Dictionary
subscript
subscript (key: KeyType) -> ValueType?

newValue
nil
nil
nil
nil
o
nil
hashValue
o!.hashValue
items[newValue.hashValue] = o

o
hashValue
