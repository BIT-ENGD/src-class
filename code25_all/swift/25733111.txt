-(void)peerDidChangeStateWithNotification:(NSNotification *)notification
    {
        MCPeerID *peerID = [[notification userInfo] objectForKey:@"peerID"];
        NSString *peerDisplayName = peerID.displayName;
        MCSessionState state = [[[notification userInfo] objectForKey:@"state"] intValue];

func peerDidChangeStateWithNotification(notification: NSNotification)
{
    if let userInfo : AnyObject = notification.userInfo? {
        let peerID = userInfo["peerID"] as MCPeerID
        let state = userInfo["state"] as MCSessionState

'AnyObject' is not convertible to 'MCSessionState'

func session(session: MCSession!, peer peerID: MCPeerID!, didChangeState state: MCSessionState)
{

    var dict = ["peerID": peerID, "state": state.toRaw()]

    NSNotificationCenter.defaultCenter().postNotificationName("MCDidChangeStateNotification", object: nil, userInfo: dict)

}

func peerDidChangeStateWithNotification(notification: NSNotification)
{
    if let userInfo : AnyObject = notification.userInfo?
    {
        let peerID = userInfo["peerID"] as MCPeerID
        let peerDisplayName = peerID.displayName
        let state: MCSessionState = MCSessionState.fromRaw(Int(userInfo["state"] as NSNumber)) as MCSessionState!

        if (state != MCSessionState.Connecting)
        {
            if (state == MCSessionState.Connected)
            {
                arrayConnectedDevices.append(peerDisplayName)
            }
            else if (state == MCSessionState.NotConnected)
            {
                if (arrayConnectedDevices.count > 0)
                {
                    if let i = find(arrayConnectedDevices, peerDisplayName)
                    {
                        arrayConnectedDevices.removeAtIndex(i)
                    }
                }
            }
        }
    }
}

