protocol BoardType {
    var width: Int {get}
    var height: Int {get}
    subscript(x:Int, y:Int) -> Int {get set}
}

class Board : BoardType {

    let width, height : Int
    var matrix : Array2D<Int>

    init(width: Int, height: Int) {
        self.width = width
        self.height = height
        matrix = Array2D<Int>(cols: width, rows: height, defaultValue: 0)
    }

    subscript(x:Int, y:Int) -> Int {
        get {
            return matrix[x,y]
        }
        set {
            matrix[x,y] = newValue
        }
    }
}

class Array2D<T>{

    var cols:Int, rows:Int
    var matrix:[T]

    init(cols:Int, rows:Int, defaultValue:T){
        self.cols = cols
        self.rows = rows
        matrix = Array(count:cols*rows,repeatedValue:defaultValue)
    }

    subscript(x:Int, y:Int) -> T {
        get{
            return matrix[cols * y + x]
        }
        set{
            matrix[cols * y + x] = newValue
        }
    }

    func colCount() -> Int {
        return self.cols
    }

    func rowCount() -> Int {
        return self.rows
    }
}

    let board = Board(width: 4, height: 4)
    board[1,1] = 10

    let board : BoardType = Board(width: 4, height: 4)
    board[1,1] = 10

