class specializedNode: SKSpriteNode {
    var variable = 0
}

struct PhysicsCategory {
    static let None : UInt32 = 0
    static let All  : UInt32 = UInt32.max
    static let A    : UInt32 = 0b1      
    static let B    : UInt32 = 0b10     
}

func spawnObjectA () {
    objectA = specializedNode()

    objectA.physicsBody = SKPhysicsBody(rectangleOfSize: objectA.size)
        objectA.physicsBody?.dynamic = true
        objectA.physicsBody?.categoryBitMask = PhysicsCategory.A
        objectA.physicsBody?.contactTestBitMask = PhysicsCategory.B
        objectA.physicsBody?.collisionBitMask = PhysicsCategory.None
        objectA.physicsBody?.usesPreciseCollisionDetection = true
    addChild(objectA)
}

func objectADidCollide(objectA:specializedNode, objectB:SKSpriteNode) {
    objectB.removeFromParent()
    ++objectA.variable
}

func didBeginContact(contact: SKPhysicsContact) {
    var firstBody: SKPhysicsBody
    var secondBody: SKPhysicsBody
    if contact.bodyA.categoryBitMask < contact.bodyB.categoryBitMask {
        firstBody = contact.bodyA
        secondBody = contact.bodyB
    } else {
        firstBody = contact.bodyB
        secondBody = contact.bodyA
    }

    if ((firstBody.categoryBitMask & PhysicsCategory.A != 0) && (secondBody.categoryBitMask & PhysicsCategory.B != 0)) {
            objectADidCollide(firstBody.node as specializedNode, objectB: secondBody.node as SKSpriteNode)
    }
}

libswiftCore.dylib`swift_dynamicCastClassUnconditional:
0x58e0ec:  cbz    r0, 0x58e0fc              ; swift_dynamicCastClassUnconditional + 16
0x58e0ee:  ldr    r2, [r0]
0x58e0f0:  cmp    r2, r1
0x58e0f2:  it     eq
0x58e0f4:  bxeq   lr
0x58e0f6:  ldr    r2, [r2, #0x4]
0x58e0f8:  cmp    r2, #0x0
0x58e0fa:  bne    0x58e0f0                  ; swift_dynamicCastClassUnconditional + 4
0x58e0fc:  trap   
0x58e0fe:  nop 

