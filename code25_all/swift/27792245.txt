class MyItem { /* some model properties */ }

protocol ItemView: class {
    // some protocol methods (e.g. updateWithItem(), etc)
    func setupItem(item: MyItem)
}

class SpecificItemView: UIView, ItemView { /* there will be multiple classes like this */
    func setupItem(item: MyItem) {
        // do item setup
    }
}

class AnotherItemView: UIView, ItemView {
    func setupItem(item: MyItem) {
        // do DIFFERENT item setup
    }
}

class MyViewController: UIViewController {

    var itemView: ItemView? // could be a SpecificItemView or AnotherItemView

    override func viewDidLoad() {
        itemView?.setupItem(MyItem())
        itemView?.removeFromSuperview() /* this line won't compile */
    }
}

UIView
removeFromSuperview
ItemView
UIView
@property (nonatomic, strong) UIView<ItemView> *itemView;

UIView
removeFromSuperview
ItemView
UIView
ItemView
SpecificItemView
AnotherItemView
var itemView: ItemViewParentClass
SpecificItemView
ItemViewParentClass
