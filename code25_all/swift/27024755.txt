ADBannerView
UITableView
UIViewController
UIViewController
viewDidLoad
self.tableView = UITableView(frame: self.view.bounds, style: .Grouped)
self.tableView.allowsSelectionDuringEditing = true
self.tableView.registerNib(UINib(nibName: "TableViewCellWithSwitch", bundle: nil), forCellReuseIdentifier: "SliderCellIdentifier")
self.tableView.dataSource = self
self.tableView.setTranslatesAutoresizingMaskIntoConstraints(false)

self.view.addSubview(self.tableView)
self.tableViewBottomLayoutConstraint = NSLayoutConstraint(item: self.tableView, attribute: .Bottom, relatedBy: .Equal, toItem: self.bottomLayoutGuide, attribute: .Top, multiplier: 1, constant: 0)
self.view.addConstraints([
    NSLayoutConstraint(item: self.tableView, attribute: .Left, relatedBy: .Equal, toItem: self.view, attribute: .Left, multiplier: 1, constant: 0),
    //NSLayoutConstraint(item: self.tableView, attribute: .Top, relatedBy: .Equal, toItem: self.view, attribute: .Top, multiplier: 1, constant: 0),
    //NSLayoutConstraint(item: self.tableView, attribute: .Top, relatedBy: .Equal, toItem: self.view, attribute: .Top, multiplier: 1, constant: self.topLayoutGuide.length),
    //NSLayoutConstraint(item: self.tableView, attribute: .Top, relatedBy: .Equal, toItem: self.topLayoutGuide, attribute: .Bottom, multiplier: 1, constant: 0),
    NSLayoutConstraint(item: self.tableView, attribute: .Right, relatedBy: .Equal, toItem: self.view, attribute: .Right, multiplier: 1, constant: 0),
    self.tableViewBottomLayoutConstraint
    ])
// This must be called or the use of self.topLayoutGuide will not function
// See: https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/index.html#//apple_ref/occ/instp/UIViewController/topLayoutGuide
self.view.layoutSubviews()

UITableView
func showiAds(animated: Bool) {
    println("Show iAd")
    if !self.showingiAd {
        println("Showing iAd")
        self.showingiAd = true

        // Add the banner view below the content before it's then animated in to view
        let delegate = UIApplication.sharedApplication().delegate as AppDelegate
        let bannerView = delegate.bannerView
        self.bannerBottomConstraint = NSLayoutConstraint(item: bannerView, attribute: .Bottom, relatedBy: .Equal, toItem: self.bottomLayoutGuide, attribute: .Top, multiplier: 1, constant: bannerView.frame.size.height)

        if (bannerView.superview != self.view) {
            bannerView.removeFromSuperview()
        }
        self.view.addSubview(bannerView)
        self.view.addConstraints([
            self.bannerBottomConstraint,
            NSLayoutConstraint(item: bannerView, attribute: .Left, relatedBy: .Equal, toItem: self.view, attribute: .Left, multiplier: 1, constant: 0),
            NSLayoutConstraint(item: bannerView, attribute: .Right, relatedBy: .Equal, toItem: self.view, attribute: .Right, multiplier: 1, constant: 0),
            ])
        self.view.layoutIfNeeded()


        // Only the changing of the value of the top of the banner is animated so it "slides in" from the bottom
        self.bannerBottomConstraint.constant = 0
        self.view.setNeedsUpdateConstraints()
        UIView.animateWithDuration(animated ? 0.5 : 0, animations: { () -> Void in
            // Calling layoutIfNeeded here will animate the layout constraint cosntant change made above
            self.view.layoutIfNeeded()
            }, completion: { (completed) -> Void in
                if completed {
                    println("Completed animation")
                }
        })
    }
}

func hideiAds() {
    println("Hide iAd")
    if self.self.showingiAd {
        self.showingiAd = false
        println("Hiding iAd")
        let delegate = UIApplication.sharedApplication().delegate as AppDelegate
        let bannerView = delegate.bannerView
        if bannerView.superview == self.view {
            bannerView.removeFromSuperview()
        }
        self.view.removeConstraint(self.tableViewBottomLayoutConstraint)
        self.tableViewBottomLayoutConstraint = NSLayoutConstraint(item: self.tableView, attribute: .Bottom, relatedBy: .Equal, toItem: self.bottomLayoutGuide, attribute: .Top, multiplier: 1, constant: 0)
        self.view.addConstraint(self.tableViewBottomLayoutConstraint)
    }
}

NSLayoutConstraint(item: self.tableView, attribute: .Top, relatedBy: .Equal, toItem: self.view, attribute: .Top, multiplier: 1, constant: 0)
NSLayoutConstraint(item: self.tableView, attribute: .Top, relatedBy: .Equal, toItem: self.view, attribute: .Top, multiplier: 1, constant: self.topLayoutGuide.length)
NSLayoutConstraint(item: self.tableView, attribute: .Top, relatedBy: .Equal, toItem: self.topLayoutGuide, attribute: .Bottom, multiplier: 1, constant: 0)
if iOS7 {...} else {...}
