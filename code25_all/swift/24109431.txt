struct Card {
    var rank: Rank
    var suit: Suit
    func simpleDescription() -> String {
        return "The \(rank.simpleDescription()) of \(suit.simpleDescription())"
    }
    func FullDeck() -> Card[] {
        var deck: Card[]
        for i in 1...13
        {
            for j in 0...3
            {
                let rank_para = Rank.fromRaw(i)
                let suit_para = Suit.fromRaw(j)


                **deck.append(Card(rank: rank_para, suit : suit_para ))
                //value of optional type unwrapped;did you mean to use ? or !**

            }
        }
        return deck
    }
}




enum Rank: Int {
    case Ace = 1
    case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
    case Jack, Queen, King
    func simpleDescription() -> String {
        switch self {
        case .Ace:
            return "ace"
        case .Jack:
            return "jack"
        case .Queen:
            return "queen"
        case .King:
            return "king"
        default:
            return String(self.toRaw())
        }
    }
    func compare(sec:Rank) -> Bool {
        var first = 0
        var second = 0
        if self.toRaw() == 1 {
            first = 1
        } else {
            first = self.toRaw()
        }
        if sec.toRaw() == 1 {
            second = 1
        } else {
            second = self.toRaw()
        }
        return first > second
    }
}


enum Suit: Int{
    case Spades = 0
    case Hearts, Diamonds, Clubs
    func simpleDescription() -> String {
        switch self {
        case .Spades:
            return "spades"
        case .Hearts:
            return "hearts"
        case .Diamonds:
            return "diamonds"
        case .Clubs:
            return "clubs"
        }
    }
}

