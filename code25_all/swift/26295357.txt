var story :Story?

if story != nil {...}// ERROR: Type UInt8 doer not conform to protocol 'NilLiteralConvertible'

class Story {
      var title: String
      var content: String

      init(title: String, content: String) {
        self.title = title
        self.content = content
      }

      func description() -> String {
        return title
      }


      class func loadStories(completion: ((Array<Story>?, NSErrorPointer) -> Void)!) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), {
          var error: NSErrorPointer = nil
          let path = NSBundle.mainBundle().bundlePath
          let manager = NSFileManager.defaultManager()

          var stories = [Story]()

          if let contents = manager.contentsOfDirectoryAtPath(path, error: error) {
            error = nil

            for file in contents {
              if file.hasSuffix(".grm") {
                let filePath = path.stringByAppendingPathComponent(file as String)
                let title = file.stringByDeletingPathExtension
                let content = NSString(contentsOfFile: filePath, encoding: NSUTF8StringEncoding, error: error)

                let story = Story(title: title, content: content)
            if error != nil {
              break
            }

            stories.append(story)

            error = nil
          }
        }
      }

      stories.sort({ a, b in
        a.title < b.title
      })

      dispatch_async(dispatch_get_main_queue(), {
         if error != nil {
          completion(nil, error)
        } else {
          completion(stories, nil)
        }
      })
    });
  }
}

