central.scanForPeripheralsWithServices(nil, options: [CBCentralManagerScanOptionAllowDuplicatesKey : false])

func centralManagerDidUpdateState(central: CBCentralManager!) {
        if central.state == CBCentralManagerState.PoweredOff
        {
            println("bluetooth is off")
        }
        else if central.state == CBCentralManagerState.PoweredOn
        {
            IBtblScanMenu!.reloadData()
           central.scanForPeripheralsWithServices(nil, options: [CBCentralManagerScanOptionAllowDuplicatesKey : false])
            println("bluetooth is on")
        }
        else if central.state == CBCentralManagerState.Unknown
        {
            println("bluetooth is unknown")
        }
        else if central.state == CBCentralManagerState.Unsupported
        {
            println("bluetooth is unsupported")
        }
    }
 @IBAction func btnScanClicked(sender:UIButton)
    {
        var centralManager:CBCentralManager = CBCentralManager(delegate: self, queue: nil)
        self.centralManager = centralManager
    }

func peripheral(peripheral: CBPeripheral!, didDiscoverServices error: NSError!)
{
    println(peripheral.services)
    println(peripheral.services.count)
    for service in peripheral.services as [CBService]
    {
        var alert:UIAlertView?
        println("service Id is \(service.UUID)")

        arrServiceID.addObject(service.UUID)
        println(arrServiceID)

        /* Heart Rate Service */
        if service.UUID.isEqual(CBUUID.UUIDWithString("180D"))
        {
            peripheral.discoverCharacteristics(nil, forService: service as CBService)
        }
        /* Device Information Service */
        if service.UUID.isEqual(CBUUID.UUIDWithString("180A"))
        {
            peripheral.discoverCharacteristics(nil, forService: service as CBService)
        }
        /* Communication with peripheral  */
        if service.UUID.isEqual(CBUUID.UUIDWithString("F4F2B816-A092-466E-BC76-320462D6341A"))
        {
            peripheral.discoverCharacteristics(nil, forService: service as CBService)
        }
    }

}

