self.backgroundColor = UIColor.clearColor()
import Foundation
import UIKit

class CustomColoredAccessory: UIControl {
    var accessoryColor: UIColor = .lightGrayColor()
    var highlightedColor: UIColor = .whiteColor()

    init(accessoryColor: UIColor, highlightedColor: UIColor) {
        super.init()
        self.accessoryColor = accessoryColor
        self.highlightedColor = highlightedColor
        CGRectMake(0, 0, 11.0, 15.0)
    }

    override init(frame: CGRect) {
        let myFrame = CGRectMake(0, 0, 11.0, 15.0)
        super.init(frame: myFrame)
        self.backgroundColor = UIColor.clearColor()    // This is the line mentioned above
    }

    required init(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func drawRect(rect: CGRect) {
        // (x,y) is the tip of the arrow
        let x = CGRectGetMaxX(self.bounds)-3.0
        let y = CGRectGetMidY(self.bounds)
        let R: CGFloat = 4.5
        var ctxt = UIGraphicsGetCurrentContext()
        CGContextMoveToPoint(ctxt, x-R, y-R)
        CGContextAddLineToPoint(ctxt, x, y)
        CGContextAddLineToPoint(ctxt, x-R, y+R)
        CGContextSetLineCap(ctxt, kCGLineCapSquare)
        CGContextSetLineJoin(ctxt, kCGLineJoinMiter)
        CGContextSetLineWidth(ctxt, 3)

        if (self.highlighted) {
            self.highlightedColor .setStroke()
        } else {
            self.accessoryColor .setStroke()
        }

        CGContextStrokePath(ctxt)
    }

}

    var cell = tableView.dequeueReusableCellWithIdentifier("cell", forIndexPath: indexPath) as UITableViewCell

    cell.textLabel?.text = "Text"

    let accessory: CustomColoredAccessory = CustomColoredAccessory(accessoryColor: UIColor.blackColor(), highlightedColor: UIColor.whiteColor())
    cell.accessoryView = accessory

    return cell

