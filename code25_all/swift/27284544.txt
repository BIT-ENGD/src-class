physicsBodyXXXX.dynamic = false
static
override func didMoveToView(view: SKView)
for Character in englishWord{

   // Make letters:
   let letterToMove = SKSpriteNode(imageNamed: "\(Character)")
   //then setting size and position
   var physicsBodyLetterToMove = SKPhysicsBody(rectangleOfSize: letterToMove.size)
   physicsBodyLetterToMove.affectedByGravity = false
   physicsBodyLetterToMove.allowsRotation = false
   physicsBodyLetterToMove.dynamic = false 
   letterToMove.physicsBody = physicsBodyLetterToMove

   self.addChild(letterToMove)

   // Make empty boxes for the letters:
   let letterRecBox = SKSpriteNode(imageNamed: "EmptyBox")
   //then setting size and position
   var physicsBodyLetterRecBox = SKPhysicsBody(rectangleOfSize: letterRecBox.size)
   physicsBodyLetterToMove.affectedByGravity = false            
   physicsBodyLetterRecBox.dynamic = false
   letterRecBox.physicsBody = physicsBodyLetterRecBox

   self.addChild(letterRecBox)
}

var selected: [UITouch: SKNode] = [:]

override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
    /* Called when a touch begins */

    selected = [:]
    for touch: AnyObject in touches {
        let location = touch.locationInNode(self)
        selected[touch as UITouch] = nodeAtPoint(location)
    }
}

override func touchesMoved(touches: NSSet, withEvent event: UIEvent) {
    for touch: AnyObject in touches {
        let location = touch.locationInNode(self)

        for (touch, node) in selected{
            if !contains([self], node){
                let action = SKAction.moveTo(location, duration: 0.1)
                node.runAction(SKAction.repeatAction(action, count: 1))
            }
        }

    }

}

