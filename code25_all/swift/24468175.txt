<T>
<Student>
DialogItem<Student>
///////////////////////////////////////////////////////
// Model class

class Student {
    let name:String

    init(name:String) {
        self.name = name
    }
}

///////////////////////////////////////////////////////
// Dialog item, this wraps the model class

protocol DialogItem {

    typealias T

    func getLabel() -> String

    func getModel() -> T
}

///////////////////////////////////////////////////////
// Implementation of dialog item "wrapper" for student

class StudentDialogItem : DialogItem {

    let student:Student

    init(student:Student) {
        self.student = student
    }

    func getLabel() -> String {
        return student.name
    }

    func getModel() -> Student {
        return student
    }
}


///////////////////////////////////////////////////////
// Listener
// ---> how can I pass T to DialogListener and then to DialogItem, to get items with correct type?

protocol DialogListener {


    func onItemSelected(item:DialogItem)
}


///////////////////////////////////////////////////////
// Dialog, with "dummy" functionality

class ItemSelectionDialog {
    let items:[DialogItem]
    let listener:DialogListener

    init (items:[DialogItem], listener:DialogListener) {
        self.items = items
        self.listener = listener
    }

    func show() {
        for item in items {
            println(item.getLabel())
        }
    }

    func simulateClick(index:Int) {
        listener.onItemSelected(items[index])
    }
}

///////////////////////////////////////////////////////
// Implementation of dialog listener

class DialogListenerImpl : DialogListener {

    func onItemSelected(item: DialogItem)  {
        let student:Student = item.getModel() //<---- DialogItem doesn't have type information, compiler doesn't even seem to recognise getModel()!
        //do something with student
        println("Selected a student!, name: " + student.name)
    }
}



///////////////////////////////////////////////////////

let items:[Student] = [Student(name: "Student1-name"), Student(name: "Student2-name"), Student(name: "Student3-name")]

let listener = DialogListenerImpl()

let studentDialogItems:[StudentDialogItem] = items.map({StudentDialogItem(student: $0)})

let dialog = ItemSelectionDialog(items: studentDialogItems, listener: listener)

dialog.show()

dialog.simulateClick(1)

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

///////////////////////////////////////////////////////
//Model class

class Student {

    private String name;

    public Student(String name) {
        this.name = name;
    }   

    public String getName() {
        return name;
    }
}

///////////////////////////////////////////////////////
//Dialog item, this wraps the model class

class StudentDialogItem implements DialogItem<Student> {

    private Student student;

    public StudentDialogItem(Student student) {
        this.student = student;
    }

    @Override
    public String getLabel() {
        return student.getName();
    }

    @Override
    public Student getModel() {
        return student;
    }
}

///////////////////////////////////////////////////////
//Implementation of dialog item "wrapper" for student

interface DialogItem<T> {

    String getLabel();

    T getModel();   
}


///////////////////////////////////////////////////////
//Listener

interface DialogListener<T> {

    void onItemSelected(DialogItem<T> item);    
}

///////////////////////////////////////////////////////
//Dialog, with "dummy" functionality

class ItemSelectionDialog<T> {

    private List<DialogItem<T>> items;
    private DialogListener<T> listener;

    public ItemSelectionDialog(List<DialogItem<T>> items, DialogListener<T> listener) {
        this.items = items;
        this.listener = listener; 
    }

    public void show() {
        for (DialogItem<T> item : items) {
            System.out.println(item.getLabel());
        }
    }

    //Simulate click
    public void simulateClick(int index) {

        listener.onItemSelected(items.get(index));
    }
}

///////////////////////////////////////////////////////
//Implementation of dialog listener

class DialogListenerImpl implements DialogListener<Student> {

    @Override
    public void onItemSelected(DialogItem<Student> item) {
        Student student = item.getModel();              
        //do something with student
        System.out.println("Selected a student!, name: " + student.getName());
    }
}

///////////////////////////////////////////////////////

public class Main {

    public static void main(String[] args) {
        List<Student> students = Arrays.asList(new Student("Student1-name"), new Student("Student2-name"), new Student("Student3-name"));

        DialogListener<Student> listener = new DialogListenerImpl();

        //Wrap the model objects in dialog items
        List<DialogItem<Student>> studentDialogItems = new ArrayList<DialogItem<Student>>();
        for (Student student : students) {
            studentDialogItems.add(new StudentDialogItem(student));
        }

        ItemSelectionDialog<Student> dialog = new ItemSelectionDialog<Student>(studentDialogItems, listener);

        dialog.show();

        dialog.simulateClick(1);
    }
}

