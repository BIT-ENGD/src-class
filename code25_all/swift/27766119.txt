func load<T>(#entityName:String, type:T.Type) -> T {
    let fetchRequest = NSFetchRequest()
    let appDelegate = UIApplication.sharedApplication().delegate as AppDelegate
    let entity = NSEntityDescription.entityForName(entityName, inManagedObjectContext: appDelegate.managedObjectContext!)
    fetchRequest.entity = entity

    var error:NSError?
    let obj = appDelegate.managedObjectContext?.executeFetchRequest(fetchRequest, error: &error) as T

    return obj
}

self.load(entityName: "CDSection", type: [CDSection].self)

let obj = appDelegate.managedObjectContext?.executeFetchRequest(fetchRequest, error: &error) as [CDSection]

func load<T:AnyObject>(#entityName:String, type:T.Type) -> [T] {
    let fetchRequest = NSFetchRequest()
    let appDelegate = UIApplication.sharedApplication().delegate as AppDelegate
    let entity = NSEntityDescription.entityForName(entityName, inManagedObjectContext: appDelegate.managedObjectContext!)
    fetchRequest.entity = entity

    var error:NSError?
    let obj = appDelegate.managedObjectContext?.executeFetchRequest(fetchRequest, error: &error) as [T]

    return obj
}

self.load(entityName: "CDSection", type: CDSection.self)

func load<T:[AnyObject]>(#entityName:String, type:T.Type) -> T {
    let fetchRequest = NSFetchRequest()
    let appDelegate = UIApplication.sharedApplication().delegate as AppDelegate
    let entity = NSEntityDescription.entityForName(entityName, inManagedObjectContext: appDelegate.managedObjectContext!)
    fetchRequest.entity = entity

    var error:NSError?
    let obj = appDelegate.managedObjectContext?.executeFetchRequest(fetchRequest, error: &error) as T

    return obj
}

