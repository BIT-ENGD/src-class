var apiURL:NSString = "http://www.api.com"

protocol NetWorkManagerDelegate {
    func requestSuccess(didSucceed response:NSArray)
    func requestFailure(didFail response:NSError)
}

class NetworkManager: AFHTTPRequestOperationManager {

    struct Singleton {
        static let sharedInstance = NetworkManager(url: NSURL(string: apiURL))
    }

    class var sharedInstance: NetworkManager {
        return Singleton.sharedInstance
    }

    var delegate:NetWorkManagerDelegate?

    init(url:NSURL)
    {
        super.init(baseURL: url)
        self.responseSerializer = AFJSONResponseSerializer()
        self.requestSerializer = AFJSONRequestSerializer()
    }

    func requestData(urlString:NSString)
    {
        var operation = self.GET(urlString,
            parameters: nil,
            success: { (operation: AFHTTPRequestOperation!, responseObject: AnyObject!) in
                self.delegate?.requestSuccess(didSucceed: responseObject as NSArray)
                println(responseObject)
            },
            failure: { (operation: AFHTTPRequestOperation!, error: NSError!) in
                self.delegate?.requestFailure(didFail: error)
                println(error)
            }
        )

        self.operationQueue.addOperation(operation)
    }


}

override func viewWillAppear(animated: Bool)
{
    var networkManager:NetworkManager = NetworkManager.sharedInstance
    networkManager.delegate = self
    networkManager.requestData("categories")
}

func requestSuccess(didSucceed response: NSArray)
{
    self.menuItems = response as NSArray
    self.tableView.reloadData()
}

func requestFailure(didFail response: NSError)
{
    println("Error!")
}

