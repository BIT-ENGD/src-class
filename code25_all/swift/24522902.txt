hiredis

objectToBeListened.on('event', (data) => { ... })
objectToBeListened.emit('event')

enum
switch
struct
class EEProto {
    var A: Int
    var B: Double

    typealias EventChangeA = (Int, Int) -> Void
    typealias EventChangeB = (Double, Double) -> Void
    typealias EventChanged = () -> Void

    struct RegisteredEvent {
        var eventChangeA: EventChangeA[]
        var eventChangeB: EventChangeB[]
        var eventChanged: EventChanged[]
    }

    enum EventType {
        case changeA(EventChangeA[])
        case changeB(EventChangeB[])
        case changed(EventChanged[])
    }

    var registeredEvents: RegisteredEvent

    init (A: Int, B: Double) {
        self.A = A
        self.B = B
        registeredEvents = RegisteredEvent(eventChangeA: [], eventChangeB: [], eventChanged: [])
    }

    func on (event: EventType) {
        switch event {
        case .changeA(let events):
            registeredEvents.eventChangeA += events
        case .changeB(let events):
            registeredEvents.eventChangeB += events
        case .changed(let events):
            registeredEvents.eventChanged += events
        default:
            assert("unhandled event type | check your code")
            break
        }
    }

    func resetEvents (eventType: EventType) {
        switch eventType {
        case .changeA:
            registeredEvents.eventChangeA = []
        case .changeB:
            registeredEvents.eventChangeA = []
        case .changed:
            registeredEvents.eventChangeA = []
        default:
            assert("unhandled event type | check your code")
            break
        }
    }

    func setA (newA: Int) {
        let oldA = A
        A = newA
        for cb in registeredEvents.eventChangeA {
            cb(oldA, newA)
        }
        for cb in registeredEvents.eventChanged {
            cb()
        }
    }

    func setB (newB: Double) {
        let oldB = B
        B = newB
        for cb in registeredEvents.eventChangeB {
            cb(oldB, newB)
        }
        for cb in registeredEvents.eventChanged {
            cb()
        }
    }
}

var inst = EEProto(A: 10, B: 5.5)
inst.on(EEProto.EventType.changeA([{
    println("from \($0) to \($1)")
    }]))
inst.on(EEProto.EventType.changeB([{
    println("from \($0) to \($1)")
    }]))
inst.on(EEProto.EventType.changed([{
    println("value changed")
    }]))

inst.setA(10)
inst.setB(3.14)

