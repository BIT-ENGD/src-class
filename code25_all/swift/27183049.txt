var thisLocation:CLLocationCoordinate2D = CLLocationCoordinate2DMake(latitude, longitude)
currentMarkers.append(GMSMarker(position: thisLocation))

var calle = obj["calle"] as String
var numero = obj["numero"] as String
var colonia = obj["colonia"] as String
var direccion = "\(calle) \(numero), \(colonia)"
var horarioSemanal = obj["horario_lv"] as String
var horarioSabatino = obj["horario_s"] as String
var nombre = obj["sucursal"] as String

currentMarkers.last?.icon = UIImage(named: tipo.lowercaseString)
currentMarkers.last?.title = "\(tipo) - \(nombre)"
currentMarkers.last?.appearAnimation = kGMSMarkerAnimationPop
currentMarkers.last?.snippet = direccion

currentMarkers[currentMarkers.count-1].snippet = direccion

let qualityOfServiceClass = Int(QOS_CLASS_BACKGROUND.value)
let inverseQueue = dispatch_get_global_queue(qualityOfServiceClass, 0)
dispatch_async(inverseQueue, {

    dispatch_async(dispatch_get_main_queue(), { () -> Void in
        self.labelStatus.text = "Obteniendo marcadores..."
        self.activityIndicatorUpdateMarkers.startAnimating()
    })

    self.fetchSucursales()

    dispatch_async(dispatch_get_main_queue(), { () -> Void in
        self.labelStatus.text = "\(self.currentMarkers.count) marcadores encontrados."
        self.activityIndicatorUpdateMarkers.stopAnimating()
    })

})

    labelStatus.text = "Obteniendo marcadores..."
    activityIndicatorUpdateMarkers.startAnimating()
    fetchNearbyPlaces()
    labelStatus.text = "\(currentMarkers.count) marcadores encontrados."
    activityIndicatorUpdateMarkers.stopAnimating()

func fetchSucursales() {

mapView.clear()
currentMarkers.removeAll(keepCapacity: false)
let fileManager = NSFileManager.defaultManager()
let enumerator:NSDirectoryEnumerator = fileManager.enumeratorAtPath(NSBundle.mainBundle().bundlePath)!
while let element = enumerator.nextObject() as? String {
    if element.hasSuffix("json") {

        let path = NSBundle.mainBundle().pathForResource(element.stringByDeletingPathExtension, ofType: element.pathExtension)
        let jsonData = NSData(contentsOfFile: path!, options: .DataReadingMappedIfSafe , error: nil)
        var jsonResult: NSDictionary = NSJSONSerialization.JSONObjectWithData(jsonData!, options: NSJSONReadingOptions.MutableContainers, error: nil) as NSDictionary
        var sucursales : NSArray = jsonResult["markers"] as NSArray

        sucursalLoop: for sucursal in sucursales {
            let obj = sucursal as NSDictionary

            var tipo = obj["tipo"] as String
            var latitude:CLLocationDegrees = obj["latitud"]!.doubleValue
            var longitude:CLLocationDegrees = obj["longitud"]!.doubleValue
            if contains(searchedTypes, tipo.lowercaseString) {
                //if latitude < mapRadius["norte"] && latitude > mapRadius["sur"] && longitude > mapRadius["este"] && longitude < mapRadius["oeste"] {

                for var index:Int = 0; index < currentMarkers.count; ++index {
                    if latitude == currentMarkers[index].position.latitude && longitude == currentMarkers[index].position.longitude {
                        if tipo.lowercaseString == "cajero" {
                            continue sucursalLoop
                        }else {

                            if currentMarkers[index].title.rangeOfString("cajero") != nil {
                                currentMarkers.removeAtIndex(index)
                            }
                            //append
                        }
                    }
                }

                //Append
                var thisLocation:CLLocationCoordinate2D = CLLocationCoordinate2DMake(latitude, longitude)
                let newMarker = GMSMarker(position: thisLocation)
                var calle = obj["calle"] as String
                //Rest of code posted before

8
8
8
8
8
10
10
10
10
1100

1100

1100

1100

1100

1100

10
11
11
11
11

