// object creation



@IBAction func btnScanClicked(sender:UIButton)
    {

        var centralManager:CBCentralManager = CBCentralManager(delegate: self, queue: nil)
        self.centralManager = centralManager
    }

 //   method called whenever the device state changes.

func centralManagerDidUpdateState(central: CBCentralManager!) {

        if central.state == CBCentralManagerState.PoweredOff
        {
            println("bluetooth is off")
        }
        else if central.state == CBCentralManagerState.PoweredOn
        {
            central.scanForPeripheralsWithServices(nil, options: nil) // scanning devices
            println("bluetooth is on")

        }
        else if central.state == CBCentralManagerState.Unknown
        {
            println("bluetooth is unknown")
        }
        else if central.state == CBCentralManagerState.Unsupported
        {
            println("bluetooth is unsupported")
        }
    }

// method to discover peripherals:- 

func centralManager(central: CBCentralManager!, didDiscoverPeripheral peripheral: CBPeripheral!, advertisementData: [NSObject : AnyObject]!, RSSI: NSNumber!)

    {
        if peripheral != nil{
                println("discovered \(peripheral.name)")
        }
        else
        {
            println("No device found")
        }
        self.peripheral = peripheral
        peripheral.delegate = self
        central!.connectPeripheral(peripheral, options: nil)
    }

// method to connect:-

func centralManager(central: CBCentralManager!, didConnectPeripheral peripheral: CBPeripheral!)

    {
        peripheral.delegate = self
        peripheral.discoverServices(nil)
        if ((peripheral) != nil)
        {
            var state = peripheral.state == CBPeripheralState.Connected ? "yes" : "no"
            connected = "Connected \(state)"
            println("connected \(connected)")
        }
    }

