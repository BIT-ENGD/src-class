AVPlayer
self.asset!.loadValuesAsynchronouslyForKeys(keys, completionHandler: {
    dispatch_async(dispatch_get_main_queue(), {

        var error:NSError?
        for key in keys {
            var status = self.asset!.statusOfValueForKey(key, error: &error)
        }

        var status = self.asset!.statusOfValueForKey("playable", error: &error)
        if status == AVKeyValueStatus.Loaded {
            playerItem = AVPlayerItem(asset: self.asset)
            playerItem!.addObserver(self, forKeyPath: "status", options: NSKeyValueObservingOptions.Initial, context: itemContext)
            self.player = AVPlayer(playerItem: playerItem)
            playerLayer = AVPlayerLayer(player: self.player)
            playerLayer!.videoGravity = AVLayerVideoGravityResizeAspectFill
            playerLayer!.frame = self.view!.bounds
            self.view.layer.addSublayer(playerLayer)

            //self.player!.play() [This seems to work!]
        } else {
            println("Error in async load of keys")
        }

    })
})            

AVPlayerItem
 override func observeValueForKeyPath(keyPath: String!, ofObject object: AnyObject!, change: NSDictionary!, context: CMutableVoidPointer) {

    dispatch_async(dispatch_get_main_queue(), {
            self.player!.play()
        })

    super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)
}

AVPlayerItem
