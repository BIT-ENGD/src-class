import UIKit

class FavouritesTableViewController: UITableViewController {

    let factBook = FactBook()

    var userQuoteData: NSMutableArray = NSMutableArray()
    let colorWheel = ColorWheel()

    override func viewDidAppear(animated: Bool) {

        var refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: Selector("loadData"), forControlEvents: UIControlEvents.ValueChanged)
        self.refreshControl = refreshControl

        self.loadData()


        //********** For resizbale cells UILABEL **************//
//        tableView.estimatedRowHeight = 102 // Replace with your actual estimation
//        // Automatic dimensions to tell the table view to use dynamic height
//        tableView.rowHeight = UITableViewAutomaticDimension
        //********** For resizbale cells UILABEL **************//

//        if (PFUser.currentUser() == nil) {
//            var loginAlert:UIAlertController = UIAlertController(title: "Sign Up / Login", message: "Please sign up or login", preferredStyle: UIAlertControllerStyle.Alert)
//            
//            loginAlert.addTextFieldWithConfigurationHandler({
//                textfield in
//                textfield.placeholder = "Your username"
//            })
//            
//            loginAlert.addTextFieldWithConfigurationHandler({
//                textfield in
//                textfield.secureTextEntry = true
//                textfield.placeholder = "Your password"
//            })
//            
//            loginAlert.addAction(UIAlertAction(title: "Login", style: UIAlertActionStyle.Default, handler: {
//                alertAction in
//                let textField:NSArray = loginAlert.textFields as NSArray!
//                let usernameTextField:UITextField = textField.objectAtIndex(0) as UITextField
//                let passwoordTextField:UITextField = textField.objectAtIndex(1) as UITextField
//                
//                PFUser.logInWithUsernameInBackground(usernameTextField.text, password: passwoordTextField.text, block: { (user:PFUser!, error:NSError!) -> Void in
//                    if ((user) != nil) {
//                        println("Login Successful")
//                    }else {
//                        println("Login Failed")
//                    }
//                })
//            }))
//            
//            loginAlert.addAction(UIAlertAction(title: "Signup", style: UIAlertActionStyle.Default, handler: {
//                alertAction in
//                let textField:NSArray = loginAlert.textFields as NSArray!
//                let usernameTextField:UITextField = textField.objectAtIndex(0) as UITextField
//                let passwoordTextField:UITextField = textField.objectAtIndex(1) as UITextField
//                
//                var user:PFUser = PFUser()
//                user.username = usernameTextField.text
//                user.password = passwoordTextField.text
//                
//                user.signUpInBackgroundWithBlock({ (sucsess: Bool!, error:NSError!) -> Void in
//                    if error == nil {
//                        println("Sign Up sucessful")
//                    } else {
//                        let error = error.userInfo
//                        println(error)
//                    }
//                })
//                
//            }))
//            
//            self.presentViewController(loginAlert, animated: true, completion: nil)
//            
//        }
    }


    override func viewDidLoad() {
        super.viewDidLoad()

    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: Segue to Main View Controller

    @IBAction func CancelButton(sender: AnyObject) {

        self.dismissViewControllerAnimated(true, completion: nil)

    }

    //MARK: logout the user
    @IBAction func logoutUser(sender: AnyObject) {

        let alertController = UIAlertController(title: "Logout", message: "Are you sure you want to logout?", preferredStyle: .Alert)
        let cancelAction = UIAlertAction(title: "Cancel", style: .Cancel) { (action) in
            // ...
        }

        alertController.addAction(cancelAction)
        let OKAction = UIAlertAction(title: "OK", style: .Default) { (action) in

            PFUser.logOut()
            self.performSegueWithIdentifier("selectedQuoteSegue", sender: nil)

            var currentUser = PFUser.currentUser() // this will now be nil
            println(currentUser)

        }

        alertController.addAction(OKAction)
        self.presentViewController(alertController, animated: true) {
            // ...
        }

    }

    // MARK: Getting Quotes from Parse.com for a particular user

    func loadData() {

        userQuoteData.removeAllObjects()

        var findUserQuoteData: PFQuery = PFQuery(className: "favouriteQuotes")
        findUserQuoteData.whereKey("user", equalTo: PFUser.currentUser())

        findUserQuoteData.findObjectsInBackgroundWithBlock{ (objects:[AnyObject]!, error:NSError!) -> Void in

            if error == nil{
                for object in objects{
                    let user: PFObject = object as PFObject
                    self.userQuoteData.addObject(user)
                }

                let array:NSArray = self.userQuoteData.reverseObjectEnumerator().allObjects
                self.userQuoteData = NSMutableArray(array: array)

                self.tableView.reloadData()
                self.refreshControl?.endRefreshing()
            }

        }

    }

    // MARK: - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        return userQuoteData.count
    }


    override func tableView(tableView: UITableView?, cellForRowAtIndexPath indexPath: NSIndexPath?) -> UITableViewCell {
        let cell:FavouritesTableViewCell = tableView!.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath!) as FavouritesTableViewCell

        let favouriteQuotes:PFObject = self.userQuoteData.objectAtIndex(indexPath!.row) as PFObject

        cell.favouriteQuoteTextView.text = favouriteQuotes.objectForKey("content") as? String

        cell.favouriteQuoteTextView.backgroundColor = colorWheel.randomColor()
        //Label Animation
        cell.favouriteQuoteTextView.alpha = 0

        //Date Formatter
//        var dateFormatter:NSDateFormatter = NSDateFormatter()
//        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm"
//        cell.timestampLabel.text = dateFormatter.stringFromDate(sweet.createdAt)

        //Find User
//        var findSweeter:PFQuery = PFUser.query()
//        findSweeter.whereKey("objectId", equalTo: sweet.objectForKey("sweeter").objectId)
//        
//        findSweeter.findObjectsInBackgroundWithBlock { (objects:[AnyObject]!, error:NSError!) -> Void in
//            if error == nil {
//                let user:PFUser = (objects as NSArray).lastObject as PFUser
//                cell.usernameLabel.text = user.username


                //Animation automation
                UIView.animateWithDuration(0.5, animations: { () -> Void in
                    cell.favouriteQuoteTextView.alpha = 1
                })
//            }
//        
//        }

        cell.favouriteQuoteTextView.scrollRangeToVisible(NSMakeRange(0, 0))

        return cell

    }

    override func tableView(tableView: UITableView?, didSelectRowAtIndexPath indexPath: NSIndexPath?) {

        let cell:FavouritesTableViewCell = tableView!.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath!) as FavouritesTableViewCell

        var selectedQuoteFromFavourites: AnyObject = self.userQuoteData.objectAtIndex(indexPath!.row)

        var selectedQuote: String = selectedQuoteFromFavourites.objectForKey("content") as String!

        println(selectedQuote)

                NSUserDefaults.standardUserDefaults().setObject(selectedQuote, forKey: "currentQuote") // we are saving a variable called myName and we are giving it the value of "Bob"
                NSUserDefaults.standardUserDefaults().synchronize() // Added synchronize as suggested by LAMMERT WESTERHOFF
                println(NSUserDefaults.standardUserDefaults().objectForKey("currentQuote")!) // Here we are accessing the variable.

//                    factBook.currentQuoteIndexArray()

                    NSUserDefaults.standardUserDefaults().setBool(true, forKey: "segueHappened") // we are saving a variable called myName and we are giving it the value of "Bob"
                    NSUserDefaults.standardUserDefaults().synchronize() // Added synchronize as suggested by LAMMERT WESTERHOFF
                    //                        println(NSUserDefaults.standardUserDefaults().boolForKey("segueHappened")) // Here we are accessing the variable.

                    self.performSegueWithIdentifier("selectedQuoteSegue", sender: AnyObject?())

    }

    //MARK: Swipe to delete
    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {
        return true
    }

    //MARK: Deleting Object PFQuery
    override func tableView(tableView: UITableView?, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath?) {
        if (editingStyle == UITableViewCellEditingStyle.Delete) {

            println("touch")

//            var selectedQuoteFromFavourites: AnyObject = self.userQuoteData.objectAtIndex(indexPath!.row)
//            
//            var selectedQuote: String = selectedQuoteFromFavourites.objectForKey("content") as String!
//            
//            println(selectedQuote)

            //Query objectId from parse and delete!

//            self.tableView.reloadData()
        }
    }

        override func tableView(tableView: UITableView?, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath?) {
        if (editingStyle == UITableViewCellEditingStyle.Delete) {

