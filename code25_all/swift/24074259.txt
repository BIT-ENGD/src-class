func anyCommonElements <T, U where T: Sequence, U: Sequence,
      T.GeneratorType.Element: Equatable,
      T.GeneratorType.Element == U.GeneratorType.Element>
      (lhs: T, rhs: U) -> Bool 
{
    for lhsItem in lhs {
        for rhsItem in rhs {
            if lhsItem == rhsItem {
                return true
            }
        }
    }
    return false
}
anyCommonElements([1, 2, 3], [3])

func myCommonElements<T, U where T: Sequence, U: Sequence,
    T.GeneratorType.Element: Equatable,
    T.GeneratorType.Element == U.GeneratorType.Element>
    (lhs: T) -> (U -> Array<U.GeneratorType.Element>)
{
    func makeCommon (rhs: U) -> Array<U.GeneratorType.Element>
    {
        var commonArray = Array<U.GeneratorType.Element>()
        for lhsItem in lhs {
            for rhsItem in rhs {
                if lhsItem == rhsItem {
                    commonArray.append(lhsItem)
                }
            }
        }
        return commonArray
    }
    return makeCommon
}

let gatherCommon = myCommonElements([3, 4, 5, 6])
let result = gatherCommon([1, 2, 3, 4])
println(result)

cannot convert the expression's type 
'(rhs: $T2 -> Array<$T4>)' to type 'Generator'

