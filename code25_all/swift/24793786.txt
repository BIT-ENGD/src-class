func generateString(parent_node:TreeNode) -> String {
    if(self.is_num){
        return self.equation!
    }

    var equation = self.equation!
    var left_equation  : String = self.left_node!.generateString(self)
    var right_equation : String = self.right_node!.generateString(self)

    // Conditions for ()s

    var needs_parentheses = false

    needs_parentheses = parent_node.importance > self.importance
    needs_parentheses = (
                            needs_parentheses
                            ||
                            (
                                parent_node.right_node?.isEqualToNode(self)
                                &&
                                parent_node.importance <= self.importance
                                &&
                                (
                                    parent_node.type != self.type
                                    &&
                                    ( parent_node.order_matters != true || self.order_matters != true )
                                )
                            )
                        )
    needs_parentheses = (
                            needs_parentheses
                            &&
                            (
                                !(
                                    self.importance > parent_node.importance
                                 )
                            )
                        )

    if (needs_parentheses) {
        equation = "(\(equation))"
    }
    return equation.stringByReplacingOccurrencesOfString("a", withString: left_equation).stringByReplacingOccurrencesOfString("b", withString: right_equation)
}

