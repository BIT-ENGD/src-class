SKScene
SKSpriteNode
SKShapeNode
UIPanGestureRecognizer
UIGestureRecognizer
view
SKScene
SKScene
class MultiplePanGestureRecognizer: UIGestureRecognizer {

    var currentTouches: Array<UITouch> = []

    override func touchesBegan(touches: NSSet!, withEvent event: UIEvent!) {

        super.touchesBegan(touches, withEvent: event)

        for touch in touches {
            currentTouches.append(touch as UITouch)
        }

        state = .Began
    }

    override func touchesMoved(touches: NSSet!, withEvent event: UIEvent!) {

        super.touchesMoved(touches, withEvent: event)

        state = .Changed
    }

    override func touchesEnded(touches: NSSet!, withEvent event: UIEvent!) {

        super.touchesEnded(touches, withEvent: event)

        removeCancelledOrEndedTouches(touches)
    }

    override func touchesCancelled(touches: NSSet!, withEvent event: UIEvent!) {

        super.touchesCancelled(touches, withEvent: event)

        removeCancelledOrEndedTouches(touches)
    }

    // Add new touches to currentTouches
    func addUntrackedTouchesFromSet(touches: NSSet!) {

        for touch in touches {

            let index = find(currentTouches, touch as UITouch)

            if index == nil {

                currentTouches.append(touch as UITouch)
            }
        }
    }

    // Remove received touches from currentTouches array
    func removeCancelledOrEndedTouches(touches: NSSet!) {

        for touch in touches {
            if let index = find(currentTouches, touch as UITouch) {
                currentTouches.removeAtIndex(index)
            }
        }

        // End the gesture if there are no touches remaining in currentTouches
        if currentTouches.count == 0 {
            state = .Ended
        }
    }

    override func reset() {

        super.reset()

        currentTouches = []
    }
}

currentTouches
SKScene
.Began
touchesBegan:withEvent:
.Began
.Changed
SKScene
func handleMultiplePan(recognizer: MultiplePanGestureRecognizer) {

    switch recognizer.state {
    case .Began, .Changed:

        // Remove those touches from tracking that are no longer being
        // recognized
        touchNodeMap.prune(recognizer.currentTouches)

        // Iterate over the recognizer's currentTouches
        for touch in recognizer.currentTouches {

            // Is it over a child node of the scene?
            if let node = getChildNodeForTouch(touch) {

                // If so, add it to the touchNodeMap
                touchNodeMap.add(touch, withNode: node)
            }
        }

        // Iterate over currentlyPanningTouches and move nodes accordingly
        for (touch, node) in touchNodeMap {

            let location = touch.locationInNode(self)
            let previousLocation = touch.previousLocationInNode(self)
            let deltaX = location.x - previousLocation.x
            let deltaY = location.y - previousLocation.y
            node.position = CGPointMake(node.position.x + deltaX, node.position.y + deltaY)
        }

        // Get node for most recent touch
        let (_, mostRecentNode) = touchNodeMap.mostRecentTouchAndNode()

        // Remove and re-add it to the scene
        if mostRecentNode != nil {
            mostRecentNode!.removeFromParent()
            addChild(mostRecentNode!)
        }

    default:
        break
    }
}

touchNodeMap
Dictionary
UITouch
SKNode
UIGestureRecognizer
