var controller:PFQueryTableViewController = PFQueryTableViewController(className: "Types_")
self.window?.rootViewController = controller
println(self.window?.rootViewController)

class TableViewController: PFQueryTableViewController {

    override init!(style: UITableViewStyle, className: String!) {
        super.init(style: style, className: className)
    }


    required init(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)

        self.parseClassName = "Types_"
        self.pullToRefreshEnabled = true
        self.paginationEnabled = true
        self.objectsPerPage = 5
        //self.textKey = "TypeOfVenue_"
}
    override func queryForTable() -> PFQuery! {

        var query = PFQuery(className: self.parseClassName)

        if (objects.count == 0)
        {
            query.cachePolicy = kPFCachePolicyNetworkOnly
        }

        return query


    }


    override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!, object: PFObject!) -> PFTableViewCell!

   {

    var cellIdentifier = "eventCell"
    var cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier) as PFTableViewCell!
    if cell == nil {

        cell = PFTableViewCell(style: UITableViewCellStyle.Subtitle, reuseIdentifier: cellIdentifier)

    }
    cell.textLabel?.text = object["TypeOfVenue_"] as NSString
    cell.detailTextLabel?.text = object["Seating"] as NSString
    return cell



   }

