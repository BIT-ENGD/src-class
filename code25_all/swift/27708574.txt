  @IBOutlet var loanTextField: UITextField!
  @IBOutlet var interestTextField: UITextField!
  @IBOutlet var interestStepper: UIStepper!
  @IBOutlet var termTextField: UITextField!
  @IBOutlet var termStepper: UIStepper!

  var integerTextFieldDelegate = NumericTextFieldDelegate(maxLength: 2)
  var loanTextFieldDelegate = NumericTextFieldDelegate(maxLength: 10, allowDecimal: true)
  var interestRateTextFieldDelegate = NumericTextFieldDelegate(maxLength: 2, allowDecimal: true)

loanTextField.text = ""
loanTextField.delegate = loanTextFieldDelegate

interestRateTextField.setTextNumericValue(DefaultInterestRate)
interestRateTextField.delegate = interestRateTextFieldDelegate

termTextField.setTextNumericValue(DefaultTerm)
termTextField.delegate = interestRateTextFieldDelegate

// Implementation of UITextFieldDelegate that prevents non-numeric characters
// from being entered in a numeric text field.
public class NumericTextFieldDelegate: NSObject, UITextFieldDelegate {
  let maxLength: Int
  let allowDecimal: Bool

  public init(maxLength: Int, allowDecimal: Bool = false) {
    self.maxLength = maxLength
    self.allowDecimal = allowDecimal
  }

  public func textField(textField: UITextField!,
    shouldChangeCharactersInRange range: NSRange,
    replacementString string: String!) -> Bool
  {
    let originalText: NSString = textField.text
    let proposedText: NSString = originalText.stringByReplacingCharactersInRange(range, withString: string)

    let proposedLength = proposedText.length
    if proposedLength > maxLength {
      return false
    }

    if allowDecimal {
      if proposedLength > 0 && !isValidDoubleString(proposedText) {
        return false
      }
    }
    else {
      if proposedLength > 0 && !isValidIntegerString(proposedText) {
        return false
      }
    }

    return true
  }
}

public extension Double {
  var formatted: String {
    let formatter = NSNumberFormatter()
    formatter.numberStyle = NSNumberFormatterStyle.CurrencyStyle
    formatter.currencyGroupingSeparator?
    formatter.minimumFractionDigits = 2
    formatter.maximumFractionDigits = 2
    return formatter.stringFromNumber(self)!
  }
}

