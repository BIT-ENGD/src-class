import UIKit
import QuartzCore

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?
    var mask: CALayer?
    var imageView: UIImageView?

    func application(application: UIApplication!, didFinishLaunchingWithOptions launchOptions: NSDictionary!) -> Bool {
        // Override point for customization after application launch.
        self.window = UIWindow(frame: UIScreen.mainScreen().bounds)

        let imageView = UIImageView(frame: self.window!.frame)
        imageView.image = UIImage(named: "Screen")
        self.window!.addSubview(imageView)
        self.mask = CALayer()
        self.mask!.contents = UIImage(named: "twitter logo mask")!.CGImage
        self.mask!.bounds = CGRect(x: 0, y: 0, width: 100, height: 100)
        self.mask!.anchorPoint = CGPoint(x: 0.5, y: 0.5)
        self.mask!.position = CGPoint(x: imageView.frame.size.width/2, y: imageView.frame.size.height/2)
        imageView.layer.mask = mask
        self.imageView = imageView

        animateMask()

        // Override point for customization after application launch.
        self.window!.backgroundColor = UIColor(red: 70/255, green: 154/255, blue: 233/255, alpha: 1)
        self.window!.makeKeyAndVisible()
        UIApplication.sharedApplication().statusBarHidden = true
        return true
    }

    func applicationWillResignActive(application: UIApplication!) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(application: UIApplication!) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(application: UIApplication!) {
        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(application: UIApplication!) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    }

    func applicationWillTerminate(application: UIApplication!) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }

   func animateMask() {
        let keyFrameAnimation = CAKeyframeAnimation(keyPath: "bounds")
        keyFrameAnimation.delegate = self
        keyFrameAnimation.duration = 1
        keyFrameAnimation.beginTime = CACurrentMediaTime() + 1 //add delay of 1 second
        let initalBounds = NSValue(CGRect: mask!.bounds)
        let secondBounds = NSValue(CGRect: CGRect(x: 0, y: 0, width: 90, height: 90))
        let finalBounds = NSValue(CGRect: CGRect(x: 0, y: 0, width: 1500, height: 1500))
        keyFrameAnimation.values = [initalBounds, secondBounds, finalBounds]
        keyFrameAnimation.keyTimes = [0, 0.3, 1]
        keyFrameAnimation.timingFunctions = [CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut), CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)]
        self.mask!.addAnimation(keyFrameAnimation, forKey: "bounds")
    }

    override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
        self.imageView!.layer.mask = nil //remove mask when animation completes
    }


}

self.window!.makeKeyAndVisible()
override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
  self.window = UIWindow(frame: UIScreen.mainScreen().bounds)
  let vc = ViewController(nibName: "ViewController", bundle: nil)
  self.window!.rootViewController = vc
  self.window!.makeKeyAndVisible()
}

2014-11-28 00:27:59.452 Test[3124:76510] Application windows are expected to have a root view controller at the end of application launch
2014-11-28 00:28:01.444 Test[3124:76510] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Could not load NIB in bundle: 'NSBundle </Users/MyComp/Library/Developer/CoreSimulator/Devices/0F42DE92-96A1-4D9B-A0D1-F1606FEEB2B4/data/Containers/Bundle/Application/ACAEFA85-9BE9-4C6C-8074-2692691FDA0C/Test.app> (loaded)' with name 'ViewController''
*** First throw call stack:
(
 0   CoreFoundation                      0x0000000108127f35 __exceptionPreprocess + 165
 1   libobjc.A.dylib                     0x0000000109ed9bb7 objc_exception_throw + 45
 2   CoreFoundation                      0x0000000108127e6d +[NSException raise:format(inlove) + 205
 3   UIKit                               0x0000000108ee68c3 -[UINib instantiateWithOwner:options(inlove) + 552
 4   UIKit                               0x0000000108d45f98 -[UIViewController _loadViewFromNibNamed:bundle(inlove) + 242
 5   UIKit                               0x0000000108d46588 -[UIViewController loadView] + 109
 6   UIKit                               0x0000000108d467f9 -[UIViewController loadViewIfRequired] + 75
 7   UIKit                               0x0000000108d46c8e -[UIViewController view] + 27
 8   UIKit                               0x0000000108c65ca9 -[UIWindow addRootViewControllerViewIfPossible] + 58
 9   UIKit                               0x0000000108c66041 -[UIWindow _setHidden:forced(inlove) + 247
 10  UIKit                               0x00000001166c57b0 -[UIWindowAccessibility _orderFrontWithoutMakingKey] + 68
 11  UIKit                               0x0000000108c7272c -[UIWindow makeKeyAndVisible] + 42
 12  Test                                0x0000000107b68ad1 _TFC4Test11AppDelegate16animationDidStopfS0_FTGSQCSo11CAAnimation_8finishedSb_T_ + 1297
 13  Test                                0x0000000107b68b67 _TToFC4Test11AppDelegate16animationDidStopfS0_FTGSQCSo11CAAnimation_8finishedSb_T_ + 71
 14  QuartzCore                          0x0000000108aa87ee _ZN2CA5Layer23run_animation_callbacksEPv + 308
 15  libdispatch.dylib                   0x000000010a6907f4 _dispatch_client_callout + 8
 16  libdispatch.dylib                   0x000000010a6798fb _dispatch_main_queue_callback_4CF + 949
 17  CoreFoundation                      0x000000010808ffe9 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 9
 18  CoreFoundation                      0x0000000108052eeb __CFRunLoopRun + 2043
 19  CoreFoundation                      0x0000000108052486 CFRunLoopRunSpecific + 470
 20  GraphicsServices                    0x000000010c0f09f0 GSEventRunModal + 161
 21  UIKit                               0x0000000108c21420 UIApplicationMain + 1282
 22  Test                                0x0000000107b68efe top_level_code + 78
 23  Test                                0x0000000107b68f3a main + 42
 24  libdyld.dylib                       0x000000010a6c5145 start + 1
 25  ???                                 0x0000000000000001 0x0 + 1
)
libc++abi.dylib: terminating with uncaught exception of type NSException
(lldb)

