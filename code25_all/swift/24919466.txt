var eventStore : EKEventStore = EKEventStore()
eventStore.requestAccessToEntityType(EKEntityTypeEvent, completion: {
    (granted : Bool, error : NSError!) in
    if (!granted) {
        NSLog("not granted")
        return
    }
    var calendars : EKCalendar[] = eventStore.calendarsForEntityType(EKEntityTypeEvent) as EKCalendar[]
    var sportCalendar : EKCalendar!
    for calendar : EKCalendar in calendars {
        if (calendar.title == self.CALENDAR_NAME) {
            sportCalendar = calendar
            break
        }
    }

    var c = NSDateComponents()
    c.year = 2013
    c.month = 9
    c.day = 17
    let calendar : NSCalendar = NSCalendar.currentCalendar()
    var startDate = calendar.dateFromComponents(c)
    var endDate : NSDate = NSDate()
    var predicat : NSPredicate = eventStore.predicateForEventsWithStartDate(startDate, endDate: endDate, calendars: nil)

    var events = eventStore.eventsMatchingPredicate(predicat)
    NSLog("events.count= \(events.count)")
})

