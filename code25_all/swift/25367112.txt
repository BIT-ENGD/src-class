struct StructA
{
    let classBInstance:ClassB

    init ( inClassB:ClassB )
    {
        self.classBInstance = inClassB
        self.testProperty = 0
    }

    var testProperty:Int = -1
    {
        didSet
        {
            self.classBInstance.reactToSetStruct ( )
        }
    }
}

class ClassA
{
    let classBInstance:ClassB

    init ( inClassB:ClassB )
    {
        self.classBInstance = inClassB
        self.testProperty = 0
    }

    var testProperty:Int = -1
    {
        didSet
        {
            self.classBInstance.reactToSetClass ( )
        }
    }
}

class ClassB
{
    var structAInstance:StructA! = nil
    var classAInstance:ClassA! = nil

    init()
    {
        self.structAInstance = StructA ( inClassB:self )
        self.classAInstance = ClassA ( inClassB:self )
    }

    func doSetStruct()
    {
        println ("Before Set: Struct Property Value is \(self.structAInstance.testProperty)")
        self.structAInstance.testProperty = 1
        println ("After Set: Struct Property Value is \(self.structAInstance.testProperty)")
    }

    func doSetClass()
    {
        println ("Before Set: Class Property Value is \(self.classAInstance.testProperty)")
        self.classAInstance.testProperty = 1
        println ("After Set: Class Property Value is \(self.classAInstance.testProperty)")
    }

    func reactToSetStruct()
    {
        println ("Struct Value is now \(self.structAInstance.testProperty)")
    }

    func reactToSetClass()
    {
        println ("Class Value is now \(self.classAInstance.testProperty)")
    }
}

let classTest:ClassB = ClassB()

classTest.doSetStruct()
classTest.doSetClass()

