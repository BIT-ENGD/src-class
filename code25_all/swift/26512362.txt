func hostReachable(ipadres:String) -> Bool {
    let host_name = ipadres.cStringUsingEncoding(NSASCIIStringEncoding)

    let reachability  = SCNetworkReachabilityCreateWithName(kCFAllocatorDefault, host_name!)
    var flags:SCNetworkReachabilityFlags = SCNetworkReachabilityFlags(kSCNetworkReachabilityFlagsReachable)
    let success = SCNetworkReachabilityGetFlags(reachability, &flags)

    let isAvailable = success && (flags | kSCNetworkFlagsReachable) && !(flags | kSCNetworkFlagsConnectionRequired)
    println("Reachability results---> \(success) \(host_name)', flags: \(flags)")

    if (isAvailable) {
        return true
    } else {
        println("'hostReachable:--> \(host_name) is not reachable")
        return false
    }
   return  false
}

func hostReachable(ipadres:String) -> Bool {
if let host_name = ipadres.cStringUsingEncoding(NSASCIIStringEncoding) {
    let reachability  = SCNetworkReachabilityCreateWithName(kCFAllocatorDefault, host_name).takeRetainedValue()
    var flags : SCNetworkReachabilityFlags = 0
    if SCNetworkReachabilityGetFlags(reachability, &flags) == 0 {
        return false
    }
    let isReachable = (flags & UInt32(kSCNetworkFlagsReachable)) != 0
    let needsConnection = (flags & UInt32(kSCNetworkFlagsConnectionRequired)) != 0

    return (isReachable && !needsConnection)
}else{
    return false
}
}

