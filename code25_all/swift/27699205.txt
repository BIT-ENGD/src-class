class Test {

    var params: Any?

    var myFunc: (inout params: Any?) -> () = { (inout params: Any?) in return } //default value


    //constructor receving a function and a address to inout params object
    init(myFunc: (inout params: Any?) -> (), inout params: Any?) {
        self.myFunc = myFunc
        self.params = params
    }

    //call the passed function (extern) and pass the address of given params
    func apply() {
        self.myFunc(params: &self.params)
    }
}

func extern(inout params: Any?) {
    var a = params as [String: Int]
    a["factor"] = 11
}

var p: Any = ["factor": 10]
var test = Test(myFunc: extern, params: &p)

test.apply() //p["factor"] should be 11 now here

p["factor"] as [String: Int]

//Utility

class Test {

    var closure: () -> Any

    var myFunc: (message: String, closure: () -> Any) -> () = { (message: String, closure: () -> Any) in return }

    init(myFunc: (message: String, closure: () -> Any) -> (), closure: () -> Any) {
        self.myFunc = myFunc
        self.closure = closure
    }

    func apply(message: String) {
        self.myFunc(message: message, closure: self.closure)
    }

}

//users of the utility

func extern(message: String, closure: () -> Any) {
    println(message)
    var name = closure() as [String: String]
    name["name"] = "Doe"
}

var name: Any = ["name": "John"]

var test = Test(myFunc: extern, closure: {name})
test.apply("hello ")
name //it's still John here

//Utility

class Test {

    var closure: () -> AnyObject

    var myFunc: (message: String, closure: () -> AnyObject) -> () = { (message: String, closure: () -> AnyObject) in return }

    init(myFunc: (message: String, closure: () -> AnyObject) -> (), closure: () -> AnyObject) {
        self.myFunc = myFunc
        self.closure = closure
    }

    func apply(message: String) {
        self.myFunc(message: message, closure: self.closure)
    }

}

//users of the utility

func extern(message: String, closure: () -> AnyObject) {
    println(message)
    var name: Name = closure() as Name
    name.name = "Doe"
}

class Name {
    var name = "John"
}

var name = Name()

var test = Test(myFunc: extern, closure: {name})
test.apply("hello ")
name //it's changed here

