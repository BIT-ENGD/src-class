//Inherits from Functor in the basis library
public protocol Vector: Functor {
    typealias VB = FB
    typealias C
    typealias VC = K1<C>

    class func foldl(B) -> ((A, B) -> B) -> Self -> B
    class func zipWith((A, B) -> C) -> Self -> VB -> VC
}

//This is basically just an identity
func trailFunction<A, V: Vector where V.A == A, V.B == A, V.FB == V>(v: V) -> V {
    let f = V.fmap({$0})
    return f(v)

}

//Fails with B is not identical to Int error
func testFunction(v: Vector2<Int>) -> Vector2<Int> {
    return trailFunction(v)
}

