NSArray
UIImage
let saved: Bool = CGImageDestinationFinalize(destination)
UIImage
CGImageDestination
func makeGIFWithImagesArray(theArray: NSArray) -> NSData {

    var gifData: NSMutableData = NSMutableData()
    var destination: CGImageDestination = CGImageDestinationCreateWithData(gifData, kUTTypeGIF, UInt(theArray.count), nil)

    let delayProps: NSDictionary = [NSNumber(float: 0.2) : kCGImagePropertyGIFDelayTime]
    let frameProps: NSDictionary = [delayProps : kCGImagePropertyGIFDictionary]

    var miscProps: NSMutableDictionary = NSMutableDictionary()

    miscProps.setObject(NSNumber(bool: true), forKey: kCGImagePropertyGIFHasGlobalColorMap as NSString)
    miscProps.setObject(NSNumber(int: 0), forKey: kCGImagePropertyGIFLoopCount as NSString)
    miscProps.setObject(NSNumber(bool: false), forKey: kCGImagePropertyHasAlpha as NSString)
    miscProps.setObject(NSNumber(float: 1.0), forKey: kCGImageDestinationLossyCompressionQuality as NSString)

    let gifProps: NSDictionary = [miscProps : kCGImagePropertyGIFDictionary]

    for image in theArray {
        let imageRef: CGImageRef = image.CGImage
        CGImageDestinationAddImage(destination, imageRef, frameProps)
    }

    CGImageDestinationSetProperties(destination, gifProps)
    let saved: Bool = CGImageDestinationFinalize(destination)

    return gifData

}

