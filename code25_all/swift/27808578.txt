imageView.image
func pixelEncryptDecrypt() {

    let image = imageView.image!
    var imageRef = image.CGImage

    let width = CGImageGetWidth(imageRef)
    let height = CGImageGetHeight(imageRef)
    let colorSpace = CGColorSpaceCreateDeviceRGB()
    let bytesPerPixel: UInt = 4
    let bytesPerRow: UInt = bytesPerPixel * width
    let bitsPerComponent: UInt = 8

    let sizeOfRawDataInBytes: Int = Int(height * width * 4)
    var rawData = UnsafeMutablePointer<Void>.alloc(sizeOfRawDataInBytes)

    let context = CGBitmapContextCreate(rawData, width, height, bitsPerComponent, bytesPerRow, colorSpace, CGBitmapInfo(CGImageAlphaInfo.PremultipliedLast.rawValue) | CGBitmapInfo.ByteOrder32Big)
    CGContextDrawImage(context, CGRectMake(0, 0, CGFloat(width), CGFloat(height)), imageRef)

    var data = NSData(bytes: rawData, length: sizeOfRawDataInBytes)
    data = encrypted ? data.AES256DecryptWithKey(key) : data.AES256EncryptWithKey(key)

    rawData = data.mutableCopy().mutableBytes

    let cryptContext = CGBitmapContextCreate(rawData, width, height, bitsPerComponent, bytesPerRow, colorSpace, CGBitmapInfo(CGImageAlphaInfo.PremultipliedLast.rawValue))
    imageRef = CGBitmapContextCreateImage(cryptContext);

    let encryptedImage = UIImage(CGImage: imageRef)

    imageView.image = encryptedImage

    encrypted = !encrypted

}

