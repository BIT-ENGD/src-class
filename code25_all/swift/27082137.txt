CollectionType
CollectionOf
struct CollectionOf<T, Index: ForwardIndexType>: CollectionType {
    init<C: CollectionType where C.Generator.Element == T, C.Index == Index>(_ collection: C) {
        // etc.
    }
    // etc.
}

CollectionType
init
CollectionOf
Index typealias
CollectionType
CollectionType
struct CollectionOf<T, I: ForwardIndexType>: CollectionType {
    private let _generate: () -> GeneratorOf<T>
    private let _startIndex: () -> I
    private let _endIndex: () -> I
    private let _subscript: (I) -> T

    init<C: CollectionType where C.Generator.Element == T>(_ collection: C) {
        _generate = { GeneratorOf(collection.generate()) }
        _startIndex = { collection.startIndex as I }
        _endIndex = { collection.endIndex as I }
        _subscript = { i in collection[i as C.Index] }
    }

    var startIndex: I {
        return _startIndex()
    }

    var endIndex: I {
        return _endIndex()
    }

    func generate() -> GeneratorOf<T> {
        return _generate()
    }

    subscript (i: I) -> T {
        return _subscript(i)
    }
}

