NSURLSession
NSURLConnection
NSURLSession
static func loadJSONFromBundle(filename: String) -> Dictionary<String, AnyObject>? {
    let path = NSBundle.mainBundle().pathForResource(filename, ofType: ".json")
    if !path {
        println("Could not find level file: \(filename)")
        return nil
    }
    var error: NSError?
    let data: NSData? = NSData(contentsOfFile: path, options: NSDataReadingOptions(),
        error: &error)
    if !data {
        println("Could not load level file: \(filename), error: \(error!)")
        return nil
    }
    let dictionary: AnyObject! = NSJSONSerialization.JSONObjectWithData(data,
        options: NSJSONReadingOptions(), error: &error)
    if !dictionary {
        println("Level file '\(filename)' is not valid JSON: \(error!)")
        return nil
    }
    return dictionary as? Dictionary<String, AnyObject>
}

static func loadJSONFromWeb(urlstring: String) -> Dictionary<String, AnyObject>? {

    let url = NSURL(string: urlstring)
    let config = NSURLSessionConfiguration.defaultSessionConfiguration()
    let session = NSURLSession(configuration: config, delegate: nil, delegateQueue: NSOperationQueue())

    var error: NSError?
    //I think I am using the completionHandler incorrectly. I'd like to access the data from the download
    let task = session.downloadTaskWithRequest(NSURLRequest(URL: url), {(url, response, error) in println("The response is: \(response)")
        })
    task.resume()

    //Isn't this contentsOfURL thing supposed to go with the connection stuff rather than the session stuff?
    //How can I do this with a session? How can I create and use a completionHandler? This way seems clunky.
    let data: NSData? = NSData(contentsOfURL: url)
    if !data {
        println("Could not load data from file: \(url), error: \(error!)")
        return nil
    }
    println("The data is: \(data)")

    let dictionary: AnyObject! = NSJSONSerialization.JSONObjectWithData(data,
        options: NSJSONReadingOptions(), error: &error)
    if !dictionary {
        println("The file at '\(url)' is not valid JSON, error: \(error!)")
        return nil
    }

    return dictionary as? Dictionary<String, AnyObject>   
}

resume()
completionHandler
completionHandler
completionHandler
NSData
NSData
NSURLDownloadTask
completionHandler
NSURLSessionDownloadDelegate
NSData(contentsOfURL: url)
