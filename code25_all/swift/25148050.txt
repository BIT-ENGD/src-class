  func target() -> AnyObject {
    return delegate ?? self
  }

import Foundation

@objc protocol StateMachineDelegate {

  optional func stateWillChange()
  optional func stateDidChange()

  optional func missingTransitionFromState(fromState: String?, toState: String?) -> String

}

class StateMachine {

  var delegate: StateMachineDelegate?

  func target() -> AnyObject {
    return delegate ?? self
  }

  func missingTransitionFromState(fromState: String, toState: String) -> String {
    return "Hello"
  }
}

class DataSource: StateMachineDelegate {

  func missingTransitionFromState(fromState: String?, toState: String?) -> String {
    return "Hi"
  }

}

