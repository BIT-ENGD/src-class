for (x, column) in enumerate(board) {
    for (y, cell) in enumerate(column) {
        // MARK: Cell set up
        cell.translatesAutoresizingMaskIntoConstraints = false
        container.addSubview(cell)

        // MARK: Autolayout constraints
        // Priorities
        cell.setContentHuggingPriority(249, forOrientation: .Horizontal)
        cell.setContentHuggingPriority(249, forOrientation: .Vertical)
        cell.setContentCompressionResistancePriority(750, forOrientation: .Horizontal)
        cell.setContentCompressionResistancePriority(750, forOrientation: .Vertical)
        // Horizontal layout
        if x == 0 {
            container.addConstraint(NSLayoutConstraint(item: cell, attribute: .Leading, relatedBy: .Equal, toItem: container, attribute: .Leading, multiplier: 1, constant: 4))
        } else {
            container.addConstraint(NSLayoutConstraint(item: cell, attribute: .Leading, relatedBy: .Equal, toItem: board[x - 1][y], attribute: .Trailing, multiplier: 1, constant: 4))
            container.addConstraint(NSLayoutConstraint(item: cell, attribute: .Width, relatedBy: .Equal, toItem: board[x - 1][y], attribute: .Width, multiplier: 1, constant: 0))
        }
        if x == board.count - 1 {
            container.addConstraint(NSLayoutConstraint(item: container, attribute: .Trailing, relatedBy: .Equal, toItem: cell, attribute: .Trailing, multiplier: 1, constant: 4))
        }
        // Vertical layout
        if y == 0 {
            container.addConstraint(NSLayoutConstraint(item: cell, attribute: .Top, relatedBy: .Equal, toItem: container, attribute: .Top, multiplier: 1, constant: 4))
        } else {
            container.addConstraint(NSLayoutConstraint(item: cell, attribute: .Top, relatedBy: .Equal, toItem: board[x][y - 1], attribute: .Bottom, multiplier: 1, constant: 4))
            container.addConstraint(NSLayoutConstraint(item: cell, attribute: .Height, relatedBy: .Equal, toItem: board[x][y - 1], attribute: .Height, multiplier: 1, constant: 0))
        }
        if y == board[x].count - 1 {
            container.addConstraint(NSLayoutConstraint(item: container, attribute: .Bottom, relatedBy: .Equal, toItem: cell, attribute: .Bottom, multiplier: 1, constant: 4))
        }
    }
}

2014-11-05 17:12:56.333 ProjectName[21373:1094967] Unable to simultaneously satisfy constraints:
(
    "<NSLayoutConstraint:0x610000081c70 V:[NSView:0x610000121d60]-(4)-[NSView:0x610000121d60]>"
)

Will attempt to recover by breaking constraint 
<NSLayoutConstraint:0x610000081c70 V:[NSView:0x610000121d60]-(4)-[NSView:0x610000121d60]>

Set the NSUserDefault NSConstraintBasedLayoutVisualizeMutuallyExclusiveConstraints to YES to have -[NSWindow visualizeConstraints:] automatically called when this happens.  And/or, break on objc_exception_throw to catch this in the debugger.

               x = 0
            ------------
board[x][0] | NSView() |
board[x][1] | NSView() |
            ------------

