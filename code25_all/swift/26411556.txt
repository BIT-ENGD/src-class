protocol TestProtocol {
    init(value: Int)
}

class A : TestProtocol {

    init() {}
    required init(value: Int) {

    }
}

func generateWithInstances<T : TestProtocol>(item: T, #numberOfInstances: Int) -> [T] {
    var list: [T] = []
    for index in 1...numberOfInstances {
        list.append(T(value: index))
    }
    return list
}

var list: [TestProtocol] = []
let instanceOfA = A()

list.extend(generateWithInstances(instanceOfA, numberOfInstances: 10))

Array
extend
extension Array {    

    ...

    mutating func extend<S : SequenceType where T == T>(newElements: S)

    ...

}

