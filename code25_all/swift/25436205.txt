class DataContext
{    
    private var contextItems: [ContextItem] = []

    ...

    func UpdateNavigationProperty<T: ContextEntity>(inout oldValue: T?, inout navigationId: Int?,  newValue: T?)
    {
        if let newValue = newValue {
            if dataContext.GetContextItem(newValue) == nil {
                dataContext.Add(newValue)
                if newValue.id > 0 {
                    if let item = dataContext.GetContextItem(newValue) {
                        item.state = .None
                    }
                    if navigationId != newValue.id {
                        navigationId = newValue.id
                    }
                }
            }
        }
        oldValue = newValue
    }
}

protocol ContextEntity : NSObjectProtocol
{
    var id: Int { get set }

    func Save()
    func Delete()
}

Vehicle
class Car: Vehicle, ContextEntity
class Vehicle : NSObject
{
    var id: Int
    var driverId: Int

    private var _driver: Person?
    var driver: Person? {
        get {
            if(_driver == nil && driverId != 0) {
                _driver = dataContext.Get(driverId)
            }
            return _driver
        }
        set {
            dataContext.UpdateNavigationProperty(&_driver, navigationId: &driverId as Int?, newValue: newValue)
        }
    }

}

class Person: NSObject, ContextEntity
{
    var id: Int
    //MARK: ContextEntity Implementation    
    func Save() { }
    func Delete() { }
}

dataContext.UpdateNavigationProperty(&_driver, navigationId: &driverId as Int?, newValue: newValue)
ContextEntity
Person
Person
