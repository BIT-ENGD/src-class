self.setPositionRelativeBot(pipeBot, x: xx, y: offset)
self.setPositionRelativeTop(pipeTop, x: xx, y: offset + space)

func spawnPipeRow(offs: Float)
    {
        let offset = offs - space / 2

        let pipeBot = mainPipe.copy() as Pipe
        let pipeTop = mainPipe.copy() as Pipe

        pipeBot.texture = SKTexture(imageNamed: "BotPipe")
        pipeTop.texture = SKTexture(imageNamed: "TopPipe")

        pipeBot.texture!.filteringMode = SKTextureFilteringMode.Nearest
        pipeTop.texture!.filteringMode = SKTextureFilteringMode.Nearest

        pipeBot.isBottom = true

        let xx = self.view!.bounds.size.width

        self.setPositionRelativeBot(pipeBot, x: xx, y: offset)
        self.setPositionRelativeTop(pipeTop, x: xx, y: offset + space)

        pipeBot.physicsBody = SKPhysicsBody(rectangleOfSize: pipeBot.size)
        pipeTop.physicsBody = SKPhysicsBody(rectangleOfSize: pipeTop.size)

        pipeBot.physicsBody!.dynamic = false
        pipeTop.physicsBody!.dynamic = false

        pipeBot.physicsBody!.contactTestBitMask = birdCategory
        pipeTop.physicsBody!.contactTestBitMask = birdCategory

        pipeBot.physicsBody!.collisionBitMask = birdCategory
        pipeTop.physicsBody!.collisionBitMask = birdCategory

        pipes.append(pipeBot)
        pipes.append(pipeTop)

        self.addChild(pipeBot)
        self.addChild(pipeTop)
    }

vel -= 85 - (self.view!.bounds.size.height - bird.position.y)

bird.physicsBody.velocity = CGVectorMake(0, vel)

override func touchesBegan(touches: NSSet, withEvent event: UIEvent)
    {
        if (!bird.physicsBody!.dynamic)
        {
            //First touch

            self.spawnPipeRow(0)

            bird.physicsBody!.dynamic = true

            bird.physicsBody!.velocity = CGVectorMake(0, 175)

            scoreLabel.hidden = false

            isMoving = true
        } else if (isMoving)
        {
            var vel: Float = 200

            if (self.view!.bounds.size.height - bird.position.y < 85)
            {
                vel -= 85 - (self.view!.bounds.size.height - bird.position.y)
            }

            bird.physicsBody.velocity = CGVectorMake(0, vel)
        } else
        {
            overlay.removeFromParent()

            for pi in pipes
            {
                pi.removeFromParent()
            }

            pipes.removeAll(keepCapacity: false)

            score = 0

            bird.physicsBody!.dynamic = false
            bird.position = CGPoint(x: 150, y: view!.bounds.size.height / 2 - 10)

            scoreLabel.hidden = true

            isGroundMoving = true
        }
    }

ground1.position.x -= movingSpeed
ground2.position.x -= movingSpeed

background1.position.x -= movingSpeed / 3
background2.position.x -= movingSpeed / 3

pipe.position.x -= movingSpeed

override func update(currentTime: CFTimeInterval)
    {
        if (isGroundMoving)
        {
            ground1.position.x -= movingSpeed
            ground2.position.x -= movingSpeed

            if (ground1.position.x <= -self.view!.bounds.size.width / 2)
            {
                ground1.position.x = self.view!.bounds.size.width * 1.5 - 2
            }

            if (ground2.position.x <= -self.view!.bounds.size.width / 2)
            {
                ground2.position.x = self.view!.bounds.size.width * 1.5 - 2
            }

            background1.position.x -= movingSpeed / 3
            background2.position.x -= movingSpeed / 3

            if (background1.position.x <= -self.view!.bounds.size.width / 2)
            {
                background1.position.x = self.view!.bounds.size.width * 1.5 - 2
            }

            if (background2.position.x <= -self.view!.bounds.size.width / 2)
            {
                background2.position.x = self.view!.bounds.size.width * 1.5 - 2
            }

            if (isMoving)
            {
                for (var i = 0; i < pipes.count; i++)
                {
                    let pipe = pipes[i]

                    if (pipe.position.x + (pipe.size.width / 2) < 0)
                    {
                        pipe.removeFromParent()

                        continue
                    }

                    if (pipe.position.x + (pipe.size.width / 2) < self.view!.bounds.size.width / 2 && pipe.isBottom && !pipe.pointAdded)
                    {
                        score++

                        pipe.pointAdded = true
                    }

                    pipe.position.x -= movingSpeed

                    if (i == pipes.count - 1)
                    {
                        if (pipe.position.x < self.view!.bounds.width - pipe.size.width * 2.0)
                        {
                            self.spawnPipeRow(self.randomOffset())
                        }
                    }
                }

                scoreLabel.text = "Score: \(score)"
            }
        }
    }

