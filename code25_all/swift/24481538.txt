extension NSMutableData {

  enum Endianness {
    case LittleEndian, BigEndian
  }

  func appendUInt32(myInt: UInt32, endianness: Endianness = .LittleEndian) {
    var bytes = UInt8[]()
    for i in 0..sizeof(UInt32) {
      switch endianness {
        case .LittleEndian:
          bytes.append(UInt8(myInt >> i))
        case .BigEndian:
          bytes.append(UInt8(myInt >> (sizeof(UInt32) - 1 - i)))
      }
    }
    self.appendBytes(bytes, length:bytes.count)
  }
}

extension NSMutableData {

  enum Endianness {
    case LittleEndian, BigEndian
  }

  func appendUInt32(myInt: UInt32, endianness: Endianness = .LittleEndian) {
    var bytes = UInt8[]()
    for i in 0..sizeof(UInt32) {
      switch endianness {
        case .LittleEndian:
          bytes.append(UInt8(myInt >> UInt32(i * 8) & UInt32(0xff)))
        case .BigEndian:
          bytes.append(UInt8(myInt >> UInt32((sizeof(UInt32) - 1 - i) * 8) & UInt32(0xff)))
      }
    }
    self.appendBytes(bytes, length:bytes.count)
  }
}

