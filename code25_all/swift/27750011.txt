getShifts.findObjectsInBackgroundWithBlock {
            (objects:AnyObject[]!, error:NSError!) -> Void in
AnyObject[]!
[AnyObject]!
 import UIKit

class AvailableShifts: UITableViewController {

var shiftData: NSMutableArray!

override func viewDidAppear(animated: Bool) {
    super.viewDidAppear(true)

    loadData()

    // Uncomment the following line to preserve selection between presentations
    // self.clearsSelectionOnViewWillAppear = false

    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem()
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}

// MARK: - Table view data source

override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
    // #warning Potentially incomplete method implementation.
    // Return the number of sections.
    return 1
}

override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    // #warning Incomplete method implementation.
    // Return the number of rows in the section.
    return 2//shiftData.count
}


override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
    let cell:AvailableShiftsCell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as AvailableShiftsCell

    let shift: PFObject = shiftData.objectAtIndex(indexPath.row) as PFObject

    cell.shiftLabel.text = shift.objectForKey("Shift") as String

    // Configure the cell...

    return cell
}


/*
// Override to support conditional editing of the table view.
override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {
    // Return NO if you do not want the specified item to be editable.
    return true
}
*/

/*
// Override to support editing the table view.
override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
    if editingStyle == .Delete {
        // Delete the row from the data source
        tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Fade)
    } else if editingStyle == .Insert {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }    
}
*/

/*
// Override to support rearranging the table view.
override func tableView(tableView: UITableView, moveRowAtIndexPath fromIndexPath: NSIndexPath, toIndexPath: NSIndexPath) {

}
*/

/*
// Override to support conditional rearranging of the table view.
override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {
    // Return NO if you do not want the item to be re-orderable.
    return true
}
*/

/*
// MARK: - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

func loadData () {

    shiftData.removeAllObjects()

    var getShifts = PFQuery(className: "Shifts")

    getShifts.findObjectsInBackgroundWithBlock {
        (objects:AnyObject[]!, error:NSError!) -> Void in

        if (error == nil) {

            for object: PFObject! in objects {

                self.shiftData.addObject(object)
            }

            let array: NSArray = self.shiftData.reverseObjectEnumerator().allObjects

            self.shiftData = array as NSMutableArray

            self.tableView.reloadData()
        }

    }

}

}

