import GameKit        

    ....

override func viewWillLayoutSubviews() {

    let skView = self.view as SKView
    skView.ignoresSiblingOrder = true

    let scene = GameScene.sceneWithSize(skView.bounds.size)
    scene.scaleMode = .AspectFill

    skView.presentScene(scene)

    authenticateLocalPlayer()

}

func authenticateLocalPlayer(){
    var localPlayer = GKLocalPlayer()
    println(localPlayer)
    localPlayer.authenticateHandler = {(viewController, error) -> Void in
        if ((viewController) != nil) {
            self.presentViewController(viewController, animated: true, completion: nil)
        }else{

            println((GKLocalPlayer.localPlayer().authenticated))
        }
    }
}

    import GameKit        

    ....

    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {

    var touch:UITouch = touches.anyObject() as UITouch
    var location:CGPoint = touch.locationInNode(self)

    if gameCenterRect.contains(location) {

            var vc = self.view?.window?.rootViewController
            var gc = GKGameCenterViewController()
            vc?.presentViewController(gc, animated: true, completion: nil)

        }

 func saveHighscore(score:Int){

    NSUserDefaults.standardUserDefaults().setObject(score, forKey: "kHighscore")

    if GKLocalPlayer.localPlayer().authenticated {
        var scoreReporter = GKScore(leaderboardIdentifier: "LEADERBOARD_ID")
        scoreReporter.value = Int64(self.highscore)
        var scoreArray: [GKScore] = [scoreReporter]
        //println("report score \(scoreReporter)")
        GKScore.reportScores(scoreArray, {(error : NSError!) -> Void in
            if error != nil {
                println("error")
                //NSLog(error.localizedDescription)
            }
        })

    }
}

