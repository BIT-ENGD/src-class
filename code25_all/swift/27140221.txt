public class Employment {

    public var payFrequency: PayFrequency

    public var payPeriods: [PayPeriod]

    // Other class data, variables, etc.

    // Constructors, other functions, etc.

    public func calculatePayPeriods(payBegin: NSDate) {
        self.payPeriods = [] // Null out array
        // Enter loop to the extent of calculation.. Infinity?
        // Create the PayPeriod object with start, end, and # of hours worked.
        // Advance # of days based on payFrequency
    }
}

public struct PayPeriod {

    public var startDate: NSDate

    public var endDate: NSDate

    public var hours: Double

}

// Returns .Other(amount); 'amount' being in days.
// If 'amount' is compatible with any other case in the enum, then instead that
// case is returned.
public func determinePayFrequency(start: NSDate, end: NSDate) -> PayFrequency {
    let converter: Double = 60*60*24 // 60 seconds 60 minutes 24 hours
    let calendar = NSCalendar.currentCalendar()
    let unit = NSCalendarUnit.CalendarUnitDay
    let componentFlags = NSCalendarUnit.CalendarUnitYear | NSCalendarUnit.CalendarUnitMonth | NSCalendarUnit.CalendarUnitDay

    // Strip away any extra components we don't need such as hour/min/sec/etc.
    var startDay = calendar.dateFromComponents(calendar.components(componentFlags, fromDate:start))!
    var endDay = calendar.dateFromComponents(calendar.components(componentFlags, fromDate:end))!

    // '+ 1' is to go THROUGH the end day.
    return PayFrequency(days: Int(endDay.timeIntervalSinceDate(startDay) / converter) + 1)
}

