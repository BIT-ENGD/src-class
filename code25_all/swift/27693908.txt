// xcrun -sdk macosx10.10 swiftc main.swift
import Foundation

func xor_shift(x0: UInt32, y0: UInt32, z0: UInt32, w0: UInt32) -> () -> UInt32 {
    var x = x0
    var y = y0
    var z = z0
    var w = w0

    func num() -> UInt32 {
        let t = x ^ (x << 11)
        x = y
        y = z
        z = w
        w = w ^ (w >> 19) ^ (t ^ (t >> 8))
        return w
    }

    return num
}


let loopcount = Int32.max
let xrand = xor_shift(2014, 12, 29, 2015)
let t0  = NSDate()

for _ in 0..<loopcount {
    xrand()
}

let t1 = NSDate()
let ms = Int(t1.timeIntervalSinceDate(t0) * 1000)
println("[SWIFT] Time used: \(ms) millisecons, Loop count: \(loopcount)")

// Command line compile:
// dcc64  xortest.dpr

{$APPTYPE CONSOLE}
program xortest;
uses sysutils;

type
  TRandSeed = record
    x,y,z,w: UInt32;
  end;

function xrand(var seed: TRandSeed): UInt32;
var
  t: UInt32;
begin
    t := seed.x xor (seed.x shl 11);
    seed.x := seed.y; seed.y := seed.z; seed.z := seed.w;
    seed.w := seed.w xor (seed.w shr 19) xor (t xor (t shr 8));
  result := seed.w
end;

var
  r: TRandSeed;
  t0, t1: TDateTime;
  s: string;
  i, loopcount: integer;
begin
  // Set the rand seed
  r.x := 2014;  r.y := 12;  r.z := 29;  r.w := 2015;

  loopcount := high(Int32);
  t0 := now;
  for i := 1 to loopcount do xrand(r);
  t1 := now;

  s := Format('[PASCAL] Time used: %d milliseconds, Loopcount = %d', [Trunc((t1-t0)*24*3600*1000), loopcount]);
  writeln(s);
end.

