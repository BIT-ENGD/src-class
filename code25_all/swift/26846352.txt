protocol BinaryOperator {
    typealias LeftType
    typealias RightType
    typealias ResultType

    func apply(left: LeftType, right: RightType) -> ResultType
}

protocol UnaryOperator {
    typealias SourceType
    typealias ResultType

    func apply(SourceType) -> ResultType
}

class BinaryExpression<O:BinaryOperator, L:Expression, R:Expression
where L.ResultType==O.LeftType, R.ResultType==O.RightType> : Expression {

    typealias ResultType = O.ResultType

    let op : O
    let lhs : L
    let rhs : R

    init(op o : O, left : L, right: R) {
        op = o
        lhs = left
        rhs = right
    }

    func eval() -> ResultType {
        let left : O.LeftType = lhs.eval()
        let right : O.RightType = rhs.eval()

        return op.apply(left, right: right)
    }
}

