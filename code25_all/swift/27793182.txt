//
//  GameScene.swift
//  Bird Flappy Game
//
//  Created by Brandon Ballard on 1/4/15.
//  Copyright (c) 2015 Brandon Ballard. All rights reserved.
//

import SpriteKit

class GameScene: SKScene, SKPhysicsContactDelegate {

    var bird = SKSpriteNode()
    var pipeUpTexture = SKTexture()
    var pipeDownTexture = SKTexture()
    var pipesMoveAndRemove = SKAction()

    let pipeGap = 150.0

    enum ColliderType:UInt32 {
        case BIRD = 1
        case PIPE = 2
    }

    override func didMoveToView(view: SKView) {
        /* Setup your scene here */


        backgroundColor = SKColor.cyanColor()

        //physics
        self.physicsWorld.gravity = CGVectorMake(0.0, -15.0);
        self.physicsWorld.contactDelegate = self

        func didBeginContact(contact: SKPhysicsContactDelegate) {
            scene?.view?.paused = true
            bird.setScale(12.0)
        }


        //Bird
        var birdTexture = SKTexture(imageNamed:"Bird")
        birdTexture.filteringMode = SKTextureFilteringMode.Nearest

        bird = SKSpriteNode(texture: birdTexture)
        bird.setScale(0.6)
        bird.position = CGPoint(x: 375, y: self.frame.size.height * 0.6)

        bird.physicsBody = SKPhysicsBody(circleOfRadius: bird.size.height / 2.0)
        bird.physicsBody?.dynamic = true
        bird.physicsBody?.allowsRotation = true
        bird.physicsBody?.affectedByGravity = true
        bird.physicsBody!.categoryBitMask = ColliderType.BIRD.rawValue
        bird.physicsBody!.contactTestBitMask = ColliderType.PIPE.rawValue
        bird.physicsBody!.collisionBitMask = ColliderType.PIPE.rawValue

        self.addChild(bird)

        //Ground
        var groundTexture = SKTexture(imageNamed: "Ground")

        var sprite = SKSpriteNode(texture: groundTexture)
        sprite.setScale(2.0)
        sprite.position = CGPointMake(self.size.width / 2, sprite.size.height / 2.0)


        self.addChild(sprite)

        var ground = SKNode()

        ground.position = CGPointMake(0, groundTexture.size().height + 0)
        ground.physicsBody = SKPhysicsBody(rectangleOfSize: CGSizeMake(self.frame.size.width,     groundTexture.size().height * 2.0))

        ground.physicsBody?.dynamic = false
        self.addChild(ground)



        //Pipes

        //Create the Pipes

        pipeUpTexture = SKTexture(imageNamed: "PipeUp")
        pipeDownTexture = SKTexture(imageNamed: "PipeDown")

        //Movement of Pipes

        let distanceToMove = CGFloat(self.frame.size.width + 2.0 * pipeUpTexture.size().width)
        let movePipes = SKAction.moveByX(-distanceToMove, y: 0.0, duration: NSTimeInterval(0.01 * distanceToMove))
        let removePipes = SKAction.removeFromParent()

        pipesMoveAndRemove = SKAction.sequence([movePipes,removePipes])

        //Spawn Pipes

        let spawn = SKAction.runBlock({() in self.spawnPipes()})
        let delay = SKAction.waitForDuration(NSTimeInterval(2.0))
        let spawnThenDelay = SKAction.sequence([spawn,delay])
        let spawnThenDelayForever = SKAction.repeatActionForever(spawnThenDelay)

        self.runAction(spawnThenDelayForever)
    }

    func spawnPipes() {

        let pipePair = SKNode()
        pipePair.position = CGPointMake(self.frame.size.width + pipeUpTexture.size().width * 2, 0)
        pipePair.zPosition = -10

        let height = UInt32(self.frame.size.height / 4)
        let y = arc4random() % height + height

        var pipeDown = SKSpriteNode(texture: pipeDownTexture)
        pipeDown.setScale(2.0)////////
        pipeDown.position = CGPointMake(3.0, CGFloat(y) + pipeDown.size.height + CGFloat(pipeGap) )

        pipeDown.physicsBody = SKPhysicsBody(rectangleOfSize: pipeDown.size)
        pipeDown.physicsBody?.dynamic = false
        pipeDown.physicsBody!.affectedByGravity = false
        pipeDown.physicsBody!.categoryBitMask = ColliderType.PIPE.rawValue
        pipeDown.physicsBody!.contactTestBitMask = ColliderType.BIRD.rawValue
        pipeDown.physicsBody!.collisionBitMask = ColliderType.BIRD.rawValue
        pipePair.addChild(pipeDown)

        var pipeUp = SKSpriteNode(texture: pipeUpTexture)
        pipeUp.setScale(2.0)
        pipeUp.position = CGPointMake(0.0, CGFloat(y))

        pipeUp.physicsBody = SKPhysicsBody(rectangleOfSize: pipeUp.size )
        pipeUp.physicsBody?.dynamic = false
        pipeUp.physicsBody!.affectedByGravity = false
        pipeUp.physicsBody!.categoryBitMask = ColliderType.PIPE.rawValue
        pipeUp.physicsBody!.contactTestBitMask = ColliderType.BIRD.rawValue
        pipeUp.physicsBody!.collisionBitMask = ColliderType.BIRD.rawValue
        pipePair.addChild(pipeUp)

        pipePair.runAction(pipesMoveAndRemove)
        self.addChild(pipePair)

    }

    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
        /* Called when a touch begins */

        for touch: AnyObject in touches {



            let location = touch.locationInNode(self)

            bird.physicsBody?.velocity = CGVectorMake( 0, 0 )
            bird.physicsBody?.applyImpulse(CGVectorMake(0,25))



        }
    }

    override func update(currentTime: CFTimeInterval) {
        /* Called before each frame is rendered */
    }
}

