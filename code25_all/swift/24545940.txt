import UIKit

/*
 A controller object that manages a simple model.

 The controller serves as the data source for the page view controller; it therefore implements pageViewController:viewControllerBeforeViewController: and pageViewController:viewControllerAfterViewController:.
 It also implements a custom method, viewControllerAtIndex: which is useful in the implementation of the data source methods, and in the initial configuration of the application.


 There is no need to actually create view controllers for each page in advance -- indeed doing so incurs unnecessary overhead. Given the data model, these methods create, configure, and return a new view controller on demand.
 */

class ModelController: NSObject, UIPageViewControllerDataSource { //Data Source for the UIPageViewController.

var pageData = NSArray()
var imageData = NSArray()

init() {
    super.init()
    // Create the data model.
    pageData = ["Find Friends.", "Meet Up."]
    imageData = ["page1", "page1" ]
}

func viewControllerAtIndex(index: Int, storyboard: UIStoryboard) -> DataViewController? {
    // Return the data view controller for the given index.
    if (self.pageData.count == 0) || (index >= self.pageData.count) {
        return nil
    }

    // Create a new view controller and pass suitable data.
    let dataViewController = storyboard.instantiateViewControllerWithIdentifier("DataViewController") as DataViewController
    dataViewController.dataObject = self.pageData[index]

    //let imageTest = UIImage(named: "page2.png") as UIImage
    //dataViewController.dataImage.image = imageTest


    var image = self.imageData[index] as NSString
    var actualImage : UIImageView? = UIImageView(image: UIImage(named: image))
    if actualImage != nil {
        dataViewController.dataImage = actualImage!
    }


    /*var image = self.imageData[index] as NSString //

    if let derp = image as NSString? {
        println(" \(image)")
    } else {
        println("is nil")
    }

    dataViewController.dataImage.image = UIImage(named: image) as UIImage */
    return dataViewController
}

func indexOfViewController(viewController: DataViewController) -> Int {
    // Return the index of the given data view controller.
    // For simplicity, this implementation uses a static array of model objects and the view controller stores the model object; you can therefore use the model object to identify the index.
    return self.pageData.indexOfObject(viewController.dataObject)
}

// #pragma mark - Page View Controller Data Source

func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -> UIViewController? {
    var index = self.indexOfViewController(viewController as DataViewController)
    if (index == 0) || (index == NSNotFound) {
        return nil
    }

    index--
    return self.viewControllerAtIndex(index, storyboard: viewController.storyboard)
}

func pageViewController(pageViewController: UIPageViewController, viewControllerAfterViewController viewController: UIViewController) -> UIViewController? {
    var index = self.indexOfViewController(viewController as DataViewController)
    if index == NSNotFound {
        return nil
    }

    index++
    if index == self.pageData.count {
        return nil
    }
    return self.viewControllerAtIndex(index, storyboard: viewController.storyboard)
}
}

var image = self.imageData[index] as NSString
var actualImage : UIImageView? = UIImageView(image: UIImage(named: image))
if actualImage != nil {
    dataViewController.dataImage = actualImage!
}

