var genreList:NSArray?

override func viewDidLoad() {
    super.viewDidLoad()
    Bookshop.getGenres {
        genres in
            self.genreList = genres // copies data to the public NSArray
            self.tableView.reloadData() // this returns the data async so need to reload the tableview
            println("records: \(self.genreList?.count)") // displays the array of dictionaries correctly
    }
}

// #pragma mark - Table view data source

override func numberOfSectionsInTableView(tableView: UITableView!) -> Int {
    return 1
}

override func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int {
    if self.genreList != nil {
        println("Rows in section: \(self.genreList?.objectAtIndex(0))")
        return self.genreList?.count! // Value of optional 'Int?' not wrapped; did you mean to use '!' 
    }
    return 3
}

override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -> UITableViewCell? {
    let cell:UITableViewCell = tableView.dequeueReusableCellWithIdentifier("GenreCell", forIndexPath: indexPath) as UITableViewCell
    cell.textLabel.text = "Hello World!"
    println("ROW: \(indexPath.row)")
    println("data: \(self.genreList?.objectAtIndex(indexPath.row))")
    var item = self.genreList?.objectAtIndex(indexPath.row) Variable 'item' inferred to have type 'AnyObject?', which may be unexpected.
    //cell.textLabel.text = item.title
    //var item:NSDictionary = self.genreList?.objectAtIndex(indexPath.row) as NSDictionary
    //println("item: \(item)")
    return cell
}

import Foundation

class Bookshop {
    class func getGenres(completionHandler: (genres: NSArray) -> ()) {
        //println("Hello inside getGenres")
        let urlPath = "http://creative.coventry.ac.uk/~bookshop/v1.1/index.php/genre/list"
        //println(urlPath)
        let url: NSURL = NSURL(string: urlPath)
        let session = NSURLSession.sharedSession()
        var resultsArray:NSArray!
        let task = session.dataTaskWithURL(url) {
            data, response, error in
            //println("Task completed")
            if(error) {
                println(error.localizedDescription)
            }
            //println("no error")
            var err: NSError?
            var options:NSJSONReadingOptions = NSJSONReadingOptions.MutableContainers
            var jsonResult = NSJSONSerialization.JSONObjectWithData(data, options: options, error: &err) as NSDictionary
            if(err != nil) {
                println("JSON Error \(err!.localizedDescription)")
            }
            //NSLog("jsonResults %@", jsonResult)
            let results: NSArray = jsonResult["genres"] as NSArray
            //NSLog("jsonResults %@", results)
            //resultsArray = results
            //println("calling completion handler")
            completionHandler(genres: results)
        }
        task.resume()
    }
}

