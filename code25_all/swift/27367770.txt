public static void printPhoneWords(int[] number) {
     char[] output = new char[number.length];
     printWordsUtil(number,0,output);
}

static String[] phoneKeys= new String[]{"0", "1", "ABC", "DEF", "GHI", "JKL",
               "MNO", "PQRS", "TUV", "WXYZ"};
private static void printWordsUtil(int[] number, int curDigIndex, char[] output) {
    // Base case, if current output word is done
    if (curDigIndex == output.length) {
        System.out.print(String.valueOf(output) + " "); 
        return;
    }
  // Try all 3-4 possible characters for the current digit in number[]
  // and recurse for the remaining digits

char curPhoneKey[] = phoneKeys[number[curDigIndex]].toCharArray();
for (int i = 0; i< curPhoneKey.length ; i++) {
    output[curDigIndex] = curPhoneKey[i];
    printWordsUtil(number, curDigIndex+1, output);
    if (number[curDigIndex] <= 1) // for 0 or 1
        return;
    }
}

public static void main(String[] args) {
    int number[] = {2, 3, 4};
    printPhoneWords(number);
    System.out.println();
}

var pinDict = [2:"abc", 3:"def", 4:"ghi", 5:"jkl", 6:"mno", 7:"pqrs", 8:"tuv", 9:"wxyz"]


func printWordsUtil(number: [Int], curDigIndex: Int, output: Array<Character>) {

    var curPhoneKey:Array<Character> = []

    curPhoneKey = pinDict[number[curDigIndex]]

    for var i = 0; i < curPhoneKey.count; i++ {
        output[curDigIndex] = pinDict[i]
        printWordsUtil(number, curDigIndex+1, output)
        if(number[curDigIndex] <= 1) {
            return
        }
    }
}
func printPhoneWords(number: [Int]) {
    var output:Array<Character> = []
    printWordsUtil(number,0,output)
}
func main() {
    var number = [2, 2, 7, 3]
    printPhoneWords(number)
}

curPhoneKey = pinDict[number[curDigIndex]]
'(Int, String)'
'Array<Character>'
output[curDigIndex] = pinDict[i]
'@lvalue $T8'
comparisonArray.append(dictionary[a!])
comparisonArray.append(dictionary[b!])
comparisonArray.append(dictionary[c!])
comparisonArray.append(dictionary[d!])
func combos<T>(var array: Array<T>, k: Int) -> Array<Array<T>> {
    if k == 0 { return [[]] } if array.isEmpty { return [] }
    let head = [array[0]]
    let subcombos = combos(array, k - 1)
    var ret = subcombos.map {head + $0} 
    array.removeAtIndex(0)
    ret += combos(array, k) 
    return ret 
}
combos(comparisonArray, 4)

["ABC, "DEF", "DEF, "PQRS"]
["A", "D", "D", "P"]
["B", "D", "D", "P"]
