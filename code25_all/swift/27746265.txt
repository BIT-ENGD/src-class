class func createResources(config: GameSceneConfig, withCompletion: (scene: GameScene) -> ()){

    // load resources on other thread
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), {

        self.createTextures()  // need to load textures before scene is created
        let gameScene = GameScene(config: config)

        // callback on main thread
        dispatch_async(dispatch_get_main_queue(), {
            // Call the completion handler back on the main queue.
            withCompletion(scene: gameScene)
        });
    })
}

class func createResources(config: HyperSceneConfig, withCompletion: (scene: HyperScene) -> ()){

    // load resources on other thread
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), {

        self.createTextures()
        let hyperScene = HyperScene(config: config)

        // callback on main thread
        dispatch_async(dispatch_get_main_queue(), {
            // Call the completion handler back on the main queue.
            withCompletion(scene: hyperScene)
        });
    })

}

createResources
BaseScene
struct HyperSceneConfig {
    var size: CGSize
    var viewController: GameViewController

    init(size: CGSize, viewController: GameViewController){
        self.size = size
        self.viewController = viewController
    }
}


struct GameSceneConfig {
    var size: CGSize
    var viewController: GameViewController
    var curLevel: Int
    var curSector: Int
    var lives: Int

    init(size: CGSize, viewController: GameViewController, curSector: Int, curLevel: Int, lives: Int = 3, startPoint: CGPoint? = nil){
        self.size = size
        self.viewController = viewController
        self.curLevel = curLevel
        self.curSector = curSector
        self.lives = lives
    }
}

