typealias JSON = AnyObject
typealias JSONArray = Array<AnyObject>

protocol JSONDecodable {
    class func decode(json: JSON) -> Self?
}

final class Box<T> {
    let value: T

    init(_ value: T) {
        self.value = value
    }
}

enum Result<A> {

    case Success(Box<A>)
    case Error(NSError)

    init(_ error: NSError?, _ value: A) {
        if let err = error {
            self = .Error(err)
        } else {
            self = .Success(Box(value))
        }
    }
}

func decode<T: JSONDecodable>(jsonArray: JSONArray?) -> Result<[T: JSONDecodable]> {
    if let jsonArray = jsonArray {
        var resultArray = [JSONDecodable]()
        for json: JSON in jsonArray {
            let decodedObject: JSONDecodable? = T.decode(json)
            if let decodedObject = decodedObject {
                resultArray.append(decodedObject)
            } else {
                return Result.Error(NSError()) //excuse this for now
            }
        }
        return Result.Success(Box(resultArray)) // THE ERROR IS HERE !!!!
    } else {
        return Result.Error(NSError()) //excuse this for now
    }
}

