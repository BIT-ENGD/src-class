UICollectionViewController
NSFetchedResultsController
NSFetchedResultsControllerDelegate
extension MainsViewController: NSFetchedResultsControllerDelegate {

    func fetchedResultsController() -> NSFetchedResultsController {

    //        if(fetchedResultsController != nil){
    //            return fetchedResultsController()
    //        }
    var fetchRequest = NSFetchRequest()

    var context: NSManagedObjectContext = RKObjectManager.sharedManager().managedObjectStore.mainQueueManagedObjectContext

    var entity = NSEntityDescription.entityForName("Dessert", inManagedObjectContext: context)

    fetchRequest.entity = entity
    fetchRequest.fetchBatchSize = 20

    var sortDescriptor = NSSortDescriptor(key: "createdAt", ascending: false)
    let sortDescriptors = [sortDescriptor]
    fetchRequest.sortDescriptors = sortDescriptors
    fetchedResultsController().delegate = self

    var aFetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: nil, cacheName: "Master")

    var error: NSError?
    if !aFetchedResultsController.performFetch(&error){
        println("An error:\(error) occured.")
    }



    return aFetchedResultsController
}

//Here is where i would call *@optional func controllerWillChangeContent(_ controller: NSFetchedResultsController!)* etc. etc.

}

