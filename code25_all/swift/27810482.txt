struct Set<T: Hashable> : ArrayLiteralConvertible {
    typealias Element = T
    private var contents: [Element: Bool]

    init() {
        self.contents = [Element: Bool]()
    }

    // easier initialization
    init<S: SequenceType where S.Generator.Element == Element>(_ sequence: S) {
        self.contents = [Element: Bool]()
        Swift.map(sequence) { self.contents[$0] = true }
    }

    // allow Set creation through simple assignment using ArrayLiteralConvertible protocol
    internal static func convertFromArrayLiteral(elements: Element...) -> Set {
        return Set(elements)
    }
}

