- (id)initWithStyle:(UITableViewStyle)style
{
    self = [super initWithStyle:style];
    if (self) {

        // Whether the built-in pull-to-refresh is enabled
        self.pullToRefreshEnabled = YES;
    }
    return self;
}

override func viewDidAppear(animated: Bool) {
    self.loadData()
}

override init(style: UITableViewStyle) {
    super.init(style: style)
}

required init(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
}

import UIKit

class InventarioTableViewController: UITableViewController {

    // Variable que guarda la busqueda
    var categoriasDeInventario:NSMutableArray! = NSMutableArray()
    var categoriasFiltradasDeInventario:NSMutableArray! = NSMutableArray()

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }

    override func viewDidAppear(animated: Bool) {
        self.loadData()
    }

    override init(style: UITableViewStyle) {
        super.init(style: style)
    }

    required init(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // CARGA LOS DATOS DE LA BUSQUEDA

    @IBAction func loadData(){
        //categoriasDeInventario.removeAllObjects()
        //categoriasFiltradasDeInventario.removeAllObjects()

        var buscaCategoriasDeInventario:PFQuery = PFQuery(className: "InventarioListado")
        buscaCategoriasDeInventario.cachePolicy = kPFCachePolicyCacheThenNetwork


        buscaCategoriasDeInventario.findObjectsInBackgroundWithBlock{
            (objects:[AnyObject]!, error:NSError!)->Void in

            if error == nil{
                for object in objects{
                    let sweet:PFObject = object as PFObject
                    self.categoriasDeInventario.addObject(sweet)


                    let sweeter:NSString! = sweet.objectForKey("Categoria") as? NSString
                    var filtro = self.categoriasFiltradasDeInventario.containsObject(sweeter!)
                    if (filtro == false) {
                        self.categoriasFiltradasDeInventario.addObject(sweeter)
                    }
                }
            }

            self.tableView.reloadData()
        }
    }

    // LOS SIGUIENTES 3 METODOS SON LOS QUE GENERAN EL TABLEVIEW CON SECCIONES

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 1
    }


    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return categoriasFiltradasDeInventario.count
    }

    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("InventarioCell", forIndexPath: indexPath) as UITableViewCell;

        cell.textLabel?.text = categoriasFiltradasDeInventario[indexPath.row] as? String
        cell.accessoryType = UITableViewCellAccessoryType.DisclosureIndicator

        return cell
    }

    // Este metodo pasa la variable toPass al siguiente viewcontroller

    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {
        if (segue.identifier == "segueInventario") {
            let selectedIndex = self.tableView.indexPathForCell(sender as UITableViewCell)
            var svc = segue.destinationViewController as EquipoInventarioTableViewController

            // variable a pasar
            svc.toPassInventario = categoriasFiltradasDeInventario[selectedIndex!.row] as? String//self.inventario[selectedIndex!.row]
        }

    }
}

