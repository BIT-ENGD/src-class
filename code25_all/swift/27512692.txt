class obstacles: SKSpriteNode
{
    var isOnScreen = false
    var type: Int = 0
    var initTime: Int = 0
}

var obstacle = [obstacles]() // obstacle is an array of SKSpriteNode

// type : initTime : speed : position : xScale : yScale
var level1: [String] = ["0:120:3:0:1:1", "0:130:4:80:2:2","1:140:8:120:6:1","0:150:6:240:2:2"]

override func didMoveToView(view: SKView)
{        
    initObstacles()
}

func initObstacles()
{
    for var x = 0; x < level1.count; x++ // for each obstacle
    {
        var index = 0

        var type = String("")
        var initTime = String("")
        var speed = String("")
        var position = String("")
        var xScale = String("")
        var yScale = String("")

        var lastIndex = obstacle.count

        for Character in level1[x] // we read each character one by one
        {
            if Character == ":" { index++ } // if it's a ":" we change the variable
            else
            {
                switch index
                {
                case 0:
                    type += String(Character)
                case 1:
                    initTime += String(Character)
                case 2:
                    speed += String(Character)
                case 3:
                    position += String(Character)
                case 4:
                    xScale += String(Character)
                case 5:
                    yScale += String(Character)
                default:
                    break;
                }
            }
        }

        obstacle.append(obstacles(imageNamed: "Rectangle")) // we add an element to the array

        obstacle[lastIndex].type = type.toInt()! // we init all the values
        obstacle[lastIndex].initTime = initTime.toInt()!
        obstacle[lastIndex].speed = CGFloat(speed.toInt()!)
        obstacle[lastIndex].size.width = DEFAULT_OBSTACLE_SIZE * CGFloat(xScale.toInt()!)
        obstacle[lastIndex].size.height = DEFAULT_OBSTACLE_SIZE * CGFloat(yScale.toInt()!)
        obstacle[lastIndex].position = CGPointMake(CGFloat(position.toInt()!) - obstacle[lastIndex].size.width/2, CGRectGetMaxY(frame) + obstacle[lastIndex].size.height/2)
    }
}

