var Bool canEdit = true
@IBOutlet var table : UITableView!
var eventList : [EventCell] = [] // EventCell - custom cell class

func addEventsAndRefresh() {
   if (canEdit){        
       canEdit = false
       HTTPManager.getEvents(isFuture: true, offset: eventList.count, didLoad: getEvents) //it creates url and call function "getEvents" after ending async request
   }    
}

func getEvents(response : NSURLResponse!, data : NSData!, error : NSError!) {
    if ((error) != nil) {
        HTTPManager.showErrorAlert()
    } else {
        var result = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: nil) as NSArray
        for elementOfArray in result {
            var cell : EventCell = table.dequeueReusableCellWithIdentifier("EventCell") as EventCell
            ... // parsing result to cell
            eventList.append(cell)

        }
        table.reloadData()
        canEdit = true
    }
}


func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int {
    return eventList.count
}

func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -> UITableViewCell! {
    return eventList[indexPath.row]
}

func scrollViewDidEndDragging(scrollView: UIScrollView!, willDecelerate decelerate: Bool) {
    var currentOffset = scrollView.contentOffset.y;
    var maximumOffset = scrollView.contentSize.height - scrollView.frame.size.height;

    if (maximumOffset - currentOffset <= -40.0 && canEdit) {
        addEventsAndRefresh()
    }
}

