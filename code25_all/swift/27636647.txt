fileExistsAtPath
func download(url: String, parameters: Dictionary<String,AnyObject>?,success:((String) -> Void)!, failed:(() -> Void)!, errord:((NSError) -> Void)!) {
   var request = HTTPTask();
   let downloadTask = request.download(url, parameters: parameters, progress: {(complete: Double) in
            }, success: {(response: HTTPResponse) in
       if response.responseObject != nil {
          //we MUST copy the file from its temp location to a permanent location.
          let paths = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)
          let str = "\(paths[0])/\(response.suggestedFilename!)"
          let newPath = NSURL(string:  str)!
          let fileManager = NSFileManager.defaultManager()
          fileManager.removeItemAtURL(newPath, error: nil)
          fileManager.moveItemAtURL(response.responseObject! as NSURL, toURL: newPath, error: nil)
          var isDir:ObjCBool = false
          let exits = fileManager.fileExistsAtPath(path, isDirectory: &isDir)
          if isDir {
              println("file is in")
          }else{
              // I can not found the file in path
              println("file is not in")
          }
          success(str)
      }
    } ,failure: {(error: NSError, response: HTTPResponse?) in
          errord(error)
    })
}

@IBAction func login(sender: AnyObject) {
    download("XXXXXXXXXXXXXXX", parameters: nil, success: { (path:String) -> Void in
        println("\(path)")
        var data = NSData(contentsOfFile: path)
        var error:NSError?;
        var playData = NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.MutableLeaves, error: &error) as? NSArray
        var arrayCount = playData!.count
        println("\(arrayCount)")
    }, failed: { () -> Void in

    }) { (error:NSError) -> Void in

    }
}

