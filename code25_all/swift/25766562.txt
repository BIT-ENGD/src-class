var attachment: NSTextAttachment = NSTextAttachment()

            attachment.image = UIImage(named: "placeholder.png")
            attachment.bounds = CGRect(origin: CGPointZero, size: attachment.image.size.width > UIScreen.mainScreen().bounds.width ? CGSizeMake(UIScreen.mainScreen().bounds.width, UIScreen.mainScreen().bounds.width/attachment.image.size.width * attachment.image.size.height)  : attachment.image.size )

            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), { () -> Void in
                let imageData: NSData = NSData(contentsOfURL: url)

                attachment.image = UIImage(data: imageData)
                attachment.bounds = CGRect(origin: CGPointZero, size: attachment.image.size.width > UIScreen.mainScreen().bounds.width ? CGSizeMake(UIScreen.mainScreen().bounds.width, UIScreen.mainScreen().bounds.width/attachment.image.size.width * attachment.image.size.height)  : attachment.image.size )
                self.textView.setNeedsDisplay()
            })

            let attributedString: NSAttributedString = NSAttributedString(attachment: attachment)
            let lineBreak: NSAttributedString = NSAttributedString(string: "\n")

            self.markdown.deleteCharactersInRange(matchRange)

            self.markdown.insertAttributedString(attributedString, atIndex: matchRange.location)
            self.markdown.insertAttributedString(lineBreak, atIndex: matchRange.location)

