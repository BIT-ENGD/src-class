public class Serializable : NSObject
{

func toDictionary() -> NSDictionary
{
    var aClass : AnyClass? = self.dynamicType
    var propertiesCount : CUnsignedInt = 0
    var propertiesInAClass : UnsafeMutablePointer<objc_property_t> = class_copyPropertyList(aClass, &propertiesCount)
    var propertiesDictionary : NSMutableDictionary = NSMutableDictionary()

    for(var i = 0; i < Int(propertiesCount); i++)
    {
        var property = propertiesInAClass[i]
        var propName = NSString(CString: property_getName(property), encoding: NSUTF8StringEncoding)
        var propType = property_getAttributes(property)
        var propValue : AnyObject! = self.valueForKey(propName!)

        if(propValue is Serializable)
        {
            propertiesDictionary.setValue((propValue as Serializable).toDictionary(), forKey: propName!)
        }
        else if(propValue is Array<Serializable>)
        {
            var subArray = Array<NSDictionary>()
            for item in (propValue as Array<Serializable>)
            {
                subArray.append(item.toDictionary())
            }
            propertiesDictionary.setValue(subArray, forKey: propName!)
        }
        else if(propValue is NSData)
        {
            propertiesDictionary.setValue((propValue as NSData).base64EncodedStringWithOptions(nil), forKey: propName!)
        }
        else if(propValue is Bool)
        {
            propertiesDictionary.setValue((propValue as Bool).boolValue, forKey: propName!)
        }
        else if(propValue is NSDate)
        {
            var date = propValue as NSDate
            let dateFormatter = NSDateFormatter()
            dateFormatter.dateFormat = "Z"
            var dateString = NSString(format: "/Date(%.0f000%@)/", date.timeIntervalSince1970, dateFormatter.stringFromDate(date))
            propertiesDictionary.setValue(dateString, forKey: propName!)
        }
        else
        {
            propertiesDictionary.setValue(propValue, forKey: propName!)
        }
    }

    return propertiesDictionary
}

    func toJson() -> NSData!
    {
        var dictionary = self.toDictionary()
        var err: NSError?
        return NSJSONSerialization.dataWithJSONObject(dictionary, options:NSJSONWritingOptions(0), error: &err)
    }

    func toJsonString() -> NSString!
    {
        return NSString(data: self.toJson(), encoding: NSUTF8StringEncoding)
    }

    override init()
    {

    }
}

class BagItem: Serializable, Hashable {

var uniqueID: Int = 0
override var hashValue: Int { return uniqueID.hashValue }
var bagItemId: String
var item: Item
var boughtDate: NSDate!
var boughtTime: String
var branch: Branch
var isMainItem: Bool

    override init()
    {
        self.bagItemId   = ""
        self.item        = Item()
        self.boughtDate  = NSDate()
        self.boughtTime  = ""
        self.branch      = Branch()
        self.isMainItem  = false
    }
}

func ==(lhs: BagItem, rhs: BagItem) -> Bool
{
    return lhs.uniqueID == rhs.uniqueID
}

class SerializableBag: Serializable
{
    var bag: Array<BagItem> = []

    override init()
    {

    }
}

static func ConvertBagToJson() -> NSString
{
    var serializer: SerializableBag = SerializableBag()
    serializer.bag = self.bag
    return serializer.toJsonString()
}

{
"bag": [
    {
        "branch": {
            "city": {
                "cityId": false,
                "cityName": ""
            },
            "town": {
                "townName": "",
                "townId": false
            },
            "branchName": "Branch",
            "branchId": true,
            "business": {
                "businessPhotoPath": "",
                "businessName": "",
                "businessId": true
            },
            "branchAddress": "Some Address",
            "branchTelephone": ""
        },
        "uniqueID": false,
        "boughtDate": "/Date(1414581909000+0200)/",
        "item": {
            "itemName": "Pencil",
            "itemId": true,
            "itemPrice": true
        },
        "isMainItem": true,
        "bagItemId": "9674D47B-0D2F-46CC-BA16-754875AE277D",
        "hashValue": false,
        "boughtTime": "00:30"
    }
]
}

