class Category  : PFObject, PFSubclassing{

override class func load() {
    self.registerSubclass()
}

class func parseClassName() -> String! {
    return "Category"
}

var nameCategory:String="";
var image:String="";

private let KeyName:String = "label";
private let KeyImage:String = "image";

func fromPFObject(object:PFObject)->Category{

    self.nameCategory = object[self.KeyName] as String;
    self.image = object[self.KeyImage] as String;

    return self;
}

class Event {

//Variables de classe
var name:String;
var category:Category;

// Descripteur de colone en base
private let KeyEventName:String = "event_name";
private let KeyCategory:String = "category";

func insert(){

    var event = self.toPFObject()

    event.saveInBackgroundWithBlock {
        (success: Bool!, error: NSError!) -> Void in
        if (success != false) {
            println("Object created with id: \(event.objectId)")
            self.id = event.objectId;
        } else {
            println(error)
        }
    }
}


func select(id:String){
    var query = PFQuery(className: self.KeyClassName)

    query.getObjectInBackgroundWithId(id) {
        (event: PFObject!, error: NSError!) -> Void in
        if (error == nil) {

            self.fromPFObject(event);
        } else {
            println(error)
            self.eventKO("Une erreur c'est produite");
        }
    }
}

func toPFObject()->PFObject{

    var event = PFObject(className: self.KeyClassName)

    event[self.KeyCategory] = self.category;
    event[self.KeyEventName] = self.name


    return event;
}

func fromPFObject(event:PFObject)->Event{

    self.activ = event[self.KeyActif] as Int;

    var test = event[self.KeyCategory] as PFObject;
    var label = test["label"] as String;

    self.category = event[self.KeyCategory] as Category;
    self.name = event[self.KeyEventName] as String;


    return self;
}

