tableviewcontroller
PFQuery
var query = PFUser.query()

query.findObjectsInBackgroundWithBlock {
        (objects: [AnyObject]!, error: NSError!) -> Void in
        self.users.removeAll(keepCapacity: true)   // users is an array declared globally

        for object in objects {
                var user:PFUser = object as PFUser
                var isFollowing:Bool
                if user.username != PFUser.currentUser().username {
                        self.users.append(user.username)
                        isFollowing = false
                        var query = PFQuery(className:"followers")
                        query.whereKey("follower", equalTo:PFUser.currentUser().username)
                        query.whereKey("following", equalTo:user.username)
                        query.findObjectsInBackgroundWithBlock {
                                (objects: [AnyObject]!, error: NSError!) -> Void in
                                if error == nil {
                                        for object in objects {
                                                isFollowing = true
                                        }

                                        self.following.append(isFollowing)
                                        self.tableView.reloadData()

                                } else {
                                        // Log details of the failure
                                        println(error)
                                }
                        }

                }
        }
}

reloadData()
override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
    var cell:UITableViewCell = self.tableView.dequeueReusableCellWithIdentifier("cell") as UITableViewCell

    if following.count > indexPath.row {

        if following[indexPath.row] == true {

            cell.accessoryType = UITableViewCellAccessoryType.Checkmark

        }

    }

    cell.textLabel.text = users[indexPath.row]

    return cell

}

