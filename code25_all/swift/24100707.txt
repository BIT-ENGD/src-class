let list: String[] = ["first", "middle", "last"]
let cdr = list[1..list.endIndex]
assert(cdr == ["middle", "last"])

String[]
func last(xs: String[]) -> String? {
    switch xs {
    case let (singleItemList) where singleItemList.endIndex == 1:
        return singleItemList[0]
    case let(multiItemList) where multiItemList.endIndex > 1:
        let cdr: String[] = multiItemList[1..multiItemList.endIndex] // compilation error!
        return last(cdr)
    default:
        return nil // empty list
    }
}


last(["first", "middle", "last"])
last(["last"])
last([])

Playground execution failed: error: <REPL>:14:29: error: could not find an overload for 'subscript' that accepts the supplied arguments
        let cdr: String[] = multiItemList[1..multiItemList.endIndex] // compilation error!
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

let
String[]
last
def last[T](xs: List[T]): T = xs match {
    case List() => throw new Error("last of empty list")
    case List(x) => x
    case y :: ys => last(ys)
}

