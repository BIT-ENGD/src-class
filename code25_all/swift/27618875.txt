import Foundation

protocol Resolver {
    typealias ResolvedType
    func get() -> ResolvedType
}

class FunctionResolver<T>: Resolver {
    typealias ResolvedType = T

    private var _resolver: () -> ResolvedType

    init(resolver: () -> ResolvedType) {
        _resolver = resolver
    }

    func get() -> ResolvedType {
        return _resolver()
    }
}


func singleton<T, U: Resolver where U.ResolvedType == T>(instance: T) -> U {
    return FunctionResolver({ () -> T in instance }) as U
}

class TestObject {
    init() { }
}

let obj = TestObject()
let r = singleton(obj)

playground466.swift:30:9: error: cannot convert the expression's type 'TestObject' to type 'Resolver'
let r = singleton(obj)
        ^~~~~~~~~

obj
Resolver
singleton
obj
func singleton<T: Resolver>(instance: T.ResolvedType) -> T {
    return FunctionResolver(resolver: { () -> T.ResolvedType in instance }) as T
}

