public protocol JSONConvertible {
    typealias T

    class func fromDictionary(dict: NSDictionary) -> T?
    class func fromArray(arr: NSArray) -> Array<T>
}

public class BasicObject<T>: JSONConvertible {

    public class func fromDictionary(dict: NSDictionary) -> T? {
        return nil
    }

    public class func fromArray(arr: NSArray) -> Array<T> {
        var result = Array<T>()

        for obj in arr {
            if let object: T = self.fromDictionary(obj as NSDictionary) {
                result.append(object)
            }
        }

        return result
    }

}

public class User: BasicObject<User> {}

public class User<User>: BasicObject<User> {}

var user = User<User>()

