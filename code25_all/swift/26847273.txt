class Parser<I: CollectionType, T> {
    func parse(ts: I) -> [(T, I)] { return [] }

    func parse_all(ts: I) -> [(T, I)] {
        return parse(ts).filter { isEmpty($0.1) }
    }
}

class CharParser<I: CollectionType, T> : Parser<[Character], Character> {
    let c: Character

    init(c: Character) { self.c = c }

    override func parse(ts: [Character]) -> [(Character, [Character])] {
        println(ts)
        return ts[0] == c ? [(ts[0], Array(ts[1..<ts.count]))] : []
    }
}

class AltParser<I: CollectionType, T> : Parser<I, T> {
    let p: Parser<I, T>
    let q: Parser<I, T>

    init(p: Parser<I, T>, q: Parser<I,T>) {
        self.p = p
        self.q = q
    }

    override func parse(ts: I) -> [(T, I)] {
        println(ts)
        return p.parse(ts) + q.parse(ts)
    }
}

class SeqParser<I: CollectionType, T, S>: Parser<I, (T, S)> {
    let p: Parser<I, T>, q: Parser<I,S>

    init(p: Parser<I, T>, q: Parser<I,S>) { self.p = p; self.q = q }

    override func parse(ts: I) -> [((T, S), I)] {
        var acc = [((T, S), I)]()
        for (head1, tail1) in p.parse(ts) {
            for (head2, tail2) in q.parse(tail1) {
                acc += [((head1, head2), tail2)]
            }
        }
        return acc
    }
}

let x = CharParser<[Character], Character>(c: "a")
x.parse(Array("a"))

let x2 = CharParser<[Character], Character>(c: "b")
let y = AltParser(p: x, q: x2)
let z = y.parse(Array("a"))

