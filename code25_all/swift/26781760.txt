 struct {
   case Value(@autoclosure () -> ValueType)
   case Error(@autoclosure () -> ErrorType)
   case None
 }

func == <ValueType, ErrorType> (left: Promise<ValueType, ErrorType>, right: Promise<ValueType, ErrorType>) -> Bool
{
    switch (left, right)
    {
    case (.Value, .Value):  fallthrough
    case (.Error,.Error):   fallthrough
    case (.Nil, .Nil):
        return true
    default:
        return false
    }
}

func == <ValueType, ErrorType> (left: Promise<ValueType, ErrorType>, right: Promise<ValueType, ErrorType>) -> Bool
{
    switch (left, right)
    {
    case (.Value, .Value):  
        return left.value() == right.value()
    case (.Error,.Error):   
        return left.error() == right.error()
    case (.Nil, .Nil):
        return true
    default:
        return false
    }
}

