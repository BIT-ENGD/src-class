//Start the location manager
        self.captureLocationManager?.requestWhenInUseAuthorization()
        self.captureLocationManager?.delegate = self
        self.captureLocationManager?.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        self.captureLocationManager?.startUpdatingLocation()
        self.captureLocationManager?.distanceFilter = 40
        ....
        {image picker code}

func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!){
    if locations.count > 0 {
        var latestLocation = locations[locations.count-1] as CLLocation

        if !self.captureGeoCoder.geocoding {
            self.captureGeoCoder.reverseGeocodeLocation(latestLocation, completionHandler: { (placeMarks:[AnyObject]!, error: NSError!) -> Void in
                if error == nil{
                    if placeMarks != nil{

                        self.captureLocationPlaceMark = placeMarks[0] as CLPlacemark
                        println(self.objMomentModel.captureLocationPlaceMark.name)
                        self.captureLocationManager?.stopUpdatingLocation()
                        self.captureLocationManager = nil
                    }
                    else{
                        println("0 placemarks!")
                    }
                }
                else{
                    println("Oops, there was an error in reverseGeoCodeLocation!")
                }


            })
        }
    }
}

self.captureLocationPlaceMark = placeMarks[0] as CLPlacemark

(lldb) 

