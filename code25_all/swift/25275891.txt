ticTacImages[spot].removeGestureRecognizer(UITapGestureRecognizer(target: self, action: "imageClicked:"))

imageClicked
setImageForSpot
for imageView in ticTacImages {

            imageView.userInteractionEnabled = true
            imageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: "imageClicked:"))

        }
    }

    //Gesture Reocgnizer method
    func imageClicked(reco: UITapGestureRecognizer) {

        var imageViewTapped = reco.view as UIImageView

        println(plays[imageViewTapped.tag])
        println(aiDeciding)
        println(done)

        opening1.hidden = true
        opening2.hidden = true
        opening3.hidden = true

        if plays[imageViewTapped.tag] == nil && !aiDeciding && !done {
            setImageForSpot(imageViewTapped.tag, player:.UserPlayer)
            }

        checkForWin()

        let delay = 1 * Double(NSEC_PER_SEC)
        let time = dispatch_time(DISPATCH_TIME_NOW, Int64(delay))
        //During delay
        for imageView in ticTacImages {
            imageView.userInteractionEnabled = false
        }
        dispatch_after(time, dispatch_get_main_queue(), {
        //After delay
        for imageView in self.ticTacImages {
            imageView.userInteractionEnabled = true
            }
        self.aiTurn()
        })

    }
 var varChanger: Int?
    var playerMark: String?

    func setImageForSpot(spot:Int,player:Player){
        if varChanger == 1 {
            playerMark = player == .UserPlayer ? "blue_x" : "blue_o"
        }
        else if varChanger == 2 {
            playerMark = player == .UserPlayer ? "green_x" : "green_o"
        }
        else if varChanger == 3 {
            playerMark = player == .UserPlayer ? "purple_x" : "purple_o"
        }
        else if varChanger == 4 {
            playerMark = player == .UserPlayer ? "pink_x" : "pink_o"
        }
        else if varChanger == 5 {
            playerMark = player == .UserPlayer ? "yellow_x" : "yellow_o"
        }
        else {
            playerMark = player == .UserPlayer ? "red_x" : "red_o"
        }


        println("setting spot \(player.toRaw()) spot \(spot)")
        plays[spot] = player.toRaw()

        ticTacImages[spot].image = UIImage(named: playerMark)

    }

