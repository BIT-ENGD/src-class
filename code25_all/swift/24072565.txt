@lazy
class Worker
{
  init(AnyObject context) { ... }
}

class Hive
{
  let context : AnyObject

  init(AnyObject context)
  {
    self.context = context
  }

  @lazy var worker = Worker(self.context)   // This does not work
}

class Hive
{
  // initializer and context constant elided

  let lazy = Lazy()

  class Lazy
  {
    var worker : Worker? = nil
    var token : dispatch_once_t = 0
  }

  var worker : Worker
  {
    get
    {
      dispatch_once(&lazy.token) { self.lazy.worker = Worker(self.context) }
      return lazy.worker!
    }
  }
}

