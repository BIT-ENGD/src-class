//A Getter for a strong property
- (SomeObject)lazilyLoadedObject {
    if (!_lazilyLoadedObject) {
        _lazilyLoadedObject = [[SomeObject alloc] init];
        __weak typeOf(self) weakSelf = self;
        _lazilyLoadedObject.blockProperty = ^(){//Some block which relies on weakSelf};
    }
    return _lazilyLoadedObject;
}

Global is external, but doesn't have external or weak linkage!
lazy var lazilyLoadedObject: SomeObject = {
    var instance = SomeObject()
    instance.closureProperty = {[weak self] in
        //Do something with weak self
    }
    return instance
}()

lazy var lazilyLoadedObject: SomeObject = instantiateLazilyLoadedObject(self)()
func instantiateLazilyLoadedObject() -> SomeObject {
        var instance = SomeObject()
        instance.closureProperty = {[weak self] in
            //Do something with weak self
        }
    return instance
}

