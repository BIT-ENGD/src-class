import Swift

protocol P { var name:String { get set } }

class A : P { var name:String = "A" }
class B : P { var name:String = "B" }
class C : P { var name:String = "C" }

func inspect(var p:P) { println("should only be C: \(p.name)") }
func inspect(var p:A) { println("a: \(p.name)") }
func inspect(var p:B) { println("b: \(p.name)") }

func failsToRetainType<T:P>(t:T) {
    print("inspecting \(t.name): ")

    //  let t = t.dynamicType
    inspect(t)
}

inspect(A())
inspect(B())
inspect(C())

failsToRetainType(A()) // expect A, get C
failsToRetainType(B()) // expect B, get C
failsToRetainType(C()) // expect C, get C

