-(id)getExistingVCFromClass:(Class)classVC
{
    return ([dict objectForKey: NSStringFromClass([classVC class])]);
}


-(void)storeExistingVCForClass:(id)referenceToVC ForClass:(Class)classVC
{
    [dict setObject:referenceToVC forKey:NSStringFromClass([classVC class])];
}

-(void)retrieveObject:(Class)classVC
{

        //check if we have a previous one
        id existingVC;

        if ((existingVC = [self getExistingVCFromClass:classVC]))
        {
           //i retrieved some object matching the class
        }
        else
        {
          // found nothing -> init a new instance
            id newVC= [[classVC alloc] init];
            [storeExistingVCForClass: newVC ForClass:classVC];
        }
}

func getExistingVCFromClass(type:AnyClass) -> AnyObject?
    {
        return (dict?.objectForKey(NSStringFromClass(type)));
    }

func storeExistingVCForClass(object:AnyObject, type:AnyClass)
    {
        dict?.setObject(object, forKey: NSStringFromClass(type));
    }

func retrieveObject(type:AnyClass)
    {
        var myObj:AnyObject?;

        myObj = self.getExistingVCFromClass(type);


        if (myObj == nil)
        {
           // not found -> init , but i dont know how!!
            let newObject:AnyObject = type(); -> not compiling
            let newObject:AnyObject = type.new(); -> not compiling
        }

    }

 required init(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
    }

    override init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!)
    {
        super.init(nibName: nibNameOrNil, bundle: nil)
    }

let myVC = MyViewController(nibName: "MyViewController", bundle: nil);

