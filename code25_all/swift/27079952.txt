tl;dr
tl;dr
SequenceType
class FrogBox {
    var _frogs = [Frog]()
    var frogs: SequenceType {
       return _frogs
    }
}

IEnumerable<T>
class FrogBox {
    private readonly ArrayList<Frog> _frogs = new ArrayList<Frog>();
    public IEnumerable<Frog> frogs { get { return _frogs; } }
}

NSArray
NSMutableArray
@interface FrogBox
@property (nonatomic, readonly) NSArray *frogs;
@end

@implementation FrogBox {
    NSMutableArray *_frogs;
}
@dynamic frogs;
- (instancetype)init {
    self = [super init];
    if (self) {
        _frogs = [NSMutableArray array];
    }
    return self;
}
- (NSArray*)frogs {
    return _frogs;
}
@end

FrogBox
typealias
Self
SequenceType
var frogs: SequenceType
FrogBox
SequenceOf<T>
class FrogBox {
    private var _frogs = [Frog]()
    var frogs: SequenceOf<Frog> {
        return SequenceOf<Frog>(_frogs)
    }
}

SequenceOf<T>
SequenceOf<T>
Array<T>
SequenceOf<T>
CollectionOf<T>
IList<T>
MutableCollectionType
Array<T>
MutableCollectionOf<T>
MutableCollectionType
