import Foundation
import UIKit
import SwiftHTTP

    public class DownloadQueue<T> {


    var request: HTTPTask;

    private var top: QNode<T>!

    init(){
        self.request = HTTPTask();
        self.top = QNode<T>();
    }


    func enQueue(var key: T) { //check for the instance
        if (top == nil) {
            top = QNode()
        } //establish the top node

        if (top.key == nil) {
            top.key = key;
            return
        }
        var childToUse: QNode<T> = QNode<T>()
        var current: QNode = top //cycle through the list of items to get to the end.

        while (current.next != nil) {
            current = current.next!
        } //append a new item

        childToUse.key = key;
        current.next = childToUse;
    }

    func deQueue() -> T? { //determine if the key or instance exists
        let topitem: T? = self.top?.key
        if (topitem == nil) {
            return nil
        }
        //retrieve and queue the next item
        var queueitem: T? = top.key! //use optional binding
        if let nextitem = top.next
        {
            top = nextitem
        } else {
            top = nil
        }
        return queueitem
    }

    func isEmpty() -> Bool {
        //determine if the key or instance exist
        if let topitem: T = self.top?.key
        {
            return false
        } else {
            return true
        }
    }

    func addDownload(url: NSString){
        enQueue(url as T);
        while (!isEmpty()){
            var item: T? = deQueue();
            println(item as NSString);
        }
    }



}

import Foundation
class  QNode<T> {
    var key: T? = nil
    var next: QNode? = nil
}

var queue: DownloadQueue<T> = DownloadQueue<T>() ;

