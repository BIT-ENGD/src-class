class API: NSObject {

    var data = NSData()
    var delegate: APIProtocol?

    func getItems(callback: (Array<Image>) -> ()) {
        let urlPath: NSString = "http://localhost:3000/files"
        let url = NSURL(string: urlPath)

        let request = NSMutableURLRequest(URL: url)
        request.HTTPMethod = "GET"
        request.addValue("application/json", forHTTPHeaderField: "Accept")

        let config = NSURLSessionConfiguration.defaultSessionConfiguration() as NSURLSessionConfiguration
        let session = NSURLSession(configuration: config) as NSURLSession

        var dataTask = NSURLSessionDataTask()
        dataTask = session.dataTaskWithRequest(request) { (data, response, error) in
            if (error == nil) {
                println("API at URL \(url)")

                let responseArray = NSJSONSerialization.JSONObjectWithData(data, options: .MutableContainers, error: nil) as NSArray
                var images = Image[]()
                for item: AnyObject in responseArray {
                    var location = Image(dict: item as NSDictionary)
                    images.append(location)
                }
                var img = images[0] as Image
                callback(images)

                //self.delegate?.didReceiveResponse(responseArray)
            }

        }
        dataTask.resume()
    }
}

tableView
self.tableView.reloadData()
callback()
dispatch_async()
tableView
api.getItems() { (theArray) in
    dispatch_async(dispatch_get_main_queue(), {
        self.images = theArray
        self.tableView.reloadData()
        if (viaPullToRefresh) {
            self.refreshControl.endRefreshing()
        }
    })
}

