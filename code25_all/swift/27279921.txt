import UIKit
import AVFoundation
import RSBarcodes

class ScanViewController: RSCodeReaderViewController {
@IBOutlet weak var label1Label: UILabel!
@IBOutlet weak var label2Label: UILabel!
@IBOutlet weak var scanLabel: UIButton!

var delegate: barcodesScannedDelegate?
var codes:[String] = []
override func viewDidLoad() {
    super.viewDidLoad()

    var code=""
    // Do any additional setup after loading the view.
    focusMarkLayer.strokeColor = UIColor.redColor().CGColor

    cornersLayer.strokeColor = UIColor.yellowColor().CGColor

    tapHandler = { point in
        //println(point)
    }

    barcodesHandler = { barcodes in

        for barcode in barcodes {
            if !contains(self.codes, barcode.stringValue) {
                self.codes.append(barcode.stringValue)
                code = barcode.stringValue
            }

        }
        println(code)
        self.label1Label.text = code
    }

}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}

@IBAction func finishedPressed(sender: UIButton) {
    delegate?.barcodesScanned(self.codes)
    self.dismissViewControllerAnimated(true, completion: nil)
}

@IBAction func cancelPressed(sender: UIButton) {
    self.dismissViewControllerAnimated(true, completion: nil)
}

protocol selectCarrierDelegate {
   func selectCarrier(carrierID: String,carrier: String)
}

protocol barcodesScannedDelegate {
    func barcodesScanned(barcodes: [String])
}

class InBoundViewController: UIViewController,selectCarrierDelegate,UIAlertViewDelegate,UITableViewDelegate,UITableViewDataSource,barcodesScannedDelegate {

func barcodesScanned(barcodes: [String]) {
    println("codes=\(barcodes)")
}

