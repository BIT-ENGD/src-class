import Cocoa
import Foundation

class FileSystemItem {

    let propertyKeys = [NSURLLocalizedNameKey, NSURLEffectiveIconKey, NSURLIsPackageKey, NSURLIsDirectoryKey,NSURLTypeIdentifierKey]
    let fileURL: NSURL

    var name: String! {
    let resourceValues = fileURL.resourceValuesForKeys([NSURLNameKey], error: nil)
        return resourceValues[NSURLNameKey] as? NSString
    }

    var localizedName: String! {
    let resourceValues = fileURL.resourceValuesForKeys([NSURLLocalizedNameKey], error: nil)
        return resourceValues[NSURLLocalizedNameKey] as? NSString
    }

    var icon: NSImage! {
    let resourceValues = fileURL.resourceValuesForKeys([NSURLEffectiveIconKey], error: nil)
        return resourceValues[NSURLEffectiveIconKey] as? NSImage
    }

    var dateOfCreation: NSDate! {
    let resourceValues = self.fileURL.resourceValuesForKeys([NSURLCreationDateKey], error: nil)
        return resourceValues[NSURLCreationDateKey] as? NSDate
    }

    var dateOfLastModification: NSDate! {
    let resourceValues = fileURL.resourceValuesForKeys([NSURLContentModificationDateKey], error: nil)
        return resourceValues[NSURLContentModificationDateKey] as? NSDate
    }

    var typeIdentifier: String! {
    let resourceValues = fileURL.resourceValuesForKeys([NSURLTypeIdentifierKey], error: nil)
        return resourceValues[NSURLTypeIdentifierKey] as? NSString
    }

    var isDirectory: String! {
    let resourceValues = fileURL.resourceValuesForKeys([NSURLIsDirectoryKey], error: nil)
        return resourceValues[NSURLIsDirectoryKey] as? NSString
    }

    var children: [FileSystemItem] {

        var childs: [FileSystemItem] = []
        var isDirectory: ObjCBool = ObjCBool(1)
        let fileManager = NSFileManager.defaultManager()
        var checkValidation = NSFileManager.defaultManager()

        if (checkValidation.fileExistsAtPath(fileURL.relativePath)) {

            if let itemURLs = fileManager.contentsOfDirectoryAtURL(fileURL, includingPropertiesForKeys:propertyKeys, options:.SkipsHiddenFiles, error:nil) {

                for fsItemURL in itemURLs as [NSURL] {

                    if (fileManager.fileExistsAtPath(fsItemURL.relativePath, isDirectory: &isDirectory))
                    {
                        if(isDirectory == true) {
                            let checkItem = FileSystemItem(fileURL: fsItemURL)
                            childs.append(checkItem)
                        }
                    }

                }
            }
        }
        return childs
    }

    init (fileURL: NSURL) {
        self.fileURL = fileURL
    }

    func hasChildren() -> Bool {
        return self.children.count > 0
    }

}


class OutlineViewController : NSObject, NSOutlineViewDataSource {

    let rootFolder : String = "/"
    let rootfsItem : FileSystemItem
    let fsItemURL : NSURL
    let propertyKeys = [NSURLLocalizedNameKey, NSURLEffectiveIconKey, NSURLIsPackageKey, NSURLIsDirectoryKey,NSURLTypeIdentifierKey]

    init() {

        self.fsItemURL = NSURL.fileURLWithPath(rootFolder)
        self.rootfsItem = FileSystemItem(fileURL: fsItemURL)

        for fsItem in rootfsItem.children as [FileSystemItem] {
            for fsSubItem in fsItem.children as [FileSystemItem] {
                println("\(fsItem.name) - \(fsSubItem.name)")
            }

        }
    }

    func outlineView(outlineView: NSOutlineView!, numberOfChildrenOfItem item: AnyObject!) -> Int {
        if let theItem: AnyObject = item {
            let tmpfsItem: FileSystemItem = item as FileSystemItem
            return tmpfsItem.children.count
        }
        return 1
    }

    func outlineView(outlineView: NSOutlineView!, isItemExpandable item: AnyObject!) -> Bool {
        if let theItem: AnyObject = item {
            let tmpfsItem: FileSystemItem = item as FileSystemItem
            return tmpfsItem.hasChildren()
        }
        return false
    }

    func outlineView(outlineView: NSOutlineView!, child index: Int, ofItem item: AnyObject!) -> AnyObject! {
        if let theItem: AnyObject = item {
            let tmpfsItem: FileSystemItem = item as FileSystemItem
            return tmpfsItem.children[index]
        }
        return rootfsItem
    }

    func outlineView(outlineView: NSOutlineView!, objectValueForTableColumn tableColumn: NSTableColumn!, byItem item: AnyObject!) -> AnyObject! {
        if let theItem: AnyObject = item {
            let tmpfsItem: FileSystemItem = item as FileSystemItem
            return tmpfsItem.localizedName
        }
        return "-empty-"
    }
}



class AppDelegate: NSObject, NSApplicationDelegate {

    @IBOutlet var window: NSWindow

    func applicationDidFinishLaunching(aNotification: NSNotification?) {
        // Insert code here to initialize your application

    }

    func applicationWillTerminate(aNotification: NSNotification?) {
        // Insert code here to tear down your application

    }
}

