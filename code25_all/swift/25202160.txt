cellForRowAtIndexPath:
cellForRowAtIndexPath:
func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -> UITableViewCell! {

    let cell:customCell = self.tableView?.dequeueReusableCellWithIdentifier("customCell")! as customCell
    let rowData: NSDictionary = self.tableData[indexPath.row] as NSDictionary
    let imageSwipeLeft = UISwipeGestureRecognizer(target: self, action: "imageSwiped:")
        imageSwipeLeft.direction = .Left
    let urlString: NSString = rowData["testImage"] as NSString

    self.indexPathArray += [indexPath]

    cell.testLabel.text = "Test Label"

    cell.testImage.image = image
    cell.testImage.tag = indexPath.row
    cell.testImage.addGestureRecognizer(imageSwipeLeft)
    cell.testImage.userInteractionEnabled = true

    ImageLoader.sharedLoader.imageForUrl(urlString, completionHandler:{(image: UIImage?, url: String) in
        cell.testImage.image = image
        cell.testImage.layer.borderWidth = 6;
        cell.testImage.layer.borderColor = UIColor.whiteColor().CGColor
        cell.testImage.clipsToBounds = true
        cell.placeholderLoading.stopAnimating()
    })

    return cell
}


func imageSwiped(recognizer: UISwipeGestureRecognizer) {
   let testData: NSDictionary = self.tableData[recognizer.view.tag] as NSDictionary
   let imageSlide = recognizer.view as UIImageView

   var imageURL = testData["image"] as String
   ImageLoader.sharedLoader.imageForUrl(imageURL, completionHandler:{(image: UIImage?, url: String) in
        UIView.transitionWithView(imageSlide,
           duration:0.44,
           options: .TransitionCrossDissolve,
           animations: { imageSlide.image = image },
           completion: nil)
   })

   let indexPath = self.indexPathArray[recognizer.view.tag] as NSIndexPath
   let cell = self.tableView?.cellForRowAtIndexPath(indexPath)as customCell
   cell.testLabel.text = "Test"
}

