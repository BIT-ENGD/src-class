public struct Bar {
    var i: Int = 0
}


public struct Foo {}

extension Foo {


    public init(shorthand segments:[Bar]) {

        let s = segments[0..<2]
        let leftSegs = sliceFrom(segments) { (s:Bar) in true } // [Segment] does not conform to protocol Resliceable
    }
}

protocol Resliceable {
    typealias Element

    var startIndex: Int { get }
    var endIndex: Int { get }
    subscript (index: Int) -> Element { get }
    subscript (subRange: Range<Int>) -> Slice<Element> { get }

    // extensions
    var count: Int { get }
    var capacity: Int { get }
    var isEmpty: Bool { get }
    var first: Element? { get }
    var last: Element? { get }
}

extension Array : Resliceable {}
extension Slice : Resliceable {}


func sliceFrom<S:Resliceable, T where T == S.Element>(s: S,
    from fn: (T) -> Bool) -> Slice<T> {

        for i in s.startIndex ..< s.endIndex {
            if fn(s[i]) { return s[i..<s.endIndex] }
        }

        return s[s.endIndex..<s.endIndex]
}

let leftSegs = sliceFrom(segments) { (s:Bar) in true } // [Segment] does not conform to protocol Resliceable

