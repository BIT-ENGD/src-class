strings
pdfFile
pdfscanner
pdfPage
"getString"
@implementation FFStringExtractor

- (instancetype)init
{
self = [super init];
if (self) {
    self.pdfStrings = [[NSMutableArray alloc] init];
}

return self;
}

- (void) extractStringsFromPDFPage: (CGPDFPageRef) page {

CGPDFContentStreamRef contentStream = CGPDFContentStreamCreateWithPage(page);

// get the strings
CGPDFOperatorTableRef operatorTable = CGPDFOperatorTableCreate();
CGPDFOperatorTableSetCallback(operatorTable, "Tj", getString);

FFStringExtractor *currentExtractor = self;

CGPDFScannerRef scanner = CGPDFScannerCreate(contentStream, operatorTable, (__bridge void*)currentExtractor);
CGPDFScannerScan(scanner);

//releases
CGPDFOperatorTableRelease(operatorTable);
CGPDFScannerRelease(scanner);
CGPDFContentStreamRelease(contentStream);

}

@end


void getString (CGPDFScannerRef pageScanner, void *info) {

CGPDFStringRef pdfString;
CGPDFScannerPopString(pageScanner, &pdfString);

const unsigned char *byteString = CGPDFStringGetBytePtr(pdfString);

NSString *macRomanDecode = [NSString stringWithCString:byteString encoding:NSMacOSRomanStringEncoding];

FFStringExtractor *currentObject = (__bridge FFStringExtractor*) info;
[currentObject.pdfStrings addObject:macRomanDecode];

}

func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject?) -> Bool {

    //Get the Data from the preview open in... menu

    //let macBookUrl = NSURL(fileURLWithPath: "/Users/vmalterre/Documents/Xcodes/TESTDOC.pdf")

    let doc = CGPDFDocumentCreateWithURL(url)
    //let doc = = CGPDFDocumentCreateWithURL(macBookUrl)

    let sharedStore = FFDataStore.sharedStore
    sharedStore.addFileWithDoc(doc)

    return true
}

