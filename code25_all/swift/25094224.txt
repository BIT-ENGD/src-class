APIDelegate
init(delegate: APIDelegateProtocol?) {
    self.delegate = delegate
}

func get(url: String, params: NSDictionary?) {
    ...blah blah...
    let manager = AFHTTPSessionManager(baseURL: baseURL, sessionConfiguration: sessionConfig)        
    manager.GET(
        url,
        parameters: params,
        success: { (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
            let httpResponse: NSHTTPURLResponse = task.response as NSHTTPURLResponse
            if httpResponse.statusCode == 200 {
                self.delegate?.didReceiveAPIResults(responseObject as NSDictionary)
            } else {
                NSLog("GET Error -> Code: \(httpResponse.statusCode), Msg: \(responseObject)")
            }
        },
        failure: { (task: NSURLSessionDataTask!, error: NSError!) in
            dispatch_async(dispatch_get_main_queue(), {
                UIAlertView(title: "Networking Error", message: "GET Error -> \(url) -> \(error.localizedDescription)", delegate: nil, cancelButtonTitle: "OK").show()
                }
            )
        }
    )
}

AFHTTPSessionManager
+ (ITunesClient *)sharedClient {
    static ITunesClient *_sharedClient = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        NSURL *baseURL = [NSURL URLWithString:@"https://itunes.apple.com/"];

        NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];
        [config setHTTPAdditionalHeaders:@{ @"User-Agent" : @"TuneStore iOS 1.0"}];

        NSURLCache *cache = [[NSURLCache alloc] initWithMemoryCapacity:10 * 1024 * 1024
                                                          diskCapacity:50 * 1024 * 1024
                                                              diskPath:nil];

        [config setURLCache:cache];

        _sharedClient = [[ITunesClient alloc] initWithBaseURL:baseURL
                                         sessionConfiguration:config];
        _sharedClient.responseSerializer = [AFJSONResponseSerializer serializer];
    });

    return _sharedClient;
}

AFHTTPSessionManager
AFHTTPSessionManager
APIDelegate
AFHTTPSessionManager
