struct Size {
    var width:Double=0
    var height:Double=0
    init(width:Double=0,height:Double=0)
    {
        self.width=width
        self.height=height
    }
    [...]
}

func /<T>(lhs:Size,rhs:T)->Size
{
    return Size(width:lhs.width/Double(rhs),height:lhs.height/Double(rhs))
}

error: cannot invoke 'init' with an argument list of type '(width: Double, height: Double)'
        return Size(width:Double(lhs.width/rhs),height:Double(lhs.height/rhs))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

func /<T>(lhs:Size,rhs:T)->Size
{
    let drhs=Double(rhs)
    return Size(width:lhs.width/drhs,height:lhs.height/drhs)
}

error: cannot invoke 'init' with an argument of type 'T'
    let drhs=Double(rhs)
             ^~~~~~~~~~~

extension Double {
    init(_ v: UInt8)
    init(_ v: Int8)
    init(_ v: UInt16)
    init(_ v: Int16)
    init(_ v: UInt32)
    init(_ v: Int32)
    init(_ v: UInt64)
    init(_ v: Int64)
    init(_ v: UInt)
    init(_ v: Int)
}

extension Double {
    init(_ v: Float)
    init(_ v: Float80)
}

