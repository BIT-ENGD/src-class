:class
@objc
@objc
@objc
@objc protocol ProtocolObjC {}
protocol ProtocolClass: class {}

sizeof(ProtocolObjC)  // -> 8
sizeof(ProtocolClass) // -> 16

@objc
@objc protocol ProtocolObjC {}
protocol ProtocolClass: class {}

let obj:AnyObject = NSObject()

obj is ProtocolObjC  // -> false
obj is ProtocolClass // < [!] error: cannot downcast from 'AnyObject' to non-@objc protocol type 'ProtocolClass'

@objc
@objc protocol ProtocolObjC {
    optional func foo()
}
protocol ProtocolClass: class {
    optional func foo() // < [!] error: 'optional' can only be applied to members of an @objc protocol
}

: class
@objc
enum MyEnum { case A,B,C }

@objc protocol ProtoObjC {

    // Generics
    typealias FooType
    var foo:FooType {get set}

    // Tuple
    var bar:(Int,Int) {get set}

    // Enum
    var baz:MyEnum {get set}
}

