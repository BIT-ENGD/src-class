class iapController: UIViewController, SKPaymentTransactionObserver, SKProductsRequestDelegate {

var product:SKProduct!

class func offerUnlockLevels() {
    SKPaymentQueue.defaultQueue().addTransactionObserver(self)
    getProductInfo()
    let payment:SKPayment = SKPayment (product: product)
    SKPaymentQueue.defaultQueue().addPayment(payment)
}

func paymentQueue(queue: SKPaymentQueue!, updatedTransactions transactions: [AnyObject]!) {
    for transaction:AnyObject in transactions {
        if let trans:SKPaymentTransaction = transaction as? SKPaymentTransaction {
            switch trans.transactionState {
            case .Purchased:
                println("inside purchased")
                self.openAllLevels()
                SKPaymentQueue.defaultQueue().finishTransaction(transaction as SKPaymentTransaction)
                break
            case .Failed:
                println("inside failed")
                SKPaymentQueue.defaultQueue().finishTransaction(transaction as SKPaymentTransaction)
                break
            case .Restored:
                println("inside restored")
                SKPaymentQueue.defaultQueue().restoreCompletedTransactions()
                break
            default:
                break
            }
        }
    }
}


func openAllLevels() {
    println("inside openAllLevels()")
    unlockAllLevelsButton.hidden = true
    for var i=0; i<20; i++ {
        levelCollectionButtons[i].setBackgroundImage(nil, forState: .Normal)
    }
}

func productsRequest (request: SKProductsRequest!, didReceiveResponse response: SKProductsResponse!) {
    let products = response.products
    println(products)
    if products.count != 0
    {
        product = products[0] as SKProduct
        println(product.localizedTitle + "\n" + product.localizedDescription)
    }
}

func getProductInfo() { //Checks if user can make IAP (has itunes account)
    if (SKPaymentQueue.canMakePayments()) {
        let productID:NSSet = NSSet(object: "Zero.UnlockAllLevels") //Hold our product ID
        let request:SKProductsRequest = SKProductsRequest(productIdentifiers: productID)
        request.delegate = self
        request.start()
    }
}

}

