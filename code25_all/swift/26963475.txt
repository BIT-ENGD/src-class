compose
func compose<A,B,C>(f:(B -> C))(g: (A -> B)) -> A -> C {
    return { f(g($0)) }
}

not
isEven
func not(value: Bool) -> Bool {
    return !value
}

func even(value: Int) -> Bool {
    return value % 2 == 0
}

odd
not
even
func odd(value: Int) -> Bool {
    return compose(not)(isEven)(value)
}

compose
..
compose
..
infix operator .. { associativity left }
func ..<A,B,C>(f:(B -> C))(g: (A -> B)) -> A -> C {
    return { f(g($0)) }
}

infix operator .. { associativity left }
func ..<A,B,C>(f: (B -> C), g: (A -> B)) -> A -> C {
    return { f(g($0)) }
}

odd
func odd(value: Int) -> Bool {
    return (not..even)(value)
}

let odd = not..even

..
+
let array = [1,2,3,4]
array.map((+1))

