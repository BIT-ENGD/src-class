let firstCircle = SKSpriteNode(imageNamed: "Circle")
firstCircle.physicsBody = SKPhysicsBody(circleOfRadius: 7)
firstCircle.physicsBody?.affectedByGravity = false

let wall = SKSpriteNode(imageNamed: "Circle")
wall.physicsBody = SKPhysicsBody(circleOfRadius: 50)
wall.physicsBody?.affectedByGravity = false

firstcircle
wall
firstcircle
wall
let scale:CGFloat = 10.0
let damping:CGFloat = 0.94

var departCircleLocation = CGPoint()
var departTouchLocation = CGPoint()
var currentTouchLocation = CGPoint()
var isTouchActive = false

override func touchesBegan(touches: NSSet, withEvent event: UIEvent)
{
    isTouchActive = true

    for touch: AnyObject in touches
    {
        departTouchLocation = touch.locationInNode(self)
    }

    departCircleLocation = firstCircle.position
    currentTouchLocation = departTouchLocation
}

override func touchesMoved(touches: NSSet, withEvent event: UIEvent)
{
    for touch: AnyObject in touches
    {
        currentTouchLocation = touch.locationInNode(self)
    }

    moveCircles()
}

override func touchesEnded(touches: NSSet, withEvent event: UIEvent)
{
    isTouchActive = false
}

override func update(currentTime: NSTimeInterval)
{
    moveCircle()
}

func moveCircle()
{        
    if isTouchActive
    {
        var dx = CGFloat(departCircleLocation.x - departTouchLocation.x + currentTouchLocation.x - firstCircle.position.x) * scale
        var dy = CGFloat(departCircleLocation.y - departTouchLocation.y + currentTouchLocation.y - firstCircle.position.y) * scale
        firstCircle.physicsBody?.velocity = CGVectorMake(dx, dy)
    }
    else
    {
        let dx = firstCircle.physicsBody!.velocity.dx * damping
        let dy = firstCircle.physicsBody!.velocity.dy * damping
        firstCircle.physicsBody!.velocity = CGVectorMake(dx, dy)    
    }
}

