public func response(priority: Int = DISPATCH_QUEUE_PRIORITY_DEFAULT, queue: dispatch_queue_t? = nil, serializer: (NSURLRequest, NSHTTPURLResponse?, NSData?, NSError?) -> (AnyObject?, NSError?), completionHandler: (NSURLRequest, NSHTTPURLResponse?, AnyObject?, NSError?) -> Void) -> Self {
NSLog("markse-response")

    dispatch_async(self.delegate.queue, {
NSLog("markse-see me")
        dispatch_async(dispatch_get_global_queue(priority, 0), {
            if var error = self.delegate.error {
                dispatch_async(queue ?? dispatch_get_main_queue(), {
                    completionHandler(self.request, self.response, nil, error)
                })
            } else {
                let (responseObject: AnyObject?, serializationError: NSError?) = serializer(self.request, self.response, self.delegate.data, nil)

                dispatch_async(queue ?? dispatch_get_main_queue(), {
                    completionHandler(self.request, self.response, responseObject, serializationError)
                })
            }
        })
    })

    return self
}

import Alamofire

class SettingsListCommand: AsynchronousCommand {

    override func execute() {
        if cancelled { return }

        let endpoint = "https://api.github.com/users/cog404/orgs"

        DLogVerbose("AF request")
        weak var weakSelf = self
        Alamofire.request(.GET,
            endpoint,
            parameters:nil)
            .responseJSON {(request, response, JSON, error) in
                DLogVerbose("AF response")
                if let strongSelf = weakSelf {
                    if strongSelf.cancelled {
                        strongSelf.finish()
                        return
                    }
                    DLogVerbose(JSON)
                    strongSelf.finish()
                }
        }
    }

}

