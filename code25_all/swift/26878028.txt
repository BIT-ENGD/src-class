Thread 1: EXC_BAD_ACCESS (code=1, address=0x0)

import Foundation
import CoreData

@objc(Show)
class Show: NSManagedObject {

    @NSManaged var dateUpdated: NSDate
    @NSManaged var fontFilename: String
    @NSManaged var fontName: String
    @NSManaged var idShow: NSNumber
    @NSManaged var isActive: NSNumber
    @NSManaged var productIdentifier: String
    @NSManaged var title: String

}

func fetchShows() -> Array<AnyObject>?
{
    // This function will fetch data for all available shows.
    // Return value will be an array of dictionaries (i.e. [0]->{Show, Characters})
    // i.e. Show Title, Store Product Identifier, Font, Characters, etc.
    var results = Array<AnyObject>()

    let context:NSManagedObjectContext = self.managedObjectContext!
    var error: NSError?
    var fetchRequest = NSFetchRequest()
    let entity = NSEntityDescription.entityForName("Show", inManagedObjectContext: context)
    fetchRequest.entity = entity

    let fetchedObjects = context.executeFetchRequest(fetchRequest, error: &error)! as Array
    for item in fetchedObjects
    {
        var showData = Dictionary<String, AnyObject>()
        let show: Show = item as Show
        showData.updateValue(show, forKey: "show")

        // Get Characters
        showData.updateValue(self.fetchCharactersForShow(show.idShow)!, forKey: "characters")
        results.append(showData)

        // Test
        self.printShow(show.idShow) //NOTE - THIS METHOD CREATES A NEW FETCH REQUEST USING THE PROVIDED SHOW ID AND SUCCESSFULLY PRINTS OUT THE SHOW DATA
    }
    return results
}

    //TESTING
    self.shows = CoreDataManager().fetchShows()!
    let showData = self.shows[0] as Dictionary<String, AnyObject>
    let show = showData["show"] as Show
    println("TEST: Show \(show.title) is active: \(show.isActive.boolValue)")
    /******/

