class A{
    var b:B?
    init(){
        b = B(callback)
    }

    func callback(name:String){
        print("name: \(name)")
    }

    func trigger(){
        if b != nil{
            b!.somethingHappenedHenceCallback()
        }
    }
}
class B{
    var method:((name:String)->Void)
    init(method:(name:String)->Void){
        self.method = method
    }

    func somethingHappenedHenceCallback(){
        if method != nil{
            method(name: "From class B")
        }
    }
}
var a:A = A()
a.trigger()

class A{
    var b:B?
    init(){
        b = B(a:self)
    }

    func callback(name:String){
        print("name: \(name)")
    }

    func trigger(){
        if b != nil{
            b!.somethingHappenedHenceCallback()
        }
    }
}
class B{
    var a:A?
    init(a:A){
        self.a = a
    }

    func somethingHappenedHenceCallback(){
        if a != nil{
            a!.callback("From class BB")
        }
    }
}

var a:A = A()
a.trigger()

