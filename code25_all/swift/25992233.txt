protocol KeyTypePair: Hashable {
    typealias val

    var key: String { get }
    var type: Any.Type { get }
}

public struct KeyTypePairOf<T>: KeyTypePair {
    typealias val = T

    let _key: String
    let _type: Any.Type

    public var key: String {
        get {
            return _key
        }
    }

    public var type: Any.Type {
        get {
            return _type
        }
    }

    public var hashValue: Int {
        get {
            return _key.hashValue
        }
    }

    public init(key: String) {
        self._key = key
        self._type = T.self
    }

    init<T: KeyTypePair>(property: T) {
        self._key = pair.key
        self._type = pair.type
    }

    func matches<T: KeyTypePair>(pair:T) -> Bool {
        let x = self._type == pair.type // invalid, how do I check equal types?
        return self._key == pair.key && x
    }

}

