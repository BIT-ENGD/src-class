class Person: NSManagedObject {

@NSManaged var name: String
@NSManaged var mood: String

}

var userDrivenDataChange : Bool = false

func controllerWillChangeContent(controller: NSFetchedResultsController) {
    if userDrivenDataChange{
        return
    }
    tblView.beginUpdates()
}

func tableView(tableView: UITableView, moveRowAtIndexPath sourceIndexPath: NSIndexPath, toIndexPath destinationIndexPath: NSIndexPath) {
    userDrivenDataChange = true

    var context = (UIApplication.sharedApplication().delegate as AppDelegate).managedObjectContext!
    var entity = NSEntityDescription.entityForName("Person", inManagedObjectContext: context)
    var secInfo = fetchedResultController.sections![destinationIndexPath.section] as NSFetchedResultsSectionInfo

    var personToAmend = fetchedResultController.objectAtIndexPath(sourceIndexPath) as Person

    var copyOfPerson = Person(entity: entity!, insertIntoManagedObjectContext: context)
    copyOfPerson.name = personToAmend.name
    copyOfPerson.mood = secInfo.name!

    context.deleteObject(personToAmend)

    var err : NSError?
    if !context.save(&err){
        println(err)
    }

    userDrivenDataChange = false
}

lazy var fetchedResultController : NSFetchedResultsController = {
    let fetchRequest = NSFetchRequest(entityName: "Person")
    let context = (UIApplication.sharedApplication().delegate as AppDelegate).managedObjectContext!
    let sort = NSSortDescriptor(key: "mood", ascending: true)
    fetchRequest.sortDescriptors = [sort]
    let frc = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: "mood", cacheName: nil)
    frc.delegate = self
    return frc
}()

