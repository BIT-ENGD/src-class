class IsometricMap {

let map = SKNode()
let mapLayout = Array<Array<Int>>()
let numColumns: Int
let numRows: Int
let tileHeight: Int
let tileWidth:Int
let grassNode: SKSpriteNode
let wallNode: SKSpriteNode

init(mapLayout: Array<Array<Int>>,numColumns: Int, numRows: Int, tileHeight: Int, tileWidth: Int) {
    self.mapLayout = mapLayout
    self.numColumns = numColumns
    self.numRows = numRows
    self.tileHeight = tileHeight
    self.tileWidth = tileWidth
    self.grassNode = SKSpriteNode(color: UIColor.greenColor(), size: CGSizeMake(CGFloat(tileHeight), CGFloat(tileWidth)))
    self.wallNode = SKSpriteNode(color: UIColor.brownColor(), size: CGSizeMake(CGFloat(tileHeight), CGFloat(tileWidth)))
}

func drawMap() {
    var tileType: Int
    var columnCount = 0
    var rowCount = 0
    for column in mapLayout {
        for row in column {
            var xPos = columnCount * tileWidth
            var yPos = rowCount * tileHeight
            tileType = mapLayout[columnCount][rowCount]
            placeTile(tileType, xPos: CGFloat(xPos), yPos: CGFloat(yPos))
            ++rowCount
        }
        ++columnCount
    }
}

func placeTile(tileType: Int, xPos: CGFloat, yPos: CGFloat) {
    switch tileType{
    case 0:
        grassNode.position = CGPointMake(xPos, yPos)
        map.addChild(grassNode)
    case 1:
        wallNode.position = CGPointMake(xPos, yPos)
        map.addChild(wallNode)
    default:self
        println("Out of range error")
    }
}

class GameScene: SKScene {

let simpleMap = [[1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1]]

override func didMoveToView(view: SKView) {
    /* Setup your scene here */
    let myLabel = SKLabelNode(fontNamed:"Chalkduster")
    myLabel.text = "Hello, World!";
    myLabel.fontSize = 65;
    myLabel.position = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMidY(self.frame));

    let starterMap = IsometricMap(mapLayout: simpleMap, numColumns: 6, numRows: 6, tileHeight: 50, tileWidth: 50)
    starterMap.drawMap()
    self.addChild(starterMap.map)

    //self.addChild(myLabel)
}

override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
    /* Called when a touch begins */
}

override func update(currentTime: CFTimeInterval) {
    /* Called before each frame is rendered */
}

