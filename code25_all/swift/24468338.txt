#import <UIKit/UIKit.h>
#import "Example_Swift-Swift.h"

@interface NewsFeedTableViewController : UITableViewController<NSXMLParserDelegate>

@property int newsNumber;

@property (strong, nonatomic) NSString *newsName;
@property (strong, nonatomic) NSString *newsRSSLink;
@property (strong, nonatomic) NSString *mediaData;
@property (strong, nonatomic) NSString *colorData;

@property (strong, nonatomic) NSXMLParser *parser;
@property (strong, nonatomic) NSMutableArray *feeds;
@property (strong, nonatomic) NSMutableDictionary *item;
@property (strong, nonatomic) NSMutableString *TitleR;
@property (strong, nonatomic) NSMutableString *description;
@property (strong, nonatomic) NSMutableString *image;
@property (strong, nonatomic) NSMutableString *media;
@property (strong, nonatomic) NSMutableString *date;
@property (strong, nonatomic) NSMutableString *Link;
@property (strong, nonatomic) NSString *element;
@property (strong, nonatomic) NSDictionary *attribues;

@end

#import "NewsFeedCTempTableViewController.h"

@interface NewsFeedCTempTableViewController ()

@end

@implementation NewsFeedCTempTableViewController

@synthesize newsName, newsNumber, newsRSSLink, mediaData, colorData;
@synthesize parser, feeds, item, TitleR, description, date, image, media, Link, element, attribues;

- (instancetype)initWithStyle:(UITableViewStyle)style
{
    self = [super initWithStyle:style];
    if (self) {
        // Custom initialization
 }
 return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];

    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
    self.title = newsName;

    feeds = [[NSMutableArray alloc] init];
    NSURL *url = [NSURL URLWithString:@"http://feeds.bbci.co.uk/news/rss.xml"];
    parser = [[NSXMLParser alloc] initWithContentsOfURL:url];

    [parser setDelegate:self];
    [parser setShouldResolveExternalEntities:YES];
    [parser setShouldProcessNamespaces:YES];
    [parser setShouldReportNamespacePrefixes:YES];
    [parser setShouldResolveExternalEntities:YES];
    [parser parse];
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
    mediaData = [NSString stringWithFormat:@"media:thumbnail width= %@",@"144"];


}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Table view data source

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{

    return 64;
}


- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return feeds.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell" forIndexPath:indexPath];
    if(cell == nil){
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@"Cell"];
    }
    cell.textLabel.text = [[feeds objectAtIndex:indexPath.row] objectForKey: @"title"];
    cell.detailTextLabel.numberOfLines = 2;
    cell.detailTextLabel.text = [[feeds objectAtIndex:indexPath.row] objectForKey: @"description"];
    cell.imageView.image = [UIImage imageNamed:[[feeds objectAtIndex:indexPath.row] objectForKey: @"media"]];

    return cell;
}

- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict {

    element = elementName;
    attribues = attributeDict;

    if ([element isEqualToString:@"item"]) {

        item    = [[NSMutableDictionary alloc] init];
        TitleR   = [[NSMutableString alloc] init];
        description  = [[NSMutableString alloc] init];
        date  = [[NSMutableString alloc] init];
        image  = [[NSMutableString alloc] init];
        media  = [[NSMutableString alloc] init];
        Link    = [[NSMutableString alloc] init];


    } 

}

-(void)parser:(NSXMLParser *)parser foundCDATA:(NSData *)CDATABlock{

    NSString *someString = [[NSString alloc] initWithData:CDATABlock encoding:NSUTF8StringEncoding];

    if ([element isEqualToString:@"description"]) {
       [description appendString:someString];
    }

}

- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string {

    if ([element isEqualToString:@"title"]) {
        [TitleR appendString:string];
    } else if ([element isEqualToString:@"description"]) {
        [description appendString:string];
    }
    else if ([element isEqualToString:@"pubDate"]) {
        [date appendString:string];
    }
    else if ([element isEqualToString:@"image"]) {
        [image appendString:string];
    }
    else if ([element isEqualToString:@"media:thumbnail"]) {
        [media appendString:[attribues objectForKey:@"url"]];
    }
    else if ([element isEqualToString:@"link"]) {
        [Link appendString:string];
    }
}

- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName {
    if ([elementName isEqualToString:@"item"]) {

        [item setObject:TitleR forKey:@"title"];
        [item setObject:description forKey:@"description"];
        [item setObject:date forKey:@"pubDate"];
        [item setObject:media forKey:@"media:thumbnail"];
        [item setObject:Link forKey:@"link"];

        [feeds addObject:[item copy]];

    }


}

- (void)parserDidEndDocument:(NSXMLParser *)parser {

    [self.tableView reloadData];

}

@end

import UIKit

class NewsfeedTableViewController: UITableViewController, NSXMLParserDelegate {

    var mediaThumbnailInt : Int = Int()

    var NewsFeedicon : String[] = []
    var NewsFeedtitle : String[] = []
    var NewsFeedurl : String[] = []
    var NewsFeedrss : String[] = []
    var NewsFeedobjects : String[] = []

    var FeedName : NSString = NSString()
    var FeedIcon : NSString = NSString()

    var newsNumber : Int = Int()
    var newsName : NSString = NSString()
    var newsRSSLink : NSString = NSString()
    var mediaData : NSString = NSString()
    var colorData : NSString = NSString()

    var NewsURL : NSURL = NSURL()

    var parseR : NSXMLParser = NSXMLParser()
    var feeds : NSMutableArray = NSMutableArray()

    var itemr : NSMutableDictionary = NSMutableDictionary()
    var TitleR : NSMutableString = NSMutableString()
    var descriptionR : NSMutableString = NSMutableString()
    var imageR : NSMutableString = NSMutableString()
    var media : NSMutableString = NSMutableString()
    var date : NSMutableString = NSMutableString()
    var Link : NSMutableString = NSMutableString()
    var element : NSString = NSString()
    var attribues : NSDictionary = NSDictionary()

    override func awakeFromNib() {
        super.awakeFromNib()
        if UIDevice.currentDevice().userInterfaceIdiom == .Pad {
            self.clearsSelectionOnViewWillAppear = false
            self.preferredContentSize = CGSize(width: 320.0, height: 600.0)
        }

    }

    override func viewDidLoad() {
        super.viewDidLoad()

        //feeds = NSMutableArray.alloc()
        NewsURL = NSURL(string: "http://feeds.bbci.co.uk/news/rss.xml")
        parseR = NSXMLParser(contentsOfURL: NewsURL)

        FeedName = "BBC News: Top Stories"
        FeedIcon = "BBCtile.png"

        parseR.delegate = self
        parseR.shouldResolveExternalEntities = true
        parseR.shouldProcessNamespaces = true
        parseR.shouldReportNamespacePrefixes = true
        parseR.shouldResolveExternalEntities = true
        parseR.parse()

        self.navigationItem.title = FeedName

        mediaData = "media:thumbnail width= 144"



        // Uncomment the following line to preserve selection between presentations
        // self.clearsSelectionOnViewWillAppear = false

        // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
        // self.navigationItem.rightBarButtonItem = self.editButtonItem
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // #pragma mark - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView?) -> Int {
        // #warning Potentially incomplete method implementation.
        // Return the number of sections.
        return 1
    }

    override func tableView(tableView: UITableView?, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete method implementation.
        // Return the number of rows in the section.
        return feeds.count
    }


    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as UITableViewCell

        // Configure the cell...
        cell.imageView.image = UIImage(named: "BBCtile.png")
        cell.textLabel.text = feeds.objectAtIndex(indexPath.row).objectForKey("title") as String
        cell.detailTextLabel.text = feeds.objectAtIndex(indexPath.row).objectForKey("description") as String

        return cell
    }

    func parser(parser: NSXMLParser!, didStartElement elementName: String!, namespaceURI: String!, attributes attributeDict: NSDictionary!)
    {

        element = elementName
        attribues = attributeDict

        if element.isEqualToString("item"){

            itemr = NSMutableDictionary.alloc()
            TitleR = NSMutableString.alloc()
            descriptionR = NSMutableString.alloc()
            date = NSMutableString.alloc()
            imageR = NSMutableString.alloc()
            media = NSMutableString.alloc()
            Link = NSMutableString.alloc()

        }


    }

    func parser(parser: NSXMLParser!, foundCDATA CDATABlock: NSData!){

        var dataString = NSString(data: CDATABlock, encoding: NSUTF8StringEncoding)

        if element .isEqualToString("description"){

            descriptionR.appendString(dataString)

        }

    }

    func parser(parser: NSXMLParser!, foundCharacters string: String!){

        if element.isEqualToString("title"){
            TitleR.appendString(string)
        }
        else if element.isEqualToString("description"){
            descriptionR.appendString(string)
        }
        else if element.isEqualToString("pubDate"){
            date.appendString(string)
        }
        else if element.isEqualToString("image"){
            imageR.appendString(string)
        }
        else if element.isEqualToString("media:thumbnail"){
            media.appendString(attribues.objectForKey("url") as String)
        }
        else if element.isEqualToString("link"){
            Link.appendString(string)
        }

    }

    func parser(parser: NSXMLParser!, didEndElement elementName: String!, namespaceURI: String!, qualifiedName qName: String!)
    {
        element = elementName

        if element.isEqualToString("item"){

            itemr.setObject(TitleR, forKey: "title")
            itemr.setObject(descriptionR, forKey: "description")
            itemr.setObject(date, forKey: "pubDate")
            itemr.setObject(media, forKey: "media:thumbnail")
            itemr.setObject(Link, forKey: "link")

            //var baseString = itemr.objectForKey("title") as String
            //println("Heres the test: \(baseString)")

            feeds.addObject(itemr.copy())


        }

        //println("Heres The Feed Test: \(feeds)")

    }

    func parserDidEndDocument(parser: NSXMLParser!){

        tableView.reloadData()

    }

}

