AProtocol
BProtocol
AProtocol
protocol AProtocol {
    // data
}

protocol BProtocol {
    func action<T: AProtocol>(completionHandle: (Bool, [T]?) -> ())
}

AProtocol
BProtocol
struct AStruct: AProtocol {

}

class BClass: BProtocol {
    var structs = [AStruct]()
    func action<T : AProtocol>(completionHandle: (Bool, [T]?) -> ()) {
        completionHandle(true, self.structs) // Compile error: "'AStruct' is not identical to 'T'"
    }
}

action
class BClass: BProtocol {
    var structs = [AStruct]()
    func action<T : AProtocol>(completionHandle: (Bool, [T]?) -> ()) {
        completionHandle(true, self.structs.map({$0 as T})) // Now the compile error has gone
    }

    func testAction() {
        self.action({ // Compile error: "Cannot convert the expression's type..."
            (boolValue, arrayOfStructs) in
            if boolValue {
                // Do something
            }
        })
    }
}

