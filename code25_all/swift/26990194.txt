protocol AControllerProtocol {
    func updateGui()
}

class AController {
    func doSomething(){
    // here I get incomming data and other stuff
    // then the gui in multiple views needs an update
    self.delegate.updateGui()
    }

    var delegate: AControllerProtocol
    init(delegate: AControllerProtocol) {
    self.delegate = delegate
    }
}

class BViewController: AController {
    @IBOutlet var tableView: UITableView!
    var acontroller : AController?

    override func viewDidLoad() {
    super.viewDidLoad()
    acontroller = AController(delegate: self)
    }

    func updateGui() {
    // dispatch_async(dispatch_get_main_queue(), {
    self.tableView!.reloadData()
    // works, it runs this method and this tables is inside this BViewController 
    // })
    }
}

class CViewController: AController {
    lazy var acontroller : AController = AController(delegate: self)

    @IBOutlet weak var tracksTableView: UITableView!

    func updateGui() {
        // dispatch_async(dispatch_get_main_queue(), {
        self.tracksTableView!.reloadData()
        // din't run, this table is only in this CViewController
        // it only did run BViewController updateGui()
    // })
    }
}

class BViewController: AController {
    @IBOutlet var tableView: UITableView!
    var acontroller : AController?

    override func viewDidLoad() {
        super.viewDidLoad()
        acontroller = AController(delegate: self)
    }

    func updateGui() {
    // dispatch_async(dispatch_get_main_queue(), {
    self.tableView!.reloadData()

    // get to know how to do this here
    CViewController.tracksTableView!.reloadData()
    // })
    }
}

class CViewController {
    @IBOutlet weak var tracksTableView: UITableView!
}

