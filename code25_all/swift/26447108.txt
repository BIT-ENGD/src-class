@IBAction func simulateTheDay(sender: UIButton) {
    if( self.iceCubesUsing == 0 || self.lemonsUsing == 0){
        showAlertMessage(message: "You need to use at least one lemon or ice cube")
    }

    var numberOfCustomers = 0;
    var winnings = 0;

    self.lemonToIceCubeRatio = self.lemonsUsing / self.iceCubesUsing
    self.lemonsToPurchase = 0
    self.iceCubesToPurchase = 0
    self.lemonsUsing = 0
    self.iceCubesUsing = 0
    self.customers = [];

    do{
        numberOfCustomers = Int(arc4random_uniform(UInt32(11)));
    }while( numberOfCustomers == 0)

    for(var i=0;i<numberOfCustomers;i++){
        self.customers.append(Customer(preference: Double(arc4random_uniform(UInt32(101)))/101.0))
    }
    winnings = standBrain.calculateWinnings(self.customers, acidity: self.lemonToIceCubeRatio)
    self.money += winnings

    updateAssets()
}

showAlertMessage(message: "You need to use at least one lemon or ice cube")
LemonadeStand`@objc LemonadeStand.ViewController.simulateTheDay (LemonadeStand.ViewController)(ObjectiveC.UIButton) -> () at ViewController.swift:
0x10466a800:  pushq  %rbp
0x10466a801:  movq   %rsp, %rbp
0x10466a804:  subq   $0x30, %rsp
0x10466a808:  movq   %rdx, -0x8(%rbp)
0x10466a80c:  movq   -0x8(%rbp), %rdx
0x10466a810:  movq   %rdi, -0x10(%rbp)
0x10466a814:  movq   %rdx, %rdi
0x10466a817:  movq   %rsi, -0x18(%rbp)
0x10466a81b:  movq   %rdx, -0x20(%rbp)
0x10466a81f:  callq  0x10466e1a4               ; symbol stub for: objc_retain
0x10466a824:  movq   -0x10(%rbp), %rdi
0x10466a828:  movq   %rax, -0x28(%rbp)
0x10466a82c:  callq  0x10466e1a4               ; symbol stub for: objc_retain
0x10466a831:  movq   -0x20(%rbp), %rdi
0x10466a835:  movq   -0x10(%rbp), %rsi
0x10466a839:  movq   %rax, -0x30(%rbp)
0x10466a83d:  callq  0x10466a0e0               ;     LemonadeStand.ViewController.simulateTheDay (LemonadeStand.ViewController)(ObjectiveC.UIButton) -> () at ViewController.swift:65
0x10466a842:  addq   $0x30, %rsp
0x10466a846:  popq   %rbp
0x10466a847:  retq   

