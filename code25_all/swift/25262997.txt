import CoreData

class Task: NSManagedObject {

    @NSManaged var area : Area
    @NSManaged var pictures : [TaskPicture]
    @NSManaged var events : [Event]

    @NSManaged var requestedByDept : NSString?
    @NSManaged var requestedByUser : NSString?
    @NSManaged var workloadDept : NSString?
    @NSManaged var detailDescription : NSString?
    @NSManaged var status : NSString
    @NSManaged var uniqueId : NSString?
    @NSManaged var isActive : NSNumber
    @NSManaged var created : NSDate?
    @NSManaged var modified : NSDate?
    @NSManaged var thumbnail : NSData?

}

import CoreData

class Event: NSManagedObject {


    @NSManaged var task : Task

    @NSManaged var actionBy : NSString?
    @NSManaged var detailDescription : NSString?
    @NSManaged var status : NSString
    @NSManaged var uniqueId : NSString?
    @NSManaged var isActive : NSNumber
    @NSManaged var created : NSDate?
    @NSManaged var modified : NSDate?
    @NSManaged var type : NSString

}

var fetchedResultsController: NSFetchedResultsController {
    if _fetchedResultsController != nil {
        return _fetchedResultsController!
        }

        let fetchRequest = NSFetchRequest()
        let entity = NSEntityDescription.entityForName("Task", inManagedObjectContext: self.managedObjectContext)
        fetchRequest.entity = entity

        fetchRequest.fetchBatchSize = 20

        let sortDescriptor = NSSortDescriptor(key: "created", ascending: false)

        fetchRequest.sortDescriptors = [sortDescriptor]

        let aFetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: self.managedObjectContext, sectionNameKeyPath: nil, cacheName: nil)
        aFetchedResultsController.delegate = self
        _fetchedResultsController = aFetchedResultsController

        var error: NSError? = nil
        if !_fetchedResultsController!.performFetch(&error) {
            println("Unresolved error \(error)")
            abort()
        }

        return _fetchedResultsController!
}

let foundTask : Task = self.fetchedResultsController.objectAtIndexPath(indexPath) as Task

let event = foundTask.events[0]
-[_NSFaultingMutableSet objectAtIndex:]: unrecognized selector sent to instance 0x17022e9c0

