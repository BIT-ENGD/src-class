func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {

        var cell = tableView.dequeueReusableCellWithIdentifier("cell", forIndexPath: indexPath) as GoalTableViewCell

        cell.priority = goalsArray[indexPath.row].priority as Priority //this causes no problems.
        println(cell.priority.toRaw()) //the getter causes a crash.
        //println(goalsArray[indexPath.row].priority.toRaw()) this Does Work.
        return cell
    }

var priority : Priority {
        get {
            if (self.priority == Priority.highPriority) {
                return Priority.highPriority
            } else if (self.priority == Priority.mediumPriority) {
                return Priority.mediumPriority
            } else if (self.priority == Priority.lowPriority) {
                return Priority.lowPriority
            } else {
                return Priority.defaultPriority
            }
        }

        set  {
            if (newValue == Priority.defaultPriority) {
                //action here.
            } else if (newValue == Priority.lowPriority) {
                //action here.
            } else if (newValue == Priority.mediumPriority) {
                //action here.
            } else if (newValue == Priority.highPriority) {
                //action here.
            }
        }
    }

if (self.priority == Priority.highPriority) {
enum Priority : Int {
    case defaultPriority = 0
    case lowPriority = 1
    case mediumPriority = 2
    case highPriority = 3
}

    set  {
        if (newValue == Priority.defaultPriority) {
            self.backgroundColor = UIColor.redColor
        } else if (newValue == Priority.lowPriority) {
            //action here.
        } else if (newValue == Priority.mediumPriority) {
            //action here.
        } else if (newValue == Priority.highPriority) {
            //action here.
        }
    }
}

