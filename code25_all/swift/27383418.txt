NSNotificationCenter.defaultCenter().addObserver(self, selector: "storesDidChange:", name: NSPersistentStoreCoordinatorStoresDidChangeNotification, object: nil)
NSNotificationCenter.defaultCenter().addObserver(self, selector: "storesWillChange:", name: NSPersistentStoreCoordinatorStoresWillChangeNotification, object: nil)
NSNotificationCenter.defaultCenter().addObserver(self, selector: "persistentStoreDidImportUbiquitousContentChanges:", name: NSPersistentStoreDidImportUbiquitousContentChangesNotification, object: nil)

[__NSCFArray storesDidChange:]: unrecognized selector sent to instance 0x166197f0
[NSFetchedResultsController storesDidChange:]: unrecognized selector sent to instance 

var persistentStack : PersistentStack { 
    return PersistentStack(storeURL: self.storeURL(), modelURL: self.modelURL())
}

init(storeURL : NSURL, modelURL : NSURL) {

    super.init()

    self.storeURL = storeURL
    self.modelURL = modelURL
    setupManagedObjectContext()

}    

func setupManagedObjectContext() {

    self.managedObjectContext = NSManagedObjectContext(concurrencyType: NSManagedObjectContextConcurrencyType.MainQueueConcurrencyType)
    self.managedObjectContext!.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
    self.managedObjectContext!.persistentStoreCoordinator = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel!)

    NSNotificationCenter.defaultCenter().addObserver(self, selector: "storesDidChange:", name: NSPersistentStoreCoordinatorStoresDidChangeNotification, object: nil)
    NSNotificationCenter.defaultCenter().addObserver(self, selector: "storesWillChange:", name: NSPersistentStoreCoordinatorStoresWillChangeNotification, object: nil)
    NSNotificationCenter.defaultCenter().addObserver(self, selector: "persistentStoreDidImportUbiquitousContentChanges:", name: NSPersistentStoreDidImportUbiquitousContentChangesNotification, object: nil)

    var error : NSError?

    self.managedObjectContext!.persistentStoreCoordinator?.addPersistentStoreWithType(NSSQLiteStoreType
        , configuration: nil, URL: self.storeURL, options: [NSPersistentStoreUbiquitousContentNameKey : "iCloudStore"], error: &error)

    if (error != nil) {
        NSLog("Error: \(error)")
    }
}

