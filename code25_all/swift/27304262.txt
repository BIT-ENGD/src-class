import UIKit

class TriggersViewController: UIViewController{

@IBOutlet var userTriggers:UIView!
@IBOutlet var saveButton:UIButton!

var triggersList:Array<String>!

override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
    loadTriggers()
    var prevInput = 250;
    for index in 0..<triggersList.count{

        //label for trigger
        var label = UILabel(frame: CGRectMake(0, 0, 200, 21))
        label.center = CGPointMake(120, CGFloat(prevInput))
        label.textAlignment = NSTextAlignment.Left
        label.text = triggersList[index]
        userTriggers.addSubview(label)

        //input box for trigger
        var input = UITextField(frame: CGRectMake(0, 0, 50, 21))
        input.center = CGPointMake(250, CGFloat(prevInput))
        input.text = "0";
        //add input to triggersView
        userTriggers.addSubview(input);

        //UIStepper
        var stepper = UIStepper(frame: CGRectMake(0, 0, 50, 21))
        stepper.center = CGPointMake(300, CGFloat(prevInput))
        stepper.addTarget(self, action: "stepperValueChanged:", forControlEvents: .ValueChanged)
        stepper.enabled = true
        //add stepper to triggersView
        userTriggers.addSubview(stepper);


        prevInput += 50 //increment for height

    }
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}

func stepperValueChanged(sender:UIStepper!){
    println("It Works, Value is --&gt;\(Int(sender.value).description)")
}

func loadTriggers(){
    var myDict: NSDictionary?

    if let path = NSBundle.mainBundle().pathForResource("UserConfigs", ofType: "plist") {
        myDict = NSDictionary(contentsOfFile: path)
    }
    if let dict = myDict {
        triggersList = dict["Triggers"] as Array<String>
    }
}

