println("The filter list is not empty filling data according to filters.")
        if let castedFilters = filters as? [Filter] {
            println("step 1")
            for filter in castedFilters{
                var parameters : [String : NSObject] = ["apisleutel": "#########", "module": "Objecten", "get": "Huur", "plaats": filter.plaats, "pt": filter.maximumprijs, "pv": filter.minimumprijs, "wov": filter.oppervlakte, "ka": filter.kamers, "output": "json"]

                self.makeCall(parameters) { responseObject, error in
                    let json = JSON(responseObject!)
                    /**/
                    let count: Int? = json["Response"]["objecten"]["object"].array?.count
                    if((count) != nil)
                    {
                        println("step 2: found \(count!) houses for "+filter.plaats)

                        if let ct = count {
                            for index in 0...ct-1 {
                                //Adding house to houses array
                                var adres = json["Response"]["objecten"]["object"][index]["adres"].string
                                let newHouse = House(straat: adres!)
                                self.houses.append(newHouses)
                            }
                        }
                    }
                    else
                    {
                        let alert = UIAlertView()
                        alert.title = "Fout"
                        alert.message = "No houses found, consider changing the filters."
                        alert.addButtonWithTitle("Ok")
                        alert.show()
                    }
                    return
                }

            }
            println("step 3")
            tableView.reloadData()
        }

func makeCall(parameters: [String : NSObject], completionHandler: (responseObject: NSDictionary?, error: NSError?) -> ()) {
    var heap: NSDictionary
    Alamofire.request(.GET, "http://www.huizenzoeker.nl/api/v2/", parameters: parameters)
        .responseJSON { request, response, responseObject, error in
            completionHandler(responseObject: responseObject as? NSDictionary, error: error)
    }
}

