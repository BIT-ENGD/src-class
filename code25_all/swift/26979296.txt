 import UIKit
 import CoreData

 class ViewController: UIViewController {

@IBOutlet weak var txtUsername: UITextField!
@IBOutlet weak var txtPassword: UITextField!


override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
}

override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
}

@IBAction func btnLoad(sender: UIButton) {
    //println("Load Button\(txtUsername.text)")
    var appDel:AppDelegate = (UIApplication.sharedApplication().delegate as AppDelegate)
    var context:NSManagedObjectContext=appDel.managedObjectContext!

    var request=NSFetchRequest(entityName: "Users")
    request.returnsObjectsAsFaults=false

    request.predicate=NSPredicate(format:"username=%@",""+txtUsername.text)

    var results:NSArray=context.executeFetchRequest(request, error:nil)!
    if results.count>0{
        //for res in results{
        //    println(res)
        var res=results[0] as NSManagedObject
        txtUsername.text=res.valueForKey("username")as String
        txtPassword.text=res.valueForKey("password") as String
        //}

    }else{
        println("0 results or potential error")
    }


}


@IBAction func btnSave(sender: UIButton) {


    var appDel:AppDelegate = (UIApplication.sharedApplication().delegate as AppDelegate)
    var context:NSManagedObjectContext=appDel.managedObjectContext!

    var newUser = NSEntityDescription.insertNewObjectForEntityForName("Users", inManagedObjectContext: context) as NSManagedObject
    newUser.setValue("\(txtUsername.text)", forKey: "username")
    newUser.setValue("\(txtPassword.text)", forKey: "password")

    context.save(nil)
    println(newUser)
    println("saved")
}

@IBAction func btnDelete(sender: UIButton) {
    var appDel:AppDelegate = (UIApplication.sharedApplication().delegate as AppDelegate)
    var context:NSManagedObjectContext=appDel.managedObjectContext!
    var delUser = NSEntityDescription.delete("Users")

    context.delete(nil)
}

