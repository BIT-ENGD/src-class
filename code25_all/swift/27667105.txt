import UIKit
import SpriteKit
var kViewTransformChanged = "view transform changed"
var scene = GameScene()
var skView = SKView()
var clearContentView = UIView()

extension SKNode {
    class func unarchiveFromFile(file : NSString) -> SKNode? {
        if let path = NSBundle.mainBundle().pathForResource(file, ofType: "sks") {
            var sceneData = NSData(contentsOfFile: path, options: .DataReadingMappedIfSafe, error: nil)!
            var archiver = NSKeyedUnarchiver(forReadingWithData: sceneData)

            archiver.setClass(self.classForKeyedUnarchiver(), forClassName: "SKScene")
            let scene = archiver.decodeObjectForKey(NSKeyedArchiveRootObjectKey) as GameScene
            archiver.finishDecoding()
            return scene
        } else {
            return nil
        }
    }
}

class GameViewController: UIViewController, UIScrollViewDelegate {

    override func viewDidLoad() {

        super.viewDidLoad()

        // Configure the view.
        skView = self.view as SKView
        skView.showsFPS = true
        skView.showsNodeCount = true

        /* Sprite Kit applies additional optimizations to improve rendering performance */
        skView.ignoresSiblingOrder = true

        /* Set the scale mode to scale to fit the window */
        scene.scaleMode = .AspectFill

        skView.presentScene(scene)

        var contentSize = skView.bounds.size
        contentSize.height *= 1.5
        contentSize.width *= 1.5
        scene.size = contentSize

        println(contentSize.height)
        println(contentSize.width)

        var scrollView = UIScrollView()
        scrollView.frame = skView.frame
        scrollView.contentSize = contentSize
        scrollView.delegate = self
        scrollView.maximumZoomScale = 3
        scrollView.minimumZoomScale = 1
        scrollView.indicatorStyle = UIScrollViewIndicatorStyle.White


        clearContentView.frame = CGRect(origin: CGPointZero, size: contentSize)

        clearContentView.backgroundColor = UIColor.clearColor()

        scrollView.addSubview(clearContentView)
        clearContentView.addObserver(self, forKeyPath: "transform", options: NSKeyValueObservingOptions(), context: &kViewTransformChanged)

        skView.addSubview(scrollView)

        //
        println("Finished viewDidLoad")
    }


    func viewForZoomingInScrollView() -> UIView? {
        println("entering viewForZoomingInScrollView function")
        return self.view
    }

    func scrollViewDidScroll() {
        println("entering scrollViewDidScroll function")
        adjustContent()
    }

    // NOT SURE ABOUT THIS FUNCTION
    func adjustContent() {
        println("entering adjustContent function")
        NSLog("?")
        var scrollV = self.view as UIScrollView
        scene.setScale(scrollV.zoomScale)
        scene.position = scrollV.contentOffset
    }

    func scrollViewDidZoom() {
        println("entering scrollViewDidZoom function")
        adjustContent()
    }

    func scrollViewDidTransform() {
        println("entering scrollViewDidTransform function")
        adjustContent()
    }

    func scrollViewDidEndZooming() {
        println("entering scrollViewDidEndZooming function")
        adjustContent()
    }

    override func shouldAutorotate() -> Bool {
        return true
    }

    override func supportedInterfaceOrientations() -> Int {
        if UIDevice.currentDevice().userInterfaceIdiom == .Phone {
            return Int(UIInterfaceOrientationMask.AllButUpsideDown.rawValue)
        } else {
            return Int(UIInterfaceOrientationMask.All.rawValue)
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Release any cached data, images, etc that aren't in use.
    }

    override func prefersStatusBarHidden() -> Bool {
        return true
    }
}

