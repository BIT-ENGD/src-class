 struct Card {
        var rank: Rank
        var suit: Suits

    func description() -> String {
        return "The \(rank.ofRank()) of \(suit.ofSuit())"
    }

    func createDeck() -> (Card[]){
        var deck = Card []()
        for rangeOfSuits in 1...4 {
            for rangeOfRanks in 1...13 {
                println("\(rangeOfRanks)")
                deck.append(Card(rank: Rank.fromRaw(rangeOfRanks)!, suit: Suits.fromRaw(rangeOfSuits)!))
            }
        }
        return (deck)
    }
}

 myDeck.createDeck()

func createDeck () -> (Card[]){
    var deck = Card []()
    for rangeOfSuits in 1...4 {
        for rangeOfRanks in 1...13 {
            deck.append(Card(rank: Rank.fromRaw(rangeOfRanks)!, suit: Suits.fromRaw(rangeOfSuits)!))
        }
    }
    return (deck)
}
    myDeck = createDeck()
    myDeck.count             //yields 52, as it should
    myDeck[51].description() //yields King of Clubs as it should.

