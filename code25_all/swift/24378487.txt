class PlayerHealth : SKNode {
    let healthBlock: SKSpriteNode
    let padding: CGPoint = CGPoint(x: 280, y: 730)

    var health: Int
    var healthBlocks: SKSpriteNode[] = []

    init(health: Int) {
        self.health = health
        self.healthBlock = SKSpriteNode(color: SKColor.greenColor(), size: CGSizeMake(8, 8))
        super.init()
        for i in 0..5 {
            healthBlocks.append(self.healthBlock.copy() as SKSpriteNode)
            let pos = CGPointMake(padding.x + Float(i) * 10, padding.y)
            healthBlocks[i].position = pos
            self.addChild(healthBlocks[i])  // array is empty here, but that doesn't stop the spritenode from making it's way into the scene
        }
        let notificationCenter = NSNotificationCenter.defaultCenter()
        notificationCenter.addObserver(self, selector: "deductHealth:", name: "playerDamaged", object: nil)
    }

    deinit {
        NSNotificationCenter
            .defaultCenter().removeObserver(self)
    }

    func deductHealth(amount: Int) {
        for i in 0..amount {

            // fails here, thinking that healthBlocks is empty
            let node = healthBlocks.removeLast()
            node.removeFromParent()
        }
    }

    func deductHealth(notification: NSNotification) {
        self.deductHealth(notification.object as Int)
    }
}

healthBlocks
healthBlocks
println
healthBlocks.removeLast()
