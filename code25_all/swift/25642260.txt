// RawOptionSetType implements BitwiseOperationsType, so LogFlag won't compile until it implements the operators there

struct LogFlag : RawOptionSetType, BooleanType { 
    private var value: Int32 = 0
    init(_ value: Int32) { self.value = value }
    var boolValue: Bool { return self.value != 0 }
    func toRaw() -> Int32 { return self.value }
    static func fromRaw(raw: Int32) -> LogFlag? { return self(raw) }
    static func fromMask(raw: Int32) -> LogFlag { return self(raw) }
    static func convertFromNilLiteral() -> LogFlag { return self(0) }

    static var Error:   LogFlag { return self(1 << 0) }
    static var Warn:    LogFlag { return self(1 << 1) }
    static var Info:    LogFlag { return self(1 << 2) }
    static var Debug:   LogFlag { return self(1 << 3) }
    static var Verbose: LogFlag { return self(1 << 4) }
}

func &(_: LogFlag, _:LogFlag) -> LogFlag { // What goes here? }

protocol BitwiseOperationsType {
    func &(_: Self, _: Self) -> Self
    func |(_: Self, _: Self) -> Self
    func ^(_: Self, _: Self) -> Self
    prefix func ~(_: Self) -> Self

    /// The identity value for "|" and "^", and the fixed point for "&".
    ///
    /// ::
    ///
    ///   x | allZeros == x
    ///   x ^ allZeros == x
    ///   x & allZeros == allZeros
    ///   x & ~allZeros == x
    ///
    class var allZeros: Self { get }
}

