    var isMoving = false
    var timeGapForNextRun = Int(0)
    var currentInterval = Int(0)
    init(isMoving: Bool, timeGapForNextRun: Int, currentInterval: Int) {
        self.isMoving = isMoving
        self.timeGapForNextRun = timeGapForNextRun
        self.currentInterval = currentInterval
}

func shouldRunBlock() -> Bool {
    return self.currentInterval >  self.timeGapForNextRun

}

func moveBlocks(){
    for(blocks, ObstacleStatus) in self.blockStatuses {
        var thisBlock = self.childNodeWithName(blocks)
        var thisBlock2 = self.childNodeWithName(blocks)
        if ObstacleStatus.shouldRunBlock() {
            ObstacleStatus.timeGapForNextRun = randomNum()
            ObstacleStatus.currentInterval = 0
            ObstacleStatus.isMoving = true
        }

        if ObstacleStatus.isMoving {
            if thisBlock?.position.y > blockMaxY{
                    thisBlock?.position.y -= CGFloat(self.fallSpeed)
            }else{
                thisBlock?.position.y = self.origBlockPosistionY
                ObstacleStatus.isMoving = false
            }
        }else{
                ObstacleStatus.currentInterval++
            }

    }
}

func randomNum() -> Int{
 return randomInt(50, max: 300)        
}

func randomInt(min: Int, max:Int) -> Int {
    return min + Int(arc4random_uniform(UInt32(max - min + 1)))
}

