class func getEntitiesFromJson(json: JSONValue) -> [NewsEntity]?{
    var rList : [NewsEntity] = []

    var array = json.array
    var countItr = array?.count ?? 0

    if(array == nil){
        return nil
    }

    if(countItr > 0){
        for index in 0...countItr-1{
            var news = NewsEntity()
            var jsonVal = array?[index]

            news.id = jsonVal?["id"].integer ?? 0
            ........

            rList.append(news)
        }
    }

    return rList
}

class GetAllNewsTask:NSOperation {

var result : Array<News>?

override func main() -> (){
    result = executeSync()
}

func executeSync() -> Array<News>? {
    let newsDao = NewsDAO()
    let entities = newsDao.findAll()

    return NewsModel.getVOsFromEntities(entities)
}

class UpdateAllNewsTask:NSOperation {

var result : Array<News>?

override func main() -> (){
    result = executeSync()
}

func executeSync() -> Array<News>? {

    let response = JsonServices.getAllNews()
    var managedObjectContext = (UIApplication.sharedApplication().delegate as AppDelegate).managedObjectContext!
    var entityDescription = NSEntityDescription.entityForName("NewsEntity", inManagedObjectContext: managedObjectContext)
    var entities = NewsModel.getEntitiesFromJson(response)

    //TODO insert new, update existing and remove old

    return GetAllNewsTask().executeSync()
}

List.removeAll(Collection<T>)
