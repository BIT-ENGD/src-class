    for dx in [-1, 0, 1] { // Fine
        for dy in (dx == 0) ? [-1, 1] : [0, (xIndex % 2) == 0 ? -1 : 1] { // Now fails
            // ...
        }
    }

func tilesAdjacentTo(#xIndex: Int, yIndex: Int) -> [HexTile] {
    var adjacent = [HexTile]()
    // We want to do this, where dy is -1 for even columns and +1 for odd
    // adjacent += self.pieces[xIndex + 0][yIndex + 1]
    // adjacent += self.pieces[xIndex + 0][yIndex - 1]
    // adjacent += self.pieces[xIndex + 1][yIndex + 0]
    // adjacent += self.pieces[xIndex + 1][yIndex + dy]
    // adjacent += self.pieces[xIndex - 1][yIndex + 0]
    // adjacent += self.pieces[xIndex - 1][yIndex + dy]
    for dx in [-1, 0, 1] {
        for dy in (dx == 0) ? [-1, 1] : [0, (xIndex % 2) == 0 ? -1 : 1] {
            let x = xIndex + dx
            let y = yIndex + dy
            if (x > 0) &&
                (x <= self.maxX) &&
                (y > 0) &&
                (y <= self.maxY)
            {
                adjacent += self.pieces[x][y]
            }
        }
    }
    //println("Adjacent \(adjacent.count)")
    return adjacent
}

