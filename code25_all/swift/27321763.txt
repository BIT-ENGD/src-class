protocol MathematicsProtocol : Equatable
{
    init(_ value: Int)
    init(_ value: Float)
    init(_ value: Double)

    func + (lhs: Self, rhs: Self) -> Self
    func - (lhs: Self, rhs: Self) -> Self
    func * (lhs: Self, rhs: Self) -> Self
    func / (lhs: Self, rhs: Self) -> Self
}
extension Int:    MathematicsProtocol {}
extension Float:  MathematicsProtocol {}
extension Double: MathematicsProtocol {}

struct MyRange<DataType : MathematicsProtocol>
{
    let start : DataType
    let end   : DataType
    let step  : DataType

    subscript(index: Int) -> DataType
    {
        get {
            assert(index < self.count)
            return start + DataType(index) * step
        }
    }

    var count : Int {
        return Int((end-start)/step) //not working
//      return 4
    }
}

func convert<DataType : MathematicsProtocol>(value : DataType) -> Int
{
    let intermediate = "\(value)" as NSString
    return intermediate.integerValue
}

