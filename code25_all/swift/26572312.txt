func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) {
        if (tableView == tableViewTeams) {
            let currentTeam = teamResultController.objectAtIndexPath(indexPath) as Teams
            forwardResultController = forwardResultControllerFunc(myQuery: currentTeam.teamName)
            forwardResultController.delegate = self
            forwardResultController.performFetch(nil)
            defenderResultController = defenderResultControllerFunc(myTeam: currentTeam.teamName)
            defenderResultController.delegate = self
            defenderResultController.performFetch(nil)
            tableView1.reloadData()
            tableView2.reloadData()
        }
//â€¦other tableviews
}

    func createPlayer() {
        let playerEntityDescripition = NSEntityDescription.entityForName("Players", inManagedObjectContext: managedObjectContext!)
        let player = Players(entity: playerEntityDescripition!, insertIntoManagedObjectContext: managedObjectContext)
        let teamDict:NSDictionary = selectedTeam.lastObject as NSDictionary
        var teamID = teamDict.objectForKey("teamName") as String
        let predicate:NSPredicate = NSPredicate(format: "teamName == '\(teamID)'")!
        let results:NSArray = SwiftCoreDataHelper.fetchEntities(NSStringFromClass(Teams), withPredicate: predicate, managedObjectContext: moc)
        let currentTeam:Teams = results.lastObject as Teams
        player.firstName = playerFirstName.text
        player.lastName = playerLastName.text
        player.type = playerPosition.text
        player.number = playerNumber.text
        player.team = currentTeam
        managedObjectContext?.save(nil)
    }

//one of the fetch requests
    func fetchRequest(#myQuery: String, myQuery2: String, myQuery3: String) -> NSFetchRequest {
        let fetchRequest = NSFetchRequest(entityName: "Players")
        let sortDescriptor = NSSortDescriptor(key: "firstName", ascending: true)
        let filter = NSPredicate(format: "team.teamName = %@ AND (type = %@ OR type = %@ )", "\(myQuery)", "\(myQuery2)", "\(myQuery3)")
        fetchRequest.sortDescriptors = [sortDescriptor]
        fetchRequest.predicate = filter
        println(filter!)
        return fetchRequest
    }

