cat .tiers
Stable=1
Release=2
Beta=3

#!/usr/bin/env bash
touch .version
touch .temp
VERSION=`cat .version`
DIR=/test/
STORED=`cat ${DIR}/.temp`
################################
#     REARRANGE TIERS          #
################################
rearrange()
{
start
end
}


################################
#     SYNC FILE EXISTS         #
################################
sync_exists()
{
dialog --msgbox ".sync exists in the directory $(echo ${VERSION}).\n\n Use Tier Move                 instead." 10 40
clean_up
exit 1;
}


################################
#         CLEAN UP             #
################################
clean_up()
{
rm -rf .version
rm -rf .update
rm -rf .temp
}

################################
#     OPTOUT & CLEAN UP        #
################################
opt_out()
{
dialog --msgbox "You've opted out of the tier update." 5 40
rm -rf ${DIR}/.version ${DIR}/.update ${DIR}/.temp 
}


################################
#     UPDATE .TIERS FILE       #
################################
tier_updater()
{
dialog --msgbox "\n\n
$(cat ${DIR}/.temp) is now $VERSION." 8 27
sed -i s/${STORED}=.*/${STORED}=${VERSION}/g ${DIR}/.tiers
clean_up
}



################################
#     UPDATE FILE LIST         #
################################
file_updater()
{

rm -rf ${VERSION}/.sync
        for x in `find $VERSION -type d \( ! -iname "." \)|sed s/${VERSION}//g`; do echo     "d===$x===755" >> ${DIR}/${VERSION}/.sync ; done
        for y in `find $VERSION -type f \( ! -iname ".*" \)|sed s/${VERSION}//g`; do     echo "f===$y===644===`md5sum ${VERSION}"$y"|awk '{print $1}'`" >>     "${DIR}"/"$VERSION"/.sync;done
        find "${DIR}"/"${VERSION}" -type f -exec gzip -f '{}' \; > /dev/null 2>&1      |xargs gzip -d "${DIR}"/${VERSION}/.sync
}



################################
#     TIER UPDATE PROMPT       #
################################
tier_update_prompt()
{
if [ -f ${VERSION}/.sync ]; then  sync_exists
else file_updater
fi
dialog --menu "\n
Directory List Built.\n
File List Built.\n
Files Compressed.\n
Sync File in place.\n\n
Would you like to update the tier for $(cat ${DIR}/.temp)?" \ 15 60 2  "Yes" "This will     apply all changes for $(echo $VERSION) to $(cat ${DIR}/.temp)." "No" "This will revert all     changes." 2>&1 > ${DIR}/.update
if [ "$?" = "0" ] ; then
        _update=$(cat ${DIR}/.update)
if [ "$_update" = "Yes" ] ; then
tier_updater
fi
if [ "$_update" = "No" ] ; then
opt_out ;
fi
else
        echo "You have now exited the application"
    clean_up;
fi
}

################################
#     NEW VERSION INPUT        #
################################ 
stable()
{
dialog --inputbox "Enter the new version for $(cat ${DIR}/.temp)" 8 30 2>     "${DIR}"/.version
if [ -d `cat .version` ] ; then tier_update_prompt;
        else
            dialog --msgbox "WARNING!!!!\n\n The folder $(${VERSION}) does not     exist!\nPlease upload this folder before you proceed!" 8 50 ;
        clean_up
    fi
}

################################
#        TIER SELECTION        #
################################
startup()
{
dialog --menu "Tiers are currently set as the following. Which would you like to update?    \n" 12 78 5 \
"Stable" "$(cat ${DIR}/.tiers|grep Stable|sed 's/Stable=//g')" "Release" "$(cat     ${DIR}/.tiers|grep Release|sed 's/Release=//g')" "Beta" "$(cat ${DIR}/.tiers|grep Beta|sed     's/Beta=//g')"  2> "${DIR}"/.temp
# OK is pressed
if [ "$?" = "0" ] ; then
        _return=$(cat ${DIR}/.temp)
fi
if [ "$_return" = "Stable" ] ; then
stable
fi
if [ "$_return" = "Release" ] ; then
stable
fi
if [ "$_return" = "Beta" ] ; then
stable
    else 
            echo "You have now exited the application"      
    clean_up;
fi
}

