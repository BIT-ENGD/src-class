@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Interceptors(LoggingInterceptor.class)
public @interface IAuditavel {

}

private EntityManager em;

    @Logger
    private Log logger;

    @In(required = false)
    Usuario usuario;

    @AroundInvoke
    public Object aroundInvoke(InvocationContext ctx) throws Exception {
        if (ctx.getMethod().isAnnotationPresent(IAuditavel.class) || isInterceptorEnabled()) {
            // Inicializa o EM fora do escopo do SEAM
            em = (EntityManager) Component.getInstance("entityManager");

            // Entidade para logging
            LogEntidade entidade = new LogEntidade();

            // Chave 0
            entidade.setIdLog(new BigDecimal(0));

            // Metodo chamado
            entidade.setAcao( ctx.getTarget().getClass().getSimpleName() + "." + ctx.getMethod().getName() );

            // Usuario logado no momento
            entidade.setUsuario( usuario );

            // Parametros
            Object[] params = ctx.getParameters();
            StringBuilder sb = new StringBuilder("");

            for (Object o : params){
                sb.append(o + ", "); 
            }

            // Data da execução
            entidade.setDataAlteracao(new Date());

            // Salva e desconecta a entidade
            em.persist(entidade);
            em.flush();

            // Põe os valores da entidade no log do jboss
            saveToServerLog(entidade);
        }

        // Continua a execução do método interceptado
        return ctx.proceed();
    }

    /***
     * Retorna true caso a classe / método seja anotada com o nosso interceptor
     */
    public boolean isInterceptorEnabled() {
        return getComponent().beanClassHasAnnotation(IAuditavel.class);
    }

    public void saveToServerLog(LogEntidade entidade) {
        if (logger.isInfoEnabled()) {
            logger.info("> " + entidade.getDataAlteracao() + ":"
                    + entidade.getAcao() + " com os parametros : "
                    + entidade.getParametros());
        }
    }

@In(required = false)
    Usuario usuario;

 @In(required = false)
    @Out(scope = ScopeType.SESSION, required = false)
    Usuario usuario;

