
public class Student implements
{
    @Id
    @GeneratedValue
    private Integer xID;

@ManyToMany
@JoinTable(name = "x_y", 
           joinColumns = { @JoinColumn(name = "xID")},
           inverseJoinColumns={@JoinColumn(name="yID")})
private Set<Cat> cats;


}

public class Cat implements
{
    @Id
    @GeneratedValue
    private Integer yID;

@ManyToMany
@JoinTable(name = "x_y", 
           joinColumns = { @JoinColumn(name = "yID")},
           inverseJoinColumns={@JoinColumn(name="xID")})
private Set<Student> students;


}

@ManyToMany
@JoinTable(name = "x_y", 
           joinColumns = { @JoinColumn(name = "xID")},
           inverseJoinColumns={@JoinColumn(name="yID")})
private Set<Cat> cats;

@ManyToMany
@JoinTable(name = "x_y", 
           joinColumns = { @JoinColumn(name = "yID")},
           inverseJoinColumns={@JoinColumn(name="xID")})
private Set<Student> students;


Entitymanager em = emf.createEntityManager();

em.getTransaction().begin();
Student s = new Student();
Student s2 = new Student();
Cat c = new Cat();
em.persist(s);
em.persist(s2);
em.persist(c);
s.getCats().add(c);
c.getStudents().add(s2);
em.getTransaction().commit();


em.getTransaction().begin();
Student s = em.find(Student.class, 2);
Cat c = em.find(Cat.class, 3);

if( c != null )
   System.out.println(c.getYID() + ": " + c.getStudents());
if( s != null )
   System.out.println(s.getXID() + ": " + s.getCats());
em.getTransaction().commit();

