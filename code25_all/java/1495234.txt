public interface Task<E> extends Serializable {
    Task<E>[] splitTask (int partsNum);
    E mergeSolutions (E... solutions);
    E solveTask ();
    E getSolution ();
    Integer getId ();
    void setId (Integer id);
}

    Integer[] array = {1, 4, 9, 3, 3, 0, 8, 2, 6};
    BubbleSortTask bst = new BubbleSortTask (array);
    Task[] ts = bst.splitTask (2);
    for (Task t : ts) {
        t.solveTask ();
    }
    bst.mergeSolutions (((BubbleSortTask)ts[0]).getSolution (),
                        ((BubbleSortTask)ts[1]).getSolution ());

public void processTask (Task t, int subtasksNum) {
    Task[] ts = t.splitTask (subtasksNum);
    for (Task t : ts) {
        t.solveTask ();
    }
    Object[] solutions = new Object[subtasksNum];
    for (int i = 0; i < subtasksNum; i++) {
        solutions[i] = ts[i].getSolution ();    
    }
    t.mergeSolutions (solutions);
}

