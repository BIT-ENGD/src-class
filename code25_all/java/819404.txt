   public void robin(int counter, int quant, int penalty) {

   if(Schedulers.quant==-1) {
      Schedulers.quant=quant;
   }


   while(p!=null && p.getArrival()==counter) {
       qrobin.add(p);

       if(i.hasNext())
           p=i.next();
       else {
           p=null;
           break;
       }
    }

   if(active!=null) {
       if(active.getLeftOver()>0 && Schedulers.quant>0) {
           active.decreaseLeftOver();
           Schedulers.quant--;
           System.out.print(active.getPID());
       }
       else if(active.getLeftOver()>0 && Schedulers.quant==0) {
           qrobin.add(active);
           active=qrobin.poll();

           Schedulers.quant=quant;
           Schedulers.quant--;

           if(active!=null) {
               System.out.print(active.getPID());
               active.decreaseLeftOver();
           }
           else
               System.out.print(" ");

       }
       else {
           active=qrobin.poll();

           Schedulers.quant=quant;
           Schedulers.quant--;


           if(active!=null) {
               System.out.print(active.getPID());
               active.decreaseLeftOver();
           }
           else
               System.out.print(" ");

       }
   }
   else {
       active=qrobin.poll();

       Schedulers.quant=quant;
       Schedulers.quant--;

       if(active!=null) {
          System.out.print(active.getPID());
          active.decreaseLeftOver(); 
       }
       else
           System.out.print(" ");
   }

while(true){

        algorithm(algorithm,s,counter);

        counter++;
    }

