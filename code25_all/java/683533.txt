interface Doable<X,Y> {
  X doIt(Y y);
}

class DoableImpl implements Doable<Foo<Bar<Baz,Qux>>,Foo<Bar<Zot,Qux>>> {
  Foo<Bar<Baz,Qux>> doIt(Foo<Bar<Zot,Qux>> fooBZQ) { ... }
}

Doable
Foo<Bar<Baz,Qux>>
Foo<Bar<Baz,Qux>>
FooBBQ
FooBZQ
class FooBBQ { 
  public static FooBBQ valueOf(Foo<Bar<Baz,Qux>> fooBBQ) { 
    return new FooBBQ(fooBBQ); 
  }
  private Foo<Bar<Baz,Qux>> fooBBQ;
  private FooBBQ(Foo<Bar<Baz,Qux>> fooBBQ) { 
    this.fooBBQ = fooBBQ; 
  }
  public Foo<Bar<Baz,Qux>> toGeneric() {
    return fooBBQ;
  }
}

class FooBZQ { /* pretty much the same... */ }

class DoableImpl implements Doable<FooBBQ,FooBZQ> { 
  FooBBQ doIt(FooBZQ fooBZQ) { ... }
}

valueOf
toGeneric
FooBBQ
Foo<Bar<Baz,Qux>>
doIt
Foo<Bar<Zot,Qux>>
return FooBBQ.valueOf( libraryCall( fooBZQ.toGeneric() ) )

return libraryCall(fooBZQ);

Foo<Bar<Baz,Qux>>
