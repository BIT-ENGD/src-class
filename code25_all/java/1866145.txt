public final class Graph {

    private Vector<Vertex> bookGraph = new Vector<Vertex>();
    private int bookCounter = 0;

    public Graph() {

}

public void addBook(Book bk) {
    Vertex vtx = new Vertex(bk);

    bookGraph.add(vtx);
    bookCounter++;

    System.out.println("Book #1 has " + bookGraph.get(0).getBook().getKeywords().size() + " keywords");

    // addAdjVertices();

}

public void showKeywords() {

    System.out.println("Book #1 is " + bookGraph.get(0).getBook().getKeywords().size() + " keywords");

}

  boolean fileopen = false;
  String title, author, keys;
  long isbn_number;
  Vector<String> keywords = new Vector<String>();
  String filename = "books.txt";
  String[] keywordTokens;
  Scanner fin = null;
  Scanner input = new Scanner (System.in); 
  Graph books = new Graph();

  try {
   fin = new Scanner (new FileReader(filename));
   String fline;

   fileopen = true;

   System.out.println("Reading books.txt...");

   while (fin.hasNextLine()) {

    fline = fin.nextLine();
    title = fline;
    fline = fin.nextLine();
    author = fline;
    fline = fin.nextLine();
    isbn_number = Long.parseLong(fline);
    fline = fin.nextLine();
    keywordTokens = fline.split(",");

    for (int x = 0; x < keywordTokens.length; x++) {
     keywords.add(keywordTokens[x]);
    }

    Book tempBook = new Book(title,author,isbn_number,keywords);
    books.addBook(tempBook);
    keywords.clear();

    if (fin.hasNextLine()) fline = fin.nextLine();


   }

   books.showKeywords();   
   System.out.println("Ready.");
 }
 catch (FileNotFoundException e) {
  System.out.println("FILE NOT FOUND!");
 }

