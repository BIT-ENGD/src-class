<form:form method="post" action="updateUserPermissions" modelAttribute="wsPermissions" >
    <table>
        <tr class="head">
            <td>Workspace</td>
            <td>Read?</td>
            <td>Write?</td>
            <td>Manage?</td>
        </tr>
        <c:forEach var="ws" varStatus="wsItem" items="${selectedUserWSs}">
            <c:set var="wsURI" value="'${ws.uri}'"/>
            <tr>
                <td>${ws.kbInfo.name} @ ${ws.community.name}</td>
                <td>
                    <spring:bind path="wsPermissions.map[${ws.uri}].read">
                        <input type="checkbox" <c:if test="${status.value}">checked</c:if> disabled="disabled"/>
                    </spring:bind>
                </td>
                <td>
                    <spring:bind path="wsPermissions.map[${ws.uri}].write">
                        <input type="checkbox" <c:if test="${status.value}">checked</c:if>/>
                    </spring:bind>
                </td>
                <td>
                    <spring:bind path="wsPermissions.map[${ws.uri}].manage">
                        <input type="checkbox" <c:if test="${status.value}">checked</c:if>/>
                    </spring:bind>
                </td>
                <td><a href="removeUserWorkspace?userid=${selectedUser.email}&wsid=${ws.uri}">[Remove]</a></td>
            </tr>
        </c:forEach>
    </table>
    <input type="hidden" name="userid" value="${selectedUser.email}" />
    <input type="submit" value="Update user permissions" />
</form:form>

@RequestMapping
public String updateUserPermissions(@ModelAttribute(value="wsPermissions") WorkspacePermissionMap wsPermissions,
        @RequestParam String userid,
        HttpServletRequest request, ModelMap modelMap){
    // code to update permissions here.....
    LOG.debug(wsPermissions.getMap().size());
    //the above prints zero
    return "redirect:editUser?id="+userid;
}

public class WorkspacePermissionMap {

private Map<String, WorkspacePermission> map = new HashMap<String, WorkspacePermission>();

/**
 * @param map the map to set
 */
public void setMap(Map<String, WorkspacePermission> map) {
    this.map = map;
}

/**
 * @return the map
 */
public Map<String, WorkspacePermission> getMap() {
    return map;
}

public class WorkspacePermission {
private boolean read = false;
private boolean write = false;
private boolean manage = false;


/**
 * @return the write
 */
public boolean isWrite() {
    return write;
}
/**
 * @param write the write to set
 */
public void setWrite(boolean write) {
    this.write = write;
    if (write){
        setRead(write);
    } else {
        setManage(write);
    }
}
/**
 * @return the moderate
 */
public boolean isManage() {
    return manage;
}
/**
 * @param moderate the moderate to set
 */
public void setManage(boolean moderate) {
    this.manage = moderate;
    if (moderate){
        setWrite(moderate);
        setRead(moderate);
    }
}
/**
 * @param read the read to set
 */
public void setRead(boolean read) {
    this.read = read;
    if (!read){
        setWrite(read);
        setManage(read);
    }
}
/**
 * @return the read
 */
public boolean isRead() {
    return read;
}

