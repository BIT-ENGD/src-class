List<String>
List<Object>
List<String>
List<Object>
Integer
List<String>
class A{}
class B{}
interface Producer<T> {
    T next();
}

class Types{
    @SuppressWarnings("unchecked")
    public static <T> Producer<T> cast(Producer<? extends T> producer){
        return (Producer<T>) producer;
    }
}

Producer<A>
Producer<Object>
Producer<A>
Producer<B>
Producer<Object> valid = Types.<Object> cast(new Producer<A>());
Producer<A> invalid = Types.<A> cast(new Producer<B>()); //does not compile

Producer<Producer<A>>
Producer<Producer<Object>>
Producer<Producer<A>> producerOfA = new Producer<Producer<A>>();
Producer<Producer<Object>> producerOfObjects = 
   Types.<Producer<Object>> cast(producerOfA); //does not compile

