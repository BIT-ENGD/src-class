// UserAccount 
 ......
 @OneToOne(targetEntity=UserProfileImpl.class,cascade={CascadeType.ALL})
 @org.hibernate.annotations.Cascade(value=org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
@JoinColumn(name="USER_PROFILE_ID")
private UserProfile profile;

@OneToMany(targetEntity=ContactImpl.class, cascade={CascadeType.ALL}, mappedBy="userAccount")
@org.hibernate.annotations.Cascade(value=org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
private Set<Contact> contacts = new HashSet<Contact>();

@OneToMany(targetEntity=GroupImpl.class, cascade={CascadeType.ALL}, mappedBy="userAccount")
@org.hibernate.annotations.Cascade(value=org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
private Set<Group> groups = new HashSet<Group>();
.......

//Group
     @ManyToOne(targetEntity=UserAccountImpl.class)
@JoinColumn(name="USER_ACCOUNT_ID",nullable=false)
private UserAccount userAccount;

@ManyToMany(targetEntity=ContactImpl.class,cascade={CascadeType.PERSIST, CascadeType.MERGE})
@JoinTable(name="GROUP_CONTACT_MAP", joinColumns={@JoinColumn(name="GROUP_ID")},
inverseJoinColumns={@JoinColumn(name="CONTACT_ID")})
private Set<Contact> contacts = new HashSet<Contact>();

//Contact
 ....
 @ManyToOne(targetEntity=UserAccountImpl.class)
@JoinColumn(name="USER_ACCOUNT_ID",nullable=false)
private UserAccount userAccount;

@ManyToMany(targetEntity=GroupImpl.class, mappedBy="contacts")
private Set<Group> groups=new HashSet<Group>();
....

// helper methods from group
public void addContact(Contact contact) {
    try{
        this.getContacts().add(contact);
        contact.getGroups().add(this);
    }catch(Exception e) {

    }

}

//helper method from group
public void removeContact(Contact contact) {
    contact.getGroups().remove(contact);
    this.getContacts().remove(contact);

}

//helper method from contact   
public void addGroup(Group group) {
    try{
        this.getGroups().add(group);
        group.getContacts().add(this);
    } catch(Exception e) {
        e.printStackTrace();
    }
}

//Helper method from group
public void removeGroup(Group group){
     try{

        group.getContacts().remove(this);
        this.getGroups().remove(group);
    } catch(Exception e) {
        e.printStackTrace();
    }
}

 public UserAccount getUserAccountByEmail(String email) {
 //       try {
       logger.info("inside getUserAccountByEmail");
       logger.debug(email);
        Session session = (Session) this.getDBSession().getSession();
        UserAccount user = (UserAccount) session.createCriteria(this.getPersistentClass())
                .setFetchMode("contacts", FetchMode.SELECT) //recently added
                .setFetchMode("groups", FetchMode.SELECT) // recently added
                .add(Restrictions.eq("email", email))
                .uniqueResult();
        logger.debug(user);
        return user;
 //       } catch(NonUniqueResultException ne) {
//           logger.debug("Exception Occured: getUserAccountByEmail returns more than one result  ", ne);
//           return null;
//       } catch(HibernateException he){
//           logger.debug("Exception Occured: Persistence or JDBC exception in method  getUserAccountByEmail ",he);
//           return null;
//       }catch(Exception e) {
//           logger.debug("Exception Occured: Exception in method getUserAccountByEmail", e);
//           return null;
//       }

