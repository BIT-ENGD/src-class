A
T
interface A<T>{T m();};

m()
T
javax.lang.model.type.TypeMirror
A<T>
@SomeAnnotation
class SomeClass{
    A<T> x();
}

T
DeclaredType type = (DeclaredType) typeMirror;
TypeMirror t = type.getTypeArguments().get(0);

TypeMirror
javax.lang.model.type.DeclaredType
T
t
javax.lang.model.type.TypeVariable
T
A<B>
B
interface B{}
t
DeclaredType
B
interface Subtype<T> extends A<T>{}
interface Concrete extends A<B>{};
interface Multiple<B,T> extends A<T>{}
interface Bounds<T extends B> extends A<T>{}
interface Hierarchy extends Concrete{}

Subtype<B>          -> DeclaredType B
Subtype<T>          -> TypeVariable T
Concrete            -> DeclaredType B
Multiple<B,T>       -> TypeVariable T or DeclaredType B depeding on Multiple
Multiple<B,B>       -> TypeVariable B
<T extends B> A<T>  -> TypeVariable T with super class bound B
Bound<B>            -> DeclaredType B
Bound<C>            -> DeclaredType C (subtype of B)
Hierarchy           -> TypeVariable T

T
