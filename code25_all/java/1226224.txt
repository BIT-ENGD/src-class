import java.util.concurrent.Semaphore;
public void downloadFile() {
    Thread downloadThread = new Thread() {
        boolean bSemaphoreAcquired = false;
        public void run() {
            try {
                semaphore.acquire();
                bSemaphoreAcquired = true;
                // do the download
            } catch (InterruptedException e) {
            } finally {
                if (bSemaphoreAcquired) semaphore.release();
            }
        }
    };
    // add download thread to the list of download threads
    downloadThread.start();
}

Sequence of events (Semaphore that permits 2 threads)
- thread 1 downloading
- thread 2 downloading
- thread 3 waiting on acquire()
- thread 3 is cancelled (interrupt() is called). InterruptedException is thrown and the thread exits
- thread 4 is created and is now waiting on acquire()
- thread 4 is cancelled (interrupt() is called). InterruptedException IS NOT THROWN ANYMORE!!!

Semaphore$FairSync(AbstractQueuedSynchronizer).fullGetFirstQueuedThread() line: 1276    
Semaphore$FairSync(AbstractQueuedSynchronizer).getFirstQueuedThread() line: 1232    
Semaphore$FairSync.tryAcquireShared(int) line: 201  
Semaphore$FairSync(AbstractQueuedSynchronizer).acquireSharedInterruptibly(int) line: 1142   
Semaphore.acquire() line: 267
FileDownloadManager$1.run() line: 150   

