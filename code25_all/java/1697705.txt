// **PUT**
if(REQUEST.toUpperCase().equals("PUT")) {

  File sourceFile = new File(fileName);

  if(!sourceFile.canRead()) {
      System.out.println("Have not access to this file...");
      return;
  }

  try {
      BufferedInputStream is = new BufferedInputStream(new FileInputStream(sourceFile));

      URL url = new URL("http://" + HOST+":"+PORT);
      System.setProperty("http.keepAlive", "true");
      HttpURLConnection connection = (HttpURLConnection) url.openConnection();
      connection.setDoInput(true);
      connection.setDoOutput(true);

      connection.setRequestMethod("PUT");
      connection.setRequestProperty("Content-Type", "Application/octet-stream");
      connection.setRequestProperty("Content-Length",Long.toString(sourceFile.length()));
      connection.addRequestProperty("Content-disposition","attachment; filename="+fileName);

      BufferedOutputStream os = new BufferedOutputStream(connection.getOutputStream());

      byte[] buf = new byte[sizeArr];
      int r = 1;
      while((r = is.read(buf)) > 0) {
          os.write(buf, 0, r);
      }
      os.flush();
      os.close();

      System.out.println("Waiting for the response...");//this is written to console

      System.out.println(connection.getResponseCode());//HERE infinite waiting
      is.close();


  } catch (MalformedURLException ex) {
      ex.printStackTrace();
  } catch (IOException ex) {
      ex.printStackTrace();
  }
  }

Request == PUT
// **PUT**
if (header.toUpperCase().equals("PUT")) {
    System.setProperty("http.keepAlive", "true");
    String fileName = null;

    if((fileName = extract(request.toUpperCase(),"FILENAME=","\n")) == null) {
        fileName = "UnknownFile.out";
    }

    try {
    File sourceFile = new File(fileName);
    BufferedOutputStream osFile = new BufferedOutputStream 
        (new FileOutputStream(sourceFile));

    byte[] locbuf = new byte[sizeArr];
    int locr = 1;
    while((locr = is.read(locbuf)) > 0) {
        System.out.println("locr= "+locr);//this is written to console
        osFile.write(locbuf, 0, locr);
    }
    System.out.println("Ending to record the data to the file."); 
    //  this is NOT written to console
    osFile.flush();
    osFile.close();
    }
    catch(IOException ex) {
        os.write(CodeRequest("500 Internal Server Error").getBytes());
        os.close();
        ex.printStackTrace();
        return;
    }

    System.out.println("Trying to send 200 OK");
    os.write(CodeRequest("200 OK").getBytes());
    os.flush();
    os.close(); // where os = clientSocket.getOutputStream();
    }

// System.out.println(connection.getResponseCode());

while((locr = is.read(locbuf)) > 0) {
  System.out.println("locr= "+locr);//this is NOT written to console
  osFile.write(locbuf, 0, locr);
}

localExcString index out of range: -1

