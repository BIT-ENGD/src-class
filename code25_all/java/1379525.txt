class FileColumnSorter extends SortableGrid.ColumnSorter
{
    @Override
    public void onSortColumn(SortableGrid sortableGrid,
        TableModelHelper.ColumnSortList columnSortList,
        SortableGrid.ColumnSorterCallback columnSorterCallback)
    {
        final int column = columnSortList.getPrimaryColumn();

        final Integer[] originalOrder = new Integer[sortableGrid.getRowCount()];
        for (int i = 0; i < originalOrder.length; i++)
        {
            originalOrder[i] = i;
        }

        Arrays.sort(originalOrder, new Comparator<Integer>() {
            public int compare(Integer first, Integer second)
            {
                Descriptor firstDesc = share.getCurrentDescriptors().get(first);
                Descriptor secondDesc = share.getCurrentDescriptors().get(second);

                if (firstDesc.getType().equals(secondDesc.getType()))
                {
                    switch (column)
                    {
                        case 0:
                            return firstDesc.compareTo(secondDesc);
                        case 1:
                            return firstDesc.getName().compareTo(secondDesc.getName());
                        case 2:
                            return ((Long) firstDesc.getSize()).compareTo(secondDesc.getSize());
                        case 3:
                            return firstDesc.getCreated().compareTo(secondDesc.getCreated());
                        case 4:
                            return firstDesc.getModified().compareTo(secondDesc.getModified());
                        default:
                            return firstDesc.compareTo(secondDesc);
                    }
                }
                else
                {
                    return firstDesc.getType() == Descriptor.FileItemType.FOLDER ? 1 : -1;
                }
            }
        });

        int[] resultOrder = new int[originalOrder.length];
        for (int i = 0; i < originalOrder.length; i++)
        {
            if (columnSortList.isPrimaryAscending())
            {
                resultOrder[i] = originalOrder[i];
            }
            else
            {
                resultOrder[resultOrder.length - i - 1] = originalOrder[i];
            }
        }
        columnSorterCallback.onSortingComplete(resultOrder);
    }
}

