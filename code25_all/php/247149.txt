<?php
/**
 * My codebase is littered with the same conditionals over and over
 * again.  I'm trying to refactor using inheritance and the Factory
 * pattern and I've had some success but I'm now stuck.
 *
 * I'm stuck because I want to derive a new class from the one
 * returned by the Factory.  But I can't do that, so I'm obviously
 * doing something wrong somewhere else.
 */


/**
 * The old implementation was as follows.  There's if statements
 * everywhere throughout both LayoutView and ItemIndexView and
 * SomeOtherView.
 */
class LayoutView { }
class IndexView extends LayoutView { }
class SomeOtherView extends LayoutView { }

/**
 * Below is the new implementation.  So far I've managed to tidy
 * up LayoutView (I think I have anyway).  But now I'm stuck because
 * the way I've tidied it up has left me not knowing how to extend
 * it.
 *
 * For example's sake, let's say the conditions were relating to a
 * type of fish: salmon or tuna.
 */
abstract class LayoutView {
    protected function prepareHeader() { echo __METHOD__, "\n"; }
    protected function prepareLeftHandSide() { echo __METHOD__, "\n"; }
    protected function prepareFooter() { echo __METHOD__, "\n"; }
    public function prepare() {
        $this->prepareHeader();
        $this->prepareLeftHandSide();
        $this->prepareFooter();
    }
}

class SalmonLayoutView extends LayoutView
{
    protected function prepareLeftHandSide() { echo __METHOD__, "\n"; }
}

class TunaLayoutView extends LayoutView
{
    protected function prepareLeftHandSide() { echo __METHOD__, "\n"; }
    protected function prepareFooter() { echo __METHOD__, "\n"; }
}

class ViewFactory {
    public static function getLayoutView($fishType) {
        switch($this->$fishType) {
        case 'salmon':
            return new SalmonLayoutView();
            break;
        case 'tuna':
            return new TunaLayoutView();
            break;
        }
    }
}

/**
 * Now LayoutView has been cleaned up and the condition that was once
 * scattered through every LayoutView method is now in one place.
 */
$view = ViewFactory::getLayoutView( Config::getOption('fishtype') );
$view->prepare();

/**
 * Now here's where I'm stuck.  I want to effectively extend whatever
 * class $view is an instance of.
 *
 * The reason being, I wish to derive a view to show an index of
 * articles within the appropriate *LayoutView.  The IndexView code is
 * the same for Salmon and Tuna.
 *
 * I can do something like this:
 */

class SalmonIndexView extends SalmonLayoutView { }
class TunaIndexView extends TunaLayoutView { }

/**
 * But then I'll be writing the same IndexView code twice.  What I'd
 * like to do is something like this:
 */

$view = ViewFactory::getLayoutView( Config::getOption('fishtype') );
class IndexView extends get_class($view) { }

/**
 * But I'm pretty certain that's not possible, and even if it was
 * it seems very wrong.
 *
 * Can someone more experienced in refactoring and OO please let
 * me know where I've gone wrong and suggest a clean way to solve
 * this?
 */

