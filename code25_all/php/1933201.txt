CREATOR: gd-jpeg v1.0
<?php
/*
big = 350
thumb = 90
thumb2 = 70
top = 215
*/

set_time_limit(0);
ini_set('memory_limit', '128M');
ini_set('display_errors', 'On'); 

class ResizeImages
{
    private $dir = 'images/articles_backup_2009-12-19';
    private $imageType = array(
        '_big' => 'h:350',
        '_thumb' => 'm:90',
        '_thumb2' => 'h:70',
        '_top' => 'h:215'
    );

    public function __construct()
    {
        $this->deleteImages();
        $this->resizeImages();
    }

    private function resizeImages()
    {
        $n = 0;
        $dh = opendir($this->dir);
        while (($file = readdir($dh)) !== false) 
        {
            if(is_dir($this->dir."/".$file) && $file != '.' && $file != '..')
            {   
                echo $this->dir."/".$file.'<br />';
                $deldir = opendir($this->dir."/".$file);
                while (($filedel = readdir($deldir)) !== false) 
                {
                    if ($filedel != '.' && $filedel != '..' && $filedel != 'Thumbs.db') 
                    {
                        $val = $this->resize($this->dir."/".$file."/".$filedel);
                        $n++;
                    }
                }
            }
        }
        closedir($dh);
    }

    private function resize($target)
    {
        $img = $target;

        $origSize = getimagesize($img);
        $origWidth = $origSize[0];
        $origHeight = $origSize[1];

        foreach($this->imageType as $key=>$value)
        {
            $attr = explode(':', $value);

            if(strpos($attr[0], 'w') !== false) 
            {
                $this->imageWidth = $attr[1];
                $this->imageHeight = false;
            }
            if(strpos($attr[0], 'h') !== false) 
            {
                $this->imageHeight = $attr[1];
                $this->imageWidth = false;
            }

            $imageTmp = explode('.', $img);
            if(count($imageTmp) == 2) $image_name_fin = $imageTmp[0].$key.'.'.$imageTmp[1];
            else if(count($imageTmp) == 4) $image_name_fin = $imageTmp[0].'.'.$imageTmp[1].$key.'.'.$imageTmp[2];

            if($this->imageWidth != false) 
            {
                if($origWidth <= $this->imageWidth)
                {
                    $resizeHeight = $origHeight;
                    $resizeWidth = $origWidth;
                }
                else
                {
                    $resizeHeight = round($origHeight / ($origWidth / $this->imageWidth));
                    $resizeWidth = $this->imageWidth;
                }
            }
            else if($this->imageHeight != false) 
            {
                if($origHeight <= $this->imageHeight)
                {
                    $resizeHeight = $origHeight;
                    $resizeWidth = $origWidth;
                }
                else
                {
                    $resizeWidth = round($origWidth / ($origHeight / $this->imageHeight));
                    $resizeHeight = $this->imageHeight;
                }
            }

            $im = ImageCreateFromJPEG ($img) or // Read JPEG Image
            $im = ImageCreateFromPNG ($img) or // or PNG Image
            $im = ImageCreateFromGIF ($img) or // or GIF Image
            $im = false; // If image is not JPEG, PNG, or GIF

            if (!$im) 
            {
                $this->error = array(
                    'error' => true,
                    'notice' => 'UPLOADUNSUCCESSFULL'
                );
                return $this->error;
            }

            $thumb = ImageCreateTrueColor ($resizeWidth, $resizeHeight);
            ImageCopyResampled ($thumb, $im, 0, 0, 0, 0, $resizeWidth, $resizeHeight, $origWidth, $origHeight);
            ImageJPEG ($thumb, $image_name_fin, $this->imageQuality);
            //echo $image_name_fin.'<br />';
        }

        $this->error = array(
            'imageUrl' => $image_name,
            'error' => false,
            'notice' => 'IMAGEUPLOADED'
        );
        return $this->error;            
    }

    private function deleteImages()
    {
        $dh = opendir($this->dir);
        while (($file = readdir($dh)) !== false) 
        {
            if(is_dir($this->dir."/".$file))
            {
                //echo $file.'<br />';
                $deldir = opendir($this->dir."/".$file);
                while (($filedel = readdir($deldir)) !== false) 
                {
                    if(strpos($this->dir."/".$file."/".$filedel, '_big.') !== false || strpos($this->dir."/".$file."/".$filedel, '_thumb.') !== false || strpos($this->dir."/".$file."/".$filedel, '_thumb2.') !== false || strpos($this->dir."/".$file."/".$filedel, '_top.') !== false)
                    {
                        unlink($this->dir."/".$file."/".$filedel);
                    }
                }
            }
        }
        closedir($dh);
    }
}

$batch = new ResizeImages;


?>

