    Private _someProp As String

    <Browsable(True), _
     BindableAttribute(False), _
     DesignOnly(False), _
     DescriptionAttribute("Some Property Description"), _
     TypeConverter(GetType(propList1)), _
     DisplayName("Some Property")> _
    Public Property someProp() As String
        Get
            Return _someProp
        End Get
        Set(ByVal Value As String)
            _someProp = Value                
        End Set
    End Property

Dim descriptor As PropertyDescriptor = TypeDescriptor.GetProperties(Me.GetType)("someProp")
Dim attrib_r As ReadOnlyAttribute = descriptor.Attributes(GetType(ReadOnlyAttribute))
Dim isReadOnly As System.Reflection.FieldInfo = attrib_r.GetType.GetField("isReadOnly", Reflection.BindingFlags.NonPublic + Reflection.BindingFlags.Instance)
isReadOnly.SetValue(attrib_r, True)

Dim descriptor As PropertyDescriptor = TypeDescriptor.GetProperties(Me.GetType)("someProp")
Dim attrib As TypeConverterAttribute = descriptor.Attributes(GetType(TypeConverterAttribute))
Dim typeConv As System.Reflection.FieldInfo = attrib.GetType.GetField("typeConverter", Reflection.BindingFlags.NonPublic + Reflection.BindingFlags.Instance)
typeConv.SetValue(attrib, IIf(someCondition, GetType(propList1), GetType(propList2)))

Dim typeConv As System.Reflection.FieldInfo = attrib.GetType.GetField("typeName", BindingFlags.Instance Or _
                                                       BindingFlags.Public Or _
                                                       BindingFlags.NonPublic Or _
                                                       BindingFlags.FlattenHierarchy)
typeConv.SetValue(attrib, value)

