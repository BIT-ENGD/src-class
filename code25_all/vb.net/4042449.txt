Public Shared Function GetClassesWhichimplementInterface(Of T)() As IEnumerable(Of Type)
    Dim InterfaceType = GetType(T)
    Dim Types As IEnumerable(Of Type)

    Types = Reflection.Assembly.GetCallingAssembly.GetTypes()

    Return Types.Where(Function(x) InterfaceType.IsAssignableFrom(x))
End Function

Public Sub RegisterReports()
    Dim ReportTypes = ReflectionHelper.GetClassesWhichimplementInterface(Of IReport)()
    For Each ReportType In ReportTypes
        ''Previously I was reading the report attribute here and using the defined unique key. I've stopped using this code to remove possible problems while debugging.
        Container.RegisterType(GetType(IReport), ReportType, ReportType.Name)
    Next
End Sub

GetClassesWhichimplementInterface()
Container.Resolve(of Interfaces.IReport)
Resolution of the dependency failed, type = "MyProject.Interfaces.IReport", name = "(none)".
Exception occurred while: while resolving.
Exception is: InvalidOperationException - The current type, MyProject.Interfaces.IReport, is an interface and cannot be constructed. Are you missing a type mapping?
-----------------------------------------------
At the time of the exception, the container was:

  Resolving MyProject.Interfaces.IReport,(none)

