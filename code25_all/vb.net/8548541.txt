For Each keyword As String In category.Keywords
    category.tempCount += Regex.Matches(article.Item("title").InnerXml, Regex.Escape(keyword)).Count
    category.tempCount += Regex.Matches(article.Item("description").InnerXml, Regex.Escape(keyword)).Count
Next

Categories.Sort(
Function(article1 As ArticleCategory, article2 As ArticleCategory)
    Return article1.tempCount.CompareTo(article2.tempCount)
End Function)

Imports System.Xml

Class ArticleCategory
Implements IComparer(Of ArticleCategory)

Public ReadOnly key As Int32
Public ReadOnly Name As String
Public ReadOnly Keywords As List(Of String)
Public tempCount As Integer = 0

Public Sub New(ByVal category As XmlElement)
    key = System.Web.HttpUtility.UrlDecode(category.Item("ckey").InnerXml)
    Name = System.Web.HttpUtility.UrlDecode(category.Item("name").InnerXml)

    Dim tKeywords As Array = System.Web.HttpUtility.UrlDecode(category.Item("keywords").InnerXml).Split(",")
    Dim nKeywords As New List(Of String)
    For Each keyword As String In tKeywords
        If Not keyword.Trim = "" Then
            nKeywords.Add(keyword.Trim)
        End If
    Next

    Keywords = nKeywords
End Sub

'This should be removed if your using my solution.
Public Function Compare(ByVal x As ArticleCategory, ByVal y As ArticleCategory) As Integer Implements System.Collections.Generic.IComparer(Of ArticleCategory).Compare
    Return String.Compare(x.tempCount, y.tempCount)
End Function


End Class

