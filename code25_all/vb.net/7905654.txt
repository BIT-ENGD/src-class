1 setups, IEnumerable
1 expression, Times times, String failMessage)
at Moq.Mock
    <Test()> _
Public Sub Can_Delete_Item()
    'Arrange: Given a repository containing some item...
    Dim mockRepository = New Mock(Of IItemsRepository)()
    Dim item As New Item With {.ItemID = "24", .Title = "i24"}

    mockRepository.Setup(Function(x) x.Items).Returns(New Item() {item}.AsQueryable())

    'Act ... when the user tries to delete that product
    Dim controller = New ItemsController(mockRepository.Object)
    Dim result = controller.Delete(24)

    'Assert ... then it's deleted, and the user sees a confirmation
    mockRepository.Verify(Sub(x) x.DeleteItem(item))
    result.ShouldBeRedirectionTo(New With {Key .action = "List"})
    Assert.AreEqual(DirectCast(controller.TempData("message"), String), "i24 was deleted")

End Sub

[Test] 
public void Can_Delete_Product() 
{ 
// Arrange: Given a repository containing some product... 
var mockRepository = new Mock<IProductsRepository>(); 
var product = new Product { ProductID = 24, Name = "P24"}; 
mockRepository.Setup(x => x.Products).Returns( 
    new[] { product }.AsQueryable() 
); 

// Act: ... when the user tries to delete that product 
var controller = new AdminController(mockRepository.Object); 
var result = controller.Delete(24); 

// Assert: ... then it's deleted, and the user sees a confirmation
mockRepository.Verify(x => x.DeleteProduct(product)); 
result.ShouldBeRedirectionTo(new { action = "Index" }); 
controller.TempData["message"].ShouldEqual("P24 was deleted"); 

