Imports System.Data.Linq

Public Class UserConduit
    Implements IDisposable

    Private Shared _thisUserConduit As UserConduit
    Private Shared _thisContext As VulcanDataContext

    Protected Sub New()
        _thisContext = New VulcanDataContext
    End Sub

    Public Shared Function GetInstance()

        If _thisUserConduit Is Nothing Then
            _thisUserConduit = New UserConduit
        End If

        Return _thisUserConduit

    End Function

    Public Function GetUserByID(ByVal thisUserName As String) As User

        Return _thisContext.Users.SingleOrDefault(Function(u) u.Username = thisUserName)

    End Function

    Public Function Save() As ChangeSet

        Dim thisSet = _thisContext.GetChangeSet

        Try
            _thisContext.SubmitChanges()

        Catch ex As Exception
            Throw

        End Try

        Return thisSet

    End Function

    Public Function Save(ByVal thisUser As User) As ChangeSet

        If thisUser.Modified Is Nothing Then
            _thisContext.Users.InsertOnSubmit(thisUser)
        End If

        Return Save()

    End Function


#Region " IDisposable Support "
    Private disposedValue As Boolean = False        ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' free other state (managed objects).
                _thisContext.Dispose()
            End If

            ' free your own state (unmanaged objects).
            ' set large fields to null.
        End If
        Me.disposedValue = True
    End Sub


    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class

