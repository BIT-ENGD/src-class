Public Class SqliteReader
   Public Sub ReadDataBase
     End Sub
End Class

    ProgressBar.Initialize(channelArray, computationArray, m_debug)        

Partial Public Class ProgressBar
    Dim DataAcquisition As New SqliteReader
    Dim WithEvents worker As New BackgroundWorker

Public Sub Initialize(ByRef graphData As Channels(), ByRef graphComputations As Computations(), ByVal m_debug As Integer)
    DataAcquisition = SqliteReader.GetInstance()
    Me.Show()
    Me.Update()
    Dim Update_Thread As Thread(AddressOf Update_ThreadExecute)

    Update_Thread.Priority = ThreadPriority.Normal
    Update_Thread.Start()
    DataAcquisition.ParseEntireDatabase(graphData, graphComputations, m_debug)
    Me.Close()
End Sub


Private Sub ProgressBarStart(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
      DataAcquisition = SqliteReader.GetInstance()
      progress.Style = ProgressBarStyle.Marquee
      worker.WorkerReportsProgress = True
      worker.WorkerSupportsCancellation = True
      worker.RunWorkerAsync()
  End Sub

  Private Sub worker_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles worker.DoWork
         Dim worker As BackgroundWorker = DirectCast(sender, BackgroundWorker)
         DataAcquisition = SqliteReader.GetInstance()
         ' I probably need 
         ' DataAcquisition.ParseEntireDatabase(graphData, graphComputations, m_debug)
         ' here... but how do I expose graphdata, graphcomputations and m_debug to this sub?
         End Sub

  Private Sub worker_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles worker.ProgressChanged
      dataProgress = CInt(((DataAcquisition.currentRow + 1) / DataAcquisition.totalRows) * 100)
      progress.Value = dataProgress
  End Sub

