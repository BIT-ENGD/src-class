Public Class MyStaticClass
    Public Shared Sub AddIfUnqiue(Of T, L As {List(Of T)})(ByVal this As L, ByVal item As T)
        If this.IndexOf(item) < 0 Then
            this.Add(item)
        End If
    End Sub
End Class

Module UtilityExtensions
    <Extension()> _
    Sub AddIfUnqiue(Of T, L As {List(Of T)})(ByVal this As L, ByVal item As T)
    'ERROR: Extension method 'AddIfUnqiue' has type constraints that can never be satisfied'
        If this.IndexOf(item) < 0 Then
            this.Add(item)
        End If
    End Sub 
End Module

public static void AddIfUnique<T, L>(this L myList, T item) where L : List<T>
{
    if (myList.IndexOf(item) < 0)
        myList.Add(item);
}

