public class GenericSorter<T, PT>
{
    public IEnumerable<T> Sort(IEnumerable source, string sortExpression)
    {
        var param = Expression.Parameter(typeof(T), "item");

        var sortLambda = Expression.Lambda<Func<T, PT>>(Expression.Convert(Expression.Property(param, sortExpression), typeof(PT)), param);

        return source.OfType<T>().AsQueryable<T>().OrderBy<T, PT>(sortLambda);
    }

    public IEnumerable<T> Sort(IEnumerable<T> source, string sortExpression)
    {
        var param = Expression.Parameter(typeof(T), "item");

        var sortLambda = Expression.Lambda<Func<T, PT>>(Expression.Convert(Expression.Property(param, sortExpression), typeof(PT)), param);

        return source.AsQueryable<T>().OrderBy<T, PT>(sortLambda);
    }
}

Public Class GenericSorter(Of T, PT)
    Public Function Sort(ByVal source As IEnumerable, ByVal sortExpression As String) As IEnumerable(Of T)
        Dim param = Expression.Parameter(GetType(T), "item")

        Dim sortLambda = Expression.Lambda(Of Func(Of T, PT))(Expression.Convert(Expression.[Property](param, sortExpression), GetType(PT)), param)
        Dim s As IEnumerable(Of T) = source.OfType(Of T).AsQueryable().OrderBy(Of T, PT) (Of sortLambda)

        Return s
    End Function

