[XcoWorkerExtension(Optional = new Type[] { typeof(Subscribe<OnNewsArrived>) })]
    private readonly XcoPublisher<OnNewsArrived> publisher = new    XcoPublisher<OnNewsArrived>();

<XcoWorkerExtension([Optional]:=New Type() {GetType(Subscribe(Of OnNewsArrived))})> _
    Private ReadOnly publisher As New XcoPublisher(Of OnNewsArrived)()

internal XcoWorkerExtensionAttribute Get_worker_extension_attribute(FieldInfo field)
    {
        object[] fieldAttrs = field.GetCustomAttributes(typeof(XcoWorkerExtensionAttribute), false);
        object[] classAttrs = field.FieldType.GetCustomAttributes(typeof(XcoWorkerExtensionAttribute), false);
        if (fieldAttrs.Length > 0 && classAttrs.Length == 0)
            throw new XcoWorkerException("A field can only be marked with the XcoWorkerExtension attribute when its type is also marked with this attribute");

        if (fieldAttrs.Length > 0)
            return (XcoWorkerExtensionAttribute)fieldAttrs[0];
        if (classAttrs.Length > 0)
            return (XcoWorkerExtensionAttribute)classAttrs[0];
        return null;
    }

