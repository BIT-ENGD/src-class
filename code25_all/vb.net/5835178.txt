Partial Public Class Proposal
    Public Property Id As Integer
    Public Property Memo As String
    Public Property EntryDate As Nullable(Of Date)
    Public Overridable Property CategoryTags As ICollection(Of CategoryTag) = New HashSet(Of CategoryTag)

End Class

Public Class ProposalViewModel

    Public Property Id As Integer
    <DataType(DataType.MultilineText)>
    Public Property Memo As String
    <DisplayFormat(ApplyFormatInEditMode:=True, DataFormatString:="{0:d}")>
    Public Property EntryDate As Nullable(Of Date)
    Public Overridable Property CategoryTags As ICollection(Of CategoryTag) = New HashSet(Of CategoryTag)
End Class

<HttpPost()>
Public Function Edit(ByVal pvm As ProposalViewModel) As ActionResult

    Dim p As New Proposal

    p = AutoMapper.Mapper.Map(Of ProposalViewModel, Proposal)(pvm)

    If (ModelState.IsValid) Then
        db.Entry(p).State = EntityState.Modified
        db.SaveChanges()
        Return RedirectToAction("Index")
    Else
        Return View(pvm)
    End If

End Function

<HttpPost()>
Public Function Edit(ByVal pvm As ProposalViewModel) As ActionResult

    Dim p As New Proposal
    Dim tempTag As CategoryTag

    p = AutoMapper.Mapper.Map(Of ProposalViewModel, Proposal)(pvm)

    If (ModelState.IsValid) Then

        db.Proposals.Attach(p)
        db.Entry(p).Collection("CategoryTags").Load()

        For Each ct As CategoryTag In pvm.Tags

            tempTag = db.CategoryTags.Find(ct.Id)

            If tempTag Is Nothing Then
                Continue For
            End If

            If p.CategoryTags.Contains(tempTag) Then
                Continue For
            End If

            p.CategoryTags.Add(tempTag)
        Next

        db.Entry(p).State = EntityState.Modified
        db.SaveChanges()
        Return RedirectToAction("Index")
    Else

        Return View(pvm)

    End If

End Function

