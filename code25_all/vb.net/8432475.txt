        '//:Eligibility Questions
        If Not IsNothing(MyBase.EligibilityQuestions) Then
            Dim sw As StringBuilder = New StringBuilder
            sw.AppendLine()
            sw.Append("Eligibility Questions")
            sw.AppendLine()
            For Each row As DataRow In MyBase.EligibilityQuestions.Rows
                sw.Append(Convert.ToString(row("ROWID")) & ".")
                sw.Append(" " & Convert.ToString(row("Question")))
                sw.Append(" " & Convert.ToString(row("Responseflag")) & nl)
            Next
            sw.AppendLine()
            OverFlowEndorsments &= sw.ToString()
            OverFlowEndorsments &= nl
        End If

'//:Eligibility Questions
If Not IsNothing(MyBase.EligibilityQuestions) Then
    Dim sw As StringBuilder = New StringBuilder
    sw.AppendLine()
    sw.Append("Eligibility Questions")
    sw.AppendLine()
    For Each row As DataRow In MyBase.EligibilityQuestions.Rows
        Dim x As Integer = row("Question").ToString.Length
        sw.Append(" " & Convert.ToString(row("ROWID")) & ".")

        sw.Append(PrintMessage(Convert.ToString(row("Question")), 90))

        sw.Append(" " & Convert.ToString(row("Responseflag")) & nl)
    Next
    sw.AppendLine()
    OverFlowEndorsments &= sw.ToString()
    OverFlowEndorsments &= nl
End If

Public Function PrintMessage(Message As String, Length As Integer) As StringBuilder
    Dim currentLength = 0
    Dim words As Array
    Dim sb As StringBuilder = New StringBuilder
    words = Split(Message, " ")
    For Each word As String In words
        If currentLength + word.Length > Length Then
            sb.Append(nl & ControlChars.Tab & "  ")
            currentLength = 0
        End If

        sb.Append(word & " ")
        currentLength += word.Length
    Next
    Return sb
End Function

