Public Interface IAwesomeInterface
    Function GetThis() As Integer
    Function GetThisAndThat(ByVal that As Integer) As Integer
End Interface


Public Class MyAwesomeClass
    Implements IAwesomeInterface

    Dim _this As Integer

    ''' <summary>
    ''' injection constructor
    ''' </summary>
    Private Sub New(ByVal this As Integer)
        Me._this = this
    End Sub

    ''' <summary>
    ''' default factory method
    ''' </summary>
    Public Shared Function Create() As IAwesomeInterface
        Return New MyAwesomeClass(42)
    End Function

    Public Overridable Function GetThis() As Integer Implements IAwesomeInterface.GetThis
        Return _this
    End Function

    Public Function GetThisAndThat(ByVal that As Integer) As Integer Implements IAwesomeInterface.GetThisAndThat
        Return GetThis() + that
    End Function
End Class

GetThisOrThat
GetThis
<TestMethod()>
Public Sub GetThisAndThat_calls_GetThis()
    'Arrange
    Dim dummyAwesome = New Mock(Of MyAwesomeClass_Accessor)(56)
    dummyAwesome.CallBase = True

    dummyAwesome.Setup(Function(c) c.GetThis()).Returns(99)

    'Act
    Dim thisAndThat = dummyAwesome.Object.GetThisAndThat(1)

    'Assert
    Assert.AreEqual(100, thisAndThat)' Expected:<100>. Actual:<57>. 

    dummyAwesome.Verify(Function(d) d.GetThis, Times.Once, "GetThisAndThat should call GetThis")

End Sub

AssemblyInfo.vb
<Assembly: InternalsVisibleTo("DynamicProxyGenAssembly2")> 

Friend
internal
Private
internal
Accessor
<TestClass()>
Public Class MyAwesomeTest

    <TestMethod()>
    Public Sub GetThisAndThat_calls_GetThis()
        'Arrange
        Dim dummyAwesome = New Mock(Of MyAwesomeClass)(56)
        dummyAwesome.CallBase = True

        dummyAwesome.Setup(Function(c) c.GetThis()).Returns(99)

        'Act
        Dim thisAndThat = dummyAwesome.Object.GetThisAndThat(1)

        'Assert
        Assert.AreEqual(100, thisAndThat)

        dummyAwesome.Verify(Function(d) d.GetThis, Times.Once, "GetThisAndThat should call GetThis")

    End Sub

End Class

