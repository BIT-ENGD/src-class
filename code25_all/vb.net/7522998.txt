<customErrors mode="On" defaultRedirect="~/Errors/ErrorUnknown.aspx" redirectMode="ResponseRewrite">
  <error statusCode="500" redirect="~/Errors/Error500.aspx" />
</customErrors>

Dim lastException As Exception = Server.GetLastError()

If lastException IsNot Nothing Then LogEvent(LogLevel.Error, "UnHandled Error From 500 Error Page.", lastException)

LblErrorMessage.Text = "Unknown error occured when processing your request."

Session.Abandon()

<asp:ScriptManager ID="AppScriptManager" AsyncPostBackTimeout="3" runat="server" AllowCustomErrorsRedirect="True" OnAsyncPostBackError="AppAsyncPostBackError" AsyncPostBackErrorMessage="There was an error processing your request!" />

<script type="text/javascript" language="javascript">
    $(document).ready(function () {
        Sys.WebForms.PageRequestManager.getInstance().add_endRequest(endRequestHandler);
    });
    function endRequestHandler(sender, args) {
        if (args.get_error() != undefined) {
            var errorMessage = "There was an error processing your request!";
            errorMessage += '\nError message: ' + args.get_error().message;
            args.set_errorHandled(true);
            alert(errorMessage);
            window.location.replace('Errors/Error500.aspx');
        }
    }        
</script>

Public Sub AppAsyncPostBackError(sender As Object, e As System.Web.UI.AsyncPostBackErrorEventArgs) Handles AppScriptManager.AsyncPostBackError

    LogEvent(LogLevel.Fatal, "Asyncpostback error from update panel.", e.Exception)

End Sub

Private Sub LogEvent(level As LogLevel, logMessage As String, exception As Exception, ParamArray args() As Object)

    Try

        Dim appLogger As Logger = LogManager.GetCurrentClassLogger()

        If exception IsNot Nothing Then

            '# If it's an exception store it in a seperate file as fatal exception
            appLogger.LogException(level, String.Format(logMessage, args), exception)

            '# send an email
            SendErrorEmail(String.Format(logMessage, args), exception)

            '# Throw Exception as this was fatal
            If level = LogLevel.Fatal Then Throw

        Else

            '# Log the message
            appLogger.Log(level, logMessage, args)

        End If

    Catch ex As Exception

    End Try

End Sub

