EventHandler
EventHandler<TEventArgs>
Public Event Update(ByVal sender As BaseSubscription, ByVal e As BaseEvent)

IObservable<TEventArgs>
Dim updates = Observable.FromEvent(Of UpdateEventArgs)( _
    target:=updateSource, _
    eventName:="Update" _
)

Update
EventHandler<UpdateEventArgs>
UpdateEventArgs
EventArgs
UpdateEventArgs
Update
Update
EventHandler<UpdateEventArgs>
IObservable<UpdateEventArgs>
IObservable<[something]>
Observable.FromEvent
Function FromEvent(Of TDelegate, TEventArgs As EventArgs)( _
    conversion As Func(Of EventHandler(Of TEventArgs), TDelegate), _
    addHandler As Action(Of TDelegate), _
    removeHandler As Action(Of TDelegate) _
) As IObservable(Of IEvent(Of TEventArgs))

Func(Of EventHandler(Of TEventArgs), TDelegate)
// notice: not an EventHandler<TEventArgs>
public delegate void UpdateEventHandler(BaseSubscription sender, BaseEvent e);

// not 100% sure why he did it this way
public event UpdateEventHandler Update;

EventArgs
BaseEvent
var updates = Observable.FromEvent<UpdateEventHandler, UpdateEventArgs>(
    // conversion (Func<EventHandler<UpdateEventArgs>, UpdateEventHandler>)
    handler => (sender, e) => handler(sender, new UpdateEventArgs(e)),
    // addHandler (Action<UpdateEventHandler>)
    handler => updateSource.Update += handler,
    // removeHandler (Action<UpdateEventHandler>)
    handler => updateSource.Update -= handler
);

