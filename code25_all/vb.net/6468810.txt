<TestClass> _
    Public Class BasicNumberTests

        Function DecimalFractionalPart(ByVal number As Decimal) As Decimal
            Dim wholePart As Decimal = Math.Truncate(number)
            Return number - wholePart
        End Function

        Function DoubleFractionalPart(ByVal number As Double) As Double
            Dim wholePart As Double = Math.Truncate(number)
            Return number - wholePart
        End Function

        <TestMethod()> Public Sub SplitDoubleAsDecimal1()
            Dim number As Double = 0.65 + 0.05
            Dim fractionalPart As Double = CDbl(DecimalFractionalPart(CDec(number)))
            Assert.AreEqual(0.70000000000000007, number)
            Assert.AreEqual(0.70000000000000007, fractionalPart) '<- Fails
        End Sub

        <TestMethod()> Public Sub SplitDoubleAsDecimal2()
            Dim number As Double = 0.70000000000000007
            Dim fractionalPart As Double = CDbl(DecimalFractionalPart(CDec(number)))

            Assert.AreEqual(0.70000000000000007, number)
            Assert.AreEqual(0.70000000000000007, fractionalPart) '<- Fails
        End Sub

        <TestMethod()> Public Sub SplitDoubleAsDouble1()
            Dim number As Double = 1.65

            Assert.AreEqual(1.65, number)
            Assert.AreEqual(0.65, DoubleFractionalPart(number)) '<- Fails
        End Sub

        <TestMethod()> Public Sub SplitDoubleAsDouble2()
            Dim number As Double = 1.0 + 0.65
            Assert.AreEqual(1.65, number)
            Assert.AreEqual(0.65, DoubleFractionalPart(number)) '<- Fails
        End Sub

End Class

