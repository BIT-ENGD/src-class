''' <summary>
''' Methods and properties related to the access and management of the local static memory cache.
''' Fastest type of cache but not available across applications, web farm or web garden environments.
''' Use this cache when data is static or can be stale across application instances.
''' </summary>
''' <remarks></remarks>
Public Class LocalStaticCache

    'Internal data holder:
    Private Shared _objCache As Hashtable = Hashtable.Synchronized(New Hashtable)

    Private Sub New()
    End Sub

    ''' <summary>
    ''' Gets or sets an object in cache. Returns Nothing if the object does not exist.
    ''' </summary>
    ''' <param name="key">The name of the object.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Property Item(key As String) As Object
        Get
            If String.IsNullOrEmpty(key) Then Return Nothing
            Return _objCache(key)
        End Get
        Private Set(value As Object)
            _objCache(key) = value
        End Set
    End Property

    ''' <summary>
    ''' Insert an object into the cache.
    ''' </summary>
    ''' <param name="key">The unique object key.</param>
    ''' <param name="value">The object to store in the cache.</param>
    ''' <remarks></remarks>
    Public Shared Sub Insert(key As String,
                             value As Object)
        If Not String.IsNullOrWhiteSpace(key) Then

            If _objCache.ContainsKey(key) Then
                'If the key already exists in the Cache it will overwrite only if the objects differ:
                Interlocked.CompareExchange(Item(key), value, value)
                Return
            End If

            'store the item to the cache:
            Item(key) = value
        End If
    End Sub

    ''' <summary>
    ''' Remove an object from the cache.
    ''' </summary>
    ''' <param name="key">The key of the object to remove.</param>
    ''' <remarks></remarks>
    Public Shared Sub Remove(key As String)
        If _objCache.ContainsKey(key) Then
            _objCache.Remove(key)
        End If
    End Sub

End Class

