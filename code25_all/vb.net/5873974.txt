Public Function GetFilterPredicate() As Func(Of T, Boolean)
    Dim expressionList As List(Of Expression) = New List(Of Expression)

    For Each item as FilterInfo in _FilterList
        Dim fieldName As String = item.FieldName
        Dim fieldOperator As String = item.FieldOp
        Dim fieldValue As Object = item.FieldValue

        Dim obj As ParameterExpression = Expression.Parameter(GetType(T), "obj")
        Dim objProp As MemberExpression = Expression.PropertyOrField(obj, fieldName)
        Dim filterValue As ConstantExpression = Expression.Constant(fieldValue, objProp.Type)

        Dim methodName As String = If(fieldOperator = "=", "Equal", "NotEqual")

        Dim comparisonExp As MethodCallExpression = Expression.Call( _
            GetType(Expression),
            methodName,
            New Type() {objProp.Type, filterValue.Type},
            objProp, filterValue)

        expressionList.Add(comparisonExp)
    Next

    //
    // combine the expressions in expressionList using Expression.AndAlso
    //
    // create lambda
    //

    Dim fn As Func(Of T, Boolean) = lambda.Compile

    Return fn
End Function

Dim source As IQueryable(Of T) = MyBase.Items.ToList.AsQueryable

MyBase.ClearItems()

Dim filterPredicate As Func(Of T, Boolean) = GetFilterPredicate()

For Each item As T In source.Where(filterPredicate)
    MyBase.Items.Add(item)
Next

InvalidOperationException was unhandled:

No generic method 'Equal' on type 'System.Linq.Expressions.Expression' is
compatible with the supplied type arguments and arguments. No type arguments
should be provided if the method is non-generic.

