Imports System.Windows.Forms

Public Class DataGridViewXXXControl
    Inherits XXXInputControl
    Implements IDataGridViewEditingControl

    Private dataGridViewControl As DataGridView
    Private valueIsChanged As Boolean = False
    Private rowIndexNum As Integer

    Public Sub New()
        Me.Style = CostCentreStyle.No_Description ' forces a redraw (in case of new font size)
        Me.Session = DataGridViewXXXColumn.Session
        Me.RegionVisibility = DataGridViewXXXColumn.RegionVisibility
    End Sub

    Public Property EditingControlFormattedValue() As Object _
        Implements IDataGridViewEditingControl.EditingControlFormattedValue

        Get
            If Me.SelectedXXX Is Nothing Then
                Return String.Empty ' denotes not valid
            Else
                Return Me.SelectedXXX.Code.ToString
            End If
        End Get

        Set(ByVal value As Object)
            Try
                Me.InputString = CStr(value)
            Catch
                ' In the case of an exception, just use the default
                ' value so we're not left with a null value.
                Me.InputString = String.Empty
            End Try
        End Set
    End Property

    Public Function GetEditingControlFormattedValue(ByVal context _
        As DataGridViewDataErrorContexts) As Object _
        Implements IDataGridViewEditingControl.GetEditingControlFormattedValue

        If CInt(context And DataGridViewDataErrorContexts.CurrentCellChange) > 0 Then
            Me.ValidateInput() ' NEED TO DO THIS BECAUSE OF WEIRD WAY DATAGRIDVIEW WORKS
        End If

        If Me.IsValid Then
            Return Me.InputString
        Else
            Return String.Empty
        End If
    End Function

    Public Sub ApplyCellStyleToEditingControl(ByVal dataGridViewCellStyle As  _
        DataGridViewCellStyle) _
        Implements IDataGridViewEditingControl.ApplyCellStyleToEditingControl

        Me.Font = dataGridViewCellStyle.Font
        Me.ForeColor = dataGridViewCellStyle.ForeColor
        Me.BackColor = dataGridViewCellStyle.BackColor

    End Sub

    Public Property EditingControlRowIndex() As Integer _
        Implements IDataGridViewEditingControl.EditingControlRowIndex

        Get
            Return rowIndexNum
        End Get
        Set(ByVal value As Integer)
            rowIndexNum = value
        End Set

    End Property

    Public Function EditingControlWantsInputKey(ByVal key As Keys, _
        ByVal dataGridViewWantsInputKey As Boolean) As Boolean _
        Implements IDataGridViewEditingControl.EditingControlWantsInputKey

        Return Not dataGridViewWantsInputKey
    End Function

    Public Sub PrepareEditingControlForEdit(ByVal selectAll As Boolean) _
        Implements IDataGridViewEditingControl.PrepareEditingControlForEdit

        ' No preparation needs to be done.
    End Sub

    Public ReadOnly Property RepositionEditingControlOnValueChange() _
        As Boolean Implements _
        IDataGridViewEditingControl.RepositionEditingControlOnValueChange

        Get
            Return False
        End Get

    End Property

    Public Property EditingControlDataGridView() As DataGridView _
        Implements IDataGridViewEditingControl.EditingControlDataGridView

        Get
            Return dataGridViewControl
        End Get
        Set(ByVal value As DataGridView)
            dataGridViewControl = value
        End Set

    End Property

    Public Property EditingControlValueChanged() As Boolean _
        Implements IDataGridViewEditingControl.EditingControlValueChanged

        Get
            Return valueIsChanged
        End Get
        Set(ByVal value As Boolean)
            valueIsChanged = value
        End Set

    End Property

    Public ReadOnly Property EditingControlCursor() As Cursor _
        Implements IDataGridViewEditingControl.EditingPanelCursor

        Get
            Return MyBase.Cursor
        End Get
    End Property

    Protected Overrides Sub OnValueChanged(ByVal eventargs As EventArgs)
        ' Notify the DataGridView that the contents of the cell have changed.
        valueIsChanged = True
        Me.EditingControlDataGridView.NotifyCurrentCellDirty(True)
        MyBase.OnValueChanged(eventargs)


    End Sub

    Public Overrides Property InputString() As String
        Get
            Return MyBase.InputString
        End Get
        Set(ByVal value As String)
            lblCCName.Text = ""
            txtCostCentre.Text = value
            ' note absence of ValidateInput here
        End Set
    End Property
End Class

Imports System.Windows.Forms
Imports IBMU2.UODOTNET

Public Class DataGridViewXXXColumn
    Inherits DataGridViewColumn

    Public Shared s_Session As UniSession
    Public Shared s_RegionVisibility As String

    Public Sub New()
        MyBase.New(New DataGridViewXXXCell)
    End Sub

    Public Shared Property Session() As UniSession
        Get
            Return s_Session
        End Get
        Set(ByVal value As UniSession)
            s_Session = value
        End Set
    End Property

    Public Shared Property RegionVisibility() As String
        Get
            Return s_RegionVisibility
        End Get
        Set(ByVal value As String)
            s_RegionVisibility = value
        End Set
    End Property

    Public Overrides Property CellTemplate() As DataGridViewCell
        Get
            Return MyBase.CellTemplate
        End Get
        Set(ByVal value As DataGridViewCell)
            If (value IsNot Nothing) AndAlso _
            Not value.GetType.IsAssignableFrom(GetType(DataGridViewXXXCell)) _
            Then
                Throw New InvalidCastException("Must be a XXXInputControlCell")
            End If
            MyBase.CellTemplate = value
        End Set
    End Property
End Class


Imports System.Windows.Forms

Public Class DataGridViewXXXCell
    Inherits DataGridViewTextBoxCell

    Public Sub New()
    End Sub

    Public Overrides Sub InitializeEditingControl(ByVal rowIndex As Integer, _
           ByVal initialFormattedValue As Object, _
           ByVal dataGridViewCellStyle As DataGridViewCellStyle)

        ' Set the value of the editing control to the current cell value.
        MyBase.InitializeEditingControl(rowIndex, initialFormattedValue, _
            dataGridViewCellStyle)

        Dim ctl As DataGridViewXXXControl = _
            CType(DataGridView.EditingControl, DataGridViewXXXControl)

        ctl.InputString = CStr(Me.Value)
        'ctl.LastValue = CStr(Me.Value)
        If ctl.InputString <> String.Empty Then ctl.IsValid = True
    End Sub

    Public Overrides ReadOnly Property EditType() As Type
        Get
            ' Return the type of the editing control that XXXInputControlCell uses.
            Return GetType(DataGridViewXXXControl)
        End Get
    End Property

    Public Overrides ReadOnly Property ValueType() As Type
        Get
            ' Return the type of the value that XXXInputControlCell contains.
            Return GetType(String)
        End Get
    End Property

    'Public Overrides ReadOnly Property DefaultNewRowValue() As Object
    '    Get
    '        ' Use the current date and time as the default value.
    '        Return MyBase.DefaultNewRowValue ' maybe change this to be default costcentre
    '    End Get
    'End Property
End Class

