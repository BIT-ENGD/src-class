angular.module('cms').directive('markdownPreview', ['$sanitize', '$parse', function ($sanitize, $parse) {
return {
  restrict: 'AE',
  link: function (scope, element, attrs, ctrl) {

    /* global showdown */
    var converter = new showdown.Converter();

    scope.$watch(attrs.preview, function (value) {

      element.html($sanitize(converter.makeHtml(value)));

      if (attrs.dropzoneConfig) {

        //var preview = $parse(attrs.preview);
        //console.log(preview(scope));

        var regexp = /<p>(?:\{<(.*?)>\})?!(?:\[([^\n\]]*)\])<\/p>/;
        var newHTML = element.html().replace(
                new RegExp(regexp, 'gim'),
                '<p class="dropzone"></p>'
                );

        element.html(newHTML);

        var dropzoneFields = element[0].getElementsByClassName('dropzone');
        angular.forEach(dropzoneFields, function (dropzoneField, key) {

          var config = scope[attrs.dropzoneConfig];

          /* global Dropzone */
          var dropzone = new Dropzone(dropzoneField, config.options);

          dropzone.on('success', function (file, response) {

            /* global $ */
            var holderP = $(file.previewElement).closest('p');

            holderP.removeClass('dropzone').html('<img src="' + response.file + '"/>');

            // regex to replace [!imageName] with [!imageName](imageURL) 
            var nth = 0;
            var newMarkdown = value.replace(/^(?:\{<(.*?)>\})?!(?:\[([^\n\]]*)\])(:\(([^\n\]]*)\))?$/gim, function (match, i, original) {
              nth++;
              return (nth === (key + 1)) ? (match + '(' + response.file + ')') : match;
            });

          });
        });
      }

    });
  }
};
 }]);

<textarea class="form-group" ng-model="vm.page.content" ui-codemirror-opts="editorOptions" ui-codemirror name="content" id="content" required></textarea>

<div class="rendered-markdown" preview="vm.page.content" dropzone-config="dropzoneConfig" markdown-preview></div>

