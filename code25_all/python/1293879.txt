#imagine this is a third-party library
SPLIT_CHAR = ','

class Splitter(object):
    def __init__(self, s, split_char=None):
        self.orig = s
        if not split_char:
            self.splitted = s.split(SPLIT_CHAR)

#this person makes the mistake of re-setting the global variable
#in splitter to get different behavior, instead of just passing
#in the extra argument
import splitter

splitter.SPLIT_CHAR = '|'

def go():
    s1 = splitter.Splitter("a|b|c|d")
    print s1.orig
    print s1.splitted

#this person expects the default behavior (splitting commas)
from splitter import Splitter

def go():
    s1 = Splitter('a,b,c,d')
    print s1.orig
    print s1.splitted

import a
import b

a.go() #this one sets the global var in splitter
b.go() #this one expects the default behavior

experiment.py
a|b|c|d
['a', 'b', 'c', 'd'] #okay... everything is fine
a,b,c,d
['a,b,c,d'] #not what the programmer expected.. should be split on commas

a.py
b.py
a.py
splitter.py
b.py
a.py
b.py
