class AbstractClass:
    def __init__(self, property_a):
        self.property_a = property_a

    @property
    def some_value(self):
        """Code here uses property_a but not property_b to determine some_value"""

    @property
    def property_a(self):
        return self.property_a

    @property
    def property_b(self):
        """Has to be implemented in subclass."""
        raise NotImplementedError


class Concrete1(AbstractClass):
    """Code here including an implementation of property_b"""


class Concrete2(AbstractClass):
    """Code here including an implementation of property_b"""

property_b
property_a
property_a
some_value
property_b
property_a
property_b
property_b
property_a
AbstractClass
property_b
property_a
property_a
property_b
property_b
property_a
property_a
property_b
AbstractClass.__init__
property_b
AbstractClass.property_a
property_b
property_b
property_a
AbstractClass.some_value
property_b
property_a
some_value
property_a
property_b
property_b
property_b
__init__
property_b
property_b
