#!/usr/bin/env python
import re

expr = re.compile(r'\[[0-9][-0-9,[]*\]')
def range2list(s):
    '''Given [x-y,a,b-c] return: range(x,y) + [a] + range(b,c)
       Handle decrements and zero-filling if necessary.

    '''
    assert s.startswith('[') and s.endswith(']') and len(s) > 2
    results = []
    r = s[1:-1]  # extract from enclosing brackets
    for i in r.split(','):  # each p
        if '-' not in i:
            results.append(i)
            continue
        # Else: (it's a range
        t = i.split('-')
        if len(t) != 2:   # punt on degenerate expressions
            results.append(i)
            continue
        # Else:
        if len(t[0]) > 1 and t[0].startswith('0'):
            fmt = "%%0%sd" % len(t[0])  ## Handle zero fill
        else:
            fmt = "%s"
        try:
            l, u = int(t[0]), int(t[1])
        except ValueError:  # punt on stuff that can't be converted
            results.append(i) # remember i? There's a song about i.
            continue
        if l > u:
            step=-1
        else:
            step=1
        results.extend([fmt % x for x in range(l,u,step)])
    return results 

if __name__ == '__main__':
    import sys
    testcases = [ '[0-5]', '[1]', '[1,2,3]', '[1-3,01-3,9,9-7]',
                  '[01-20]', '[020-1]', '[a,b,c,9-]' ]
    for i in testcases:
        print 
        print  'range2list(%s)' % i
        print "\t" + ' '.join(range2list(i))

range2list([0-5])
    0:1:2:3:4

range2list([1])
        1

range2list([1,2,3])
        1:2:3

range2list([1-3,01-3,9,9-7])
        1:2:01:02:9:9:8

range2list([01-20])
        01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19

range2list([020-1])
        020:019:018:017:016:015:014:013:012:011:010:009:008:007:006:005:004:003:002

range2list([a,b,c,9-])
        a:b:c:9-

