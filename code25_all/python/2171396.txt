collections.defaultdict(lambda: 1)

class BagOfWordDoc():
    def __init__(self):
        self.data = collections.defaultdict(lambda: 1)
        for method in dir(self.data):
            if hasattr(getattr(self.data, method),'__call__') and method not in ['__class__', '__self__']:
                l = lambda *args: getattr(self.data, method)(*args)
                setattr(self, method,l)

    def vocabulary(self):
        return self.data.keys()

    def wordcount(self):
        return reduce(operator.add, self.data.values(), 0) 

 doc = BagOfWordDoc()
 doc[123]   = 123          # yields TypeError: values() takes no arguments (1 given)
 doc.keys()                # yields TypeError: values() takes no arguments (1 given)
 doc.xxx()                 # yields TypeError: values() takes no arguments (1 given)

class BagOfWordDoc():
    def __init__(self):
        self.data = collections.defaultdict(lambda: 0)

    def __getattr__(self, *args):
        return self.data.__getattribute__(*args)

    def vocabulary(self):
        return self.data.keys()

    def wordcount(self):
        return reduce(operator.add, self.data.values(), 0) 

