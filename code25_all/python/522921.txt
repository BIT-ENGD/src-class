import Cats

kitty = Cats.Kitty()

if type(kitty) == Cats.Kitty:
    kitty.Speak()

TypeError: cannot create 'Kitty' instances
Cats.Kitty
#include "CXX/Objects.hxx"
#include "CXX/Extensions.hxx"
#include <iostream>

using namespace Py;
using namespace std;

class Kitty : public Py::PythonExtension<Kitty>
{
    public:
        Kitty()
        {
        }

        virtual ~Kitty()
        {
        }

        static void init_type(void)
        {
            behaviors().name("Kitty");
            behaviors().supportGetattr();

            add_varargs_method("Speak", &Kitty::Speak);
        }

        virtual Py::Object getattr( const char *name )
        {
            return getattr_methods( name );
        }

        Py::Object Speak( const Py::Tuple &args )
        {
            cout << "Meow!" << endl;
            return Py::None();
        }
};

class Cats : public ExtensionModule<Cats>
{
    public:
        Cats()
            : ExtensionModule<Cats>("Cats")
        {
            Kitty::init_type();

            initialize();

            Dict d(moduleDictionary());
            d["Kitty"] = Type((PyObject*)Kitty::type_object());
        }

        virtual ~Cats()
        {
        }

        Py::Object factory_Kitty( const Py::Tuple &rargs )
        {
            return Py::asObject( new Kitty );
        }
};

void init_Cats()
{
    static Cats* cats = new Cats;
}


int main(int argc, char* argv[])
{
    Py_Initialize();

    init_Cats();

    return Py_Main(argc, argv);

    return 0;
}

