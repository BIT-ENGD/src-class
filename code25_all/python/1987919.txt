decorator
from decorator import decorator

@decorator
def print_function_name(function, *args):
    print '%s was called.' % function.func_name
    return function(*args)

class My_class(object):
    @print_function_name
    @classmethod
    def get_dir(cls):
        return dir(cls)

    @print_function_name
    @staticmethod
    def get_a():
        return 'a'

get_dir
get_a
AttributeError: <'classmethod' or 'staticmethod'>,  object has no attribute '__name__'
decorator
__name__
func_name
func_name
