class Teller(object):
    def __init__(self):
        self.occupied = False
        self.timeLeft = 0
        self.totTime

    def occupy(self, timeOcc):
        self.occupied = True
        self.timeLeft = timeOcc

    def nextMin(self):
        self.timeLeft -= 1
        self.totTime += 1
        if self.timeLeft == 0:
            self.occupied = False

class Bank(object):
    def __init__(numTellers, hoursOpen):
        self.tellers = []
        self.timeWaited = 0
        self.clientsWaiting = []
        for x in xrange(numTellers):
            tempTeller = Teller.__init__()
            self.tellers.append(tempTeller)
        self.minutesOpen = hoursOpen * 60

    def tellerOpen(self):
        for x in xrange(len(self.tellers)):
            if not self.tellers[x].occupied:
                return x+1
        return 0

    def runSim(self, queueInput):  #queueInput is a list of tuples (time, timeAtTeller)
        simTime = self.minutesOpen
        totCli = 0
        timeToNext = queueInput[0][0]
        timeAtNext = queueInput[0][1]
        queueInput.pop(0)
        self.clientsWaiting.append([timeToNext, timeAtNext])

        while simTime > 0:
            for person in self.clientsWaiting:
                if person[0]:
                    person -= 1
            if not self.clientsWaiting[len(self.clientsWaiting)-1][0]:
                timeToNext = queueInput[0][0]
                timeAtNext = queueInput[0][1]
                queueInput.pop(0)
                self.clientsWaiting.append([timeToNext, timeAtNext])

            remove = 0
            for x in xrange (len(self.clientsWaiting)-1):
                if tellerOpen() and not self.clientsWaiting[x][0]:
                    self.tellers[tellerOpen()].occupy(self.clientsWaiting[x][0])
                    totCli += 1
                    remove += 1
                elif not tellerOpen() and not self.clientsWaiting[x][0]:
                    self.timeWaited += 1

            for x in xrange(remove):
                self.clientsWaiting.pop(x)

            print """The total time spent in the queue by all clients was %d minutes. The total number of clients today was %d. The average waiting time was %d mins""" % (self.timeWaited, totCli, self.timeWaited / totCli)\



    if __name__ == '__main__':
    inp = raw_input()
    tList = inp.split('\n')
    qList = []
    for item in tList:
        tList = item.split(' ')
        qList.append((tList[0], tList[1]))

    virtBank = Bank.__init__(3, 7)
    bank.runSim(qList)

> TypeError: unbound method __init__() must be called with Bank instance as first argument (got int instance instead)

Bank class __init__
virtBank = Bank.__init__(3, 7)
