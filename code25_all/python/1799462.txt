from dns.resolver import Resolver
from dns.exception import DNSException
from cStringIO import StringIO
import sys

def maltego_transform(entities, messages = ''):    
    print '''<MaltegoMessage>
<MaltegoTransformResponseMessage>
<Entities>
{0}
</Entities>
<UIMessages>
{1}
</UIMessages>
</MaltegoTransformResponseMessage>
</MaltegoMessage>'''.format(entities, messages)

def domain_to_ip(domain):
    resolver = Resolver()
    results = []
    for type in ['A', 'AAAA']:
        try:
            query = resolver.query(domain, type)
        except DNSException:
            query = []
        results += query

    entities = StringIO()
    for answer in results:
        entities.write('''<Entity Type="IPAddress"><Value>{0}</Value></Entity>'''.format(answer))
    maltego_transform(entities.getvalue())

def domain_to_mxdomain(domain):
    resolver = Resolver()
    try:
        query = resolver.query(domain, 'MX')
    except DNSException:
        query = []

    entities = StringIO()
    for answer in query:
        entities.write('''<Entity Type="Domain"><Value>{0}</Value>
<AdditionalFields><Field Name="DomainType" DisplayName="Domain Type">Mail Exchange</Field></AdditionalFields>
</Entity>'''.format(answer.exchange))
    maltego_transform(entities.getvalue())

def main():
    options = {'domain_to_ip' : domain_to_ip,
               'domain_to_mxdomain' : domain_to_mxdomain}
    if len(sys.argv) > 2:
        func = options.get(sys.argv[1], None)
        if func:
            func(sys.argv[2])

if __name__ == '__main__':
    main()

