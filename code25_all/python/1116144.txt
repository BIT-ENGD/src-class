                if not do_reload and hasattr(location, "__path__"):
                    path0 = location.__path__[0]
                    if os.path.exists(path0):
                        dir_mtime = int( os.path.getmtime(path0) )
                        if fn_mtime<dir_mtime:
                            print "dir change: reloading package root", location
                            do_reload = True
                            md_mtime = dir_mtime

GET_MODULE_FUNCTION = """
def f():
    import %(parent)s
    try:
        from %(parent)s import %(child)s
    except ImportError:
        # one more time...
        reload(%(parent)s)
        from %(parent)s import %(child)s
    return %(child)s
"""

def my_import(partname, parent):
    f = None # for pychecker
    parentname = parent.__name__
    defn = GET_MODULE_FUNCTION % {"parent": parentname, "child": partname}
    #pr "executing"
    #pr defn
    try:
        exec(defn) # defines function f()
    except SyntaxError:
        raise ImportError, "bad function name "+repr(partname)+"?"
    partmodule = f()
    #pr "got", partmodule
    setattr(parent, partname, partmodule)
    #pr "setattr", parent, ".", partname, "=", getattr(parent, partname)
    return partmodule

