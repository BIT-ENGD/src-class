return set( range( 1,(self.dim+1)))
return set( self.r_dim_1_based)
return self.set_dim_1_based

#!/usr/bin/env python
import copy
from math import sqrt

'''
Puzzle #15, from The Guardian: 050624: #41: rated difficult
'''
puz = [
0,0,1, 9,0,0, 3,0,0,
0,0,0, 0,0,0, 2,0,0,
7,6,0, 0,2,0, 0,0,9,

3,0,0, 0,6,0, 0,0,5,
0,0,2, 1,0,3, 4,0,0,
4,0,0, 0,9,0, 0,0,3,

1,0,0, 0,3,0, 0,9,7,
0,0,4, 0,0,0, 0,0,0,
0,0,5, 0,0,8, 6,0,0
]

class GroupInfo: pass

class Puz(GroupInfo):
    def __init__(self, puz):
        self.A =   copy.deepcopy(puz)
        self.ncells =   len( self.A)
        self.r_ncells = range( 0,self.ncells)
        self.dim =      int( sqrt( self.ncells))
        assert (self.dim ** 2) == self.ncells, "puz is not square"
        self.r_dim_0_based = range( 0,self.dim)
        self.r_dim_1_based = range( 1, self.dim + 1)
        self.set_dim_1_based =  set( self.r_dim_1_based) ## <<---- causes to fail!
        ##### with 'empty set at W[5]' !?!?!?

        def W1_fill_func( val):
            if (val == 0):
                return set( range( 1,(self.dim+1)))
            else:
                return set( [val])

        self.W1 = [ W1_fill_func( self.A[cid])  
                   for cid in self.r_ncells ]

        def W2_fill_func( val):
            if (val == 0):
                return set( self.r_dim_1_based)
            else:
                return set( [val])

        self.W2 = [ W2_fill_func( self.A[cid])  
                   for cid in self.r_ncells ]

        def W3_fill_func( val):
            if (val == 0):
                return self.set_dim_1_based
            else:
                return set( [val])

        self.W3 = [ W3_fill_func( self.A[cid])  
                   for cid in self.r_ncells ]

        return
    #def Puz.__init__()
#class Puz

p = Puz(puz)
print p.W1 == p.W2 == p.W3

