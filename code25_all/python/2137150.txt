Parent
__new__
Parent
Parent
__new__
Parent
class Child(Parent, list):
    pass

__new__
Parent
__new__
object.__new__
Child
list.__new__
Parent
__bases__
__new__
try:
class Parent(object):
    def __new__(cls, *args, **kwargs):
        # There is a special wrapper function for instantiating instances of children
        # classes that passes in a 'bases' argument, which is the __bases__ of the
        # Children class.
        bases = kwargs.get('bases')
        if bases:
            cls = type('name', bases + (cls,), kwargs.get('attr', {}))
            for base in cls.__mro__:
                if base not in (cls, MyMainType):
                    try:
                        obj = base.__new__(cls)
                        break
                    except TypeError:
                        pass
            return obj
        return object.__new__(cls)

__new__
__int__
__init__
self.__class__
__init__
