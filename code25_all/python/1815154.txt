QTabWidget
QListView
QAbstractListModel
QMainWindow
setTabText()
setWindowTitle()
QTabWidget
from PyQt4 import QtGui, QtCore
import sys


class MainWindow(QtGui.QMainWindow):

    def __init__(self):
        QtGui.QMainWindow.__init__(self)

        self.setWindowTitle("Test")
        self._tabbar = QtGui.QTabWidget()
        self.setCentralWidget(self._tabbar)

        tab = SearchWindow(self)
        tab.titleChanged.connect(self._refreshTabTitle)
        self._tabbar.addTab(tab, "Initial title")

    def _refreshTabTitle(self, title):
        # if line 1 is commented - no bug, if line 2 is commented - bug exists
        self._tabbar.setTabText(0, title) # line 1
        #self.setWindowTitle(title) # line 2


class SearchWindow(QtGui.QSplitter):

    titleChanged = QtCore.pyqtSignal(str)

    def __init__(self, parent):
        QtGui.QSplitter.__init__(self, QtCore.Qt.Vertical, parent)

        results_model = ResultsModel(self)

        results_view = QtGui.QListView()
        results_view.setModel(results_model)
        self.addWidget(results_view)

        search_button = QtGui.QPushButton(">>")
        search_button.clicked.connect(results_model.refreshResults)
        self.addWidget(search_button)

        results_model.searchFinished.connect(self._refreshTitle)

    def _refreshTitle(self):
        self.titleChanged.emit("New title")


class ResultsModel(QtCore.QAbstractListModel):

    searchFinished = QtCore.pyqtSignal()

    def __init__(self, parent):
        QtCore.QAbstractListModel.__init__(self, parent)
        self._results = []

    def rowCount(self, parent):
        return len(self._results)

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if not index.isValid():
            return None
        elif index.row() = len(self._results):
            return None
        elif role == QtCore.Qt.DisplayRole:
            return self._results[index.row()]

    def refreshResults(self):
        self._results = ['result1', 'result2', 'result3']
        self.reset()
        self.searchFinished.emit()


app = QtGui.QApplication(sys.argv)
wnd = MainWindow()
wnd.show()
sys.exit(app.exec_())
