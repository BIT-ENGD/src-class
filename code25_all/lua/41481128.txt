function GetDamage(spell, unit)
    if spell == _Q and (isReady(_Q) or qActive) and not HasItem(3025) and not HasItem(3100) and not HasItem(3057) and not HasItem(3078) then
        return myHero:CalcDamage(unit, ((((myHero:GetSpellData(_Q).level * 20) + 10) + myHero.totalDamage) + qStacks))
    elseif spell == _Q and (isReady(_Q) or qActive) and (HasItem(3057) or sheenActive) then
        return myHero:CalcDamage(unit, myHero.damage) + myHero:CalcDamage(unit, ((((myHero:GetSpellData(_Q).level * 20) + 10) + myHero.totalDamage) + qStacks))
    elseif spell == _Q and (isReady(_Q) or qActive) and (HasItem(3025) or fActive) then
        return myHero:CalcDamage(unit, myHero.damage) + myHero:CalcDamage(unit, ((((myHero:GetSpellData(_Q).level * 20) + 10) + myHero.totalDamage) + qStacks))
    elseif spell == _Q and (isReady(_Q) or qActive) and (HasItem(3100) or lActive) then
        return myHero:CalcMagicDamage(unit, ((myHero.damage * 0.75) + (myHero.ap * 0.5))) + myHero:CalcDamage(unit, ((((myHero:GetSpellData(_Q).level * 20) + 10) + myHero.totalDamage) + qStacks))
    elseif spell == _Q and (isReady(_Q) or qActive) and (HasItem(3078) or tActive) then
        return myHero:CalcDamage(unit, (myHero.damage * 2)) + myHero:CalcDamage(unit, ((((myHero:GetSpellData(_Q).level * 20) + 10) + myHero.totalDamage) + qStacks))
    elseif spell == _E and isReady(_E) then
        return myHero:CalcMagicDamage(unit, (((myHero:GetSpellData(_E).level * 40) + 15) + (myHero.ap * 0.6)))
    else 
        return 0
    end
end

GetDamage(all)
isReady(spell)
q
e
q
e
GetDamage(_R)
GetDamage(spell) + GetDamage(spell2) + GetDamage(spell3)
