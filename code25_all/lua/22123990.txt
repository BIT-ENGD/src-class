function Init()
    -- Create Variables
    for k, v in pairs(weatherData) do
        if (not Variables[k]) then
            C4:AddVariable(k, v, "NUMBER", true, false)
        end
    end
end

function RequestData()
    local query = "select%20wind%2C%20atmosphere%2C%20item.title%2C%20item.condition.code%2C%20item.condition.temp%20from%20weather.forecast%20where%20woeid%3D" .. Properties[WOEID] .. "%20and%20u%3D%22" .. Properties[UNIT] .. "%22"
    C4:urlGet(string.format("http://query.yahooapis.com/v1/public/yql?q=%s", query))
end

function ReceivedAsync(ticketId, strData, responseCode, tHeaders)
    dbg(string.format("ReceivedAsync[%s]: %s", ticketId, strData))

    for k, v in pairs(weatherData) do
        local tempVal = ParseData(strData, k)

        -- Set property, table, and variable
        Properties[displayProperties[k]] = tempVal
        weatherData[k] = tempVal
        C4:SetVariable(k, tostring(tempVal))

        OnPropertyChanged(displayProperties[k])

        if (tempVal ~= weatherData[k]) then
            if (k == RISING) then
                tempVal = weatherRising[tonumber(tempVal)] or "N/A"
            end
        end

        C4:UpdateProperty(displayProperties[k], tostring(tempVal))
    end

    if(weatherData["code"] ~= "N/A" and weatherData["code"] ~= nil) then
        weatherData["condition"] = weatherConditions[tonumber(weatherData["code"])]
        C4:UpdateProperty(CONDITION, weatherData["condition"])
    end

    for k, v in pairs(weatherData) do
        dbg(displayProperties[k] .. ":" .. v)
    end
end

function ParseData(strData, item)
    return string.match(strData, string.format("%s=\"(.-)\"", item)) or 
    string.match(strData, string.format("<%s>Conditions for (.+)</%s>", item, item)) or
    "N/A"
end

function RequestData()
    C4:urlGet(string.format("https://rrtp.comed.com/rrtp/ServletFeed type=instanthourly))
end

function ParseData(strData, item)
    return string.match(strData, string.format("\b([0-9]\.[0-9])\b")) or
    "N/A"
end

