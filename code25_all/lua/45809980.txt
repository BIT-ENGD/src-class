require("loadCheckfile")  
require("checkValPairs")
local checklist = loadCheckfile("/home/myname/code/workbench/src/check.lst")

local keyList = {}
local valList = {}

-- Load GET arguments into tables
local args = ngx.req.get_uri_args()
for key, val in pairs(args) do
    table.insert(keyList, key)
    table.insert(valList, val)
end

-- show values in table (just for testing)
ngx.say(unpack(keyList))
ngx.say(unpack(valList))


local key1

-- search for keywords and look them up in the checklist
for i = 1, table.maxn(keyList) do
    if keyList[i] == "user" then
        key1 = i
        for j = 1, table.maxn(keyList) do
            if keyList[j] == "pass" then
                doesFit = checkValPairs(checklist, keyList[key1], valList[key1], keyList[j], valList[j])
            end
        end
    end
end

-- Show wether the combination fits or not
ngx.say(doesFit)

user root;

worker_processes 1;
daemon off;
error_log /dev/stdout warn;

events {
    worker_connections 32;
}

http {
    default_type text/html;
    access_log off;

    lua_package_path '/home/myname/code/workbench/src/?.lua;;';
    server {
       listen 80;

       location / {
            content_by_lua_file /home/myname/code/workbench/src/handler.lua;
        }
    }
}

local function fillChecklistTable(checklist, valueLine) 
    repeat
        firstValLength = string.find(valueLine,"=")
        firstVal = string.sub(valueLine, 1, firstValLength-1)

        valueLine = string.sub(valueLine, firstValLength+1)

        secondValLength = string.find(valueLine, ",")

        if secondValLength ~= nil then
            secondVal = string.sub(valueLine, 1, secondValLength-1)
        else
           secondVal = valueLine
        end

        if checklist[firstVal] == nil then
            checklist[firstVal] = {secondVal}
        else
            table.insert(checklist[firstVal], secondVal)
        end

        if secondValLength ~= nil then
            valueLine = string.sub(valueLine, secondValLength+1)
        else
            valueLine = nil
        end

     until valueLine == nil
end

checklist = {}

function loadCheckfile(checkfile)
    local values = io.open(checkfile)
    local valueLine = values:read()

    while valueLine ~= nil do
        fillChecklistTable(checklist, valueLine)
        valueLine = values:read()
    end
    return checklist
end

checklist = {}

local checkFile = require("loadCheckfile")
local checkPairs = require("checkValPairs")

local checklist = checkFile.loadCheckfile("/home/myname/code/workbench/src/pw_list.txt")

local keyList = {}
local valList = {}

local args = ngx.req.get_uri_args()
for key, val in pairs(args) do
    table.insert(keyList, key)
    table.insert(valList, val)
end


ngx.say(unpack(keyList))
ngx.say(unpack(valList))


local key1

for i = 1, table.maxn(keyList) do
    if keyList[i] == "user" then
        key1 = i
        for j = 1, table.maxn(keyList) do
            if keyList[j] == "pass" then
                doesFit = checkValPairs(checklist, keyList[key1], valList[key1], keyList[j], valList[j])
            end
        end
    end
end

ngx.say(doesFit)

module("loadCheckfile", package.seeall)

local function fillChecklistTable(checklist, valueLine) 
    repeat
        firstValLength = string.find(valueLine,"=")
        firstVal = string.sub(valueLine, 1, firstValLength-1)

        valueLine = string.sub(valueLine, firstValLength+1)

        secondValLength = string.find(valueLine, ",")

        if secondValLength ~= nil then
            secondVal = string.sub(valueLine, 1, secondValLength-1)
        else
            secondVal = valueLine
        end

        if checklist[firstVal] == nil then
            checklist[firstVal] = {secondVal}
        else
            table.insert(checklist[firstVal], secondVal)
        end

        if secondValLength ~= nil then
            valueLine = string.sub(valueLine, secondValLength+1)
        else
            valueLine = nil
        end

    until valueLine == nil
end

checklist = {}

function loadCheckfile.loadCheckfile(checkfile)
    local values = io.open(checkfile)
    local valueLine = values:read()

    while valueLine ~= nil do
        fillChecklistTable(checklist, valueLine)
        valueLine = values:read()
    end
    return checklist
end

