-- Base class
setmetatable(BaseClass, {
  __call = function (cls, ...)
    local self = setmetatable({}, cls)
    self._value = '12345'
    return self
  end,
})

-- Derived Class
setmetatable(DerivedClass, {
  __index = BaseClass, -- this is what makes the inheritance work
  __call = function (cls, ...)
    local self = ???
    -- How to call superclass constructor here?
    return self
  end,
})
function DerivedClass:haha()
  print(self._value)
  self._value = 0 -- Works on _value for example
  print(self._value)
end

-- Create instance
instance = DerivedClass()
assert_not_nil(instance._value) -- instance._value always nil here...
instance:haha() -- print 12345 and print 0

local self = setmetatable({}, BaseClass)
local self = setmetatable({}, BaseClass())
cls
DerivedClass()
