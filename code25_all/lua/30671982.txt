  function image_utils.preprocess(meanfile, oneD_image_table)
      local img_mean = torch.load(meanfile).img_mean:transpose(3,1)
      return function()
           for t_class, img_path in pairs(oneD_image_table) do
              local im3 = image.load(img_path)
              local im4 = image.scale(im3,227,227,'bilinear')*25
              return im4 - image.scale(img_mean, 227, 227, 'bilinear')  

      end
end

 im_f = image_util.preprocess(meanfile, path_list)
 repeat
    im=im_f()
    batch[count]:copy(im)
    count = count + 1

 until count == batchSize 

  repeat 
    im = im_f()
    count = count+1
    batch[count] = im
  until im == nil (or im is some sentinel value that tells me to stop)

