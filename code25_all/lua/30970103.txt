--the table rays is a table of tables, and each table inside is formatted as such:
--rays[x] = {100,200,150,600,200,400}, where (100,200) are ordered pairs, etc.
--The table lines simply contains values for x1,y1,x2,y2

for i,ray in ipairs(rays) do
        for j,line in ipairs(lines) do
            if line.x2 ~= nil and #ray>3 then 
                print(line.x2..' '..line.y2)
                iX, iY = intersect.test(ray[#ray-3],ray[#ray-2],
                         ray[#ray-1],ray[#ray],line.x1,line.y1,line.x2,line.y2)

--The above code takes each ray and 
--sees if it intersects with a line, with the intersect.test function
--Then if it does, where iX and iY aren't nil, it continues

                if iX ~= nil and iY ~= nil then
                    local rayA = (180/math.pi)*math.atan(getSlope(ray[#ray-3],ray[#ray-2],ray[#ray-1],ray[#ray]))
                    local lineA = (180/math.pi)*math.atan(getSlope(line.x1,line.y1,line.x2,line.y2))
                    local normalA = (180/math.pi)*math.atan(-1/getSlope(line.x1,line.y1,line.x2,line.y2))

--Here I'm calculating the angle in degrees. For the final code all those atans will
--be out of there for optimization, but its easiest now to see the actual angle 

                    print(rayA..' '..lineA..' '..normalA)

                    ray[#ray-1]=iX
                    ray[#ray]=iY

--This little part just create a point on the ray right at the intersection
--The code after this is my attempt, which doesn't work

                    local reflectA = normalA-rayA
                    local reflectR = 2*reflectA+rayA

                    print(reflectR)

                    reflectR = reflectR/(180/math.pi)
                    local rSlope = math.tan(reflectR)

                    local offset = 0


                    ray[#ray+1]=iX+offset
                    ray[#ray+1]=iY+(offset*rSlope)
                end
            end
        end
    end

