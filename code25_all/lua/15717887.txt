luna.h
luna.h
TPanel
  cn := T.ClassName;
  f := @StaticOnCreate;
  lua_pushlightuserdata(L, self); // put offset to self into lightuserdata
  lua_pushcclosure(L, f, 1);
  lua_setglobal(L, PAnsiChar(UTF8Encode(cn))); // T() in lua will make a new instance.

TPanel
p = TPanel("somename")

  o := TLuaClassTemplate(lua_topointer(L, lua_upvalueindex(1)));
  result := o.OnCreate(L);

OnCreate
name
TPanel
luna.h
inject
  lua_newtable(FL); // create a new table for the class object ('self')
  obj_index := lua_gettop(FL);

  lua_pushnumber(FL, 0);

  a := lua_newuserdata(FL, SizeOf(pointer)); // store a ptr to the ptr
  a^ := obj; // set the ptr to the ptr to point to the ptr... >.>
  luaL_newmetatable(FL, PAnsiChar(UTF8Encode(cn))); // get (or create) the classname_metatable
  lua_pushstring(FL, PAnsiChar(UTF8Encode('__gc')));
  lua_pushlightuserdata(FL, self); // put offset to self into lightuserdata
  lua_pushcclosure(FL, @StaticGc_T, 1);
  lua_settable(FL, -3);
  lua_setmetatable(FL, -2); // userdata.metatable = classname_metatable

  lua_settable(FL, obj_index); // self[0] = obj;

  f := @StaticThunk;
  // register the functions
  for i := 0 to length(ClassApiArray) - 1 do begin
    lua_pushstring(FL, PAnsiChar(UTF8Encode(ClassApiArray[i].name)));
    lua_pushlightuserdata(FL, self); // put offset to self into lightuserdata
    lua_pushnumber(FL, i); // let the thunk know which method we mean
    lua_pushcclosure(FL, f, 2);
    lua_settable(FL, obj_index); // self["function"] = thunk("function")
  end;

  lua_pushvalue(FL, -1); // dup object on stack top
  rec.ref := luaL_ref(FL, LUA_REGISTRYINDEX); // store object as ref
  ...
  result := 1;

p = TPanel("somename")
p = TPanel("somename", "xmltemplatenodename")

OnCreate
inherits = xmltemplatenodename
inject
xmltemplatenodename
inject
inject
xmltemplatenodename
xmltemplatenodename
OnCreate
Inject
  lua_setglobal(FL, PAnsiChar(objName8));

