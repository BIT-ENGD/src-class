unsigned short crc16(const char* pstrCurrent, int iCount)
{
    unsigned short wCRC = 0;
    int iIndex = 0;

    while(--iCount >= 0)
    {
        wCRC = wCRC ^ ((int)(*pstrCurrent++) << 8);
        printf ("WCRC = %u\n", wCRC);
    }
    return (wCRC & 0xFFFF);
}

local function crc16(keyCurrent, byteCount)
    wCRC = 0
    byteIndex = 1
    local crcInput = {}

    while byteCount > 0 do    
        print ("BYTE COUNT= " .. byteCount)

        wCRC=bit32.bxor(wCRC, bit32.lshift(keyCurrent[byteIndex], 8))
        print ( "WCRC = " .. wCRC )

        byteCount = byteCount-1
        byteIndex = byteIndex+1

    end
end

unsigned short crc16(const char* pstrCurrent, int iCount)
{
    unsigned short wCRC = 0;
    int iIndex = 0;
    // Perform the following for each character in the buffer
    while(--iCount >= 0)
    {
        // Get the byte information for the calculation and
        // advance the pointer
        wCRC = wCRC ^ ((int)(*pstrCurrent++) << 8);
        for(iIndex = 0; iIndex < 8; ++iIndex)
        {
            if(wCRC & 0x8000)
            {
                wCRC = (wCRC << 1) ^ 0x1021;
            }
            else
            {
                wCRC = wCRC << 1;
            }
        }
    }
    return (wCRC & 0xFFFF);
}

function crc16 (keyCurrent, iCount)
    wCRC = 0
    byteIndex = 1
    iIndex = 0
    local crcInput = {}

    while iCount >= 1 do
        wCRC = bit32.bxor (wCRC, bit32.lshift(keyCurrent[byteIndex], 8))
                for iIndex=0,8 do
                    if (bit32.band (wCRC, 0x8000) ~= nil ) then
                            wCRC = bit32.bxor (bit32.lshift (wCRC, 1), 0x1021)
                    else
                            wCRC = bit32.lshift (wCRC, 1)
                    end

                end
        iCount = iCount-1
        byteIndex = byteIndex+1
    end
    return (bit32.band (wCRC, 0xFFFF))
end

local dKey = {}
dKey = {8, 210, 59, 0,  18, 166, 254, 117}
print ( "CRC = " .. crc16 (dKey ,8) )

