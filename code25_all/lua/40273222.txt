player_object -> newRect
static
player_object
dynamic
player_object
player_object
isTouching
player_object
local composer = require( "composer" )
local scene = composer.newScene()
local physics = require( "physics" )
physics.start()
physics.setGravity( 0, 0 )
-- system.activate( "multitouch" )

-- Variables
    width = display.actualContentWidth
    height = display.actualContentHeight
    movementX = 0
    movementY = 0
    movementSpeed = 5
    playerMoving = false
    wDown = false
    aDown = false
    sDown = false
    dDown = false
-- /

-- Map
    group_map1 = display.newGroup()

    mapBoundary_left = display.newRect(width * 0.051, height * 0.5, width * 0.01, height)
    mapBoundary_right = display.newRect(width * 0.949, height * 0.5, width * 0.01, height)
    mapBoundary_top = display.newRect(width * 0.5, height * 0.051, width, width * 0.01)
    mapBoundary_bottom = display.newRect(width * 0.5, height * 0.949, width, width * 0.01)

    mapBoundary_left:setFillColor(1,1,1)
    mapBoundary_right:setFillColor(1,1,1)
    mapBoundary_top:setFillColor(1,1,1)
    mapBoundary_bottom:setFillColor(1,1,1)

    mapBoundary_left.type = "leftboundary"
    mapBoundary_right.type = "rightboundary"
    mapBoundary_top.type = "topboundary"
    mapBoundary_bottom.type = "bottomboundary"

    physics.addBody( mapBoundary_left, "static", {friction=1, bounce=0} )
    physics.addBody( mapBoundary_right, "static", {friction=1, bounce=0} )
    physics.addBody( mapBoundary_top, "static", {friction=1, bounce=0} )
    physics.addBody( mapBoundary_bottom, "static", {friction=1, bounce=0} )
-- /

-- Player
    player_object = display.newRect(width * 0.5,height * 0.5,10,10)
    physics.addBody( player_object, "dynamic", {friction=1, bounce=0} )
    player_object.type = "player"
    function func_collision(self, event)
        if event.other.type == "leftboundary" then
            aDown = false
        elseif event.other.type == "rightboundary" then
            dDown = false
        elseif event.other.type == "topboundary" then
            wDown = false
        elseif event.other.type == "bottomboundary" then
            sDown = false
        end
    end
    player_object.collision = func_collision
    player_object:addEventListener("collision")
-- /

function func_movePlayer(event)
    player_object.x = player_object.x + movementX
    player_object.y = player_object.y + movementY
    player_object.rotation = 0
    if aDown == true and dDown == true then
        movementX = 0
    elseif aDown == true and dDown == false then
        movementX = -movementSpeed
    elseif aDown == false and dDown == true then
        movementX = movementSpeed
    elseif aDown == false and dDown == false then
        movementX = 0
    end
    if wDown == true and sDown == true then
        movementY = 0
    elseif wDown == true and sDown == false then
        movementY = -movementSpeed
    elseif wDown == false and sDown == true then
        movementY = movementSpeed
    elseif wDown == false and sDown == false then
        movementY = 0
    end
end
Runtime:addEventListener("enterFrame", func_movePlayer)

function onKeyEvent( event )
    local message = "Key '" .. event.keyName .. "' was pressed " .. event.phase
    -- print( message )

    if event.keyName == "w" then
        if event.phase == "down" then
            wDown = true
        elseif event.phase == "up" then
            wDown = false
        end
    end
    if event.keyName == "a" then
        if event.phase == "down" then
            aDown = true
        elseif event.phase == "up" then
            aDown = false
        end
    end
    if event.keyName == "s" then
        if event.phase == "down" then
            sDown = true
        elseif event.phase == "up" then
            sDown = false
        end
    end
    if event.keyName == "d" then
        if event.phase == "down" then
            dDown = true
        elseif event.phase == "up" then
            dDown = false
        end
    end
    if event.keyName == "space" then
        -- Attack/Jump?
    end
end
Runtime:addEventListener( "key", onKeyEvent )

