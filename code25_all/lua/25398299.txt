table       = {} -- some kind of database
table[1]    = {table.containing.table.with.even.more.tables.inside}
table[9]    = {table.containing.table.with.even.more.tables.inside}
table[13]   = {table.containing.table.with.even.more.tables.inside}
table[15]   = {table.containing.table.with.even.more.tables.inside}
table[45]   = {table.containing.table.with.even.more.tables.inside}
table[3254] = {table.containing.table.with.even.more.tables.inside}

for key, value in pairs(table) do
    print(key)
end

9    13   1   3254    45    15

sorted_table = {} -- shall point to table, with sorted keys

for i = 0, #table do  -- from 0 to the last key of table (some write #table is the last key, some write it's the number of contained keys, I don't know. If you do, please tell me.)
    if table[i] then -- for runs every number from i to #table, if i is a key, bingo.
        table.insert(sorted_table,(table[i])) -- first key found -> sorted_table[1], second -> sorted_table[2]....
    end
end

for k,v in pairs(sorted_table) do
    print(key)
end

#table
0
#table
**SOLUTION-EDIT**

local sorted_table = {}
for k, v in pairs(original_table) do
    table.insert(sorted_table, k)
end
table.sort(sorted_table)
for k, v in ipairs(sorted_table) do
    print(original_table[v])
end

