typedef ? TLuaFunction;

class Foo
{
public:
    void SetCallback( TLuaFunction f )
    {
        mCallback = f;
    }

    void ExecuteCallback()
    {
        f();    // Calls Lua function
    }

private:
    TLuaFunction    mCallback;
};

// Manager initialization
SLB::Manager scriptManager;

// SetCallback registration into lua
SLB::Class<Foo>( "Foo", &scriptManager )
    .constructor()
    .set( "SetCallback", &Foo::SetCallback )
    .set( "ExecuteCallback", &Foo::ExecuteCallback )
    ;

char* luaCode = 
    "SLB.using( SLB )\n"
    "o = Foo()\n"
    "o:SetCallback( function()                          \n"
    "                   print( 'Callback executed' )    \n"
    "               end                                 \n"    
    ")                                                  \n"    
    "o:ExecuteCallback()                                \n";    

SLB::Script script( &scriptManager );
script.doString( luaCode );

// The result is
> "Callback executed"

