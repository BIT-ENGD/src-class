string.FUNCTION('myString', PARAMETER)

('myString'):METHOD(PARAMETER)

-- example string operation
some_str, pos = '   some string', 1
-- default string syntax
while string.find(string.sub(some_str, pos, pos), '%s') do pos = pos +1 end
-- the same with syntactic sugar
while some_str:sub(pos, pos):find('%s') do pos = pos +1 end

calc = {
    result = 0,
    operator = '',
    run = function(self, a, b, r) -- return self with r='s'
        if b == 's' then r, b = b, nil end
        if not b then b, a = a, self.result end
        if self.operator == '+' then self.result = (a) + (b)
        elseif self.operator == '-' then self.result = (a) - (b)
        elseif self.operator == '*' then self.result = (a) * (b)
        elseif self.operator == '/' then self.result = (a) / (b) end
        if r ~= nil then return self else return self.result end
    end,
    add = function(self, a, b, r) self.operator = '+' return self:run(a, b, r) end,
    sub = function(self, a, b, r) self.operator = '-' return self:run(a, b, r) end,
    mul = function(self, a, b, r) self.operator = '*' return self:run(a, b, r) end,
    div = function(self, a, b, r) self.operator = '/' return self:run(a, b, r) end
}

-- single operation
result = calc:add(12, 5)

-- concatenated operations
result = calc:add(12, 5, 's'):sub(3, 's'):mul(2, 's'):div(7)

