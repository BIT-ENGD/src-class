counter = 0;
sampletime = 0;
lastrisetime = tmr.now()
pin = 2

do
  gpio.mode(pin, gpio.INT)

  local function rising(level)
    -- to eliminate multiple counts during a short period (.5 second) difference is taken
        if ((tmr.now() - lastrisetime) > 500000) then
        lastrisetime = tmr.now();
    end
    -- when tmr.now() resets to zero this takes into account that particular count 
    if ((tmr.now() - lastrisetime) < 0) then
        lastrisetime = tmr.now();
    end
  end

  local function falling(level)
    if ((tmr.now() - lastrisetime) > 500000) then
        -- Only counted when the pin is on falling
        -- It is like a sine curve so either the peak or trough is counted 
            counter = counter + 1;
        print(counter)
        lastrisetime = tmr.now();
        sampletime = lastrisetime;
    end
    -- when tmr.now() resets to zero this takes into account that particular count 
    if ((tmr.now() - lastrisetime) < 0) then
        lastrisetime = tmr.now();
            counter = counter + 1;
        print(counter)
    end
  end

  gpio.trig(pin, "up", rising)
  gpio.trig(pin, "down", falling)
end

NodeMCU 0.9.6 build 20150704  powered by Lua 5.1.4
> Connecting...
connected
print(node.heap())
22920
> print(node.heap())
22904
> print(node.heap())
22944
> print(node.heap())
22944
> 2. .print(node.heap())
22944
> print(node.heap())
22944
> ∆.)ç˛.ä‚¸ ã ¸@H7.àåË‘

NodeMCU 0.9.6 build 20150704  powered by Lua 5.1.4
> Connecting...
connected
 print(node.heap())
21216
> F.)ç˛.¶Ùå¶1.@H  .ÊÍ

NodeMCU 0.9.6 build 20150704  powered by Lua 5.1.4
> Connecting...
connected
H!à»©.ä‚D.ã ¸å¶H.åb‘

NodeMCU 0.9.6 build 20150704  powered by Lua 5.1.4
> Connecting...
connected
 print(node.heap())
22904
> print(node.heap())
21216
> 

