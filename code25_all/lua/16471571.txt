Displacement      | Position it | Percent 
of position       | Displays @  | Overshot Over
-------------------------------------------------
    25            |    12.5     |   50%
    100           |    25       |   100%
    200           |    37.5     |   200%
    400           |    43.75    |   400%
    ...                ...          ...

Note: Decimals would obviously round down so we can actually display it.

function KineticModel:SetPosition(NewPosition)
    -- Set's the position of the kinetic model. Using this, it'll calculate velocity.


    local CurrentTime = tick()
    local ElapsedTime = CurrentTime - self.TimeStamp
    local LocalVelocity = ((self.Position - self.LastPosition) * 5) / ElapsedTime

    TimeStamp = CurrentTime
    self:SetVelocity((0.2 * self.Velocity) + (0.8 * LocalVelocity)) -- 20% previous velocity maintained, 80% of new velocity used.

    if NewPosition > self.Maximum then
        print("[KineticModel] - Past Max Manual")
        local Displacement = math.abs(NewPosition - self.Maximum)
        -- Dampen position so it can't go over. 

        self.Position = self.Maximum + (Displacement / self.MaxBounce) -- This doesn't work. :(
    elseif NewPosition < self.Minimum
        print("[KineticModel] - Past Min Manual")
        local Displacement = math.abs(NewPosition - self.Minimum)
        -- Same displacement here
    else
        self.Position = NewPosition
    end

    self.LastPosition = self.Position
    self.OnPositionChange(self.Position)
    print("[KineticModel] - Set Velocity @ "..self.Velocity.."; Local Velocity @ "..LocalVelocity)

end

