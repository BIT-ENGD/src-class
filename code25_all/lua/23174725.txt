  local function AddTime (MinAfter, BaseTime) 


        if (MinAfter == nil) then  MinAfter = 0 end
        if (BaseTime == nil) or (BaseTime.min == nil) or (BaseTime.hour == nil)  then  BaseTime = os.date("*t") end

          BaseTime.hour = BaseTime.hour + math.floor((BaseTime.min + MinAfter)/60)
          BaseTime.min =  BaseTime.min + MinAfter - (60 * (math.floor((BaseTime.min + MinAfter)/60)))

          if BaseTime.hour > 24 then  BaseTime.hour = 24 end

          return  BaseTime

        end


        local sunriseHour = os.date("*t" ,os.time {year = 2014, month = 4, day = 19, yday = 259, wday = 4, hour = 6, min = 0, sec = 0, isdst = false});

    -- this is the original time object in this case sunraiseHour

          print ("sunriseHour time:" .. (string.format("%02d",sunriseHour.hour) .. ":" .. string.format("%02d", sunriseHour.min)));


    -- first call 

    local newtime1= AddTime(10, sunriseHour);


          print ("call 1 time:" .. string.format("%02d", newtime1.hour) .. ":" .. string.format("%02d", newtime1.min));

         -- on the 1st call  I get 07:10 which is right 

    -- 2nd call 

    local newtime2= AddTime(10, sunriseHour);


          print ("call 1 time:" .. string.format("%02d", newtime2.hour) .. ":" .. string.format("%02d", newtime2.min));


          -- on the 2nd call  I get 07:20 and not 07:10 since this was the 2nd call to the function - the BaseTime var within the function was not local   

