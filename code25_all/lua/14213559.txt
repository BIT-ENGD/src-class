#include "lua.h"
#include "lauxlib.h"
#include "lualib.h"
#include <stdlib.h>

static int add(lua_State *L) {
    int x = luaL_checkint(L, -2);
    int y = luaL_checkint(L, -1);
    lua_pushinteger(L, x + y);
    return 1;
}

static const struct luaL_Reg reg_lib[] = {
    {"add", add}
};

int luaopen_tool(lua_State *L) {
    luaL_newlib(L, reg_lib);
    lua_setglobal(L, "tool");
    return 0;
}

#include "lua.h"
#include "lauxlib.h"
#include "lualib.h"
#include <stdlib.h>

int main(int argc, char* const argv[]) {
    lua_State *L = luaL_newstate(); 
    luaL_requiref(L, "base", luaopen_base, 1);
    luaL_requiref(L, "package", luaopen_package, 1);
    lua_getglobal(L, "require");
    if (!lua_isfunction(L, -1)) {
        printf("require not found\n");
        return 2;
    }
    lua_pushstring(L, "tool");
    if (lua_pcall(L, 1, 1, 0) != LUA_OK) {
        printf("require_fail=%s\n", lua_tostring(L, -1));
        return 3;
    }
    lua_getfield(L, -1, "add");
    lua_pushinteger(L, 2);
    lua_pushinteger(L, 3);
    lua_pcall(L, 2, 1, 0);
    int n = luaL_checkint(L, -1);
    printf("n=%d\n", n);
    return 0;
}

