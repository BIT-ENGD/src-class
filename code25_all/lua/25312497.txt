gpx
encoded polylines
    <trkseg>
                <trkpt lon="-120.2" lat="38.5"/>
                <trkpt lon="-120.95" lat="40.7"/>
                <trkpt lon="-126.453" lat="43.252"/>
    </trkseg>

file = io.open(arg[1], "r")
io.input(file)
--
function round(number, precision)
   return math.floor(number*math.pow(10,precision)+0.5) / math.pow(10,precision)
end

function encodeNumber(number)
  return number
end
--
local Olatitude = 0
local Olongitude = 0
--
while true do
  local line = io.read()
  if line == nil 
  then 
    break 
  end
  if string.match(line, "trkpt") then
    local latitude
    local longitude
    local encnum
    latitude = string.match(line, 'lat="(.-)"')
    longitude = string.match(line, 'lon="(.-)"')
    latitude = round(latitude,5)*100000
    longitude = round(longitude,5)*100000
    encnum = encodeNumber(latitude-Olatitude)
    print(encnum)
    encnum = encodeNumber(longitude-Olongitude)
    print(encnum)
    Olatitude = latitude
    Olongitude = longitude
  end
end

3850000
-12020000
220000
-75000
255200
-550300

function encodeNumber(num) {
   var num = num << 1;
   if (num < 0) {
      num = ~(num);
   }
   var encoded = '';
   while (num >= 0x20) {
      encoded += String.fromCharCode((0x20 | (num & 0x1f)) + 63);
      num >>= 5;
   }
   encoded += String.fromCharCode(num + 63);
   return encoded;   
}

function encodeNumber(number)
  local num = number
  num = num * 2
  if num < 0
  then
    num = (num * -1) - 1
  end
  while num >= 32
  do
    local num2 = 32 + (num % 32) + 63
    print(string.char(num2))
    num = num / 32
  end
  print(string.char(num + 63) .. "\n-----")
end

encodeNumber(3850000)   -- _p~iF
encodeNumber(-12020000) -- ~ps|U
encodeNumber(220000)    -- _ulL
encodeNumber(-75000)    -- nnqC
encodeNumber(255200)    -- _mqN
encodeNumber(-550300)   -- vxq`@

