function permgen (a, n)
  if n == 0 then
 coroutine.yield(a)
  else
    for i=1,n do

      -- put i-th element as the last one
      a[n], a[i] = a[i], a[n]

      -- generate all permutations of the other elements
      permgen(a, n - 1)

      -- restore i-th element
      a[n], a[i] = a[i], a[n]

    end
  end
end

function perm (a)
  local n = table.getn(a)
  return coroutine.wrap(function () permgen(a, n) end)
end

K = {"a","b","c"}


for p in perm(K)  do
   print(p[1],p[2],p[3])
end


for p in perm(K)  do
   print(p[1],p[2],p[3])
end

-- everything above is copied from the Lua online document,
-- my modification is the following
setmetatable(K,{__call=perm(K)})
for p in K  do
   print(p[1],p[2],p[3])
end

-- cannot repeat!
-- perm.lua:44: cannot resume dead coroutine
for p in K  do
   print(p[1],p[2],p[3])
end

