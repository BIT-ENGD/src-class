static const struct luaL_reg SelSurfaceLib [] = {
    {"CapabilityConst", CapabilityConst},
    {"create", createsurface},
    {NULL, NULL}
};

static const struct luaL_reg SelSurfaceM [] = {
    {"Release", SurfaceRelease},
    {"GetPosition", SurfaceGetPosition},
    {"clone", SurfaceClone},
    {"restore", SurfaceRestore},
    {NULL, NULL}
};

void _include_SelSurface( lua_State *L ){
    luaL_newmetatable(L, "SelSurface");
    lua_pushstring(L, "__index");
    lua_pushvalue(L, -2);
    lua_settable(L, -3);    /* metatable.__index = metatable */
    luaL_register(L, NULL, SelSurfaceM);
    luaL_register(L,"SelSurface", SelSurfaceLib);
}

local sub = SelSurface.create()
local x,y = sub:GetPosition()
...

function HLSubSurface(parent_surface, x,y,sx,sy )
    local self = {}

    -- fields
    local srf = parent_surface:SubSurface( x,y, sx,sy )

    -- methods
    local meta = {
        __index = function (t,k)
            local tbl = getmetatable(srf)
            return tbl[k]
        end
    }
    setmetatable( self, meta )

    return self
end

sub = HLSubSurface( parent, 0,0, 160,320 )
x,y = sub.GetPosition()

