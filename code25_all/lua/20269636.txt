Mytable[MyfirstLvl].Mysecondlvl.fred
MyfirstLvl1
if (type(Mytable) == 'table') and (type(Mytable[MyfirstLvl]) == 'table') and (type(Mytable[MyfirstLvl].Mysecondlvl) == 'table') then
    --some code using Mytable[MyfirstLvl].Mysecondlvl.fred
end

_G
'['
']'
function newType(reference)
    if type(reference) ~= 'string' then
        print('...argument to Type must be a string')
        return
    end

    local t = {string.split('].[', reference)}

    local tt = {}
    for k, v in ipairs(t) do
        if string.len(v) ~= 0 then
            local valueToInsert = v
            if (string.sub(v, 1, 1) == '"') or (string.sub(v, 1, 1) == "'") then
                valueToInsert = string.sub(v, 2, -2)
            elseif tonumber(v) then
                valueToInsert = tonumber(v)
            end
            table.insert(tt, valueToInsert)
        end
    end

    local myReference = _G
    local myType
    for i, curArg in ipairs(tt) do
        if type(myReference) ~= 'table' then            
            return 'nil'            
        end
        if type(myReference[curArg]) ~= 'nil' then
            myReference = myReference[curArg]
            myType = type(myReference)
        else
            return 'nil'
        end
    end
    return myType

end    
SavedDB = {}
SavedDB.profiles = {}
SavedDB.profiles.Character = {}
SavedDB.profiles.Character.name = 'fireymerlin'
print(newType('SavedDB.profiles["Character"].name')

