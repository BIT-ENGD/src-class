require "modules\\myparentclass"
require "modules\\condition"
require "modules\\helpers"
require "constants"

parentclass = MyParentClass:new()
print ("MyParentClass Type : " .. parentclass:getCode())

-- add conditions

-- condition 1
condition1 = Condition:new(nil,"Are you happy?" , "YES")
parentclass:addCondition(condition1)

-- -- condition 2
condition2 = Condition:new(nil,"Are you sad?" , "NO")
parentclass:addCondition(condition2)


local l = parentclass:getConditions()

print(l[2]:getQuestion())

require "constants"
require "modules\\condition"
require "modules\\helpers"

-- Meta class
MyParentClass = {code = ""}


function MyParentClass:new (o)
   o = o or {}
   setmetatable(o, self)
   self.__index = self
   self.condition = condition
   self.conditions = {}
   return o
end

function MyParentClass:getCode ()
   return "Parent Class"
end

function MyParentClass:addCondition(condition)
    print(condition)
    table.insert(self.conditions,condition)
    print('record inserted')
    -- self.conditions = {next= self.conditions, value = condition}
end

function MyParentClass:getConditions()
    return self.conditions
end

require "constants"


-- Meta class
Condition = {question="", answer=""}

function Condition:new (o, question,answer)
   o = o or {}
   setmetatable(o, self)
   self.__index = self
   self.question = question or nil 
   self.answer = answer or nil
   return o
end


function Condition:getCode ()
   return CONDITION_TYPE
end

function Condition:getQuestion()
    return self.question
end

function Condition:getAnswer() 
    return self.answer
end

"are you happy?"
"are you sad?"
