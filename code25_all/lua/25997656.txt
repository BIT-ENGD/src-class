package = "lualoggingapender"
version = "1.0-1"
source = {
    url = "",
}
description = {
   summary = "An example for the LuaRocks tutorial.",
   detailed = [[
      This is an example for the LuaRocks tutorial.
      Here we would put a detailed, typically
      paragraph-long description.
   ]],
   homepage = "http://...", -- We don't have one yet
   license = "MIT/X11" -- or whatever you like
}
dependencies = {
   "lua ~> 5.1"
   -- If you depend on other rocks, add them here
}
build = {
  type = "make",
  install_variables = {
    LUA_LIBDIR = "$(LIBDIR)",
    LUA_DIR = "$(LUADIR)",
    BIN_DIR = "$(BINDIR)"
  },
  platforms = {
    win32 = {
      type = "make",
      build_variables = {
        LUA_DIR = "$(LUA_LIBDIR)\\lib/lib.dll",
      }
    }
  }
}

local LFW_ROOT = config.LFW_ROOT
rocks_servers = {
   [[http://luarocks.org/repositories/rocks]]
}
rocks_trees = {
   { root = LFW_ROOT, rocks_dir = LFW_ROOT..[[\rocks]],
     bin_dir = LFW_ROOT, lua_dir = LFW_ROOT..[[\lua]],
     lib_dir = LFW_ROOT..[[\clibs]] }
}
variables.WRAPPER = LFW_ROOT..[[\rclauncher.obj]]

'nmake' is not recognized as an internal or external command,
operable program or batch file.

Error: Build error: Failed building.

NMAKE : fatal error U1052: file 'Makefile.win' not found
Stop.

Error: Build error: Failed building.

package = "lualoggingapender"
version = "1.0-1"
source = {
    url = "",
    dir = "lib",
    dir = "logging"
}
description = {
   summary = "An example for the LuaRocks tutorial.",
   detailed = [[
      This is an example for the LuaRocks tutorial.
      Here we would put a detailed, typically
      paragraph-long description.
   ]],
   homepage = "http://...", -- We don't have one yet
   license = "MIT/X11" -- or whatever you like
}
dependencies = {
   "lua ~> 5.1",
   -- If you depend on other rocks, add them here
}

build = {
  type = "builtin",
  install_variables = {
    LUA_LIBDIR = "$(LIBDIR)",
    LUA_DIR = "$(LUADIR)",
    BIN_DIR = "$(BINDIR)"
  },
  platforms = {
    win32 = {
     type = "builtin",
      modules = {
      ["logging.windows"] = "windows.lua",
      },
      install = {
        lib = {
        winEvntLog ="lib/winEvntLog.dll",
        msgLog = "lib/msgLog.dll",
        },
      },
    }
  }
}

