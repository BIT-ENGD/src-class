local MMultiMarginLoss, parent = torch.class('nn.MMultiMarginLoss', 'nn.Module')

function MMultiMarginLoss:__init(index)
  parent.__init(self)
  --self.strength = strength
  self.index = index
  self.loss = 0
  self.crit = nn.MultiMarginCriterion(1)
end

function MMultiMarginLoss:updateOutput(input)
  local inputNw = {}
  local i = 1
  for _,inputI in ipairs(input) do
    inputNw[i] = inputI
    i = i+1
  end
  self.loss = self.crit:forward(inputNw, self.index)
  print(self.loss)
  self.output = self.loss
  return self.output
end

function MMultiMarginLoss:updateGradInput(input, gradOutput)
  self.gradInput = self.crit:backward(input, self.index)
  self.gradInput:add(gradOutput)
  return self.gradInput
end

/home/yan/torch/install/share/lua/5.1/nn/Container.lua:67: 
In 26 module of nn.Sequential:
.../torch/install/share/lua/5.1/nn/MultiMarginCriterion.lua:19: attempt to call field 'new' (a nil value)
stack traceback:
  .../torch/install/share/lua/5.1/nn/MultiMarginCriterion.lua:19: in function 'forward'
  ./src/MultiMargin_loss.lua:19: in function <./src/MultiMargin_loss.lua:12>

