/Users/jordanmcbride/Desktop/Lua Projects/Tapinator/main.lua:47: attempt to index global 'showCredits' (a nil value)
stack traceback:
/Users/jordanmcbride/Desktop/Lua Projects/Tapinator/main.lua:47: in main chunk
[Finished in 9.4s]

function showCredits.touch(e)
    playButton.isVisible = false
    creditsButton.isVisible = false
    creditsView = display.newImage('credits.png', 0, display.contentHeight)

    lastY = name.y
    transition.to(name, {time = 300, y = display.contentHeight * 0.5 - title.height - 25})
    transition.to(creditsView, {time = 300, y = display.contentHeight * 0.5 + creditsView.height, onComplete = function() creditsView:addEventListener('tap', hideCredits) end})
end

display.setStatusBar(display.HiddenStatusBar)

radius = 40

smallTime = 200
bigTime = 800

score = 0
scoreInc = 2000

--HomePage
local name
local playButton
local creditsButton
local homePage

--Credits
local creditsPage


--Sounds
local circleSpawn = audio.loadSound( "circle_spawn.wav" )
local circleTap = audio.loadSound( "circle_tap.wav" )

function Main()
    name = display.newImage('title.png', display.contentWidth / 2, 53)
    name:scale( .5, .5 )

    playButton = display.newImage('playButton.png', display.contentWidth / 2, 245)
    playButton:scale( .5, .5 )

    creditsButton = display.newImage('creditsButton.png', display.contentWidth / 2, 305)
    creditsButton:scale( .5, .5 )

    homePage = display.newGroup(name, playButton, creditsButton)

    startButtonListeners('add')
end

function showCredits.touch(e)
    playButton.isVisible = false
    creditsButton.isVisible = false
    creditsView = display.newImage('credits.png', 0, display.contentHeight)

    lastY = name.y
    transition.to(name, {time = 300, y = display.contentHeight * 0.5 - title.height - 25})
    transition.to(creditsView, {time = 300, y = display.contentHeight * 0.5 + creditsView.height, onComplete = function() creditsView:addEventListener('tap', hideCredits) end})
end

function hideCredits.touch(e)
    transition.to(creditsView, {time = 300, y = display.contentHeight, onComplete = function() creditsButton.isVisible = true playButton.isVisible = true creditsView:removeEventListener('tap', hideCredits) display.remove(creditsView) creditsView = nil end})
    transition.to(name, {time = 300, y = lastY});
end

function startButtonListeners(action)

    if(action == 'add') then
        playButton:addEventListener('touch', playGame)
        creditsButton:addEventListener('touch', showCredits)
    else
        playButton:removeEventListener('touch', playGame)
        creditsButton:removeEventListener('touch', showCredits)
    end
end



Main()


printScore = display.newText("Score: " .. tostring(score), display.contentWidth-80, 40, native.systemFontBold, 20)

-- A function that creates random circles
function generateCircle ()

    -- Creates a new circle between 0 (the left most bounds) and the width of the display (being the content width), and also
    -- 0 (the upper most bounds) and the height of the display (being the content height). The radius of the circle is 'radius'
    x = math.random(radius, display.contentWidth-radius)
    y = math.random(80, display.contentHeight)

    score = score + scoreInc

    myCircle = display.newCircle( x, y, radius )
    myCircle:setFillColor( math.random(), math.random(), math.random() )

    delayTime = math.random(smallTime, bigTime)

    score = score + scoreInc

    printScore.text = "Score:"..tostring(scores)

    local spawnChannel = audio.play( circleSpawn )
    timer.performWithDelay( delayTime, generateCircle )

end

generateCircle()

function myCircle:touch( event )

    local tapChannel = audio.play( circleTap )
    myCircle:removeSelf()

end

myCircle:addEventListener( "touch", myCircle )

