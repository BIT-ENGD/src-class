LList = {}

LList.__index = LList



function LList.create()

    local list = {} -- our new object

    setmetatable(list,LList) -- make LList handle lookup

    list.count = 0 -- initialize our object

    list.head = nil

    return list

end



function LList:add(newNode)
    print("DEBUG PRINT: LList:add(): newNode.data: "..newNode:getData().." LList.count: "..self.count)

    if(self.head) then
        local curr = self.head
        print("DEBUG PRINT: LList:add(): self.head:toString(): "..self.head:toString())
        print("DEBUG PRINT: LList:add(): curr:toString(): "..curr:toString())
        print("DEBUG PRINT: LList:add(): newNode:toString: "..newNode:toString())

        while curr.nextNode do --this is the while loop in question
            print("DEBUG PRINT: LList:add(): in while:"..curr:toString())
            curr = curr.nextNode

        end

        curr:setNext(newNode)
        print("DEBUG PRINT: LList:add(): curr.nextNode:toString(): "..curr.nextNode:toString())

        self.count = self.count + 1
    else
        self.head = newNode

        self.count = 1
        print("DEBUG PRINT: LList:add(): self.count" .. self.count .." self.head:getData(): ".. self.head:getData())

    end
    print("DEBUG PRINT: LList:add(): EXITING\n")

end

function LList:getLen()
    return self.count
end

function LList:toString()
print("Stubbed toString()")
if(head)then
    print(self:toStringHelper(head))
else
    print("emptyList")
    end
 end

    function LList:toStringHelper(currNode)

    if(currNode.nextNode)then
        return currNode:toString() .. toStringHelper(currNode.nextNode)
    else
        return currNode:toString()
    end
end

Node = {}

Node.__index = Node



function Node.create(newData)

    local tNode = {}

    setmetatable(tNode, Node)

    tNode.data = newData

    return tNode

end

function Node:getData()
    return self.data
end

function Node:getNext()
    return self.nextNode
end

function Node:setNext(newNode)
    self.nextNode = newNode
    print("DEBUG PRINT: Node:setNext(): self.nextNode:toString(): "..self.nextNode:toString())
end

function Node:hasNext()
    if self.nextNode then
        return true
    else
        return false
    end
end

function Node:toString()
    return tostring(self.data)
end

testerList = LList.create()
print(testerList:getLen())

tNode1=Node.create(5)
tNode2=Node.create(7)
tNode3=Node.create(2)

testerList:add(tNode1)
testerList:add(tNode2)
testerList:add(tNode3)

print(testerList:getLen())

print(testerList:toString())

