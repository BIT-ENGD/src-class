redis.call()
Lua
setIntersected = redis.call(ARGV[1], ARGV[2])
setIntersected = redis.call("sinter", tostring(setIntersected), set[i])
local noOfArgs = KEYS[1] -- storing the number of arguments that will get passed from cli

--[[
    run a loop noOfArgs time and initialize table elements, since we don't know the number of sets to be intersected so we will use Table (arrays)
--]]

local setsTable = {}

for i = 1, noOfArgs, 1 do
    setsTable[i] = tostring(ARGV[i])
end


-- now find intersection
local intersectedVal = redis.call("sinter", setsTable[1], setsTable[2]) -- finding first intersection because atleast we will have two sets
local new_updated_set = ""
for i = 3, noOfArgs, 1 do
    new_updated_set = tostring(intersectedVal)
    intersectedVal = redis.call("sinter", new_updated_set, setsTable[i])
end

return intersectedVal

redic-cli --eval scriptfile.lua 2 , points:Above20 points:Above30

 output:-  

 1) "playerid:1"

 2) "playerid:2"

 3) "playerid:7"

points:Above20
points:Above30
