    do
local lenKey,originalKey = {},{}
fastKey = {}
fastKey.__len = function(t) return t[lenKey] end
fastKey.__index = function (t,k)  
                        t[lenKey] = t[lenKey] +1
                        return t[oroginalKey][k] 
                end
fastKey.__newindex = function(t,k,v) t[originalKey][k] = v end
fastKey.__pairs = function ()
                    return  function (t, k)
                                return next(t[oroginalKey], k)
                            end
                end

function fastLen(t)
    local proxy = {}
    local c = 0
    for _ in pairs(t) do
        c=c+1
    end
    proxy[lenKey] = c                               
    proxy[originalKey] = t                                          
    setmetatable(proxy,fastKey)
    return proxy
end
end

n = fastLen{1,2,3,x=5}
--n:insert(1) -- here the __index is called and gets stackoverflow
print(#n)

