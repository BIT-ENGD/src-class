-- start
require "ffi"
require 'torch'
require 'nn'
io.write(string.format("Hello from %s\n", _VERSION))
print(package.path)
print(package.cpath)
--end

Program received signal SIGSEGV, Segmentation fault.
0x000000000040b841 in newkey ()
(gdb) bt
#0  0x000000000040b841 in newkey ()
#1  0x0000000001fe6620 in ?? ()
#2  0x0000000001fe49a8 in ?? ()
#3  0x0000000001fdfb20 in ?? ()
#4  0x0000000000423b78 in luaT_typenames ()
#5  0x0000000000000028 in ?? ()
#6  0x0000000000000028 in ?? ()
#7  0x00000000007f2710 in ?? ()
#8  0x000007feff1a1332 in msvcrt!malloc () from C:\Windows\system32\msvcrt.dll
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000028 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x0000000000402bc6 in lua_call ()
#13 0x0000000000000000 in ?? ()

Hello from Lua 5.1
C:\Program Files\lua\5.1\share\lua\5.1\?.lua;C:\ProgramFiles\lua\5.1\share\lua\5.1\?\init.lua
C:\Program Files\lua\5.1\\lib\lua\5.1\?.dll

void execute(const char* filename)
{
  lua_State *state = luaL_newstate();

  // Make standard libraries available in the Lua object
  luaL_openlibs(state);

  // my test code
  lua_State *L = state;

  lua_getglobal(L, "package");
  lua_getfield(L, -1, "cpath");
  const char* current_cpath = lua_tostring(L, -1);
  puts(current_cpath);
  lua_pop(L, 1);

  lua_getglobal(L, "package");
  lua_getfield(L, -1, "path");
  const char* current_path = lua_tostring(L, -1);
  puts(current_path);
  lua_pop(L, 1);

  int result;

  // Load the program; this supports both source code and bytecode files.
  result = luaL_loadfile(state, filename);

  if ( result != 0 ) {
    print_error(state);
    return;
  }

  // Finally, execute the program by calling into it.
  // Change the arguments if you're not running vanilla Lua code.

  result = lua_pcall(state, 0, LUA_MULTRET, 0);

  if ( result != 0 ) {
    print_error(state);
    return;
  }
}

