torch.FloatTensor
image.display()
qtlua
for i = 1, 3600 do
    self.dep_Data[i] = reordered_dep[3600 + i] * 256 + reordered_dep[i]
    --reordered_dep: 1D storage of lower then higher byte of depth info in 60x60 image
end

--scaling data range to within 0 and 1
local max_dep = torch.max(self.dep_Data)
local min_dep = torch.min(self.dep_Data)
self.dep_Data = (self.dep_Data - min_dep) / (max_dep - min_dep)

