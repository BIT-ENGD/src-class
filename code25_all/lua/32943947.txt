local Audio = class("Audio",Component)

function Audio:ctor( params )
    -- body
    if params == nil then
        params = {}
    end
    self.type = ComponentType["Audio"]
    self.super.ctor(self.params)
end

function Audio:play( soundId )
    -- call audio sub system engine method to play sound
end

return Audio

local Health = class("Health",Component)

function Health:ctor( params )
    -- body
    if params == nil then
        params = {}
    end
    self.type = ComponentType["Health"]
    self.health = 100
    self.super.ctor(self.params)
end

function Health:addHealth( num )
    self.health = self.health + num
end

return Health

GameObject 1 <------ *Component
                           | Render
                           | Position
                           | Health
                           | Audio
                           | ... ...

  Render
    /
   /  
Customed Render(which has customed shader)

local GameObject = class("GameObject")

function GameObject:ctor( params )
    -- contain all the components the game object has
    self.components = {}
end

function GameObject:update( dt )
    -- body
    for i,component in ipairs(self.components) do
        component:update(dt)
    end
end

function GameObject:addComponent( component )
    -- body
    table.insert(self.components,component)
end

function GameObject:getComponent( type )
    -- body
    for i,component in ipairs(self.components) do
        if type == component.type then
            return component
        end
    end
end

function GameObject:handleEvent( event )
    -- body
    assert(false,"derived classes from GameObject must implement handleEvent method")
end

return GameObject

local A = class("A",GameObject)

function A:ctor( params )
    -- body
    self.super.ctor(self,params)
    self.initComponents()
end

function A:initComponents( ... )
    -- body
    local render = Render:create()
    local health = Health:create()
    self:addComponent(render)
    self:addComponent(health)
end

function A:handleEvent( event )
    -- body
    if event.type == "addHealth" then
       self:getComponent("Health"):addHealth(event.data.num)
    end
    if event.type == "takeDamage" then
       self:getComponent("Health"):takeDamage(event.data.num)
    end
end

return A

local GameObjectManager = class("GameObjectManager")
local instance = nil

function GameObjectManager:getInstance( ... )
    -- body
    if instance == nil then
        instance = GameObjectManager:create()
    end

    return instance
end

-- pseudocode just for simplicity here. Just imagine that it can handle 
-- all kinds of query and return the proper game objects
function GameObjectManager:query( ... )
    ... ...
end

return GameObjectManager

