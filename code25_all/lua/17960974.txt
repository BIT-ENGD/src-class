---
-- (Evil Steve)Because I'm a kind and wonderful person: http://www.gamedev.net/topic/572784-lua-read-bitmap/
---

function error(err)
    -- Replace with your own error output method:
    print(err);
end

-- Helper function: Parse a 16-bit WORD from the binary string
function ReadWORD(str, offset)
    local loByte = str:byte(offset);
    local hiByte = str:byte(offset+1);
    return hiByte*256 + loByte;
end

-- Helper function: Parse a 32-bit DWORD from the binary string
function ReadDWORD(str, offset)
    local loWord = ReadWORD(str, offset);
    local hiWord = ReadWORD(str, offset+2);
    return hiWord*65536 + loWord;
end

-- Process a bitmap file in a string, and call DrawPoint for each pixel
function OpenBitmap(File, Stream)
    if Stream == nil then Stream = false end
    local bytecode = File:read("*a")

    -------------------------
    -- Parse BITMAPFILEHEADER
    -------------------------
    local offset = 1;
    local bfType = ReadWORD(bytecode, offset);
    if(bfType ~= 0x4D42) then
        error("Not a bitmap file (Invalid BMP magic value)");
        return;
    end
    local bfOffBits = ReadWORD(bytecode, offset+10);

    -------------------------
    -- Parse BITMAPINFOHEADER
    -------------------------
    offset = 15; -- BITMAPFILEHEADER is 14 bytes long
    local biWidth = ReadDWORD(bytecode, offset+4);
    local biHeight = ReadDWORD(bytecode, offset+8);
    local biBitCount = ReadWORD(bytecode, offset+14);
    local biCompression = ReadDWORD(bytecode, offset+16);

    if(biBitCount ~= 24) then
        error("Only 24-bit bitmaps supported (Is " .. biBitCount .. "bpp)");
        return;
    end

    if(biCompression ~= 0) then
        error("Only uncompressed bitmaps supported (Compression type is " .. biCompression .. ")");
        return;
    end

    ---------------------
    -- Parse bitmap image
    ---------------------
    local TmpImg = {}
    if Stream == false then
        for y = biHeight-1, 0, -1 do
            offset = bfOffBits + (biWidth*biBitCount/8)*y + 1;
            for x = 0, biWidth-1 do
                local b = bytecode:byte(offset);
                local g = bytecode:byte(offset+1);
                local r = bytecode:byte(offset+2);
                offset = offset + 3;

                TmpImg[#TmpImg+1] = {r,g,b}
            end
        end
    else
        for y = biHeight-1, 0, -1 do
            offset = bfOffBits + (biWidth*biBitCount/8)*y + 1;
            for x = 0, biWidth-1 do
                local b = bytecode:byte(offset);
                local g = bytecode:byte(offset+1);
                local r = bytecode:byte(offset+2);
                offset = offset + 3;

                TmpImg[#TmpImg+1] = r
                TmpImg[#TmpImg+1] = g
                TmpImg[#TmpImg+1] = b
            end
        end
    end

    return TmpImg, biWidth, biHeight
end

function OpenBmp(FileName, Stream)
    if Stream == nil then Stream = false end
    if FileName == nil then
        return false
    end

    local File = assert(io.open(FileName, 'rb'))
    local Data, Width, Height = OpenBitmap(File, Stream)

    File:close()
    return Data, Width, Height
end

<254, 254, 254, 256>
<99, 254, 254, 256>
<49, 74, 91, 256>

<90, 106, 113, 256>
<188, 194, 197, 256>
<254, 254, 254, 256>

