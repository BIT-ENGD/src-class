chatstats
CREATE TABLE `chatstat` (
`id` BIGINT(10) UNSIGNED NOT NULL AUTO_INCREMENT, `username` VARCHAR(25) NOT NULL,
`totalcount` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0', `thismonth` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0',
`thisweek` INT(10) UNSIGNED NOT NULL DEFAULT '0', `lastweek` INT(10) UNSIGNED NOT NULL DEFAULT '0',
`lastmonth` INT(10) UNSIGNED NOT NULL DEFAULT '0', `switched` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
PRIMARY KEY (`id`), UNIQUE INDEX `id` (`id`), UNIQUE INDEX `username` (`username`)
) COLLATE='utf8_general_ci' ENGINE=MyISAM ROW_FORMAT=DEFAULT;

switched
thisweek
lastweek
function UpdateUserStat( con, user )
        sNick = ConvertNick( user.sNick )
        cur = assert( con:execute( string.format( [[SELECT * FROM chatstat WHERE username = '%s']], sNick ) ) )
        row = cur:fetch( {}, "a" )
        cur:close()
        if row then
                res = assert( con:execute( string.format( [[UPDATE chatstat SET totalcount = totalcount + 1 WHERE id='%d' ]], row.id ) ) )
        else
                res = assert( con:execute( string.format( [[ INSERT INTO chatstat ( username, totalcount, thismonth, thisweek ) VALUES ( '%s', 1, 1, 1 ) ]], sNick ) ) )
        end
        cur = assert( con:execute( string.format( [[SELECT * FROM chatstat WHERE username = '%s']], sNick ) ) )
        row = cur:fetch( {}, "a" )
        cur:close()
        UpdateDateStat( con, row )
        if os.date( "%w" ) ~= 0 then
                if row.switched == 1 then
                        res = assert( con:execute( string.format( [[UPDATE chatstat SET switched = 0 WHERE id='%d' ]], row.id ) ) )
                end
                res = assert( con:execute( string.format( [[SELECT * FROM datestat WHERE field='today']] ) ) )
                tRow = res:fetch( {}, "a" )
                if tRow.value ~= os.date( "%w" ) then
                        ChangeWeekDay = assert( con:execute( string.format( [[UPDATE datestat SET value='%d' WHERE field='today']], os.date( "%w" ) ) ) )
                end
                res:close()
        end
end

