novelText = display.newText (insert the parameters for old text and the old text)
--the variable used to call the value in the table
page = 1 
dummy table Novel_pages = {
[1] = nil,
[2] = "new text"
}

(insert runtime event here that calls this function)
page = page + 1
novelText.text = Novel_pages[page]
display.newText(novelText)

"mainl.lua:160: bad argument #1 to 'newText' (string expected, got table)
stack traceback:
[C]: in function 'NewText' 
main.lua:160: in function <main.lua: 156>
?: in function <?169>"

local store = require( "plugin.google.iap.v3" )
local composer = require("composer")
local scene = composer.newScene()

display.setStatusBar( display.HiddenStatusBar )  -- Removes status bar
coins = 5 -- variable that defines the number of coins player has in the game.It will be different 
--in a stand alone game, but as a small app meant to demonstrate function, it's necessary to start off
--with a small, defined number in the beginning.

local logo = display.newImage("/Images/logo.png", 155, 275) --code for my personal logo, drawn by me. 
--Not actually showcased in the video because of time limit.
logo.alpha = 0

local function makeTitleTrue()
logo:removeSelf()
print("menu should be TRUE")
titleScreen()
end

local function fadeOut()
transition.to(logo, {time = 1000, alpha = 0, onComplete = makeTitleTrue})
end

transition.to(logo, {time = 1000, alpha = 1, onComplete = fadeOut}) -- end of logo code

function titleScreen() -- beginning of title code, which is not managed as a separate scene
title = true 
titleImg = display.newImage("/Images/vn_bg.png", 155, 275)
--titleWords = display.newImage("/Images/TitleWords.png", 155, 275)

--fix to flow towards the upper right corner.
local flare = display.newImage("/Images/flare2.png", 40, 30)
flare.xScale = .5
flare.yScale = .5
local flare2 = display.newImage("/Images/flare2.png", 400, 70)
flare2.xScale = .6
flare2.yScale = .6
local flare3 = display.newImage("/Images/flare2.png", -30, 100)
flare3.xScale = .4
flare3.yScale = .4
local flare4 = display.newImage("/Images/flare2.png", 100, 400)
flare4.xScale = .4
flare4.yScale = .4
local flare5 = display.newImage("/Images/flare2.png", 400, 400)
flare5.xScale = .3
flare5.yScale = .3
local flare6 = display.newImage("/Images/flare2.png", 250, 200)
flare6.xScale = .3
flare6.yScale = .3

local function moveFlare1() 
    transition.to(flare, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare1})
end
local function moveFlare2()
    transition.to(flare2, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare2})
end 
local function moveFlare3()
    transition.to(flare3, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare3})
end
local function moveFlare4()
    transition.to(flare4, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare4})
end 
local function moveFlare5()
    transition.to(flare5, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare5})
end 
local function moveFlare6()
    transition.to(flare6, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare6})
end 
transition.to(flare, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare1})
transition.to(flare2, {time=2500, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare2}) 
transition.to(flare3, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare3}) 
transition.to(flare4, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare4}) 
transition.to(flare5, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare5}) 
transition.to(flare6, {time=2000, x = math.random(-100, 450), y = math.random(-100, 700), onComplete = moveFlare6}) 

--add options that can when the screen is tapped, tap on an option twice to select
    -- start story
    -- continue story
    -- coin gambling
    -- end game

if (title == true) then
    Runtime:addEventListener("tap", sceneVN)
end
end

function forceQuit()
function quit() 
    os.exit() 
    end 
    timer.performWithDelay(1000,quit)
end

function sceneVNChapter2()
return
end

function sceneVN() -- the actual visual novel code itself
display.remove(titleImg)
--display.remove(titleWords)
display.remove(flare)
display.remove(flare2)
display.remove(flare3)
display.remove(flare4)
display.remove(flare5)
display.remove(flare6)
title = false

local coinSheetData =
{
    width = 32,
    height = 32,
    numFrames = 8,
}

local coinimageSheet = graphics.newImageSheet( "/Images/spinning_coin.png", coinSheetData )

local sequenceData =
{
    name= "spinning_coin",
    start = 1, 
    count = 8,
    time = 1000,
    loopCount = 0
}

--the properties of the name plate that can be changed ingame by using ".text" property
local nameOptions = 
{
    text = "Frankenstein",  
    x = 165,
    y = 450,
    width = 310,
    font = "Charlesworth.ttf",
    fontSize = 22,
    align = "left"
}
local bg = display.newImage("/Images/bg4.jpg", 155, 275)
textRect = display.newRect(155, 525, 325, 200)
textRect:setFillColor(.02, .02, .02)
textRect.alpha = .6
page = 1
local frames = display.newImage("/Images/windowframes_gold.png", 155, 275)
display.newText(nameOptions)
local VN_pages = {
    [1] = nil,
    [2] = "\"Then, seeing as this is a simulation of\n a visual novel dating sim, I have no\n choice but to ask you...\"",
    [3] = "\"My lady, would you go on a date with me?\nFrankenstein... butler of the fineest noble,\nCadis Etrama di Raizel?\"",
    [4] = "duck",
    [5] = "duck",
    [6] = "duck",
}

local displayNovelText = display.newText("\"I see. So I\'m supposed to pretend I am\na character in a multi-chapter phone\napp that you\'ve been reading...\"", 165, 500, "Goudy Old Style Regular.ttf", 17)

function changePage()
    print("dang it")
    page = page + 1
    displayNovelText.text = VN_pages[page]
    display.newText(displayNovelText)
end

textRect:addEventListener("tap", changePage)

if (coins < 10) then
    coinsDigits = 2
else 
    if (coins > 9) and (coins < 100) then 
        coinsDigits = 3
    else 
        if (coins > 99) and (coins < 1000) then 
            coinsDigits = 4
        else 
            if (coins > 999) and (coins < 10000) then 
                coinsDigits = 5
            else 
                if (coins > 9999) and (coins < 100000) then
                    coinsDigits = 6
                end
            end
        end
    end
end

cooin = display.newSprite(coinimageSheet, sequenceData)
cooin.x = 25
cooin.y = 30
cooin:play()

coinText = display.newText("1", 57 + 4 * coinsDigits, 32, "VCR_OSD_MONO_1.001.ttf", 25)
coinText.text = coins
coinTimer = timer.performWithDelay(2000, cooin, 1)
end

function choiceMade( event ) --the scenes where all the choices are made
if (event.action == "clicked") then 
    local i = event.index
    if (i == 1) then 
        Runtime:removeEventListener()
        titleScreen()
        else
            if (i == 2) then 
                system.openURL( "https://www.paypal.com/us/home" )
            else
                if (i == 3) then 
                    return 
                end
            end
        end
    end
end -- end of choice scenes

function Outofcoins()
--native alert lack of zero coins
local alertMessage = "Uh oh, looks like you've run out of coins! To continue reading the story, would you like to buy or gameble for coins?"
native.showAlert( "Out of coins!", alertMessage, {"Gamble for coins", "Purchase coins", "Exit to Menu"}, choiceMade)
end 

if (coins == 0) then -- conditional branch that alerts Outofcoins if no coins left
Outofcoins()
end

function sceneGambleStart()

function earntCoins()

    numberEarnt = 0
    local coinsGot = display.newImage("/Images/coins_gold.png", 155, 275)
    coinsGot.alpha = 0

    local function fadeOutCoinsEart()
        transition.to(logo, {time = 2000, alpha = 0})
        display.remove(coinsGot)
    end

    local transitionFade = transition.to(logo, {time = 2000, alpha = 1, onComplete = fadeOutCoinsEarnt})
    timer.performWithDelay(2000, transitionFade, 1)
    coinText.text = coins + numberEarnt

end

local function gamblerIntro()
    nameOptions.text = "Gambler"
    local bg = display.newImage("/Images/bg4.jpg", 155, 275)
    textRect = display.newRect(155, 525, 325, 200)
    textRect:setFillColor(.02, .02, .02)
    textRect.alpha = .6
    local frames = display.newImage("/Images/windowframes_gold.png", 155, 275)
    display.newText(nameOptions)



    if (gambleVisit == false) then 
        display.newText("\"Welcome to the coin gambling shop!\nHere's your chance to earn free coins\nwithout having to use the app store!", 165, 500, "Goudy Old Style Regular.ttf", 17)
        --display.newText("\"You can play here once a day if you\'ve\nNO coins in your inventory! You are\ngiven three tries at any game each visit.", 165, 500, "Goudy Old Style Regular.ttf", 17)
        --display.newText("\"So, then! What games will you play\nin our shop today? \n \n", 165, 500, "Goudy Old Style Regular.ttf", 17)
    else
        display.newText("\"Welcome back, player! You have\nthree tries left. So, what games\nwill you try your hand at?", 165, 500, "Goudy Old Style Regular.ttf", 17)
    end
end

local function sceneDiceRoll()
    --local show background graphics
    --draw dice on screen, with function ready to shake/transition on screen when accelerometer
    --transition hands up and drop dice animation
    -- if dice = # chosen then give coins
end

local function sceneCardChoose()
    -- a function that defines the mechanics of the card game.
    --draw several options on the screen:
        --3 cards, earn 5 coins.
        --6 cards, earn 15 coins.
        --9 cards, earn 30 coins.

    --The player needs 5 coins to read another chapter, but by increasing card numbers, 

    --depending on the player's choice, show the images of the cards (with whatever numbers, always set)
        -- on the screen and allow the player to choose a card. Make a shuffling animation.
        -- lay all the cards on the screen, now with randomised positions defined by a number.
        --the player may choose one. Event listener, if the number defined = card number, the card flips, 
        --shows its number, and the player wins the coins. defer to earntCoins.
    --if the player chooses the wrong card, show him a "WRONG CARD" result, and ask if he would like another
        --round or to exit to the main shop.
    return
end

local function sceneGuessNumber()
    --this game is not created, but is a dummy function that's shown here. It's included in the
    --options to show that if this were a real game, that's what it would look like
    return
end

end

