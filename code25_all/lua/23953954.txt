template <typename T>
void luabindVector(lua_State* S, std::string tname) {
module(S)[class_<std::vector<T> >(tname.c_str()).def(constructor<>()).def(
        "pushBack",
        static_cast<void (std::vector<T>::*)(
                const T&)>(&std::vector<T>::push_back)).
                def("at",(T& (std::vector<T>::*)(size_t))(&std::vector<T>::at)).
                def("resize",static_cast<void (std::vector<T>::*)(size_t)>(&std::vector<T>::resize)).
                def("size",&std::vector<T>::size).
                def("assign",static_cast<void (std::vector<T>::*)(size_t, const T&)>(&std::vector<T>::assign))];
}

luabindVector<double>(L,"vectorDouble");

tans = vectorDouble()
tans:resize(3)
a=tans:at(1)

