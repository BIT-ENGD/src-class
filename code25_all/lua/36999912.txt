template <typename RVal, typename T1, typename T2>
struct functor<RVal,T1,T2>
{
    static int invoke(lua_State *L) 
    { 
        push(L,upvalue_<RVal(*)(T1,T2)>(L)(read<T1>(L,1),read<T2>(L,2))); 
        return 1; 
    }
};

template<typename T>
T upvalue_(lua_State *L)
{
    return user2type<T>::invoke(L, lua_upvalueindex(1));
}

template< typename RVal, typename ... ARGS>
struct functor
{
    static int invoke(lua_State* L)
    {
        typedef RVal (*FUNC_PTR)(ARGS...);
        FUNC_PTR f = upvalue_<FUNC_PTR>(L);
        push(L, f(read_stack<ARGS>(L)...));
        return 1;
    }
};

template<typename T>
T read_stack(lua_State* L)
{
    T t = read<T>(L, -1);
    lua_pop(L, 1);
    return t;
}

