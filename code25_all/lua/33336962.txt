local function get_local_time(dateTime)
    local xyear, xmonth, xday = string.match(dateTime, "(%d+)%-(%d+)%-(%d+)") -- Date format is displayed as yyyy-mm-dd
    local xhour, xmin = string.match(dateTime, "%a(%d+):(%d+)") -- Time format is displayed as Thh:mm

    local event_time = os.time({year = xyear, month = xmonth, day = xday, hour = xhour or 23, min = xmin or 59, sec = 0}) -- Gets epoch time for event time

    async_ok, async = pcall (require, "async") -- Asynchronous lookup functions
    if not json then json = require 'json' end

    tzpage = "https://maps.googleapis.com/maps/api/timezone/json?location=28.4158,-81.2989&timestamp=" .. event_time .. "&key=" .. key -- Gets offset data for Eastern Time Zone

    if async_ok then
        tzrpage = async.request(tzpage, "HTTPS")
    end

    retval, page, status, headers, full_status = tzrpage:join()
    tzrpage = nil

    if status == 200 then
        tzopage = json.decode(page)
    end

    local eastern_offset = tzopage.rawOffset+tzopage.dstOffset -- Adds the offset information together (includes Daylight Savings)

    local utc_event_time = event_time+eastern_offset -- Sets UTC's time for the event

    local utctime, localtime = os.date("!*t", utc_event_time), os.date("*t", utc_event_time) -- Sets table data for events based on UTC's time of the event
    localtime.isdst = false
    local localoffset = os.difftime(os.time(utctime), os.time(localtime)) -- Sets the time difference between UTC and local time at the time of the event UTC

    return os.date("%A, %B %d %Y at %I:%M%p", (utc_event_time-localoffset)) -- Should return local time of the event
end

print(get_local_time("2015-10-31T01:15:00"))

Friday, October 30 2015 at 02:15PM

Friday, October 30 2015 at 10:15PM

return os.date("%A, %B %d %Y at %I:%M%p", (utc_event_time-localoffset))

return os.date("%A, %B %d %Y at %I:%M%p", (utc_event_time+localoffset))

Saturday, October 31 2015 at 04:15AM

http.request
