string.format(s, e1, e2, ...)
s:format(e1, e2, ...)

table.remove()
function add(self, value)
    self[#self + 1] = value
end

function remove(self, index)
    local size = #self
    if index == size then
        self[size] = nil
    elseif (index > 0) and (index < size) then
        self[index], self[size] = self[size], nil
    end
end

function copy(obj, seen) -- Recursive function to copy a table with tables
  if type(obj) ~= 'table' then return obj end
  if seen and seen[obj] then return seen[obj] end

  local s = seen or {}
  local res = setmetatable({}, getmetatable(obj))
  s[obj] = res
  for k, v in pairs(obj) do res[copy(k, s)] = copy(v, s) end
  return res
end

function count(list) -- Count a list because #table doesn't work on keyindexed tables
  local sum = 0; for i,v in pairs(list) do sum = sum + 1 end; print("Length: " .. sum)
end

function pts(s) print(tostring(s)) end -- Macro function

local list = {1, 2, 3}
pts(list.insert) --> nil

pts(table["insert"]) --> function: 0xA682A8
pts(list["insert"]) --> nil

list = copy(_G.table)
pts(table["insert"]) --> function: 0xA682A8
pts(list["insert"]) --> function: 0xA682A8

count(list) --> Length: 9

list:insert(-1, "test")

count(list) --> Length: 10

s = "test"
s:sub(1,1)

t = {1,2,3}
t:remove(#t)

for i,v in pairs(getmetatable('').__index) do
  print(i, tostring(v))
end

sub     function: 0xB4ABC8
upper   function: 0xB4AB08
len     function: 0xB4A110
gfind   function: 0xB4A410
rep     function: 0xB4AD88
find    function: 0xB4A370
match   function: 0xB4AE08
char    function: 0xB4A430
dump    function: 0xB4A310
gmatch  function: 0xB4A410
reverse function: 0xB4AE48
byte    function: 0xB4A170
format  function: 0xB4A0F0
gsub    function: 0xB4A130
lower   function: 0xB4AC28

