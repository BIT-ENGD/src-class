[string "local middleclass = {..."]:82: stack overflow
local CBaseObject=class('CObjectBase');
function CBaseObject:initialize()
    self._init=true;
end;
function CBaseObject:finalize()
    self._init=false;
end;
function CBaseObject:_getter_setter(v)
    return v;
end;
function CBaseObject:_gen_prop_cache()
    rawset(self,'_properties',rawget(self,'_properties') or {});
end;
function CBaseObject:__index(k)
    print('GET',k);
    self:_gen_prop_cache();
    local prop=self._properties[k];
    if prop~=nil
    then
        local getter=self[prop[2] or '_getter_setter'];
        return getter(self,prop[1]);
    else return nil;end;
end;
function CBaseObject:__newindex(k,v)
    print('ME',self.class.name);
    print('SET',k,v);
    self:_gen_prop_cache();
    local prop=self._properties[k];
    if prop==nil and self._init or prop
    then
        if prop==nil then prop={};self._properties[k]=prop;end;
        local vv=prop[1];
        if type(v)=='table' and #v<4
        then
            for i=1,3 do prop[i]=v[i];end;
        else
            prop[1]=v;
        end;
        local setter=self[prop[3] or '_getter_setter'];
        prop[1]=setter(self,prop[1],vv);
    else
        rawset(self,k,v);
    end;
end;

local cls=CBaseObject:subclass('test');
function cls:initialize()
    self.class.super.initialize(self);
    self.health={1000,'_gethealth','_sethealth'};
    self.ammo=100;
    self:finalize();
end;
function cls:_sethealth(value,old)
    print('WRITE:',value,old);
    if value<0 then return old;else return value;end;
end;
function cls:_gethealth(value)
    print('READ:',value);
    return value/1000;
end;

local cls2=cls:subclass('test2');
function cls2:initialize()
    self.class.super.initialize(self);
    self.ammo=200;
    self:finalize();
end;
function cls2:_sethealth(value,old)
    print('WRITE_OVERRIDEN:',value,old);
    return value;
end;
local obj=cls2(); --change this to cls() for working example.
obj.health=100;
obj.health=-100;
print(obj.health,obj._properties.health[1]);
print(obj.ammo,obj._properties.ammo[1]);

self.class.parent.<method>(<...>)
