function InterSection_Cercles (Ca , ... )

    local C = table.pack( ... )
    local d, CosTheta, Theta, i
    local t = {}

    for i = 1, C.n do

        d = complex.abs ( Ca.Ct - C[i].Ct )

        CosTheta = round (((Ca.Ry * Ca.Ry + d * d - C[i].Ry * C[i].Ry) /( 2 * Ca.Ry * d )) , 10 )

        Theta = round ( math.acos( CosTheta ) , Prec)

        if not Theta then -- 0 solution
            -- table.insert( t , nil ) useless
            -- table.insert( t , nil )
        elseif Theta == 0 then -- 1 solution 
            table.insert( t , Ca.Ct + complex.polar (Ca.Ry , Theta + complex.arg (C[i].Ct -Ca.Ct)))
            -- table.insert( t , nil ) useless
        else -- 2 solitions
            table.insert( t , Ca.Ct + complex.polar (Ca.Ry , Theta + complex.arg (C[i].Ct -Ca.Ct)))
            table.insert( t , Ca.Ct + complex.polar (Ca.Ry , -Theta + complex.arg (C[i].Ct -Ca.Ct)))
        end -- if

    end -- for

    return table.unpack ( t )

end -- function

