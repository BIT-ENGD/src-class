function fileIO.loadJSONFile (fileName)
    local path = fileName
    local contents = ""
    local loadingTable = {}
    local file = io.open (path, "r")
    print (file)
    if file then
        local contents = file:read ("*a")
        loadingTable = json.decode (contents)
        io.close (file)

        return loadingTable
    end

    return nil
end

function wr:renderChunkFile (path)
    local data = fileIO.loadJSONFile (path)

    self:renderChunk (data)
end

function wr:renderChunk (data)
    local a, b = 1

    if (self.img ~= nil) then
        a = #self.img + 1
        self.img[a] = {}
    else
        self.img[1] = {}
    end

    if (self.chunks ~= nil) then
        b = #self.chunks + 1
        self.chunks[b] = display.newGroup ()
    else
        self.chunks[1] = display.newGroup ()
    end

    for i = 1, #data do  -- Y axis                       ERROR IS HERE
        self.img[a][i] = {}
        for j = 1, #data[i] do  -- Z axis
            self.img[a][i][j] = {}
            for k = 1, #data[i][j] do  -- X axis
                if (data[i + 1] ~= nil) then
                    if (data[i + 1][j][k] < self.transparentLimit) then
                        self.img[a][i][j][k] = display.newImage ("images/tiles/"..data[i][j][k]..".png", k*self.tileWidth, display.contentHeight -j*self.tileDepth - i*self.tileThickness)
                        self.chunks[b]:insert (self.img[a][i][j][k])

                    elseif(data[i + 1] == nil) then
                        self.img[a][i][j][k] = display.newImage ("images/tiles/"..data[i][j][k]..".png", k*self.tileWidth, display.contentHeight -j*self.tileDepth - i*self.tileThickness)
                        self.chunks[b]:insert (self.img[a][i][j][k])
                    end
                end
            end
        end
    end
end

for i = 1, #data do
nil
