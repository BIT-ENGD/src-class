-- Read map from file
local function loadmap(mapnum)
    local tempstring
    local numerator
    local denominator
    local sum
    local i

    local path = system.pathForFile( "maps/map" .. mapnum .. ".txt", system.ResourceDirectory)
    --Open the file
    local fh = io.open( path, "r" )

    if fh then
        -- read the lines of data systematically.
        mapName = fh:read( "*l" )
        mapNPCS = fh:read( "*l" )
        mapSpawnTimer = tonumber(fh:read( "*l" ))
        mapSpawnMax = tonumber(fh:read( "*l" ))
        mapSpawnMaxLocations = tonumber(fh:read( "*l" ))
        mapObjectMax = tonumber(fh:read( "*l" ))

        for i = 1, mapObjectMax do
            tempstring = fh:read( "*l" )
            mapObject[i] = display.newImage("graphics/" .. tempstring .. ".png")

            -- Fractional mapping for all screen sizes
            denominator = tonumber(fh:read( "*l" ))
            numerator = tonumber(fh:read( "*l" ))
            sum = (display.contentWidth / denominator) * numerator
            mapObject[i].x = sum

            denominator = tonumber(fh:read( "*l" ))
            numerator = tonumber(fh:read( "*l" ))
            sum = (display.contentHeight / denominator) * numerator
            mapObject[i].y = sum

            mapObject[i].myName = "object"      

            physics.addBody(mapObject[i], "kinematic", {density = 10.0, friction = 0.0})
        end

        for i = 1, mapSpawnMaxLocations do
            mapSpawnX[i] = tonumber(fh:read( "*l" ))
            mapSpawnY[i] = tonumber(fh:read( "*l" ))
        end

        io.close( fh )
    end
end

-- Map Data Variables
local mapName
local mapNPCS
local mapSpawnTimer
local mapSpawnMax
local mapSpawnMaxLocations
local mapObjectMax
local mapObject = {}
local mapSpawnX = {}
local mapSpawnY = {}

-- Map Npc Spawning
local mapNPC = {}
local maxMapNPCS = 30
local npcsSpawned
local spawnTimer = 0

