  function SecondsFormat(X)
   if X <= 0 then return "" end
   local t ={}
   local ndays = string.format("%02.f",math.floor(X / 86400))
   if tonumber(ndays) > 0 then table.insert(t,ndays.."d ") end
   local nHours = string.format("%02.f",math.floor((X/3600) -(ndays*24)))
   if tonumber(nHours) > 0 then table.insert(t,nHours.."h ") end
   local nMins = string.format("%02.f",math.floor((X/60) - (ndays * 1440) - (nHours*60)))
   if tonumber(nMins) > 0 then table.insert(t,nMins.."m ") end
   local nSecs = string.format("%02.f", math.fmod(X, 60));
   if tonumber(nSecs) > 0 then table.insert(t,nSecs.."s") end
   return table.concat(t)
  end

  function ADownload.ETA(Size,Done,Tranrate) --all in bytes
   if Size == nil then return "--" end
   if Done == nil then return "--" end
   if Tranrate == nil then return "--" end
   local RemS = (Size - Done) / Tranrate
   local RemS = tonumber(RemS)
   if RemS <= 0 or RemS == nil or RemS > 63072000 then return "--" end
   local date = os.date("%c",RemS)
   if date == nil then return "--" end
   local month, day, year, hour, minute, second = date:match("(%d+)/(%d+)/(%d+) (%d+): (%d+):(%d+)")
   month = month - 1
   day = day - 1
   year = year - 70
   if tonumber(year) > 0 then
   return string.format("%dy %dm %dd %dh %dm %ds", year, month, day, hour, minute, second)
   elseif tonumber(month) > 0 then
    return string.format("%dm %dd %dh %dm %ds",month, day, hour, minute, second)
   elseif tonumber(day) > 0 then
    return string.format("%dd %dh %dm %ds",day, hour, minute, second)  
   elseif tonumber(hour) > 0 then
    return string.format("%dh %dm %ds",hour, minute, second)   
   elseif tonumber(minute) > 0 then
    return string.format("%dm %ds",minute, second)  
   else
    return string.format("%ds",second)  
   end      
  end

  if date == nil then return "--" end

