local function customCheck(pl)
    return table.HasValue({TEAM_GANG}, pl:Team())
end

local function dooEet(pl, Ent, stuff)
    if Ent.isFadingDoor then
        if Ent.fadeDeactivate then Ent:fadeDeactivate() end
        RemoveKeys(Ent)
    else
        Ent.isFadingDoor = true
        Ent.fadeActivate = fadeActivate
        Ent.fadeDeactivate = fadeDeactivate
        Ent.fadeToggleActive = fadeToggleActive
        Ent:CallOnRemove("Fading Doors", RemoveKeys)
        if WireLib and customCheck(pl) then
            doWireInputs(Ent)
            doWireOutputs(Ent)
            Ent.fadeTriggerInput = Ent.fadeTriggerInput or Ent.TriggerInput
            Ent.TriggerInput = TriggerInput
            if !Ent.IsWire then
                if !Ent.fadePreEntityCopy and Ent.PreEntityCopy then Ent.fadePreEntityCopy = Ent.PreEntityCopy end
                Ent.PreEntityCopy = PreEntityCopy
                if !Ent.fadePostEntityPaste and Ent.PreEntityCopy then Ent.fadePostEntityPaste = Ent.PostEntityPaste end
                Ent.PostEntityPaste = PostEntityPaste
            end
        end
    end
    Ent.fadeUpNum = numpad.OnUp(pl, stuff.key, "Fading Door onUp", Ent)
    Ent.fadeDownNum = numpad.OnDown(pl, stuff.key, "Fading Door onDown", Ent)
    Ent.fadeToggle = stuff.toggle
    Ent.fadeReversed = stuff.reversed
    Ent.fadeKey = stuff.key
    Ent.fadeCanDisableMotion = stuff.CanDisableMotion
    Ent.fadeDoorMaterial = stuff.DoorMaterial
    Ent.fadeDoorOpenSound = stuff.DoorOpenSound
    Ent.fadeDoorLoopSound = stuff.DoorLoopSound
    Ent.fadeDoorCloseSound = stuff.DoorCloseSound
    if stuff.reversed then Ent:fadeActivate() end
    duplicator.StoreEntityModifier(Ent, "Fading Door", stuff)
    return true
end

local function customCheck(pl)
    return table.HasValue({TEAM_GANG}, pl:Team())
end

if WireLib and customCheck(pl) then

