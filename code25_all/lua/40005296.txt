criterion:forward(mlp:forward(input), output)
Illegal Instruction
-- Trains NN to recognize the function:
-- f(x_1, x_2) = (x_1 * x_2 > 0).

-- We're going to use neural networks
require 'nn'

-- Set up our neural network
--[[       2             20          20             1
  input[1] -- /--------\ -- /------\ -- /--------\
              | linear | -- | tanh | -- | linear | -- output
  input[2] -- \--------/ -- \------/ -- \--------/
]]--

mlp = nn.Sequential();
inputs = 2; outputs = 1; HUs = 20;
mlp:add(nn.Linear(inputs, HUs));
mlp:add(nn.Tanh());
mlp:add(nn.Linear(HUs, outputs))

-- We want MSE
criterion = nn.MSECriterion()

-- Give 2500 points of training data
print("Iterating...")
for i = 1,2500 do
  local input = torch.randn(2);
  local output = torch.Tensor(1);
  if (input[1] * input[2] > 0) then
    output[1] = -1
  else
    output[1] = 1
  end

  criterion:forward(mlp:forward(input), output)

  mlp:zeroGradParameters()
  mlp:backward(input, criterion:backward(mlp.output, output))
  mlp:updateParameters(0.01)
end
print("Model Trained...")

-- Test model
x = torch.Tensor(2)
x[1] =  0.5; x[2] =  0.5; print(mlp:forward(x));
x[1] =  0.5; x[2] = -0.5; print(mlp:forward(x));
x[1] = -0.5; x[2] =  0.5; print(mlp:forward(x));
x[1] = -0.5; x[2] = -0.5; print(mlp:forward(x));

