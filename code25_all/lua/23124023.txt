os.execute('sleep 1')
local delayedWork = {}
function handleLater( data, delaySeconds )
  local delayedItem = { data=data, execTime=os.clock() + delaySeconds }
  local i=1
  for _,existing in ipairs(delayedWork) do
    if existing.execTime > delayedItem.execTime then break else i=i+1 end
  end
  table.insert(delayedWork,i,delayedItem)
end

function processDelayedWork()
  local i,last = 1,#delayedWork
  while i<=last do
    local delayedItem = delayedWork[i]
    if delayedItem.execTime <= os.clock() then
      table.remove(delayedWork,i)
      -- use delayedItem.data
      last = last-1
    else
      i=i+1
    end
  end
end

os.execute('sleep 1')
os.clock()
$ lua -e "require 'os' print(os.clock()) os.execute('sleep 1') print(os.clock())"
0.002493
0.002799

os.time()
float
double
$ lua -e "require 'os' print(os.time()) os.execute('sleep 0.4') print(os.time())"
1397704209
1397704209

