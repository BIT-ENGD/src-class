if( changeBottom == true ) then
 for i = 1, newView.numViewChunksY - 1 do
  for j = 1, newView.numViewChunksX do
   newView.imageChunkTable[i][j] = newView.imageChunkTable[i + 1][j]
  end
 end
 for j = 1, newView.numViewChunksX do
 local i = newView.numViewChunksY
 local metaX
 local metaY
 if( newView.metaLoadingData.L == true ) then
  if( ( newView.curChunk.x + ( j - 3 )*chunkSize ) < newView.curMetaChunk.x ) then
   metaX = 1
  else
   metaX = 2
  end
 elseif( newView.metaLoadingData.R == true ) then
  if( ( newView.curChunk.x + ( j - 3 )*chunkSize ) > ( newView.curMetaChunk.x + metaChunkSize*chunkSize ) ) then
   metaX = 2
  else
   metaX = 1
  end
 else
  metaX = 1
 end
 if( newView.metaLoadingData.T == true ) then
  if( ( ( newView.curChunk.y + ( i - 2 )*chunkSize ) < newView.curMetaChunk.y ) ) then
   metaY = 1
  else
   metaY = 2
  end
 elseif( newView.metaLoadingData.B == true ) then
  if( ( newView.curChunk.y + ( i - 2 )*chunkSize ) >= newView.curMetaChunk.y + metaChunkSize*chunkSize ) then
   metaY = 2
  else
   metaY = 1
  end
 else
  metaY = 1
 end
 local chunk = newView.metaChunkTable[metaY][metaX].chunkTable[ ( newView.curChunk.y + ( i - 2 )*chunkSize )/chunkSize - newView.metaChunkTable[metaY][metaX].y/chunkSize + 1 ][ ( newView.curChunk.x + ( j - 3 )*chunkSize )/chunkSize - newView.metaChunkTable[metaY][metaX].x/chunkSize + 1 ]
 newView.imageChunkTable[newView.numViewChunksY][j].displayGroup:removeSelf()----------
 newView.imageChunkTable[newView.numViewChunksY][j] = nil                       *
 newView.imageChunkTable[newView.numViewChunksY][j] = imageChunk.new( chunk )   *
end

newView.imageChunkTable[newView.numViewChunksY][j].displayGroup:removeSelf()

local imageChunk = {}
local imageChunk_mt = { __index = imageChunk }

function imageChunk.new( infoChunk )
 local chunkSize = 10
 local tileSize = 48

 local newImageChunk = {
  objTable = {},
  displayGroup = display.newGroup()
        }
 for i = 1, infoChunk.numLayers do
  newImageChunk.objTable[i] = {}
  for j = 1, infoChunk.layer[i].numMembers do
   newImageChunk.objTable[i][j] = display.newImage( infoChunk.layer[i].group[j].kind.."/"..infoChunk.layer[i].group[j].subKind..".png", infoChunk.layer[i].group[j].x, infoChunk.layer[i].group[j].y )
   newImageChunk.displayGroup:insert( newImageChunk.objTable[i][j] )
  end
 end

 return setmetatable( newImageChunk, imageChunk_mt )
end

return imageChunk

