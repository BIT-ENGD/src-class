-- Get length of 2D or 3D vector
local function vector2d3dLength( vector )
    return math.sqrt( vector.x*vector.x + vector.y*vector.y + (vector.z or 0)*(vector.z or 0) )
end

-- Normalise 2D or 3D vector
local function normalise2d3dVector( vector )
    local len = vector2d3dLength( vector )

    if (len == 0) then
        return vector
    end

    local normalised = { x=vector.x/len, y=vector.y/len }

    if (vector.z) then
        normalised.z = vector.z/len
    end

    return normalised
end

local function crossProduct3d( a, b )
    return { x=a.y*b.z − a.z*b.y, y=a.z*b.x − a.x*b.z, z=a.x*b.y − a.y*b.x }
end

local function dotProduct3d( a, b )
    return a.x*b.x + a.y*b.y + a.z*b.z
end

-- subtract vector b from vector a
local function subtract_vectors( a, b )
    local sub = { x=a.x-b.x, y=a.y-b.y }

    if (a.z ~= nil and b.z ~= nil) then
        sub.z = a.z-b.z
    end

    return sub
end

