obj.rotation = angle
math.atan2
local function movePaddle(event)
local obj = right
local mMin = math.min;
local mCos = math.cos;
local mSin = math.sin;
local mAtan2 = math.atan2;
local mSqrt = math.sqrt;
local mFloor = math.floor;
local mPi = math.pi;
local radToDeg = 180/mPi;
local degToRad = mPi/180;
local radius = 40
if event.phase == "began" then
display.getCurrentStage():setFocus(obj)
--startMoveX = obj.x; startMoveY = obj.y;
local parent = obj.parent;
    local posX, posY = parent:contentToLocal(event.x, event.y)
    obj.x = posX; obj.y = posY;
    local angle = (mAtan2( posX, posY )*radToDeg)-90;
    local testAngle = angle + 360

    --paddleAnchor:applyTorque(delta*100)
         if angle < 0 then angle = 360 + angle end;
         if angle > 360 then angle = angle - 360 end
         if paddleAnchor.rotation < 0 then paddleAnchor.rotation =      paddleAnchor.rotation + 360 end
         if paddleAnchor.rotation > 360 then paddleAnchor.rotation =   paddleAnchor.rotation - 360 end
         local delta = (angle)-paddleAnchor.rotation

         if delta < angle then 
            paddleAnchor.rotation = paddleAnchor.rotation + delta/5
        elseif paddleAnchor.rotation > angle then 
            paddleAnchor.rotation = paddleAnchor.rotation - delta/5
        end
            print(delta)
            local distance = mSqrt((posX*posX)+(posY*posY));
            if distance >= radius then
                local radAngle = angle*degToRad;
                distance = radius;
                obj.x, obj.y = distance*mCos(radAngle), -    distance*mSin(radAngle)
            else
                obj.x, obj.y = posX, posY;
            end

elseif event.phase == "moved" then
    local parent = obj.parent;
    local posX, posY = parent:contentToLocal(event.x, event.y)
        obj.x = (event.x - event.xStart) + posX
        obj.y = (event.y - event.yStart) + posY
    local angle = (mAtan2( posX, posY )*radToDeg)-90;
    --local testAngle = angle + 360
    --if (paddleAnchor.rotation ~= -angle - 90) then
        --if (paddleAnchor.rotation < -angle - 90) then 
            --paddleAnchor.rotation = (paddleAnchor.rotation + (-angle-90)/2)
    --  elseif

    --end
    --paddleAnchor.rotation = -angle - 90
      if angle < 0 then angle = angle +360 end;
      if angle > 360 then angle = angle - 360 end
      if paddleAnchor.rotation < 0 then paddleAnchor.rotation = paddleAnchor.rotation + 360 end
      if paddleAnchor.rotation > 360 then paddleAnchor.rotation = paddleAnchor.rotation - 360 end
      local testAngle = angle + 360

        --if (-angle-90) >= 0 then angle = 270 end



    local delta = angle-paddleAnchor.rotation
      print(delta)
         if paddleAnchor.rotation < angle then 
            paddleAnchor.rotation = paddleAnchor.rotation + delta/5
        elseif paddleAnchor.rotation > angle then 
            paddleAnchor.rotation = paddleAnchor.rotation - delta/5
        end
    --paddleAnchor:applyTorque(delta)

            local distance = mSqrt((posX*posX)+(posY*posY));
            if distance >= radius then
                local radAngle = angle*degToRad;
                distance = radius;
                obj.x, obj.y = distance*mCos(radAngle), -distance*mSin(radAngle)
            else
                obj.x, obj.y = posX, posY;
            end
elseif event.phase == "ended" or event.phase == "cancelled" then
    obj.y = obj.startMoveY
    obj.x = obj.startMoveX
    display.getCurrentStage():setFocus(nil)
end
return true
end

