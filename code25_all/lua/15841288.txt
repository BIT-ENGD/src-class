require('timer')

-- params same as CreateTimerQueueTimer: DueTime, Period, Flags
-- flag WT_EXECUTEONLYONCE = 8, timer will stops, enabled set to false
local mt = timer(1000, 1000, 0)

local i = 0;
function myOnTimer()
    print('wow!')
    if i < 5 then
        i = i + 1
    else
        print("stopping timer")
        mt:StopTimer()
    end
end

mt:SetEvent('OnTimer', myOnTimer)
mt:StartTimer()

while mt:GetEnabled() do --more buggy way
end

wow!
while true do --buggy way, stack conflict during callback?
    local enabled = mt:GetEnabled()
    if not(enabled) then
        break
    end
end

5: bad argument #-2 to 'GetEnabled' (attempt to concatenatetimerLOADLIB:  a table valuetimerstring)
5: bad argument #-2 to 'GetEnabled' (timer expected, got table)
function WaitForTimer()
    while true do
        local is_enabled = mt:GetEnabled()
        if not(is_enabled) then
            print("not enabled")
            return coroutine.yield()
        end
    end
end

co = coroutine.create(WaitForTimer)
coroutine.resume(co)

GetEnabled()
function StaticThunk(L: Plua_State): integer; cdecl;
var
  o: TLuaWrapper;
begin
  o := TLuaWrapper(lua_topointer(L, lua_upvalueindex(1)));
  result := o.Thunk(L);
end;

function TLuaWrapper.Thunk(L: Plua_State): integer;
var
  i: integer;
  pobj: PtrT;
begin
  { redirect method call to the real thing }
  i := lua_tointeger(L, lua_upvalueindex(2)); // function's index, index is 2 since 1 is self ptr now
  lua_pushnumber(L, 0);
  lua_gettable(L, 1); // get the class table (i.e, self)

  pobj := PtrT(luaL_checkudata(L, -1, PAnsiChar(REG_NAME)));
  lua_remove(L, -1); // remove the userdata from the stack
  lua_remove(L, 1); // remove object from the stack

  try
    result := ClassApiArray[i].func(L, pobj^); // execute the thunk
  except
      result := 0;
  end;
end;

function TLuaWrapper.GetEnabled(L: Plua_State; obj: TQueuedTimer): integer;
begin
  // lua_settop(L, 0);
  lua_pushboolean(L, obj.Enabled);
  result := 1;
end;

lua.exe
LuaForWindows
