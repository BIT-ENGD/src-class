--ported from https://github.com/jakesgordon/bin-packing

local _M = {}

mt = {
  init = function(t, x, y)       --takes in dimensions of target rect.
    t.root = { x = 0, y = 0, x = x, y = y }
  end,

  fit = function(t, blocks)     --passes table "blocks"
    local n, node, block
    for k, block in pairs(blocks) do
      if node == t.findNode(t.root, block.x, block.y) then
        block.fit = t.splitNode(node, block.x, block.y)
      end
    end
  end,

  findNode = function(t, root, x, y)
    if root.used then                 --if root.used then
      return t.findNode(root.right, x, y) or t.findNode(root.down, x, y)
      elseif (x <= root.x) and (y <= root.y) then
        return root
      else
        return nil
    end
  end,

  splitNode = function(t, node, x, y)
    node.used = true
    node.down = { x = node.x,   y = node.y + y, x = node.x,   y = node.y - y }
    node.right = { x = node.x + x, y = node.y,   x = node.x - x, y = y      }
    return node;
  end,
}

setmetatable(_M, mt)

-- Let's do the object-like magic
mt.__index = function(t, k)
  if nil ~= mt[k] then
    return mt[k]
  else
    return t[k]
  end
end

mt.__call = function(t, ...)
  local new_instance = {}
  setmetatable(new_instance, mt)
  new_instance:init(...)
  return new_instance
end

return _M

