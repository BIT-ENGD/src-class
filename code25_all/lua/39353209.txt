local pthread = require 'pthread'

local cond = pthread.cond()
local mutex = pthread.mutex()
local ready = false

first = pthread.new(
    function()
        print('starting first')
        mutex:lock()
        print('first got lock')
        while not ready do
            cond:wait(mutex)
        end
        mutex:unlock()
        print('first continuing')
    end
)

second = pthread.new(
    function()
        print('starting second')
        mutex:lock()
        print('second got lock')
        ready = true
        cond:signal()
        mutex:unlock()
        print('second continuing')
    end
)

first:join()
second:join()

mutex:free()
cond:free()

$ luajit condition.lua
starting first
first got lock
starting second
second got lock
second continuing
first continuing

