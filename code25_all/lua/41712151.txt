function databaseFunctions.save(key, value)

    memc, err = connectDatabase();

    ngx.say("Before Save value: " .. value)
    local success, err = memc:set(key, value)

    local value, flags, err = memc:get(key)
    ngx.say("Getting saved value: " .. value);

    memc:set_keepalive(5000, 1)
    memc:close();

    memc, err = connectDatabase();
    local value, flags, err = memc:get(key)
    ngx.say("Getting saved value and err again: ")
    ngx.say(value);
    ngx.say(err)

    return success, err;
end

connectDatabase = function()

    local memcached = require "resty.memcached"
    local memc, err = memcached:new()

    memc:set_timeout(1000)

    local ok, err = memc:connect(databaseHost, databasePort)
    local ok, err = memc:flush_all()

    return memc, nil;
end

Before Save value: eyJhZGRyZXNzIjp7ImZv
Getting saved value: eyJhZGRyZXNzIjp7ImZv
Getting saved value and err again: 
nil
nil

