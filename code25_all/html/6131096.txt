<br/>
<BR/>
<BR/>
****
<?xml version='1.0'?>

<xsl:template match="ProjectDataSet">
  <html>
    <body>
      <xsl:for-each select="Project">
        <H2>
          <xsl:value-of select ="@ProjectID"/>
        </H2>
        <H3>Information</H3>
        Userfield1: <xsl:value-of select="UserField1"/>
        Userfield2: <xsl:value-of select="UserField2"/>
        <H3>Milestones</H3>
        <xsl:for-each select="MilestoneItem">
          Date: <xsl:value-of select="Date"/>  Event: <xsl:value-of select="Event"/><BR/>
        </xsl:for-each>
        <H3>Comments</H3>
        <xsl:for-each select="CommentItem">
          Date: <xsl:value-of select="Date"/><BR/>
          Description<BR/>
          <xsl:call-template name="ConvertRTF">
            <xsl:with-param name="desc" select="Description"/>
          </xsl:call-template>
          <HR/>
        </xsl:for-each>
      </xsl:for-each>
    </body>
  </html>
</xsl:template>

<xsl:template name="ConvertRTF">
  <xsl:param name="desc"/>
  <xsl:variable name="header1">
      <!--remove rtf header part 1-->
      <xsl:call-template name="string-replace-all">
        <xsl:with-param name="oldtext" select="$desc"/>
        <xsl:with-param name="replace" select="'{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Microsoft Sans Serif;}}'"/>
        <xsl:with-param name="by" select="''"/>
      </xsl:call-template>
    </xsl:variable>
  <xsl:variable name="header2">
      <!--remove rtf header part 2-->
      <xsl:call-template name="string-replace-all">
        <xsl:with-param name="oldtext" select="$header1"/>
        <xsl:with-param name="replace" select="'\viewkind4\uc1\pard\f0\fs17'"/>
        <xsl:with-param name="by" select="''"/>
      </xsl:call-template>
    </xsl:variable>
  <xsl:variable name="par">
    <!--place rtf /par with html <br> ******check this-->
    <xsl:call-template name="break">
      <xsl:with-param name="thetext" select="$header2"/>
    </xsl:call-template>
  </xsl:variable>
  <!--remove final } and output value-->
  <xsl:variable name="s_length" select="string-length($par)-2"/>
  <xsl:value-of select="substring($par,1,$s_length)"/>
</xsl:template>

<xsl:template name="string-replace-all">
  <xsl:param name="oldtext" />
  <xsl:param name="replace" />
  <xsl:param name="by" />
  <xsl:choose>
    <xsl:when test="contains($oldtext, $replace)">
      <xsl:value-of select="substring-before($oldtext,$replace)" />
      <xsl:value-of select="$by" />
      <xsl:call-template name="string-replace-all">
        <xsl:with-param name="oldtext" select="substring-after($oldtext,$replace)" />
        <xsl:with-param name="replace" select="$replace" />
        <xsl:with-param name="by" select="$by" />
      </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select="$oldtext" />
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="break">
  <xsl:param name="thetext"/>
  <xsl:choose>
    <xsl:when test="contains($thetext,'\par')">
      <xsl:value-of select="substring-before($thetext,'\par')"/>
      <BR/>
      <xsl:call-template name="break">
        <xsl:with-param name="thetext" select="substring-after($thetext,'\par')"/>
      </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select="$thetext"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

