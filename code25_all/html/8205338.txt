class table1(models.Model):
    user = models.CharField(max_length=25)
    filename = models.CharField(max_length=40)


    def __unicode__(self):
        return u'%s' % (self.user)

class table2(models.Model):

    accession = models.CharField(max_length=50, blank=True)
    version = models.CharField(max_length=50, blank=False)
    exp = models.ForeignKey(table1) 

    def __unicode__(self):
        return u'%s, %s, %s' %(self.accession,self.version)

class table3(models.Model):
    sf_id = models.CharField(max_length=50, blank=False)
    name = models.CharField(max_length=60, blank=False)
    mzml_fk = models.ForeignKey(table2)

    def __unicode__(self):
        return u'%s, %s' %(self.sf_id, self.name)


class table3_1(models.Model):
    ref = models.CharField(max_length=50, blank=False)
    value = models.CharField(max_length=100)
    sf_fk= models.ForeignKey(table3)

    def __unicode__(self):
        return u'%s, %s' %(self.ref, self.value)


class table4(models.Model):
    soft_id = models.CharField(max_length= 45)
    version = models.CharField(max_length=50, blank=False)
    soft_fk = models.ForeignKey(table2)

    def __unicode__(self):
        return u'%s, %s' %(self.soft_id, self.version)


class table4_1(models.Model):
    cvRef = models.CharField(max_length=10, blank=False)
    value = models.CharField(max_length=45, blank=True)
    soft_cv_fk = models.ForeignKey(table4)

    def __unicode__(self):
        return u'%s, %s' %(self.cvRef, self.value)


class Selion(models.Model):
    monoiso = models.FloatField()
    state = models.CharField(max_length= 2)
    sele_fk = models.ForeignKey(table2)

    def __unicode__(self):
        return u'%s, %s' % (self.monoiso,self.state)

class trum(models.Model):
    spec_id = models.CharField(max_length= 60, blank=False)
    spec_index = models.IntegerField(blank=False)
    spec_fk = models.ForeignKey(Selion)

    def __unicode__(self):
        return u'%s, %s, %s, %s' % (self.spec_id,self.spec_index)

allsel = Selion.objects.all()

{{allsel|length}}

myquery = Selion.objects.select_related().filter(monoiso__range=(lowrange, highrange))

<div id="leftcontainer">
     {% for section in myquery %}
       <ul>                     
            <li><a href="#{{section.monoiso}}">{{section.monoiso}}</a></li>
       </ul>
</div>

