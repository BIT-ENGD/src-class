package models


abstract class LoginBase 

case class Login(email: String, password: String) extends         LoginBase
case class RestoreLogin(email: String, captchaID: String,         captchaAnswer: String) extends LoginBase
case class RegisterLogin(email: String, password: String,         captchaID: String, captchaAnswer: String) extends LoginBase

package controllers

import play.api._
import play.api.mvc._
import play.api.data._
import play.api.data.Forms._
import play.api.Play.current
import play.api.cache.Cache
import play.api.libs.json._
import play.api.mvc._
import play.api.libs.functional.syntax._

import nl.captcha.Captcha
import nl.captcha.Captcha._
import nl.captcha.gimpy.FishEyeGimpyRenderer
import nl.captcha.text.renderer.ColoredEdgesWordRenderer
import nl.captcha.text.renderer.DefaultWordRenderer
import nl.captcha.gimpy.DropShadowGimpyRenderer

import java.io.ByteArrayOutputStream
import javax.imageio.ImageIO
import java.util.UUID

import play.api.libs.functional.syntax._
import models.LoginBase

object LoginActions extends Controller {


    implicit val loginReads = (
      (__ \ "email").read[String] and
      (__ \ "password").read[String]
    )(Login.apply _) 


    implicit val restoreLoginReads = (
      (__ \ "email").read[String] and
      (__ \ "captchaID").read[String] and
      (__ \ "captchaAnswer").read[String]
    )(RestoreLogin) 

    implicit val registerLoginReads = (
      (__ \ "email").read[String] and
      (__ \ "password").read[String] and
      (__ \ "captchaID").read[String] and
      (__ \ "captchaAnswer").read[String]
    )(RegisterLogin) 



    def registerLogin = Action(parse.json){
        /*  To be implementd */
    }

}

