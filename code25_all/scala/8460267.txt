package pl.koziolekweb.scala.dsi
import scala.tools.nsc.interpreter.{ IMain, Results }

trait Eval {

  def eval(expresion: String): Option[Any] = {
    val interpreter = new IMain {
      override protected def parentClassLoader: ClassLoader = App.getClass.getClassLoader
    }
    val res = new ResultSet
    interpreter.beQuietDuring {
      interpreter.bind("res", res.getClass.getCanonicalName, res)
      interpreter.interpret("res.value = " + expresion)
    } match {
      case Results.Success => Option(res.value)
      case _ => None;
    }

  }
}


object App extends Eval {

  def main(args: Array[String]) {
    { eval(args(0)) } match {
      case None => println("nie bangla")
      case Some(x) => println(x)
    }
  }

}

class ResultSet {

  var value : Any  = null

}

scala pl.koziolekweb.scala.dsi.App 1+1 

scala myapp.jar 1+1

<console>:5: error: not found: value pl
  var value: pl.koziolekweb.scala.dsi.ResultSet = _
             ^
<console>:6: error: not found: value pl
  def set(x: Any) = value = x.asInstanceOf[pl.koziolekweb.scala.dsi.ResultSet]
                                           ^
<console>:7: error: not found: value res
       res.value = 1+1
       ^
nie bangla

myapp.jar
