class Memo[T, U](fn: T => U) {

  val memo = new mutable.WeakHashMap[T, U]
  def apply(x: T) = memo.getOrElseUpdate(x, fn(x))
}

// an object is mutable if its (functional) behavior depends on its history

new Memo {i: Int => i + 1} // immutable

var ctr = 0;
new Memo { i: Int => ctr += i; ctr } // mutable

