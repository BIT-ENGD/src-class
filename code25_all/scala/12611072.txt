trait Foo {
  type Res <: Foo
  type Bar[X <: Res]
}

class MyFoo extends Foo {
  override type Res = MyFoo
  override type Bar[X <: Res] = List[X]
}

type FOO[F <: Foo, R <: Foo, B[_ <: R]] = F { type Res = R; 
                                              type Bar[X <: R] = B[X] }

def process[F <: Foo, R <: Foo, B[_ <: R]](f: FOO[F, R, B]) {}

process
process[MyFoo, MyFoo, List](new MyFoo) // fine

process(new MyFoo)

process((new MyFoo): FOO[MyFoo, MyFoo, List])

class List has one type parameter, but type B has one
