liftweb 2.4
 package snippet {

object Notes {

  def noteForm(in: NodeSeq): NodeSeq = {
    def add() = {
      if (note.description.isEmpty()) {
        S.error("descError", "Please enter a note")
      } else {
        note.save
        NotesServer ! "refresh"
        S.notice("descMessage", "Note added.")
      }

    }
    bind("f", in,
      "desc" -%> SHtml.text(note.description.is, note.description(_)),
      "submit" -%> SHtml.submit("Note It !", add)) ++ SHtml.hidden(add _)
  }

  def delete(note: Note): JsCmd = {
    note.delete_!
    NotesServer ! "refresh"
    S.notice("descMessage", "Note deleted.")
  }

}

object note extends RequestVar[Note]({ Note.create })

}

 <lift:surround with="default" at="content">
<div class="row">
    <div class="span11">
        <form class="lift:form.ajax">
            <lift:Notes.noteForm>
                <f:desc id="desc" placeholder="what do you want to note?"
                    class="xxlarge" />
                <f:submit class="btn primary" />
            </lift:Notes.noteForm>
        </form>
    </div>
</div>

<div class="row">
    <div class="span11">
        <lift:msg id="descError" errorClass="alert-message error" />
        <lift:msg id="descMessage" noticeClass="alert-message success" />
    </div>
</div>

    <div class="lift:comet?type=NotesComet" id="notes">
        <div class="row show-grid">
            <div class="note span10 lpad20">
                <div style="display: inline" class="desclist"></div>
                <a class="close rpad10 tpad10" href="javascript://">&times;</a>
            </div>
        </div>
    </div>

object NotesServer extends LiftActor with ListenerManager {

def createUpdate =  Note.allNotes


override def lowPriority = _ match{
  case "refresh" => updateListeners()
}

}  
class NotesComet extends CometActor with CometListener {
 private var notes: List[Note] = List()

 def registerWith = NotesServer

 override def lowPriority = {
  case n: List[Note] => notes = n; reRender()
 }

def render = "#notes" #> {
  (notes.reverse.map(note => ".desclist *" #> note.description &
  ".close [onclick]" #> ajaxInvoke(() => Notes.delete(note))))
}

}  

Boot.scala
LiftRules.noticesEffects.default.set((notice: Box[NoticeType.Value], id: String) => {
  Full(JqJsCmds.FadeOut(id, 2 seconds, 2 seconds))
})

<lift:msg id="descError" errorClass="alert-message error" />

<span id="descError" ></span>

<span id="descError" style="display: none;">
<span id="descError">
    <span class="alert-message error">Please enter a note</span>
</span>
</span>

descError
<span id="descError" style="display: none;">
    <span class="alert-message error">Please enter a note</span>
</span>  

