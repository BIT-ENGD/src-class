sealed abstract class SmartTime extends Ordered[SmartTime] { x =>
        def compare(y: SmartTime) = {
                x match {
                        case InfiniteFuture => 1
                        case InfinitePast => -1
                        case ConcreteTime(x) =>
                                y match {
                                        case InfiniteFuture => -1
                                        case InfinitePast => 1
                                        case ConcreteTime(y) => x compare y
                                }
                }
        }
}
case class ConcreteTime(t: Long) extends SmartTime
case object InfiniteFuture extends SmartTime
case object InfinitePast extends SmartTime

object Main {
        def main(args: Array[String]): Unit = {
                val y = ConcreteTime(100)
                val z = ConcreteTime(10)
                val x = InfiniteFuture
                val p = InfinitePast
                println(Vector(y, z, x, p).sortWith(_ < _))
        }
}

