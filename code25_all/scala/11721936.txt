trait Gene[+T] {
    val gene: Array[T]
}

covariant type T occurs in invariant position in type => Array[T] of value gene
trait Gene[+T] {
    def gene[U >: T]: Array[U]
}

type Genome = Array[Gene[Any]]
package object ga {


  class Gene[+T](val gene: Vector[T]){

    def apply(idx: Int) = gene(idx)

    override def toString() = gene.toString

  }

  implicit def toGene[T](a: Vector[T]) = new Gene(a)

  type Genome = Array[Gene[Any]]

}

package test

import ga._

object Test {
    def main(args: Array[String]) {
        val g = Vector(1, 3, 4)

        val g2 = Vector("a", "b")

        val genome1: Genome = Array(g, g2)

        println("Genome")

        for(gene <- genome1) println(gene.gene) 
    }
}

