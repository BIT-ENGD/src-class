trait Action {
  def andNext(action: PartialFunction[Int, Int => Action]): AndNext = AndNext(this, action)
}
case class ActionId extends Action
case class AndNext(action: Action, and: PartialFunction[Int, Int => Action]) extends Action

def f(lifted: Int => Action) = ???
f(implicit state => ActionId() andNext { case _ => implicit state => ActionId() })

f(ActionId() andNext { case _ => ActionId() })

implicit def lift[T](expr: T): Int => T = macro liftImpl[T]

def liftImpl[T: c.WeakTypeTag](c: Context)(expr: c.Expr[T]): c.Expr[Int => T] = {
  import c.mirror._
  import c.universe._

  //reify(implicit state => expr.splice)
  reify(implicit state => c.Expr[T](c.resetLocalAttrs(expr.tree)).splice)
}

class Any is abstract; cannot be instantiated

