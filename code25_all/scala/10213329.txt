import net.liftweb.record.{ MegaProtoUser, MetaMegaProtoUser }
import net.liftweb.squerylrecord.RecordTypeMode._
import net.liftweb.common._
import net.liftweb.util.FieldError
import net.liftweb.http.S

class User extends MegaProtoUser[User] {

  def meta = User

  protected def valUnique(errorMsg: => String)(email: String): List[FieldError] = {
    List[FieldError]()
  }

}

/**
 * The singleton that has methods for accessing the database
 */
object User extends User with MetaMegaProtoUser[User] {

  override def basePath = "profile" :: Nil

  override def signupFields = email :: password :: Nil

  override def signupXhtml(user: TheUserType) = {
    (<form method="post" action={ S.uri }><table>
                                            <tr><td colspan="2">{ S.??("sign.up") }</td></tr>
                                            { localForm(user, false, signupFields) }
                                            <tr><td>&nbsp;</td><td><user:submit class="btn btn-primary" /></td></tr>
                                          </table></form>)
  }

  override def screenWrap = Full(<lift:surround with="default" at="content">
                                   <lift:bind/>
                                 </lift:surround>)

  // redefine login form for nice formatting
  override def loginXhtml =
    <form method="post" action={ S.uri }>
      <lift:msg show="All"/>
      <div style="margin-bottom: 5px; margin-left: 5px;">
        <strong>
          { S.??("log.in") }
        </strong>
      </div>
      <div style="float: left; line-height: 2.5em;margin-left: 5px; margin-right: 20px;">
        { S.??("email.address") }<br/>{ S.??("password") }<br/>
        <a href={ lostPasswordPath.mkString("/", "/", "") }>
          { S.??("recover.password") }
        </a>
      </div>
      <div style="line-height: 2.5em;">
        <user:email/>
        <br/>
        <user:password/>
        <br/>
        <user:submit class="btn btn-primary"/>
      </div>
    </form>

  protected def userFromStringId(id: String): Box[User] = from(PPSchema.users)(u =>
    where(u.id === id.toLong)
      select (u)).headOption

  protected def findUserByUserName(email: String): Box[User] = from(PPSchema.users)(u =>
    where(u.email === email)
      select (u)).headOption

  protected def findUserByUniqueId(id: String): Box[User] = userFromStringId(id)
}

override def saveTheRecord() : Box[User] = {
    val u = User.createRecord.email(email.is).password(password.is).firstName(firstName.is).lastName(lastName.is).validated(validated.is).superUser(superUser.is)

    Full(PPSchema.users.insert(u))
  }

