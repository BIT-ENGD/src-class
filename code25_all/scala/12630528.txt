.map
.reduceLeft
.foldLeft(init(m))
expression
var
val acc = "some key name"
val id = "some other key name"
val myColl = List(1, 2, 3, 4, 5)

// oversimplification (these things actually do work and access other keys in the map)
def expression(m:Map[String, Int]) = (m(acc)) + (m(id))
def init(m:Map[String, Any]) = 0

// can this be made better?
def compute(m: Map[String, Int]) = {
  var initMap = m + (acc -> init(m))
  for(k <- myColl) {
    initMap = initMap + (id -> k)
    val exp = expression(initMap)
    initMap = initMap + (acc -> exp)
  }
  initMap(acc)
}

compute(Map())

