trait Secured {
   def username(request: RequestHeader) = request.session.get(Security.username)
   def onUnauthorized(request: RequestHeader) = Results.Redirect(routes.Auth.login)

   def withAuth(f: => String => Request[AnyContent] => Result) = {
      Security.Authenticated(username, onUnauthorized) { user =>
        Action(request => f(user)(request))
   }
}

MyController extends Contrller with Secured {
   def simple = Action { Ok("ok") }
   def simpleWithauth = withAuth { implicit username => implicit request=> Ok("ok") }
}

// This work fine
val result1 = controller.simple()(FakeRequest())

// This wont compile
val result2 = controller.simpleWithAuth()(FakeRequest())

