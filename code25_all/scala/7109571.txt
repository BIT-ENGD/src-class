Traverse
def traverse[F[_] : Applicative, A, B](f: A => F[B], t: T[A]): F[T[B]]
F[_] : Applicative
Applicative
trait Applicative[Z[_]] extends Pointed[Z] with Apply[Z] {
  override def fmap[A, B](fa: Z[A], f: A => B): Z[B] = this(pure(f), fa)
  override def apply[A, B](f: Z[A => B], a: Z[A]): Z[B] = liftA2(f, a, (_:A => B)(_: A))
  def liftA2[A, B, C](a: Z[A], b: Z[B], f: (A, B) => C): Z[C] = apply(fmap(a, f.curried), b)
}

traverse
F
Applicative[F]
F[_] : Applicative
F[_]
Applicative
Applicative[F]
Applicative[F]
