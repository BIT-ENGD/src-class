trait Sys[S <: Sys[S]]

object Expr {
  trait Var  [S <: Sys[S], A] extends Expr[S, A]
  trait Const[S <: Sys[S], A] extends Expr[S, A]
}
trait Expr[S <: Sys[S], A]

class RichDoubleExpr[S <: Sys[S]](ex: Expr[S, Double]) {
  def gugu(): String = "yes"
}

implicit def const[S <: Sys[S]](d: Double): Expr[S, Double] = 
  new Expr.Const[S, Double] {}

implicit def exprOps[S <: Sys[S], A <% Expr[S, Double]](v: A): RichDoubleExpr[S] = 
  new RichDoubleExpr( v )

const
3.4.gugu()

exprOps
def test[S <: Sys[S]]: String = {
  val v = new Expr.Var[S, Double] {}
  v.gugu()
}

error: No implicit view available from java.lang.Object with
   Expr.Var[S,Double] => Expr[S,Double].
          v.gugu()
          ^

Expr.Var
Expr
