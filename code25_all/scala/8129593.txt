abstract class Vertex
class Edge (
  val source: Vertex
  val dest: Vertex
)
class Graph[V <: Vertex] {
  ...
}

Graph[Vertex]
vertices.sorted
Ordered[Vertex]
compareTo
Vertex
compareTo
Vertex
Vertex
MyVertex
Ordered[MyVertex]
Graph[MyVertex]
Vertex
class MyClass extends Vertex {
  override def compare(that: Vertex) = that match {
    case that: MyClass => // do the comparison
    case _ => false
  }
}

Graph
Ordering[V]
V <: Ordered[V]
