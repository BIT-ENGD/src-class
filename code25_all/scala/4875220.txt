scala> type StateM[T] = T => (Int, T)
defined type alias StateM

scala> val c: StateM[Int] = {i => (i, i + 1)}
c: (Int) => (Int, Int) = <function1>

scala> val a: StateM[_] = c
a: StateM[_] = <function1>

scala> val z: Any = 0
z: Any = 0

scala> a(z)
<console>:19: error: type mismatch;
 found   : z.type (with underlying type Any)
 required: _$1 where type _$1
       a(z)
         ^

scala> type StateT = Pair[StateM[X], X] forSome {type X}
defined type alias StateT

scala> val t: StateT = (c, 0)
t: StateT = (<function1>,0)

scala> t._1(t._2)
<console>:13: error: type mismatch;
 found   : t._2.type (with underlying type Any)
 required: X where type X
       t._1(t._2)
              ^

