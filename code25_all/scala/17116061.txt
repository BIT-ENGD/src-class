Stream.continually(List(1,2,3)).transpose

Stream(
  Stream.continually(1),
  Stream.continually(2),
  Stream.continually(3)
)

def myTranspose[A,B](in: Stream[A])
     (implicit asTraversable: A => GenTraversableOnce[B]): Stream[Stream[B]] = {
  val len = asTraversable(in.head).size

  for (i <- (0 until len).toStream)
    yield in.map(el => asTraversable(el).toIndexedSeq(i))
}

