trait X
case class Y(y:Int) extends X
case class Z(z:Int) extends X
val l = List(Y(1), Y(2), Z(3), Z(4))
l.collect{case e: Y=>e} // returns List[Y] = List(Y(1), Y(2))
l.collect{case e: Z=>e} // returns List[Z] = List(Z(3), Z(4))

val f = Y
l.collect{case e: f=>e} // should return List[Y] = List(Y(1), Y(2))

error: not found: type f
case
collect
