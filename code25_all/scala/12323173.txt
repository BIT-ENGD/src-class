trait MyTrait[T <: MyTrait[T]] { self: T =>
  val listOfT: List[T]
  def getFirst: T
  def getOne: T = if (listOfT.length > 0) getFirst else self
}

class MyClass extends MyTrait[MyClass] {
  override val listOfT: List[MyClass] = List[MyClass](this)
  override def getFirst: MyClass = listOfT.head
}

object MyTrait{
  def doSomething[T <: MyTrait[T]](aninstance:T)= { ... }
}

case class Foo( anInstanceOfMyTrait: MyTrait[what goes here???] )

