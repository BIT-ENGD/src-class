[error] Not a valid command: assembly
[error] No such setting/task
[error] assembly
[error]         ^  

import sbt._
import Keys._
import org.scalatra.sbt._
import org.scalatra.sbt.PluginKeys._
import com.mojolly.scalate.ScalatePlugin._
import ScalateKeys._
import sbtassembly.Plugin._
import AssemblyKeys._

object SketchlinkBuild extends Build {
  val Organization = "de.foobar"
  val Name = "Foobar"
  val Version = "0.1"
  val ScalaVersion = "2.10.0"
  val ScalatraVersion = "2.2.0"

  lazy val project = Project (
    "foobar",
    file("."),
    settings = Defaults.defaultSettings ++ ScalatraPlugin.scalatraWithJRebel ++ scalateSettings ++ assemblySettings ++ Seq(
      organization := Organization,
      name := Name,
      version := Version,
      scalaVersion := ScalaVersion,
      resolvers += Classpaths.typesafeReleases,
      libraryDependencies ++= Seq(
            "org.scalatra" %% "scalatra" % ScalatraVersion,
            "org.scalatra" %% "scalatra-scalate" % ScalatraVersion,
            "org.scalatra" %% "scalatra-specs2" % ScalatraVersion % "test",
            "ch.qos.logback" % "logback-classic" % "1.0.6" % "runtime",
            "org.eclipse.jetty" % "jetty-webapp" % "8.1.8.v20121106" % "compile;container",
            "org.eclipse.jetty.orbit" % "javax.servlet" % "3.0.0.v201112011016" % "compile;container;provided;test" artifacts (Artifact("javax.servlet", "jar", "jar")),
            /* Apache commons libraries */
            "commons-codec" % "commons-codec" % "1.7", 
            "commons-io" % "commons-io" % "2.4",
            /* JSON support */
            "org.scalatra" %% "scalatra-json" % "2.2.1",
            "org.json4s"   %% "json4s-jackson" % "3.2.4",
            /* thumbnail library */
            "net.coobird" % "thumbnailator" % "0.4.3"
     ),
     // ignore about.html in jars (needed for sbt-assembly)
     mergeStrategy in assembly <<= (mergeStrategy in assembly) { (old) => {
       case "about.html" => MergeStrategy.discard
       case x => old(x) }
     },
     scalateTemplateConfig in Compile <<= (sourceDirectory in Compile){ base =>
        Seq(
          TemplateConfig(
            base / "webapp" / "WEB-INF" / "templates",
            Seq.empty,  /* default imports should be added here */
            Seq(
              Binding("context", "_root_.org.scalatra.scalate.ScalatraRenderContext", importMembers = true, isImplicit = true)
            ),  /* add extra bindings here */
            Some("templates")
          )
        )
      }
    )
  )
}

