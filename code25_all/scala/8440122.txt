class Relation[A,B]
class Node[A,B](r: Relation[A,B])
implicit def relation2node[A,B](r: Relation[A,B]) = new Node(r)

class XRelation[A] extends Relation[A,Int]

class User extends XRelation[Int]

class Helper[A,B](n: Node[A,B]) { def GET {} }

// note: this is the only way I know of to make the next example work.
implicit def xx2node2helper[A,B,C[_,_]](x: C[A,B])(implicit f: C[A,B] => Node[A,B]) = new Helper(x)

new Relation[Int,Int]().GET

// don't understand why this doesn't work for the previous example
// but works for the next example
implicit def x2node2helper[A,B,C](x: C)(implicit f: C => Node[A,B]) = new Helper(x)

new XRelation[Int]().GET

new User().GET

error: No implicit view available from Sandbox3.User => Sandbox3.Node[A,B]

Relation
