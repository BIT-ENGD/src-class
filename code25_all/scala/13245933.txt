y
x
y
x
y
x
y
x
type Occurrences = List[(Char, Int)]

def subtract(x: Occurrences, y: Occurrences): Occurrences = x filterNot (y contains)

 test("subtract: lard - r") {
    val lard = List(('a', 1), ('d', 1), ('l', 1), ('r', 1))
    val r = List(('r', 1))
    val lad = List(('a', 1), ('d', 1), ('l', 1))
    assert(subtract(lard, r) === lad)
  }

// subtract: jimmy - my
List((i,1), (j,1), (m,1), (y,0)) did not equal List((i,1), (j,1), (m,1))

//subtract: ok - ok
List((k,0), (o,0)) did not equal List()

//subtract: abba - abba
List((a,0), (b,0)) did not equal List()

//subtract: assessment - assess

