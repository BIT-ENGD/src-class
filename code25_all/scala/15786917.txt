import scala.reflect.runtime.{universe => ru}

object Reflection {

  val mirror = ru.runtimeMirror(this.getClass.getClassLoader)

  def findVals(x: Any): Iterable[String] = {
    val theType = mirror.classSymbol(x.getClass).toType
    theType.members.collect({case x if x.isTerm => x.asTerm}).filter(_.isVal).map(_.name.toString)
  }

}

class Base {
  val x = 10
}

class Child extends Base {
  val y = 20
}

val x = new Child
val vs = Reflection.findVals(x)
println(vs)

List(y)
isVal
false
x
Base
