val matA = new Matrix[Int](List(1 :: 2 :: 3 :: Nil, 4 :: 5 :: 6 :: Nil))
val matB = new Matrix[Int](List(7 :: 8 :: 9 :: Nil, 10 :: 11 :: 12 :: Nil))

val matC =matA. mop( matB) (_ + _)                                   //can work
def +(that: Matrix[T]) = this.mop(that)(_ + _)                       //can't work
val matC = matA + matB

//class definition

type F[T] = (T, T) => T
type M[T] = List[List[T]]


class Matrix[T](val elms: M[T]) {

  override def toString()= (this.elms map (_.mkString("[", ",", "]"))).mkString("\n")

  def mop(that: Matrix[T])(op: F[T]): Matrix[T] = new Matrix[T](((this.elms zip that.elms).map(t => ((t._1 zip t._2)).map(s => op(s._1, s._2)))))

 // def +(that: Matrix[T]) = this.mop(that)(_ + _)

}

