...
scala.collection.Vector
trait Vec[C] extends Product {
  def -(o:Vec[C]):Vec[C] = ...
  ...
}

Vec2
Vec2Int
Int
Vec2Int
Vec[Int]
Vec2Int
Vec2Int
final
trait Shape[C, V <: Vec[C]] extends (V=>Boolean) {
  def boundingBox:Box[C,V]
}

Box
Shape
trait Box[C, V <: Vec[C]] extends Shape[C,V] {
  def lowCorner:V
  def highCorner:V
  def boundingBox = this
  def diagonal:V = highCorner - lowCorner // does not compile
}

diagonal
Vec.-
Vec[C]
V
diagonal
Vec[C]
Vec
Float
Vec2Float
Vec2Float
VecLike
trait VecLike[C, +This <: VecLike[C,This] with Vec[C]] {
  def -(o:Vec[C]):This
  ...
}

Vec
trait Vec[C] extends Product with VecLike[C, Vec[C]] ...

VecLike
Vec2Like
Vec3Like
Vec
Shape
Box
trait Shape[C, V <: VecLike[C,V] with Vec[C]] ...

trait Box[C, V <: VecLike[C,V] with Vec[C]] extends Shape[C,V] {
  ...
  def diagonal:V = highCorner - lowCorner 
}

Error: type mismatch;
found: Vec[C]
required: V

VecLike
This
V
Box
Vec
Vec[C]
VecLike
