var acc: B = 0.asInstanceOf[B]
List("a", "b", "c")
0.asInstanceOf[String]
0.asInstanceOf[String]
ClassCastException
0.asInstanceOf[String]
def reduceLeft[B >: A](op: (B, A) => B): B = {
  if (isEmpty)
    throw new UnsupportedOperationException("empty.reduceLeft")

  var first = true
  var acc: B = 0.asInstanceOf[B]

  for (x <- self) {
    if (first) {
      acc = x
      first = false
    }
    else acc = op(acc, x)
  }
  acc
}

acc
for
TraversableOnce
