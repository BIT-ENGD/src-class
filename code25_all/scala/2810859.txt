abstract class ViewPresenterPair {
  type V <: View 
  type P <: Presenter

  trait View {self: V =>
    val presenter: P
  }

  trait Presenter {self: P =>
    var view: V
  }
}

case class SensorViewPresenter[T] extends ViewPresenterPair {
  type V = SensorView[T]
  type P = SensorPresenter[T]

  trait SensorView[T] extends View {
  }

  class SensorViewImpl[T](val presenter: P) extends SensorView[T] {
    presenter.view = this
  }

  class SensorPresenter[T] extends Presenter {
    var view: V
  }
}

error: illegal inheritance;
 self-type SensorViewPresenter.this.SensorView[T] does not conform to SensorViewPresenter.this.View's selftype SensorViewPresenter.this.V
         trait SensorView[T] extends View {
                                     ^
<console>:13: error: type mismatch;
 found   : SensorViewPresenter.this.SensorViewImpl[T]
 required: SensorViewPresenter.this.V
        presenter.view = this
                         ^
<console>:16: error: illegal inheritance;
 self-type SensorViewPresenter.this.SensorPresenter[T] does not conform to SensorViewPresenter.this.Presenter's selftype SensorViewPresenter.this.P
         class SensorPresenter[T] extends Presenter {
                                          ^

V
SensorView[T]
