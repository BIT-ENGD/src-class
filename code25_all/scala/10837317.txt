def create(e: Entity): Option[Int] =
  db.handle withSession { implicit ss: Session=>
    catching( mapper.insert(e) ) option match {
      case Some(success) => Some(Query(sequenceID))
      case None => None
    }
  }

val result = for{
  u <- user.dao.create(ubean)
  m <- member.dao.create(mbean)
  o <- order.dao.create(obean)
} yield (u,m,o)
result match {
  case Some((a,b,c)) => // all good
  case _ => // failed, need to rollback here
}

db.handle withSession { implicit ss: Session=>
  ss.withTransaction {
    val result = for{
      u <- safe( UserMapper.insert(ubean) )
      ...
    }
    def safe(q: Query[_]) = 
      catching( q ) option match {
        case Some(success) => Some(Query(sequenceID))
        case None => None
      }
  }
}

