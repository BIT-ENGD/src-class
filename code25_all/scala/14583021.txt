val clazz: Class[_ <: java.io.Serializable] = classOf[java.lang.String]
val value: java.io.Serializable = "abc"

class MyWrapper[T <: java.io.Serializable](val data: T)(implicit m: Manifest[T]) {
  override def toString = m.runtimeClass
}
val wrapper = new MyWrapper(value)

java.lang.String
toString
java.io.Serializable
java.io.Serializable
MyWrapper
new MyWrapper[String](value)
value
Serializable
clazz
val clazz: Class[_ <: java.io.Serializable] = classOf[java.lang.String]
val value: java.io.Serializable = "abc"

class MyWrapper[T <: java.io.Serializable](val data: T)(implicit m: Manifest[T]) {
  override def toString = m.runtimeClass.getName
}
val wrapper = new MyWrapper(value)
//val wrapper = new MyWrapper(value)(ClassManifest.fromClass(clazz).asInstanceOf[ClassTypeManifest[java.io.Serializable]])
//val wrapper = new MyWrapper(value)(ClassManifest.fromClass(clazz))
System.err.println(wrapper.toString)

scala> :load test.scala
Loading test.scala...
clazz: Class[_ <: java.io.Serializable] = class java.lang.String
value: java.io.Serializable = abc
defined class MyWrapper
<console>:10: error: type mismatch;
 found   : scala.reflect.ClassManifest[_$1] where type _$1 <: java.io.Serializable
    (which expands to)  scala.reflect.ClassTag[_$1]
 required: Manifest[java.io.Serializable]
       val wrapper = new MyWrapper(value)(ClassManifest.fromClass(clazz))
                                                                 ^
<console>:8: error: not found: value wrapper
              System.err.println(wrapper.toString)

[error]  found   : scala.reflect.ClassManifest[(some other)_0(in method setProperty)]
[error]     (which expands to)  scala.reflect.ClassTag[(some other)_0(in method setProperty)]
[error]  required: Manifest[_0(in method setProperty)]
[error]           new Value.Static(default, Context.virtual(element))(ClassManifest.fromClass(elementProperty.typeClass)))

