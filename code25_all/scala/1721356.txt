TraversableLike[A].map
def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That

A
B
That
CanBuildFrom[Repr, B, That]
> val s: Set[Int] = List("Paris", "London").map(_.length)
s: Set[Int] Set(5,6)

That
B
CanBuildFrom
trait CanBuildFrom[-From, -Elem, +To]

That
> val s: Set[String] = List("Paris", "London").map(_.length) //will not compile

CanBuildFrom
