    object Test {

          def main(args: Array[String]) {
           (new FooImpl2()).foo()
          }

          trait Foo {
            def foo()
          }

          trait M extends Foo {
            abstract override def foo() {println("M"); super.foo()}
          }

          abstract class FooImpl1 extends Foo {

          }

          class FooImpl2 extends FooImpl1 with M{
            override def foo() {println("Impl2")}
          }

    }

error: overriding method foo in trait M of type ()Unit;
method foo needs `abstract override' modifiers
override def foo() {println("Impl2")}

class FooImpl2 extends FooImpl1 with M{
    override def foo() {println("Impl2")}
}

override
FooImpl1
abstract override
