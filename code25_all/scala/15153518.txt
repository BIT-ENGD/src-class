case class SubComment(subText: String)
case class Comment(by: String, votes: Int, text: SubComment)
case class BlogPost(title: String, comments: List[Comment])
object SubComment {
    val text = "text".fieldOf[String]
    implicit val writer = {
      def f(sub: SubComment): DBObject = (text -> sub.subText)
      ValueWriter(f _)
    }
  }
  object Comment {
    val by = "by".fieldOf[String]
    val votes = "votes".fieldOf[Int]
    val text = "text".fieldOf[SubComment]
  }
  object BlogPost {
    val title = "title".fieldOf[String]
    val comments = "comments".subset(Comment).of[List[Comment]]
  }
  val qComment = BlogPost.comments.where { _.by === "maria" }
  val qSubComment = BlogPost.comments.where {â€¦? === "X"} // not yet working

{ "comments.text.subText" : "X"}
