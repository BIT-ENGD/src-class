object MyParser extends RegexParsers{

   override val skipWhitespace = false
   def blockLine  = ((id ~ args) <~ ":") ~ ".*?".r ^^ {
      case (blockID ~ argList) ~ rest => ???
   }


   def args       = (("[" ~> rep1sep(arg, ", ") <~ "]")?) ^^ {
      case Some(argList) =>
           argList.zipWithIndex.map{
              case ((Some(k), v), index) => k -> v
              case ((None, v), index) => "arg" + index -> v
           }
        case None => List()
     }

     def arg        = ((id <~ "=")?) ~ argtext ^^ {
        case Some(name) ~ value => Some(name) -> value.toString()
        case None ~ value=> None -> value
     }

   def argtext    = "[^\\[\\],]+".r
   def id         = "[a-zA-Z]*".r

   ... many other parsers not shown...

id
args
blockLine
List()
~
def blockLine  = (rawText(id ~ args) <~ ":") ~ ".*?".r ^^ {
   case first ~ rest => first + "{" + rest
}

