class Outer {
  class Inner(val x: Option[Inner] = None) {
    def test(y: Inner) {}
  }
}

implicit class ExtInner(inner: Outer#Inner) {
  def get = inner.x.get
}

val outer = new Outer
val inner = new outer.Inner(Some(new outer.Inner))
inner.test(inner.get)

get
Outer#Inner
test
outer.Inner
asInstanceOf
get
outer.Inner
inner.test(inner.get.asInstanceOf[outer.Inner]) 

ExtInner
implicit class ExtInner[T <: Outer#Inner](inner: T) {
  def get = inner.x.get.asInstanceOf[T]
}

