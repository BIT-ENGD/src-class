def matrix[T](g: Gen[T]): Gen[Seq[Seq[T]]] = Gen.sized { size =>
  val side = scala.math.sqrt(size).asInstanceOf[Int]
  Gen.listOfN(side, Gen.listOfN(side, g))
}

def matrix[T](g: Gen[T]): Gen[Array[Array[T]]] = Gen.sized { size =>
  val side = scala.math.sqrt(size).asInstanceOf[Int]
  val g1 = Gen.containerOfN[Array, T](side, g)
  Gen.containerOfN[Array, Array[T]](side, g1)
}

  def build[T](n:Int)(implicit m:ClassManifest[T]) = Array.ofDim[T](n)

  import org.scalacheck.util.Buildable._
  def matrix[T](g: Gen[T])(implicit b: Buildable[T, Array]): Gen[Array[Array[T]]] = Gen.sized { size =>

    val side = scala.math.sqrt(size).asInstanceOf[Int]
    val g1 = Gen.containerOfN[Array, T](side, g)
    Gen.containerOfN[Array, Array[T]](side, g1)
  }

