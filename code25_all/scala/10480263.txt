// Types of message
trait TypeMessage
case class TypeMessage1 extends TypeMessage{
    val a : String,
    val b : Int
}
case class TypeMessage2 extends TypeMessage{
    val c : Double,
    val d : String
}

// Here is the problem
class TreatMsg[T <: TypeMessage] {
    // I'm using a random sintax here, just for ilustration
    def getParamInfo( variable : ?? ) = { 
        println("name: " + variable.name + "  value: " + variable.val + "  type: " + variable.val.getClass)
    }
}
object TreatMsg{
    def apply[T <: TypeMessage] = new TreatMsg[T]
}


// Creating actors
TreatMsg[TypeMessage1].getParamInfo(_.a)
TreatMsg[TypeMessage2].getParamInfo(_.d)

