type
type Reaction

type Condition = () => Boolean

type ComplexReaction extends Reaction = (Condition) => Unit
type SimpleReaction extends Reaction = () => Unit

val map = Map[Condition, Reaction]

def addPair(c: Condition, a: Reaction) { map += (c -> a) }

def executeAll {
  for(puffy <- map) puffy match {
    case (c, a: ComplexReaction) => a(c)
    case (c, a: SimpleReaction) => if(c) a()
  }
}

type
