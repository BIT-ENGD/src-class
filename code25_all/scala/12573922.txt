ActorEventBus
/**
   * special actor that transports messages to the hive
   */
  val hiveTalk = {
    val subscriber = actorSystem.actorOf(Props(new HiveTransport))

    Bus.subscribe( subscriber, "/app/browser/" )
    Bus.subscribe( subscriber, "/app/mobile/" )
  }

MessageBus
ActorEventBus
/**
 * message bus to route messages to their appropriate contexts
 */
class MessageBus extends ActorEventBus with LookupClassification {

    type Event = MessageEvent
  type Classifier = String

  protected def mapSize(): Int = {
    10
  }

  protected def classify(event: Event): Classifier = {
    event.channel
  }

  protected def publish(event: Event, subscriber: Subscriber): Unit = {
    subscriber ! event
  }

}

/app/browser/26
hiveTalk
