// Validate client and return temporary credentials
def requestToken = Action { request =>
  // Authorization header may present or not
  val authHeader = parseHeaders(request headers AUTHORIZATION)
  // Authorization header may contain such keys or not
  val clientKey = authHeader("oauth_consumer_key")
  val signature = authHeader("oauth_signature")

  if (authenticateClient(clientKey, signature)) {
    ...
    Ok(...)
  } else {
    Unauthorized(...)
  }

if (!request.headers.contains(AUTHORIZATION))
  return Unathorized

val authHeader = parseHeaders(request headers AUTHORIZATION)

if (!authHeader.contains("oauth_consumer_key") || !authHeader.contains("oauth_signature"))
  return Unathorized

val clientKey = authHeader("oauth_consumer_key")
val signature = authHeader("oauth_signature")

...

