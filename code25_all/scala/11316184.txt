class Inner[T] {
  class Value
  val values = IndexedSeq.empty[Value]
}

class Outer[T] {
  def inner = new Inner[T]
}

object TestApp {
  def main(args: Array[String]) {
    val outer: Outer[_] = null
    val values = outer.inner.values
    values(0)
  }
}

$ scalac test.scala 
test.scala:14: error: ambiguous reference to overloaded definition,
both method apply in trait SeqLike of type ((idx: Int)Inner[_$1]#Value) forSome { type _$1 }
and  method apply in trait Function1 of type ((v1: Int)Inner[_$1]#Value) forSome { type _$1; type _$1; type _$1 }
match argument types (Int)
    values(0)
    ^
one error found

IndexedSeq.empty[String]
IndexedSeq.empty[Value]
Outer[String]
Outer[_]
values.head
values(0)
def inner
val inner
