joinLeft
abstract class Either[+A, +B]

def joinLeft[A1 >: A, B1 >: B, C](implicit ev: A1 <:< Either[C, B1]):
    Either[C, B1] = this match {
    case Left(a)  => a
    case Right(b) => Right(b)
}

A
B
implicit ev: A1 <:< Either[C, B1]
A1 >: A, B1 >: B
A1 <: Either[C, B1]
conforms[A1]
conforms[Either[C, B1]]
A1
B1
A
B
A1
Either[C, B1]
conforms
<:<
A1 <: Either[C, B1]
