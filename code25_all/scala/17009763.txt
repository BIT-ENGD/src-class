case class DomainObject(id: UUID)

class Registry extends akka.actor.Actor {
  def receive: Receive = {
    case o: DomainObject => store(o) // save or update object

    case id: UUID => sender ! retrieve(id) // retrieve object and send it back
  }
}

Identify
AgentIdentity
val registryName = ... // some name
val registryId = ... // some id
var registry = _

def preStart() {
  context.actorSelection(registryName) ! Identify(registryId)
}

def receive: Receive = {
  case ActorIdentity(`registryId`, ref) => registry = ref
}

object RegistryKey extends ExtensionKey[RegistryExtension]

class RegistryExtesion(system: ExtendedActorSystem) extends RegistryKey {
  val registry = system.actorOf(Props[Registry], "registry")
}

