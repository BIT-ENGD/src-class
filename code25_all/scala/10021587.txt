b = temp(temp.length-1).toInt; //temp is an ArrayBuffer[String]

For input string: "z"
at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
at java.lang.Integer.parseInt(Integer.java:449)
at java.lang.Integer.parseInt(Integer.java:499)
at scala.collection.immutable.StringLike$class.toInt(StringLike.scala:231)
at scala.collection.immutable.StringOps.toInt(StringOps.scala:31)
at Driver$.stringParse$1(Driver.scala:59)
at Driver$.main(Driver.scala:86)
at Driver.main(Driver.scala)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:78)
at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:24)
at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:88)
at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:78)
at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:33)
at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:40)
at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:56)
at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)
at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)
at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)

at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)

val str = "(and x y)";
val str2 = "(and x (and y z))"; //case with expression on th right side
val str3 = "(and (and x y) z)"; //case with expression ont he left side

var i = 0; //just counter used to loop through the finished parsed array to make a list
//var position = 0; //this is used for when passing it in the parser to start off at zero
var hold = new ArrayBuffer[String]();//finished array should be here

def stringParse ( exp: String, expreshHolder: ArrayBuffer[String] ): ArrayBuffer[String] = { //takes two arguments, string, arraybuffer
    var b = 0; //position of where in the expression String I am currently in
    var temp = expreshHolder; //holder of expressions without parens
    var arrayCounter = 0;
    if(temp.length == 0) 
        b = 0; 
        else {
            b = temp(temp.length-1).toInt;
            temp.remove(temp.length-1); 
            arrayCounter = temp.length;
        } //this sets the position of wherever the string was read last plus removes that check from the end of the ArrayBuffer
     //just counts to make sure an empty spot in the array is there to put in the strings

    if(exp(b) == '(') {
        b = b + 1;

        while(exp(b) == ' '){b = b + 1;} //point of this is to just skip any spaces between paren and start of expression type
        if(exp(b) == 'a') {
            //first create the 'and', 'or', 'not' expression types to figure out 
            temp += exp(b).toString;
            b = b+1; 
            temp(arrayCounter) = temp(arrayCounter) + exp(b).toString; //concatenates the second letter
            b = b+1; 
            temp(arrayCounter) = temp(arrayCounter) + exp(b).toString; //concatenates the last letter for the expression type
            //arrayCounter+=1;
            //this part now takes the symbols and puts them in an array
            b+=1;

            while(exp(b) == ' ') {b+=1;} //just skips any spaces until it reaches the FIRST symbol
            if(exp(b) == '(') { 
                temp += b.toString; 
                temp = stringParse(exp, temp); 
                b = temp(temp.length-1).toInt; 
                temp.remove(temp.length-1); 
                arrayCounter = temp.length-1 
                } else {
                    temp += exp(b).toString; 
                    arrayCounter+=1; b+=1; }

            while(exp(b) == ' ') {b+=1;} //just skips any spaces until it reaches the SECOND symbol
            if(exp(b) == '(') { 
                temp += b.toString;
                temp = stringParse(exp, temp); 
                b = temp(temp.length-1).toInt; 
                temp.remove(temp.length-1); 
                arrayCounter = temp.length-1 
                } else {
                    temp += exp(b).toString; 
                    arrayCounter+=1; 
                    b+=1; 

        } 
    temp;
    } else { var fail = new ArrayBuffer[String]; fail +="failed"; fail;}

}
hold = stringParse(str2, ho );
for(test <- hold) println(test);

