trait FooLike { def foo: String }
case class Foo(foo: String) extends FooLike

trait Sys {
  type D <: FooLike
  def bar: D
}

trait Confluent extends Sys {
  type D = Foo
}

trait Mixin extends Sys {
  val global = bar.foo
}

class System1 extends Mixin with Confluent {
  val bar = Foo("npe")
}

new System1  // boom!!

class System2 extends Confluent with Mixin {
  val bar = Foo("npe")
}

new System2  // boom!!

bar
global
