case class Conference(
  user: User,
  payment: Payment
  ... custom fields here
)

@(_form: Form[Conference])

@user.nested( UserForm.form.fill(_form.get.user) )
@payment.nested( PaymentForm.form.fill(_form.get.payment) )

@(_form: Form[User])

@inputText(_form("user.firstName"), '_label-> "First Name*", 'class-> "required")
@inputText(_form("user.lastName"), '_label-> "Last Name*", 'class-> "required")
...

case class User(firstName: String, lastName: String ...)

def apply(key: String): Field = Field(
    this,
    key,
    constraints.get(key).getOrElse(Nil),
    formats.get(key),
    errors.collect { case e if e.key == key => e },
    data.get(key))

data.user.firstName
case class User(firstName: String, lastName: String ...) {
  val user: User
}

trait CartOrder {
  user: User,
  payment: Payment
}
case class Conference(...) extends CartOrder

@[T <: CartOrder](_form: Form[T])
@inputText(_form("user.firstName"), '_label-> "First Name*", 'class-> "required")
...

