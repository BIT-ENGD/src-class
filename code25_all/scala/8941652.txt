ValueCell
ValueCell
ValueCell
class StringFilter {

  val referenceList = "foo"::"bar"::"scala"::"lift"::Nil

  val length = ValueCell[Int](3)
  val content = ValueCell[String]("")

  //Here I put some functions to update length or prefix on my webpage
  def filter(s:String):Boolean = (s.length==length.get)&&(s.contains(content.get))

  val changed =ValueCell[???](???)
  val results= changed.lift(referenceList.filter)
}

???
length
content
case class
SeqCell
SeqCell
final case class SeqCell[T](cells: Cell[T]*) extends Cell[Seq[T]] {

  cells.foreach(_.addDependent(this))

  /**
  * The cell's value and most recent change time
  */
  def currentValue: (Seq[T], Long) = {
    val tcv = cells.map(_.currentValue)
    tcv.map(_._1) -> tcv.foldLeft(0L)((max, c) => if (max > c._2) max else c._2)
  }

  /**
   * If the predicate cell changes, the Dependent will be notified
   */
  def predicateChanged(which: Cell[_]): Unit = notifyDependents()
}

Cell
SeqCell
