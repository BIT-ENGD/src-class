abstract class A[+T] { def foo[S >: T](x: S): String }

class B extends A[String] { def foo(x: String) = x }

xxx@yyy:~$ scalac covariant.scala 
covariant.scala:3: error: class B needs to be abstract, since method foo in class A of type [S >: String](x: S)String is not defined
class B extends A[String] { def foo(x: String) = x }
      ^

class B extends A[String] { def foo[String](x: String) = x }

covariant.scala:3: error: type mismatch;
 found   : String(in method foo)
 required: java.lang.String
class B extends A[String] { def foo[String](x: String) = x }
                                                         ^

import java.util.Date
class B extends A[Date] { def foo[Date](x: Date) = x.toString }

2.9.1.final
