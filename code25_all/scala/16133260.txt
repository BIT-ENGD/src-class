add(new ListView[Meetings]("listMeetings", listData) {
  override protected def onBeforeRender() {
  periodTotal = new Period()
  super.onBeforeRender()
}

// for populating the listView
def populateItem(item: ListItem[customer]) = {
    var customer = item.getModelObject()

    item.add(new LinkDate("beginDate", customer))
    item.add(new LinkDate("endDate", customer))

    val listManagers: java.util.List[Manager] = managerDAO.listManagers
    item.add(new DropDownChoice("managerSelection", listManagers,new ChoiceRenderer[Manager]("name")))

    item.add(new TextField("detail"))

    /*
     * I tried to use the code bellow but it's cause a markups errors too.
     * Only the code above display the components without errors.
     */  
    //val managerSelection = new LinkManager("managerSelection",customer)
    //item.add(managerSelection)
    //item.add(new LinkDetail("detail",  customer))

    var period = new Period(customer.beginDate, customer.endDate.get)
    item.add(new Label("total", period.toString(getFormatter())))

    item.add(new LinkEdit("edit", customer))
}})

private class LinkDate(id: String, customer: Customer) extends Link[String](id) {

    setEnabled(false)
    add(new Label("label", new Model[String]() {
      override def getObject(): String = {
        var result = ""
        if (id == "beginDate") {
          result = customer.beginDate.toString("dd/MM/YYYY HH:mm:ss")
        }
        if (id == "endDate") {
          result = customer.endDate.get.toString("dd/MM/YYYY HH:mm:ss")
        }
        return result
      }
    }))
     // ... doing other stuff
  }

  private class LinkEdit(id: String, customer: Customer) extends Link[String](id) {

    add(new Label("label", new Model[String]() {
      override def getObject: String = "edit"
    }));
    // ... doing other stuff
  }

  // Doesn't work
  private class LinkManager(id: String, customer: Customer) extends Link[String](id) {

    val listManagers: java.util.List[Manager] = managerDAO.listManagers
    add(new DropDownChoice("managerSelection", listManagers,new ChoiceRenderer[Manager]("name") {

      def wantOnSelectionChangedNotifications() = {
        true;
      }
      def onSelectionChanged(managerSelection: Manager): String = {
        // saving model
        })
      }
    }))

    // ... doing other stuff
  }

  // Doesn't work
  // Also here I tried to change textFiled for a inline-ajax Editable label
  // And I need the behaviour to change model imadiately after change value
  private class LinkDetail(id: String, customer: Customer) extends Link[String](id) {

    add(new AjaxEditableLabel("detail", new Model[String]() {
      override def getObject(): String = {
        // ... doing other stuff
      }
    }))
  }

<TR wicket:id="listCustomersMeetings">
  <TD><a wicket:id="beginDate"><span wicket:id="label"></span></a></TD>
  <TD><a wicket:id="endDate"><span wicket:id="label"></span></a></TD>
  <TD>
      <SELECT wicket:id="managerSelection" name="id"></SELECT>
      <BR>
  </TD>

  <TD><INPUT wicket:id="detail" type="text" name="obs" value="_"/></TD>

  <TD wicket:id="total"></TD>

  <TD><a wicket:id="edit"><span wicket:id="label" style="text-align: center"></span></a></TD>

</TR>

