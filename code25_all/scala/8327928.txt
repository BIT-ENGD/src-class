class Channel[T, U](val endPoint : EventSource[U], val filter : Occurrence[T] => Boolean,
    val map : Occurrence[T] => Occurrence[U]) {

    def send(occurrence : Occurrence[T]) {
        if (filter(occurrence)) {
            endPoint.occur(map(occurrence))
        }
    }
}

class EventSource[T] {
    var List[Channel[T,U]] list = ...
}

list
list = list ++ List[Channel[T, U](new Channel[T, U](endPoint, filter, map))

