import objectexplorer.MemoryMeasurer

class GenericNonSpecialized[A] (wrapped: A, val padding: Int) {
  def getWrapped: Any = wrapped
}

class GenericSpecialized[@specialized(Long, Double, Boolean) A] (wrapped: A, val padding: Int) {
  def getWrapped: A = wrapped
}

class GenericSpecializedVal[@specialized(Long, Double, Boolean) A] (val wrapped: A, val padding: Int) {
  def getWrapped: A = wrapped
}

class NonGeneric(val wrapped: Long, padding: Int) {
}

object App {
  def main(args: Array[String]) {
    println(MemoryMeasurer.measureBytes(new GenericNonSpecialized(4L, 0)))
    // Expect: 48: NonSpecialized object (24 bytes) + boxed long (24 bytes)
    // Actual: 48

    // I expect all of the below to be 24 bytes: Object overhead (12 bytes) + Long (8 bytes) + Int (4 bytes),
    // but only the non-generic one is actually 24 bytes.

    println(MemoryMeasurer.measureBytes(new GenericSpecialized(4L, 0))) // 56

    println(MemoryMeasurer.measureBytes(new GenericSpecializedVal(4L, 0))) // 32

    println(MemoryMeasurer.measureBytes(new NonGeneric(4L, 0))) // 24
  }
}

