sealed trait Plan {
  def id: String
  def name: String
  def apps: Int
  def users: Int
  def testruns: Int
  def price: Int
  def prio: Int
}

case class Start(
                  id: String = "start",
                  name: String = "Start",
                  apps: Int = 1,
                  users: Int = 1,
                  testruns: Int = 10,
                  price: Int = 99,
                  prio: Int = 30) extends Plan

case class Pro(
                id: String = "pro",
                name: String = "Pro",
                apps: Int = 2,
                users: Int = 5,
                testruns: Int = 25,
                price: Int = 299,
                prio: Int = 20) extends Plan

case class Premium(
                    id: String = "premium",
                    name: String = "Premium",
                    apps: Int = -1,
                    users: Int = -1,
                    testruns: Int = -1,
                    price: Int = 799,
                    prio: Int = 10) extends Plan

object Plan {
  implicit val planFormats = (
    (__ \ "id").format[String] and
    (__ \ "name").format[String] and
    (__ \ "apps").format[Int] and
    (__ \ "users").format[Int] and
    (__ \ "testruns").format[Int] and
    (__ \ "price").format[Int] and
    (__ \ "prio").format[Int]
  )(Plan.apply, unlift(Plan.unapply))
}

