class BoolSet[-T](f: T=>Boolean) {

  def contains(x:T): Boolean = f(x)

  def add(x:T): BoolSet[T] = return new BoolSet[T](((y: T)=> f(y) || y==x))

  def remove(x:T): BoolSet[T] = if(f(x)) return new BoolSet[T](((y: T)=> f(y) && y!=x)) else return this

  def union[U>:T](s : BoolSet[U]) : BoolSet[U] = return new BoolSet[U](((y: U) => this.contains(y) || s.contains(y)))

}

this.contains
T=>Boolean
U=>Boolean
