Books
Makers
class Maker {
  type PF = (String, Book) => Book
  def apply(in: Source): Book = {
    mkMap(in, parseTop)
  }
  def mkMap(in: Source, top: PF) {
    var res = new Book
    in.getLines.foreach { ln => res = top(ln, res)
  }
  def parseTop(line: String, book: Book): Book = {
    // really makes a new Book object with changes based on the content of `line` and returns it
    book
  }
}

case class
class Book(val title: String = "Untitled", val author: String = "No Author", val language: String = "English")
  def copy(title: String = this.title, author: String = this.author, language: String = this.language) = new Book(title, author, language)

SpecialMaker
SpecialBooks
class SpecialBook(title: String = "Untitled", author: String = "No Author", language: String = "English", val specialness: Int = 9000) extends Book(title, author, language)
  def copy(title: String = this.title, author: String = this.author, language: String = this.language, specialness: Int = this.specialness) = new SpecialBook(title, author, language, specialness)

SpecialBook
Book
parseTop
class SpecialMaker {
   override def parseTop(line: String, book: SpecialBook): SpecialBook = {
     book.copy(specialness = book.specialness + 9000)
   }
}

