class SuperClass {}
val typemap = new HashMap[Class[_ <: SuperClass], SuperClass]

def insertItem1[T <: SuperClass] (item : T) = typemap += classOf[T] -> item
def insertItem2[T <: SuperClass] (item : T) = typemap += item.getClass -> item

error: class type required but T found

Type mismatch, expected: Class[_ <: SuperClass], actual: Class[_]

item.getClass.asInstanceOf[Class[T]]
def isPresent[T <: SuperClass] = typemap contains classOf[T]

insertItem
isPresent
