package testactors

import scala.collection.mutable.ArrayBuffer
import scala.actors._
import scala.actors.Actor._
import scala.actors.remote._
import scala.actors.remote.RemoteActor._

class Server extends Actor {
    start

    @volatile private var toLive = true

    def act() {

        alive(9000)
        register('server, self)

        while (toLive) {
            receiveWithin(100) {
                case TIMEOUT =>
                case e => println(e)
            }
        }

        println("Server died")
    }

    def killActor() {
        toLive = false
    }

}

object Main {

    def main(args: Array[String]): Unit = {

        val remoteSrc = new Server

        println("Connecting to remote actor")
        var localSrc = select(Node("localhost", 9000), 'server)
        localSrc ! "hello"
        Thread.sleep(1000)

        println("Killing remote actor")
        remoteSrc.killActor

    }

}

Connecting to remote actor
hello
Killing remote actor
Server died

