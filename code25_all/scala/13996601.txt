import scala.language.higherKinds

trait Foo[F[_]]
trait Bar[F[_], A]

Foo
F
Foo
Bar[F, _]
implicit def barFoo[F[_]: Foo] = new Foo[({type L[X] = Bar[F, X]})#L] {}

List
Either
implicit object listFoo extends Foo[List]
implicit def eitherFoo[A] = new Foo[({type L[X] = Either[A, X]})#L] {}

type BarList[X] = Bar[List, X]

implicitly[Foo[BarList]]

implicitly[Foo[({type L[X] = Bar[List, X]})#L]]

type StringOr[X] = Either[String, X]
type BarStringOr[X] = Bar[StringOr, X]

scala> implicitly[Foo[BarStringOr]]
res2: Foo[BarStringOr] = $anon$1@39a6c855

implicitly[Foo[({type L[X] = Bar[StringOr, X]})#L]]

<console>:15: error: could not find implicit value for parameter e: Foo[[X]Bar[[X]scala.util.Either[String,X],X]]
              implicitly[Foo[({type L[X] = Bar[StringOr, X]})#L]]
                        ^

Foo
StringOr
barFoo
scala> implicitly[Foo[StringOr]]
res4: Foo[StringOr] = $anon$1@3eaac006

scala> barFoo[StringOr]
res5: Foo[[X]Bar[StringOr,X]] = $anon$1@179fbfea

List
StringOr
