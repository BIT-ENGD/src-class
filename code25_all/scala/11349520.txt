def flattenAsStrings(as: Seq[Any]): Seq[String] = {
  val (travValued, other) = as.partition(a => classOf[Traversable[_]] isAssignableFrom(a.getClass))
  val (arrayValued, singleValued) = other.partition(a => a.isInstanceOf[Array[_]])
  val travStrings = travValued.map(_.asInstanceOf[Traversable[_]].map(_.toString)).flatMap(_.toList)
  val arrayStrings = arrayValued.map(_.asInstanceOf[Array[_]].map(_.toString)).flatMap(_.toList)
  singleValued.map(_.toString) ++ travStrings ++ arrayStrings
} 

