  def db = ReactiveMongoPlugin.db
  def nodesCollection = db("nodes")

  def index = Action {implicit request =>
    Async {
      Logger.debug("serving nodes list")
      implicit val nodeReader = Node.Node7BSONReader
      val query = BSONDocument(
        "$query" -> BSONDocument()
      )
      val found = nodesCollection.find(query)   
      found.toList.map { nodes =>
        Logger.debug("returning nodes list to requester")
        Ok(views.html.nodes.nodes(nodes))
      }
    }
  }

  def showCreationForm = Action { implicit request =>
    Ok(views.html.nodes.editNode(None, Node.nodeCredForm))
  }

  def create = Action { implicit request =>
    Node.nodeCredForm.bindFromRequest.fold(
      errors => {
        Ok(views.html.nodes.editNode(None, errors))
      },
      node => AsyncResult {
        Node.createNode(node._1, node._2, node._3) match { 
          case Right(myNode) => {
            nodesCollection.insert(myNode).map { _ =>
            Redirect(routes.Nodes.index).flashing("success" -> "Node Added")
          }
        }
        case Left(message) => {
          Future(Redirect(routes.Nodes.index).flashing("error" -> message))
        }
      }
    }
  )
}

[debug] application - in Node constructor
[debug] application - done inseting, redirecting to nodes page

--- (RELOAD) ---

[info] application - ReactiveMongoPlugin stops, closing connections...
[info] application - ReactiveMongo stopped. [Success(Closed)]
[info] application - ReactiveMongoPlugin starting...

