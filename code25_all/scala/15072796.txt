sealed trait Base
case class A() extends Base 
case class B() extends Base
case class Container[+T](item: Base)


object Test {
  import scala.reflect.ClassTag

  def narrowContainer[T <: Base](list: List[Container[Base]])(implicit tag: ClassTag[T]): List[Container[T]] = {
      list.collect{ case t: Container[T] => t }
  }  

  def testNarrowContainer(){
       val li = List(A(),B(),A(),B()).map(Container(_))
       println(narrowContainer[A](li))  
       println(narrowContainer[B](li)) 
  }

  def main(args: Array[String]){
      testNarrowContainer()
  }

}

