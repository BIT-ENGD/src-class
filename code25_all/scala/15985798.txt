object Main extends App {

  trait WithValue[A] {
    def value: A
  }

  class BoundedNumber[A](val lower: A, val upper: A, val value: A) extends WithValue[A]

  case class NumberBetween0and99(value: Int) extends BoundedNumber[Int](0, 99, value)
  case class UnboundedPositiveInt(value: Int) extends WithValue[Int]
  case class UnboundedPositiveDouble(value: Double) extends WithValue[Double]


  override def main(args: Array[String]) {
    val map: Map[Symbol, WithValue[_]] = Map(
      'foo -> UnboundedPositiveDouble(5),
      'bar -> UnboundedPositiveInt(10),
      'baz -> NumberBetween0and99(55)
    )
    for (m <- map) println(5 + m._2.value)
  }
}

overloaded method value + with alternatives: (...) cannot be applied to (Any)

