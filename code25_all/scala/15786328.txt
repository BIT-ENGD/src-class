final case class Request(data: Any)
final case class Response(data: Any)

abstract class ActorTemplate[T] extends Actor {
  def dataFunction: PartialFunction[Any, T]

  def respond(data: T): Response

  def receive: Receive = {
    case Request(data) if dataFunction.isDefinedAt(data) =>
      sender ! respond(dataFunction(data))
  }      
}

  def receive: Receive = {
    case Request(data: T) =>
      sender ! respond(data)

if dataFunction.isDefinedAt(data)
object DataExtractor {
  def unapply(data: Any): Option[T] =
    if (dataFunction.isDefinedAt(data)) Some(dataFunction(data)) else None
}

def receive: Receive = {
  case Request(DataExtractor(data) =>
    sender ! respond(data)

collect
trait PFExtract[T] {
 object PF {
   def unapply(any: Any)(implicit pf: PartialFunction[Any, T]): Option[T] =
     pf.lift(any)
 }
}

