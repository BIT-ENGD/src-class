List[Class[_ <: Base]]
Base
class A extends Base
class B extends Base
class C extends A

val classes = classOf[A] :: Nil
val
def testClass(class : List[Class[_ <: Base]], instance : Base) : Boolean
val classes = classOf[A] :: Nil
testClass(classes, new A) // should return true
testClass(classes, new B) // should return false
testClass(classes, new C) // should return true

retryRequest({
    //Some code that throws exceptions
}, classOf[SomeException] :: classOf[SomeOtherException] :: Nil,
100, {Thread.sleep(5000)})

def retryRequest(req : => Unit, validExceptions : List[Class[_ <: java.lang.Throwable]], tries : Int, waitMethod : => Unit) {
    var keepTrying = false
    var tryCount = 0
    do{
        try{
            logger.debug("retryRequest, try #" + tryCount)
            keepTrying = false
            req
        }catch{
            case ex if(tryCount >= tries && validExceptions.contains(ex.getClass)) => {
                throw new MaxTriesReachedException("tried for " + tryCount + "times, but no luck. " +
                                                   "you may want to try ommitting generic exceptions types from the given list.") 
            }
            case ex if (validExceptions.contains(ex.getClass)) => {
                logger.debug("intercepted " + ex.toString)
                tryCount += 1
                keepTrying = true
                waitMethod
            }
        }
    }while(keepTrying)
}

validExceptions.contains(ex.getClass)

validExceptions.exists(exClass => ex.isInstanceOf[exClass]) //won't compile

