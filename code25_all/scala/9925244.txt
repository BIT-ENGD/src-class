receive
class WorkerActor extends Actor {
  def act() {
    loop {
      react {
        case DoJob =>
          for (1 to n) sender ! Result
          sender ! Done
      }
    }
  }
}

Done
class ControllerActor(val workers: List[WorkerActor]) extends Actor {
  def act() {
     workers.foreach(w => w ! DoJob)
     receiveResults(workers.size)

     //do a bunch of other stuff
  }

  def receiveResults(count: Int) {
    if (count == 0) return

    receive {
      case Result => 
        // do something with this result (that updates own mutable state)
        receiveResults(count)
      case Done 
        receiveResults(count - 1)
    }
  }
}

Done
receive
react
react
Done
act
//do a bunch of other stuff
Done
andThen { }
andThen { andThen { andThen } }
class ControllerActor extends Actor with CalculatingTrait { 
//CalculatingTrait has performCalculations method

    val listOne: List[WorkerActor]
    val ListTwo: List[WorkerActor]   
    def act {
      performCalculations(listOne)
      performCalculations(listTwo)
    }
}

act
