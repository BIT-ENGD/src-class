class Foo {}   
object Foo { 
  def create():Foo = new Foo() 
}

class FooCreator(factory:Foo) {
  def this() = this(Foo)
  ...
  factory.create()
  ...
}

class FooMock extends Foo {}
object FooMock extends Foo { 
  def create():Foo = new FooMock() 
}

// in a test
val fooCreator = new FooCreator(FooMock)

trait FooFactory {
  def create():Foo;
}

class Foo {}
object Foo extends FooFactory { 
  def create():Foo = new Foo() 
}

class FooCreator(factory:FooFactory) {
  def this() = this(Foo)
  ...
  factory.create()
  ...
}

class FooMock extends Foo {}
object FooMock extends FooFactory { 
  def create():Foo = new FooMock() 
}

// in a test
val fooCreator = new FooCreator(FooMock)

