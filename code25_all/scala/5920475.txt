val ints: mutable.Map[Integer, String] = mutable.Map.empty[Integer, String]
//init of ints
val nums: Map[Number, String] = ints.toMap[Number, String]
processNumbers(nums)
processIntegers(ints)

package qndTests
import scala.collection.mutable
object TypeTest {
  var hashNums = 0
  var hashIntegers = 0
  def processNumbers(nums: Map[Number, String]): Unit = {
  nums.foreach(num =>{
      hashNums+=num._1.hashCode+num._2.hashCode
    })
  }
  def processNumbers2(nums: mutable.Map[Integer, String]): Unit = {
  nums.foreach(num =>{
      hashNums+=num._1.hashCode+num._2.hashCode
    })
  }
  def processIntegers(nums: mutable.Map[Integer, String]): Unit = {
  nums.foreach(num =>{
      hashIntegers+=num._1.hashCode+num._2.hashCode
    })
  }
  def test(ints: mutable.Map[Integer, String], convertType: Boolean): Unit = {
  if(convertType)
    println("run test with type conversion")
  else
    println("run test without type conversion")

  val start = System.nanoTime
  hashNums = 0
  hashIntegers = 0
  val nTest = 10
  for(i <- 0 to nTest) {
    if(convertType){
      val nums: Map[Number, String] = ints.toMap[Number, String] //how much does that cost ?
      processNumbers(nums)
    }else{
      processNumbers2(ints)
    }

    processIntegers(ints)
  }
  val end= System.nanoTime
  println("nums: "+hashNums)
  println("ints: "+hashIntegers)
  println(end-start)
}
def main(args: Array[String]): Unit = {
  val ints: mutable.Map[Integer, String] = mutable.Map.empty[Integer, String]
  val testSize = 1000000

  println("creating a map of "+testSize+" elements")
  for(i <- 0 to testSize) ints.put(i, i.toBinaryString)
  println("done")

  test(ints, false)
  test(ints, true)
  }
}

