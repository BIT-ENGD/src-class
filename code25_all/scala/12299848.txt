abstract class A {
   val actor = system.actorOf(Props(new C),"dummy")
   def send(msg: String) = actor ! msg // This compiles fine
}

class C extends akka.actor.Actor {
   def receive = {case msg => println(msg)}
}

implicit def AtoC(a:  A) = a.actor

class D extends A

val d = new D

d ! message // This does not compile

d.tell(message)

implicit def AtoC(a:  A) = a.actor.asInstanceOf[ScalaActorRef]

