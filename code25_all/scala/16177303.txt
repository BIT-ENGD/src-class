AnyVal
object Measurements {
  trait ValueType[T] extends Any {
    def value: T
  }

  trait Measurement[A <: ValueType[Double]] extends Any {
    def modify(fn: (Double, A) => Double, value: A): A
    def +(mod: A) = modify((x: Double, y: A) => x + y.value, mod)
    def -(mod: A) = modify((x: Double, y: A) => x - y.value, mod)
    def *(mod: A) = modify((x: Double, y: A) => x * y.value, mod)
    def /(mod: A) = modify((x: Double, y: A) => x / y.value, mod)
  }

  case class Frequency(value: Double) extends AnyVal 
      with ValueType[Double] 
      with Measurement[Frequency] 
  {
    def modify(fn: (Double, Frequency) => Double, mod: Frequency) 
      = Frequency(fn(value, mod))
  }

  case class Amplitude(value: Double) extends AnyVal 
      with ValueType[Double] 
      with Measurement[Amplitude] 
  {
    def modify(fn: (Double, Amplitude) => Double, mod: Amplitude) 
      = Amplitude(fn(value, mod))
  }

  case class Wavelength(value: Double) extends AnyVal 
      with ValueType[Double] 
      with Measurement[Wavelength] 
  {
    def modify(fn: (Double, Wavelength) => Double, mod: Wavelength) 
      = Wavelength(fn(value, mod))
  }
}
import Measurements._
Frequency(150) + Frequency(10) // ==> Frequency(160)
Amplitude(23.2) * Amplitude(2) // ==> Amplitude(46.4)
Amplitude(50) + Frequency(50)  // ==> Compile-time Type Error

modify
A(value)
A
def modify(fn: (Double, A) => Double, mod: A) = A(fn(value, mod))

apply(Double)
A
