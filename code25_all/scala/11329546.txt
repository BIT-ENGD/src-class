abstract class A
class B extends A

trait Test[T <: A] {
  def foo(t: T) = println("I'm Foo")

  def bar(t: T) = t match {
    case b: B => foo(b)
    case _ => println("Bar says: Other")
  }
}

<console>:14: error: type mismatch;
 found   : b.type (with underlying type B)
 required: T
           case b: B => foo(b)
                            ^

b
t
t
T
b
t
b
A
T
T
A
