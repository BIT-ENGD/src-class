object Category {
  def fCat = new Category[Function1] {
    def compose[A, B, C](f: (B) => C)(g: (A) => B) = { a: A => f(g(a)) }
  }
}

Category
trait Category[~>[_, _]] {
  def compose[A, B, C](f: ~>[B, C])(g: ~>[A, B]): ~>[A, C]
}

  def compose[A, B, C](f: B ~> C)(g: A ~> B): A ~> C

fCat
