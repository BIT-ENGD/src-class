import scala.util.parsing.combinator._
import scala.language.implicitConversions

object Parser1 extends RegexParsers with ImplicitConversions with PackratParsers {
  lazy val e: PackratParser[Int] = (
      e ~ "+" ~ e ^^ { (e1, _, e2) => e1 + e2 }
    | e ~ "-" ~ e ^^ { (e1, _, e2) => e1 - e2 }
    | """\d+""".r ^^ { _.toInt }
  )
}

error: wrong number of parameters; expected = 1
      e ~ "+" ~ e ^^ { (e1, _, e2) => e1 + e2 }
                                   ^

e
flatten3
ImplicitConversions
object Parser1 extends RegexParsers with ImplicitConversions with PackratParsers {
  lazy val e: PackratParser[Int] = (
      e ~ "+" ~ e ^^ flatten3({ (e1, _, e2) => e1 + e2 })
    | e ~ "-" ~ e ^^ flatten3({ (e1, _, e2) => e1 - e2 })
    | """\d+""".r ^^ { _.toInt }
  )
}

