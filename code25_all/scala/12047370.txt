trait A[T]

A
T
def foo(as: Seq[A[X]] forSome { type X }) = true

def otherFoo(as: Seq[A[X] forSome { type X }]) = true

def otherFoo(as: Seq[A[_]]) = true

Seq
A
T
foo
Seq
foo(Seq(new A[Int] {}, new A[Int] {}))

scala> foo(Seq(new A[Int] {}, new A[String] {}))
<console>:10: error: type mismatch;
 found   : Seq[A[_ >: java.lang.String with Int]]
 required: Seq[A[X]] forSome { type X }

              foo(Seq(new A[Int] {}, new A[String] {}))
                     ^

trait B { type T }

B
T
scala> def bar[X](b: B { type T = X }) = true
bar: [X](b: B{type T = X})Boolean

scala> bar[Int](new B { type T = Int })
res5: Boolean = true

scala> bar[String](new B { type T = Int })
<console>:10: error: type mismatch;
 found   : java.lang.Object with B
 required: B{type T = String}
              bar[String](new B { type T = Int })
                          ^

foo
scala> def baz(bs: Seq[B { type T = X }] forSome { type X }) = true
baz: (as: Seq[B{type T = X}] forSome { type X })Boolean

scala> baz(Seq(new B { type T = Int }, new B { type T = String }))
res7: Boolean = true

foo
bar
def accept(rs: Seq[RList[Int] { type S = X }] forSome { type X }) = true

