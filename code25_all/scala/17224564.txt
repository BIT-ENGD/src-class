trait Player
trait Player1 extends Player
trait Player2 extends Player
trait Human extends Player
trait Computer extends Player

type Players = Tuple2[Player1, Player2]
val initialize: Array[String] => Players = (args: Array[String]) =>
  args.map(_.trim.toLowerCase) match {
    case Array("x") =>
      (new Player1 with Human, new Player2 with Computer)
    case Array("o") =>
      (new Player1 with Computer, new Player2 with Human)
    case _ =>
      (new Player1 with Human, new Player2 with Computer)
    }

Players
def nextPlayer(player: Player)(implicit players: Players): Player =
  player match {
    case _: Player1 => players._2
    case _: Player2 => players._1
  }

object GameState {
  var player1: Player = _
  var player2: Player = _
}

Players
