trait Node {
  def parent:Option[this.type]
}

case class NodeInstance(parentValue:Option[NodeInstance]) extends Node {
  def parent = parentValue.asInstanceOf[Option[this.type]]
}

case class NodeInstance(parent:Option[NodeInstance]) extends Node

trait Node[T] { self:T =>
  def parent:Option[T]
}

trait Node[T] { self:T =>
  def parent:Option[T]
  def root:T = this.parent.map(_.root).getOrElse(this)
}

object Node {
  def root[T <: Node[?]](node:T):T = node.parent.map(root(_)).getOrElse(this)
}

