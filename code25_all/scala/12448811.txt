if (operator == Equal || operator == Missing || operator == Unknown) {

operator match {
  case Equal | Missing | Unknown => {

if (operator.isOneOf(List(Equal, Missing, Unknown))) {

if (Set(1, 2, 3)(3)) {
  "Gotcha"
} else {
  "no luck..."
}

import PartialFunction.cond

if (cond(3) { case 1 | 2 | 3 => true }) {
  "Gotcha"
} else {
  "no luck..."
}

class ComparableWithIsOneOf[T](val value: T) {
  def isOneOf(values: T*): Boolean = {
    values.contains(value)
  }
}
object Comparison {
  object implicits {
    implicit def AnyToComparableWithIsOneOf[T](value: T): ComparableWithIsOneOf[T] = {
      return new ComparableWithIsOneOf(value)
    }
  }
}

import Comparison.implicits._

if (3.isOneOf(1, 2, 3)) {
  "Gotcha"
} else {
  "no luck..."
}

