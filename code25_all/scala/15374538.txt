case class App(
  name: String, 
  description: String, 
  website: String = "", 
  callback_url: String = "", 
  access_level: String = "", 
  consumer_key: String = "", 
  access_token: String = "",
  application_icon: String = "",
  organization_name: String = "",
  organization_website: String = "",
  created_on: Integer = 0,
  updated_on: Integer = 0) extends KeyedEntity[Long] {
  val id: Long = 0
}

case class Access_Token(
  token : String,
  token_secret : String,
  access_level : Integer) extends KeyedEntity[Long] {
  val id: Long = 0
}

object AppDB extends Schema {
  val applications = table[App]("applications")
  val access_tokens = table[Access_Token]
}

def create = Action { implicit request =>
        val entry = AppDB.applications.insert(new App("hello world", "just a test app", "http://www.com/"))
        Ok("New application entry made: " + entry.name)
    }

