case class WbProp(name:String,values:WbVal*)
sealed trait WbVal
case class WbLit(value:String) extends WbVal
case class WbRef(obj:String) extends WbVal

implicit def lit2json(r:WbLit) :JValue = ("@value"->r.value)
implicit def ref2json(r:WbRef) :JValue = ("@id"->r.obj)
implicit def prop2json(p:WbProp):JValue = JField(p.name,p.values) 

implicit def val2json(v:WbVal) : JValue = v match {
  case l:WbLit => lit2json(l)
  case r:WbRef => ref2json(r)
}

