None
testObj
java.util.NoSuchElementException: None.get
Option[_]
None
None
import xml.NodeSeq
object test {
  case class TestObject(name: Option[String] = None, value: Option[Double] = None)
  def main(args: Array[String]): Unit = {
  val testObj = TestObject(Some("xxx"), Some(12.0))
//    val testObj = TestObject(None, Some(12.0))
    val nodeSeq = <test> <name> yyy </name> <value> 34.0 </value> </test>
    val result = getObject[TestObject](nodeSeq, Option(testObj))
    println("result = " + result) // result = Some(TestObject(Some(yyy),Some(34.0)))
  }
  def getObject[A](nodeSeq: NodeSeq, obj: Option[A]): Option[A] = {
    if ((nodeSeq.isEmpty) || (!obj.isDefined)) None else {
      for (field <- obj.get.getClass.getDeclaredFields) {
    field.setAccessible(true)
    val fieldValue = field.get(obj.get)
    if (fieldValue == null || !fieldValue.isInstanceOf[Option[_]]) None
    var newValue: Option[_] = None
    fieldValue.asInstanceOf[Option[_]].get match {    // <---- None.get is the error here
      case x: Double => newValue = Some((nodeSeq \ field.getName).text.trim.toDouble)
      case x: String => newValue = Some((nodeSeq \ field.getName).text.trim)
    }
    val decField = obj.get.getClass.getDeclaredField(field.getName)
    decField.setAccessible(true)
    decField.set(obj.get, newValue)
   }
    obj
    }
  }
}

