man.typeArguments
Manifest
typeOf[T]
<:<
typeArguments
createParser[T: TypeTag]
T
List[X]
createParser[X]
X
T
typeOf[T]
typeTag[T]
T
  def getParser[T](implicit man: Manifest[T]): Parser[T] = {
    if (man <:< manifest[Stream[_]]) {
      val itemType = man.typeArguments(0)
      streamParser(itemType).asInstanceOf[Parser[T]]
    } else {
      parsers(man)().asInstanceOf[Parser[T]]
    }
  }

  def streamParser[T](implicit man: Manifest[T]): Parser[Stream[T]] = {
    val itemParser = getParser(man)
    (openParser("[") ~> repsep(itemParser, comma) <~ closeParser("]")) ^^ (_.toStream)
  }

  def getParser[T](implicit tag: TypeTag[T]): Parser[T] = {
    if (tag.tpe <:< typeOf[Stream[_]]) tag.tpe match {
      case TypeRef(_, _, List(itemType)) => streamParser(itemType).asInstanceOf[Parser[T]]
    } else {
      parsers(tag)().asInstanceOf[Parser[T]]
    }
  }

  def streamParser[T](implicit tag: TypeTag[T]): Parser[Stream[T]] = {
    val itemParser = getParser(tag)
    (openParser("[") ~> repsep(itemParser, comma) <~ closeParser("]")) ^^ (_.toStream)
  }

itemType
Type
TypeTag
streamParser
parsers
TypeTag
Parser
getParser
