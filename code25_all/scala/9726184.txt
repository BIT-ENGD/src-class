error: type mismatch;  found   : TestObj  required: _1.typ where val
_1: XMLMarshaller[TestObj]
           val o = new XMLMarshaller[TestObj]().toString(new TestObj("hello","world"))

import javax.xml.bind.{Marshaller, JAXBContext}
import java.io.{ByteArrayInputStream, StringWriter}
import org.jboss.resteasy.plugins.providers.jaxb.json.JettisonMappedContext
import javax.xml.bind.annotation.{XmlRootElement, XmlAccessorType, XmlAccessType}

abstract class XMarshaller {

  val context:JAXBContext
  type typ <: AnyRef

  def toString(obj:typ): String = {
    val marshaller:Marshaller = context.createMarshaller()
    val sw = new StringWriter
    marshaller.marshal(obj, sw)
    sw.toString
  }

  def valueOf(xmlString:String): typ = {
    val marshaller = context.createUnmarshaller()
    marshaller.unmarshal(new ByteArrayInputStream(xmlString.getBytes())).asInstanceOf[typ]
  }
}

class XMLMarshaller[T](implicit mT:Manifest[T]) extends XMarshaller {
  val typ = mT.erasure
  val context = JAXBContext.newInstance(typ)
}

class JSONMarshaller[T](implicit mT:Manifest[T]) extends XMarshaller {
  val typ = mT.erasure
  val context = new JettisonMappedContext(typ)
}

@XmlRootElement
@XmlAccessorType(value = XmlAccessType.FIELD)
case class TestObj(x:String, y:String){
  def this() {this("","")}
}

object Test {
  def main(args: Array[String]) {
    val o = new XMLMarshaller[TestObj]().toString(new TestObj("hello","world"))
    println(o)
  }
}

