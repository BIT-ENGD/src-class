case class FunctionCommand[A](function: Function1[Array[A], Unit])

class MyClass(commands: List[FunctionCommand[_]]) {
  def foo(parametersForEachFunction: Seq[Array[_]]) {
    assert(commands.size == parametersForEachFunction.size)
    for ((command, parameter) <- commands zip parametersForEachFunction) {
      command.function(parameter)
    }
  }
}

MyClass.scala:7: type mismatch;
found   : Array[(some other)_0(in value $anonfun)] where type (some other)_0(in value $anonfun)
required: Array[_0(in value $anonfun)] where type _0(in value $anonfun)
       command.function(parameter)
                        ^

Array[(some other)_0(in value $anonfun)]
command.function(parameter.asInstanceOf[????])
command.function(parameter)
def forceInvoke[A](command: FunctionCommand[A], parameter: Any) {
  command.function(parameter.asInstanceOf[A])
}
forceInvoke(command, parameter)

parameter
