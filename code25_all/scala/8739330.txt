import Element.elem

abstract class Element {
    def contents: Array[String]
    def height = contents.length
    def width = if(height == 0) 0 else contents(0).length

    def above(that: Element): Element = elem(this.contents ++ that.contents)

    def beside(that: Element): Element = {
    elem( for(
            (line1, line2) <- this.contents zip that.contents)
            yield line1 + line2 )
    }

    override def toString = contents mkString "\n"
 }


 object Element {

    private class ArrayElement (
            val contents: Array[String]
    ) extends Element

    private class LineElement (s: String) extends ArrayElement(Array(s)) {
            override def width = s.length
            override def height = 1
    }

    private class UniformElement (
            val ch: Character,
            override val width: Int,
            override val height: Int
    ) extends Element {
            private val line = ch.toString * width
            def contents = Array.fill(height)(line)
    }

    def elem(ss: Array[String]) = new ArrayElement(ss)
    def elem(s: String) = new LineElement(s)
    def elem(ch: Character, w: Int, h: Int) = new UniformElement(ch, w, h)

 }

def elem()
private
