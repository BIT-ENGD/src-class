trait Test {
    def test(amount: Int): A[Int] // where A must be a Monad
}

A
class Usecase {
    def someFun(t: Test) = for { i <- t.test(3) } yield i+1
}

class MonadResultA extends SomeUnknownType {
    // the base function
    def test(s: String): Option[Int] = Some(3)
}

class MonadResultB(a: MonadResultA) extends SomeUnknownType {
    // added a layer of Writer on top of base function
    def test(s: String): WriterT[Option, String, Int] = WriterT.put(a.test(s))("the log")
}

class Process {
    def work(x: SomeUnknownType) {
        for {
            i <- x.test("key")
        } yield i+1
    }
}

MonadResultA
MonadResultB
work
SomeUnknowType
test
work
trait SomeUnknowType {
    def test(s: String): T[Int] // where T must be some Monad
}

