Formats[T]
Reads[T]
import play.api.libs.json.{ JsValue, Reads } 

case class Foo(bar: Int, ...)

object Foo {
  implicit object FooReads extends Reads[Foo] {
    def reads(json: JsValue): Foo = //whatever
  }
}

json.as[Foo]
None
json.asOpt[Foo]
JsValue
def asOpt[T](implicit fjs: Reads[T]): Option[T] = fjs.reads(this).fold(
    valid = v => Some(v),
    invalid = _ => None
  ).filter {
  case JsUndefined(_) => false
  case _ => true
}

fjs
fjs.reads(this)
Foo
fold
Foo
Any
fold
fjs.reads(this)
Reads[T]
