// But these invalid sequences don't compile:
// isValid(_3 :: _1 :: _5 :: _8 :: _8 :: _2 :: _8 :: _6 :: _5 :: HNil)
// isValid(_3 :: _4 :: _5 :: _8 :: _8 :: _2 :: _8 :: _6 :: HNil)

/**
 * If we wanted to confirm that the list uniquely contains `Foo` or any
 * subtype of `Foo`, we could first use `unifySubtypes` to upcast any
 * subtypes of `Foo` in the list to `Foo`.
 *
 * The following would not compile, for example:
 */
 //stuff.unifySubtypes[Foo].unique[Foo]

import shapeless._

implicit class Uniqueable[L <: HList](l: L) {
  def unique[A](implicit ev: FilterAux[L, A, A :: HNil]) = ev(l).head
}

('a' :: 'b :: HNil).unique[Char]

('a' :: 'b' :: HNil).unique[Char]

unique
HList
FilterAux
implicitly[FilterAux[Char :: Char :: HNil, Char, Char :: HNil]]

FilterAux
FilterAux
def assertNoInstanceOf[T](implicit instance: T = null) = assert(instance == null)

assertNoInstanceOf[FilterAux[Char :: Char :: HNil, Char, Char :: HNil]]

assertDoesntCompile(('a' :: 'b' :: HNil).unique[Char])

