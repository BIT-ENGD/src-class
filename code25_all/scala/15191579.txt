trait Visitor{
  def visit(o: OrangeBasket): Int
  def visit(g: GreenBasket): Int
}

sealed abstract class Basket() {
  def accept(visitor: Visitor): Unit
}

case class OrangeBasket(count: Int, kilos: Double) extends Basket(){
  def this(count: Int) = this(count, 0)
  def accept(visitor: Visitor) = visitor.visit(this)
}

case class GreenBasket(b1: Basket, b2: Basket) extends Basket(){
  def this(b1: Basket) = this(b1, null)
  def this() = this(null)
  def accept(visitor: Visitor) = visitor.visit(this)
}

class NodeVisitor() extends Visitor{
  def visit(o: OrangeBasket) = 1
  def visit(g: GreenBasket) = this.visit(g.b1) + this.visit(g.b2) + 1
}

