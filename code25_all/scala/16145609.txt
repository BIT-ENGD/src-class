trait A
trait B extends A
caseclass C extends B

trait Tester[-T] { def test (t: T): Boolean }
object Tester {
  def test[T](t : T)(implicit tester: Tester[T]) = tester.test(t)
  implicit def atester = new Tester[A] { override def test (a: A) = true }
  implicit def btester = new Tester[B] { override def test (b: B) = false }
}
val c = C()
Tester.test(c)

atester: Tester[A]
btester: Tester[B]
Tester.test(implicit t: Tester[C])
6.26.3 overloading resolution
{ Tester[A], Tester[B] }
trait Tester[T] {def test (t: T):Boolean }
object Tester{
  def test[T](t: T)(implicit tester: Tester[T]) = tester.test(t)
  implicit def atester[T <: A] = new Tester[T] { override def test (a: T) = true }
  implicit def btester[T <: B] = new Tester[T] { override def test (b: T) = false }
}
val c = C()
Tester.test(c)

{ atester[T <: A]: Tester[T], btester[T<: B]: Tester[T] }
