class MatrixMultiplication {
  def singleThreadedMultiplication(m1:Seq[Array[Double]], m2:Array[Array[Double]] ) ={
    val res =  Array.fill(m1.length, m2(0).length)(0.0)

    for(row <- 0 until m1.length;
        col <- 0 until m2(0).length;
        i   <- 0 until m1(0).length){
      res(row)(col) += m1(row)(i) * m2(i)(col)
    }

    res
  }
}

object multiplication {
  def main(args : Seq[Array[Double]], args2 : Array[Double]) : Unit = {
    val matrixmult = new MatrixMultiplication
    var b = new Array[Double](4)
    b = Array(2,1,2,1)
    seq: Seq[Double] = WrappedArray(1, 0, 2, 0)
    matrixmult.singleThreadedMultiplication(Seq[Double],b)
  }
}

Seq[Array[Double]]
