joinLeft [A1 >: A, B1 >: B, C] (implicit ev: <:<[A1, Either[C, B1]]):
         Either[C, B1]

joinLeft[C](implicit ev: <:<[A, Either[C, B]): Either[C, B]

abstract class Either[+A, +B]

def joinLeft[A1 >: A, B1 >: B, C](implicit ev: A1 <:< Either[C, B1]):
    Either[C, B1] = this match {
    case Left(a)  => a
    case Right(b) => Right(b)
}

Right(b)
Either[C, B1] >: Either[C, B]
B1 >: B
Either[C, B1]
Either[C, B]
implicit ev: (<:<[A1, Either[C, B1]])
A1
Either[C, B1]
a
def joinLeft[B1 >: B, C](implicit ev: A <:< Either[C, B1])

