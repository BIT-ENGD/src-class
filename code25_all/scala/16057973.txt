Ordering
def insert[A, B >: A](list: List[A], item: A)(implicit ord: Ordering[B]): List[A]

Ordering
A
case classes
abstract class CodeTree
case class Fork(left: CodeTree, right: CodeTree, chars: List[Char], weight: Int) extends CodeTree
case class Leaf(char: Char, weight: Int) extends CodeTree

def weight(tree: CodeTree): Int 
def chars(tree: CodeTree): List[Char] 

implicit object CodeTreeOrdering extends Ordering[CodeTree] {
  def compare(a: CodeTree, b: CodeTree): Int = weight(a) compare weight(b)
}

List[CodeTree]
List[Leaf]
List[Fork]
Ordering
Orderings
case
trait MyOrdering[-A] {
  def compare(a: A, b: A): Int
}

def insert[A](list: List[A], item: A)(implicit ord: Ordering[A]): List[A]

List[CodeTree]
trait Contravariant[F[_]] {
  def contramap[A, B](r: F[A], f: B => A): F[B]
}

implicit object OrderingContravariant extends Contravariant[Ordering] {
  def contramap[A, B](r: Ordering[A], f: B => A) = r.on(f)
}

implicit def orderingCodeTree[A <: CodeTree]: Ordering[A] =
  implicitly[Contravariant[Ordering]].contramap(CodeTreeOrdering, identity)

Ordering[A <: CodeTree]
