Long
def fromName[T](typeName: String) = macro FromNameMacro.impl[T]

// will typecheck ok
fromName("scala.Long") ==== 0L
// will not typecheck ok
fromName("scala.Long") ==== ""

import scala.reflect.macros.Context

object FromNameMacro {
  def impl[T: c.WeakTypeTag](c : Context)(klassName: c.Expr[String]): c.Expr[T] = {
    import c.{universe => u}; import u._
    val name = klassName.tree match { case Literal(Constant(n)) => n.toString }

    // of course this doesn't work...
    reify(this.getClass.getClassLoader.loadClass(name).newInstance.asInstanceOf[T])
  }
}

