 val newJson = Json.toJson(retJson.fields.flatMap {
      case (epoch, obj) => obj.as[JsObject].fields.map(epoch -> _)
    }.groupBy(_._2._1)
    .mapValues(
      _.map {
        case (epoch, (k, v)) => {
          var epochDate = epoch.substring(0, 13).toLong
          epochDate = convertEpoch(epochDate, timezoneOffset)
          Seq[Double](epochDate, sensorCalculations(whatevers, Option(v.as[String])))
        }
      }))

case (epoch, (k, v)) if v.as[String] != "-1" => {

