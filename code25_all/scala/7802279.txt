class Stack[A+] ...
  def +: (elem: A): Stack[A]

trait SeqLike[+A, +Repr] ...
  def +:[B >: A, That](elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {
    val b = bf(repr)
    b += elem
    b ++= thisCollection
    b.result
  }

class Stack2[+A] extends Stack[A] {
  override def +: (elem: A): Stack[A] = this push elem
}

Stack2.scala:4: error: method +: overrides nothing
  override def +: (elem: A): Stack[A] = this push elem
               ^
Stack2.scala:4: error: covariant type A occurs in contravariant position in type A of value elem
  override def +: (elem: A): Stack[A] = this push elem
                   ^
two errors found

