case class Task(id: Long, name: String)

object Task extends Table[(Long, String)]("task") {

lazy val database = Database.forDataSource(DB.getDataSource())

def id = column[Long]("id", O PrimaryKey, O AutoInc)
def name = column[String]("name", O NotNull)

def create(task: Task) = database.withSession {
  implicit db: Session => {
    Task.name insert(task.name)
  }
}

val taskForm: Form[Task] = Form(
  mapping(
    "name" -> nonEmptyText
  ) {
    (name) => Task(-1L, name)
  } {
    task => Some(task.name)
  }
)

def newTask = Action {
  implicit request =>
    taskForm.bindFromRequest.fold(
      errors => BadRequest(views.html.index(Task.all, errors)),
      task => {
        Task.create(task)
        Redirect(routes.Application.tasks())
      }
    )
}

