case class X(i: Int) 
case class Y(j: Int)

X
Y
Y
X
def aggregate(xs: List[X], ys: List[Y]): Map[X, List[Y]] = {
  require(xs.nonEmpty)
  require(ys.nonEmpty)
  require(xs.count <= ys.count)
  require(xs.map(_.i).sum == ys.map(_.j).sum)

 lazy val result: List[X, List[Y]] = sys.error("todo: implement me!")

 assert(result forall { case (x, ys) => x.i == ys.map(_.j).sum })
 //assume an assertion that each input x and y appears exactly once in the result
 result

aggregate(List(X(1), X(3)), List(Y(2), Y(2))

Map
