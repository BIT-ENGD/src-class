class Entity(val id:String){
  override def toString = id
}

class RequirementType
case class DependsEither(t:List[(Entity,Int)]) extends RequirementType
case class Depends(t:(Entity,Int)) extends RequirementType

class BuildableEntity(override val id:String,
               val mineralCost:Int,
               val gasCost:Int,
               val buildTime:Int,
               val buildCount:Int,
               val supplyCount:Int,
               val req:List[RequirementType],
               val onBuildStart: GameState => GameState,       
               val onBuildFinish: GameState => GameState
            )extends Entity(id)

class SimpleBuilding(id:String,
       mineralCost:Int,
       gasCost:Int,
       buildTime:Int,
       req:List[RequirementType]
) extends BuildableEntity(id,mineralCost,gasCost,buildTime,1,0,req:::List(ConsumesOnStart((Drone,1))),{s=>s},{x=>x})
object SpawningPool extends SimpleBuilding("spawningPool",200,0,65,List(DependsEither(List((Hatchery,1),(Lair,1),(Hive,1)))))
object Lair extends SimpleBuilding("lair",150,100,80,List(ConsumesOnFinish(Hatchery,1),Depends(SpawningPool,1)))
object InfestationPit extends SimpleBuilding("infestationPit",100,100,50,List(DependsEither(List((Lair,1),(Hive,1)))))

