Map("name"->List("value0", "value1", "value2"))`.

Map("name[0]"->"value0", "name[1]"->"value1", "name[2]"->"value2")) 

@RunWith(classOf[JUnitRunner])
class TranslateMapSuite extends FunSuite {

   test("Translate Map "){ 
   val inputMap = Map("name"->List("value0", "value1", "value2"))
   val outputMap = TranslateMap.translate(inputMap)
   assert(outputMap == Map("name[0]"->"value0", "name[1]"->"value1", "name[2]"->"value2"))
 }

    object TranslateMap{
      def translate(inputMap:Map[String, List[String]]) = {
        inputMap.map ( {
          case (key, listValue) =>  {
              var i = -1
              listValue.map (value=> {
                      i +=1
                      (key +"[" + i+"]", value)
              })
            }
          })
        }.head.toMap
    } 

