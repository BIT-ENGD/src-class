abstract class Block(n: String, in: List[Input], out: List[Out]){
  def name = n; def outputs = out; def inputs = in
}
case class GroupBlock(n: String, blocks: List[Block], in: List[Input], 
                      out: List[Out]) extends Block(n, in, out)
case class StandardBlock(n: String, in: List[Input], out: List[Out])
           extends Block(n, in, out)

abstract class Point(n: String){ def name = n }
case class Input(n:String) extends Point(n)

abstract class Out(n: String) extends Point(n)
case class Output(n:String) extends Out(n) 
case class Connection(connectedInput: Input, n: String) extends Out(n)

val inputA = Input("sumA")
val inputB = Input("sumB")
val outputB = Output("B")

val sumAB =
    GroupBlock("GroupedSum",
      StandardBlock("Sum", List(inputA, inputB), List(outputB)) :: 
      StandardBlock("Input Provider", null, Connection(inputA, "A")::Nil ) ::
      StandardBlock("Input Provider", null, Connection(inputB, "B")::Nil ) ::         
      Nil, 
      null, 
      List(outputB))

"Integer providers"
"Sum"
sumAB match{
    case GroupBlock(_, 
          StandardBlock("Input Provider", null, _ :: Connection(input, _) :: _ ) :: _,
           _, _)
        => ...
    case GroupBlock(_,
          StandardBlock("Input Provider", null, Connection(input, _) :: _ ) :: _, 
          _, _)
        => ...
    //Covering 2 more cases where the order on the list matters
}

StandardBlock
"Input Provider"
case GroupBlock(_,
          StandardBlock("Input Provider", null, Connection(input, _) ::
          StandardBlock("Sum", inputList, _  ) :: _, 
          _, _)

input
input
