trait GNode[Graph]
{
 ... functions to get edges from this vertex, etc. ...
}

trait Graph
{
  type Node <: GNode[Graph]
}

def dfs[G <: Graph](g : G, nodeAction : G#Node => Unit) = ... code ...

class ConcreteGraph extends Graph
{
  class Node extends GNode[ConcreteGraph] { ... }
}

ConcreteGraph#Node=>Unit
nodeAction
AnyRef=>Unit
GNode[ConcreteGraph]=>Unit
template <class T> struct graph_traits;
template <> struct graph_traits<concrete_graph> 
{ typedef concrete_graph::node node_type; }

template <class G>
void dfs(const G& g, boost::function<void(
           const graph_traits<G>::node_type&)> action) { ... }

