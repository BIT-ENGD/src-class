trait ToString[T] {
  def toString(t: T): String
}

implicit def ToStr[T: ToString](t: T) = new {
  def toStr: String = implicitly[ToString[T]] toString t
}

class A
implicit object AToString extends ToString[A] {
  def toString(a: A) = "A"
}
(new A).toStr // A

B
A
class B extends A
(new B).toStr // could not find implicit value for evidence parameter of type ToString[B]

implicit def foo[X: ToString, Y <: X]: ToString[Y] = new ToString[Y] {
  def toString(y: Y): String = implicitly[ToString[X]] toString y
}

(new B).toStr // diverging implicit expansion for type ToString[...]

