import org.specs2.mutable._
import play.api.libs.json._

class SimpleValidation extends SpecificationWithJUnit{

  private val badPayload: JsValue = Json.obj(
    "simpleValue1" -> "mySimpleValue", // Comment this line out to pass test
    "simpleValue2" -> ""
  )

  "An IssueFormat" should {
    "validate when unmarshalling" in {

      badPayload.validate[SimpleObj].fold(
        valid = (res => {
          // Fail if valid
          failure("Payload should have been invalid")
        }),
        invalid = (e => {
          // Should be one error
          e.length mustBeEqualTo(1)
        }))

    }
  }
}

import play.api.libs.functional.syntax._

case class SimpleObj(simpleValue1: String, simpleValue2: String)
object SimpleObj {
  val simpleReads = (
    (__ \ "simpleValue1").read[String] and
    (__ \ "simpleValue2").read[String])(SimpleObj.apply _) // read[String](minLength(0)) yields compiler error
  val simpleWrites = (
    (__ \ "simpleValue1").write[String] and
    (__ \ "simpleValue2").write[String])(unlift(SimpleObj.unapply))
  implicit val simpleFormat: Format[SimpleObj] = Format(simpleReads, simpleWrites)
} 

