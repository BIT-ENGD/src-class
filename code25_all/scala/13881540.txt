receive
PartialFunction[Any, Unit]
PartialFunction[Action, Unit]
class PlayerActor extends Actor with {
  override def receive: Receive = rec

  def rec: PartialFunction[Action, Unit] = {
    case Jump() =>
  }
}

Receive
type Receive = PartialFunction[Any, Unit]
override def receive = {
  case a: Action => rec(a)
}

override def receive = rec.asInstanceOf[PartialFunction[Any, Unit]]

implicit def toAnyPartial[T](f: PartialFunction[T, Unit]): PartialFunction[Any, Unit] =
  f.asInstanceOf[PartialFunction[Any, Unit]]

