// You can also define ad-hoc constraints on the fields:
val loginForm = Form(
  tuple(
    "email" -> nonEmptyText,
    "password" -> text
  ) verifying("Invalid user name or password", fields => fields match { 
      case (e, p) => User.authenticate(e,p).isDefined 
  })
)

nonEmptyText
This field is required
loginForm.bindFromRequest.fold(
  formWithErrors => // binding failure, you retrieve the form containing errors,
  value => // binding success, you get the actual value 
)

.toString
formWithErrors
nonEmptyText
Form(ObjectMapping2(<function2>,<function1>,(Email adress,FieldMapping(,List(Constraint(Some(constraint.required),WrappedArray())))),(Password,FieldMapping(,List(Constraint(Some(constraint.required),WrappedArray())))),,List(Constraint(None,List()))),Map(Password -> test, Email adress -> ),List(FormError(Email adress,error.required,WrappedArray())),None)

List(FormError(Email adress,error.required,WrappedArray())),None)
case class FormError (key: String, message: String, args: Seq[Any])
key
The error key (should be associated with a field using the same key).
verifying("Invalid user name or password", fields => fields match { 
      case (e, p) => User.authenticate(e,p).isDefined 
  })

.toString
FormError
formWithErrors
List(FormError(,Invalid user name or password,WrappedArray())),None)

Key
BadRequest( views.html.test( formWithErrors ) ).flashing( "error" -> "Invalid user name or password." ) },

@flash.get("error").getOrElse("no 'error'")
