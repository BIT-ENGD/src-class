T
trait T {
  def v: Int
  def +(t: T): T
}

A
case class A(v: Int) extends T {
  def +(a: A) = A(v + a.v)
}

T
A.+
A
T.+
T
A
T
T
A
trait T[This <: T[This]] {
  def v: Int
  def +(t: This): This
}

case class A(v: Int) extends T[A] {
  def +(a: A) = A(v + a.v)
}

T
T
trait C[D <: T[D], S] { self: S =>
  def +(perm: D): S
  def matches(other: S): Boolean
}

