Map
scala> sealed abstract class Foo[T]{  def t: T }
defined class Foo

scala> var l: List[Foo[_]] = Nil
l: List[Foo[_]] = List()

scala> var mm: Map[Foo[_], Any] = Map.empty
mm: Map[Foo[_],Any] = Map()

scala> l.foreach { foo: Foo[_] =>
     | mm += (foo -> "BAR")
     | }

<console>:9: error: type mismatch;  
found   : foo.type (with underlying type Foo[_])  
required: Foo[_$1] where type _$1  
       mm += (foo -> "BAR")  
              ^

var mm: Map[AnyRef, Any] = Map.empty //note not Foo[_]

scala> l.foreach { foo: Foo[_] =>
     | mm += ( (foo: AnyRef) -> "BAR") //still have to tell compiler foo is an AnyRef
     | }

