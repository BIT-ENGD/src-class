p
p
1
.flatten
val l = List(2, 4, -6, 3, 1, 8, 7, 10, 0)
val p = (i : Int) => i % 2 == 0

magic(l,p)
List(List(2, 4, -6), List(3), List(1), List(8), List(7), List(10, 0))

.span
p
def magic[T](elems : Seq[T], p : T=>Boolean) : Seq[Seq[T]] = {
  val loop = elems.foldLeft[(Boolean,Seq[Seq[T]])]((false,Seq.empty)) { (pr,e) =>
    val (lastOK,s) = pr
    if(lastOK && p(e)) {
      (true, s.init :+ (s.last :+ e))
    } else {
      (p(e), s :+ Seq(e))
    }
  }
  loop._2
}

Seq
