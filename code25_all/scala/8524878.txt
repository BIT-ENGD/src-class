Int
trait Quantifiable{ def quantify: Int }

implicit def string2quant(s: String) = new Quantifiable{ 
  def quantify = s.size 
}
implicit def list2quantifiable[A](l: List[A]) = new Quantifiable{ 
  val quantify = l.size 
}

quantify
quantify
Quantified[A]
A
trait Quantified[A] { def quantify(a: A): Int }

String
List
implicit val stringQuantifiable = new Quantified[String] {
  def quantify(s: String) = s.size 
}

def sumQuantities[A](as: List[A])(implicit ev: Quantified[A]) = 
  as.map(ev.quantify).sum

def sumQuantities[A: Quantified](as: List[A]) = 
  as.map(implicitly[Quantified[A]].quantify).sum

T
Quantified[A,T]
