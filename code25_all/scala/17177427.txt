case class MyClass(param1: String, param2: String)

import scala.reflect.runtime.universe._
import scala.reflect.runtime.currentMirror
import scala.reflect.runtime.{ universe => ru }

  def getSettings[T](paramObj: T)(implicit tag: TypeTag[T]) {
    val m = ru.runtimeMirror(getClass.getClassLoader)
    val classType = ru.typeOf[T].typeSymbol.asClass
    val cm = m.reflectClass(classType)
    val constructor = tag.tpe.declaration(ru.nme.CONSTRUCTOR).asMethod
    val constructorMethod = cm.reflectConstructor(constructor)
    val args = constructor.asMethod.paramss.head map { p => (p.name.decoded, p.typeSignature) }
    println(args)
 }

scala> getSettings(MyClass)
List()

