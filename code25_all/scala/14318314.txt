key1
key2
{description: "Blah",
 tags: [
   key1: ["value1", "value2"],
   key2: ["value3"]
 ]
}

tags
def readMetatags(meta: JsObject): List[Metatag] =
  meta.keys.toList.map(x => Metatag(x, (meta \ x).as[List[String]])

import play.api.libs.json._
import play.api.libs.functional.syntax._

object Metatags {  
  implicit val metatagsRead: Read[Metatags] = (
    (JsPath \ "description").read[String] and
    (JsPath \ "tags").read[List[Metatag]]
  )(Metatags.apply _, unlift(Metatags.unapply _))

  implicit val metatagRead: Read[Metatag] = (
    JsPath().key. ?? read[String] and              // ?!? read key
    JsPath().values. ?? read[List[String]]         // ?!? read value list
  )(Metatag.apply _, unlift(Metatag.unapply _))

}

case class Metatags(description: String, tags: List[Metatag])
case class Metatag(key: String, data: List[String])

