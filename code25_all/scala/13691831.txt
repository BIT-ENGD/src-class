case class Value[A <% Ordered[A]](value: A) extends Ordered[Value[A]] {

  def matches(otherType: A): Boolean = {
    if(value.getClass == otherType.getClass)
      true
    else false
  }

  override def toString() = {
    value.toString
  }

  def compare(other: Value[A]) = value compare other.value
}

object Value {
  implicit def intVal(some: Int) = new Value[Int](some) {
    def compare(other: Int): Int = value compare other
  }
  implicit def doubleVal(some: Double) = new Value[Double](some) {
    def compare(other: Double): Int = value compare other
  }
  implicit def stringVal(some: String) = new Value[String](some) {
    def compare(other: String): Int = value compare other
  }
  implicit def boolVal(some: Boolean) = new Value[Boolean](some) {
    def compare(other: Boolean): Int = value compare other
  }
  implicit def dateVal(some: Date) = new Value[Date](some) {
    def compare(other: Date): Int = value.compareTo(other)

    override def toString() = {
      var formatter = new SimpleDateFormat("dd/MM/yyyy")
      formatter.format(value)
    }
  }
//  implicit def anyVal(some: Any) = new Value[Any](some){
//    def compare(other: Any) = {
//      
//    }
//  }

  var x = new Value(0)
}

def integer: Parser[Value] = """\d+""".r ^^ {x => Value(augmentString(x).toInt)}

def value: Parser[Value[Something]] =  integer ||| real | date 

def getSome(some: Value[Something])

