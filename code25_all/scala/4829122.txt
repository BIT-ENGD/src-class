trait Key[T] extends Ordered[Key[T]] {
  def toBase : T

  // Further stuff needed for datastructure...
}
object Key {
  implicit def key2base[T](k : Key[T]) : T = k.toBase
}

def foo[K <% Key[K]]( bar : Seq[K] ) = bar.sorted(0)

K
Key[K]
Key[K]
base2key
Key[T]
T => Key[T]
Node(key : K, ...)
K <% Key[K]
sortWith(_.key <= _.key)
sortBy(_.key)
K
Key[K]
Ordering
Key[K]
