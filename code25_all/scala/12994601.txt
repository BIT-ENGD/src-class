class Thing(val messages: Map[String, Seq[String]]) { 
  def and(that: Thing): Thing = {
    new Thing(this.messages ++ that.messages)
  }
}

this
String -> Seq[String]
that
def and(that: Thing): Thing = {
  val keys = this.messages.keys ++ that.messages.keys
  val tuples = keys map {
    case key: String =>
      val theseMessages = this.messages.getOrElse(key, Seq[String]())
      val thoseMessages = that.messages.getOrElse(key, Seq[String]())
      (key, theseMessages ++ thoseMessages)
  }
  new Thing(tuples.toMap)
}

