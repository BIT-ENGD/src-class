scala> class Foo { def foo = 42 }
defined class Foo
scala> class Bar[A <: Foo](val a: A)
defined class Bar
scala> def bar(x: Bar[_]) = x.a.foo
:7: error: value foo is not a member of Any

def bar[A](x: Bar[A])

def bar(x: Bar[_], y : Bob[_])

def bar(x: Bar[_ <: Foo]) = x.a.foo

abstract class Tree[T <: Tree[T]] { val subTree : List[T] }

def size( tree : Tree[_] ) = tree.subTree.size + tree.subTree.map(size(_)).sum

def size[T <: Tree[T]]( tree : T ) = ...

class OwnATree( val myTree : Tree[_] ){}

class OwnATree[T <: Tree[T]]( val myTree : T ){}

