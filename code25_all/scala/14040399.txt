C
A
B
C
A
B
T
C
T
T
A
B
trait T{
  def f()
}
trait A extends T{
  def f(){
    print("A")
  }
}
trait B extends T{
  def f(){
    print("B")
  }
}

C
val x=new A with B with C[A,B]{}
x.f()
// should produce output
A
B

trait C[A<:T,B<:T] extends T{
  self:A with B =>
  override def f(){
    // error: A does not name a parent class of trait C
    super[A].f()
    // error: B does not name a parent class of trait C
    super[B].f()
  }
}

C
A.f()
B.f()
