package edu.luc.cs.laufer.cs473.shapealgebra

import java.awt.Graphics2D

class Draw {
  def draw(g: Graphics2D)(s: Shape): Unit = s match {
    case Ellipse(hw, hh) => g.drawArc(-hw, -hh, 2 * hw, 2 * hh, 0, 360)
    case Rectangle(w, h) => g.drawRect(0, 0, w, h)
    case Location(x: Int, y: Int, shape: Shape) => {
      g.translate(x, y)
      draw(g)(shape)
      g.translate(0,0)
    }
    case Group(shapes @ _*) => {
      shapes foreach(draw(g)(_))
    }
  }
 }

 object Draw extends Draw {
  def apply(g: Graphics2D) = draw(g)(_)
}

val simpleLocation = Location(70, 30, Rectangle(80, 120))
val complexGroup = Location(50, 100,
    Group(
     Ellipse(20, 20),
     Location(150, 50,
        Group(
          Rectangle(50, 30),
          Rectangle(300, 60),
          Location(100, 200,
          Ellipse(50, 50)
         )
       )
     ),
     Rectangle(100, 200)
   )
  )

package edu.luc.cs.laufer.cs473.shapealgebra

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite

import java.awt.image.BufferedImage

import TestFixtures._

@RunWith(classOf[JUnitRunner])
class TestDraw extends FunSuite with BufferedImageEquality {
  test("simple") {
    val s = simpleLocation
    val i = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)
    Draw(i.createGraphics())(s)
    val j = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)
    val g = j.createGraphics()
    g.translate(70, 30)
    g.drawRect(0, 0, 80, 120)
    assertEquals(i, j)
  }
  test("complex") {
    val s = complexGroup
    val i = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)
    Draw(i.createGraphics())(s)
    val j = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB)
    val g = j.createGraphics()
    paintComplexGroup(g)
        assertEquals(i, j)
  }
}

