    public static void digPackageLines( List<PkgLine> pkgLineList, Tree treeParam ) {

    if ( findPkgLineTreeExist( treeParam ) == false ) {
        for ( Tree tree : findParents( treeParam ) ) {
            digPackageLines( pkgLineList, tree );
        }

    } else {

        for ( PkgLineTree pkgLineTree : findPkgLineTreeByTree( treeParam ) ) {
            pkgLineList.add( pkgLineTree.pkgLineId );

        }
    }
}

def digPackageLines(pkgLineList : Seq[ PkgLine ], tree_id : Long) : Unit = {

    if ( PkgLineTree.findPkgLineTreeExist(tree_id) == false ) {  //tree is parent if no lines found

        Tree.findParents(tree_id) map {
            tree =>
                digPackageLines(pkgLineList, tree.tree_id.get) //dig further into tree
        }

    } else { //found lines

        PkgLineTree.findByTreeId(tree_id) map {
            pkgLineTree =>
                PkgLine.findById(pkgLineTree.pkg_line_id).get //add this line to pkgLineList somehow
        }
    }
}

val pkgLineList : Seq[ (PkgLine, Tree) ] = User.findUserJoinAllAcl(10) flatMap {
        user =>
            PkgLine.digPackageLines(Vector[ (PkgLine, Tree) ](), user._2.tree_id)
    }

