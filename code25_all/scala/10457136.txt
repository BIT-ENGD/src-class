Tree[A]
A
Part
Project
newChild
List
abstract class Tree[A](parent: Option[A], key: Int) {
  protected def newChild(aKey: Int): A
  lazy val children: List[A] = childrenOf.map(newChild(_))
  ...
  }

case class Part(parent: Option[Part], key: Int) extends Tree[Part](parent, key) {
  protected def newChild(aKey: Int) = Part(Some(this), aKey)
  ...
  }

case class Project(parent: Option[Project], key: Int) extends Tree[Project](parent, key) {
  protected def newChild(aKey: Int) = Project(Some(this), aKey)
  ...
  }
...
"*" #> <ul>{Part(None, pKey).expandAsHtml}</ul>

