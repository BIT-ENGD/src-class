case class MyString(s: String)
implicit def stringToMyString(s: String) = MyString(s)
implicit val defaults: Map[String, MyString] = Map("abc" -> MyString("123"))

case class HasDefaults(name: String = "none", 
    baseMap: Map[String, MyString] = Map.empty) {
  def add(kvp: (String, MyString)*)(implicit defaults: Map[String, MyString]) =
    this.copy(baseMap = this.baseMap ++ defaults ++ kvp)
}

val hasDefaults = HasDefaults() add (
  "def" -> "124",
  "xyz" -> MyString("999")
)

println(hasDefaults)

java.util.NoSuchElementException: key not found: 124
    at scala.collection.MapLike$class.default(MapLike.scala:224)
    at scala.collection.immutable.Map$Map1.default(Map.scala:106)
    at scala.collection.MapLike$class.apply(MapLike.scala:135)
    at scala.collection.immutable.Map$Map1.apply(Map.scala:106)
    at Main$$anon$1.<init>(HasDefaults.scala:12)

"124"
->
MyString
val hasDefaults = HasDefaults().add(
  "def" -> MyString("124"),
  "xyz" -> MyString("999")
)

val hasDefaults = HasDefaults().add(
  "def" -> "124",
  "xyz" -> MyString("999")
)(Map("abc" -> MyString("123")))

