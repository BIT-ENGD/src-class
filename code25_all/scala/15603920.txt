trait Element
trait Leaf extends Element
trait Composed extends Element

trait Validator [A] {def validate (element : A) : String}

//second layer
trait LeafValidator extends Validator[Leaf]{
  override def validate (element : Leaf) : String = "leaf"}

//first layer
trait ElementValidator extends Validator[Element]{
  self : Validator[Leaf] =>

  override def validate (element : Element) : String = element match {
    case leaf : Leaf => super.validate(leaf)
    case _ => "other"
  }
}

case class Concrete extends LeafValidator with ElementValidator

