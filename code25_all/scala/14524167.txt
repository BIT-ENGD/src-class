map(identity)
for
import scala.concurrent._
import scala.concurrent.duration._

object Test extends App {
  implicit val executorContext = ExecutionContext.global
  val future = Future.successful { 1 }
  val result = for (
    value <- future;
    b <- Future { value * 2 }
  ) yield b
  println(Await.result(result, 60 seconds))
}

for
future.flatMap(value => Future { value * 2 }).map(identity)

map(identity)
map
Future { value * 2}
f(value)
f
