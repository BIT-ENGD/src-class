case class Foo(name: String, other: Foo)

a
b
a.other
b
b.other
a
val (a, b): (Foo, Foo) = (Foo("a", b), Foo("b", a)) // Doesn't work.

data Foo = Foo { name :: String, other :: Foo }

a = Foo "a" b
b = Foo "b" a

a
b
let
(a, b) = fix (\ ~(a', b') -> Foo "a" b', Foo "b" a')

~(a', b')
