abstract class Representation {
  def marshalToXml(): String = {
    val context = JAXBContext.newInstance(this.getClass())
    val writer = new StringWriter
    context.createMarshaller.marshal(this, writer)
    writer.toString()
  }
}

class Order extends Representation {
  @BeanProperty
  var name: String = _
  ...
}
class Invoice extends Representation { ... }

def unmarshalFromJson(marshalledData: String): {{My Representation Subclass}} = {
  val mapper = new ObjectMapper()
  mapper.getDeserializationConfig().withAnnotationIntrospector(new JaxbAnnotationIntrospector())
  mapper.readValue(marshalledData, this.getClass())
}

def unmarshalFromXml(marshalledData: String): {{My Representation Subclass}} = {
  val context = JAXBContext.newInstance(this.getClass())
  val representation = context.createUnmarshaller().unmarshal(
    new StringReader(marshalledData)
  ).asInstanceOf[{{Type of My Representation Subclass}}]
  representation // Return the representation
}

val newOrder = Order.unmarshalFromJson(someJson)

class Resource[R <: Representation] {
    getRepresentation(marshalledData: String): R = 
        {{R's Singleton}}.unmarshalFromXml(marshalledData)
}

unmarshalFrom*()
Representation
Representation
Order
Invoice
this.type
unmarshalFromJson()
type mismatch; found: ?0 where type ?0 required: Representation.this.type
readValue()
Default[A]
