def withAuth(f: => User => Request[AnyContent] => Result) = {
    Authentication.isAuthenticated(AuthenticationToken(AuthenticationService.TokenKey)) match {
      case None => Results.Redirect(routes.AuthenticationService.notLoggedIn)
      case Some(user) => Action(request => f(user)(request))
    }
  }

  def list(locationId: Option[Int]) = withAuth { user =>
    implicit request =>
      val entities = Assets.filter(user, locationId)
      Logger.info("Succesfully returned %d assets to user %s".format(entities.length, user))
      Ok(Json.toJson(entities.map(s => Json.toJson(s))))
  }

Redirect
