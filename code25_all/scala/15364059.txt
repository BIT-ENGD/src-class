def readDocument(dbobj:MongoDBObject) = Option[ContainerMetaData] 
{
  for(a <- dbobj.getAs[String]("classname");
      b <- dbobj.getAs[Long]("id"); 
      c <- dbobj.getAs[Long]("version");
      d <- dbobj.getAs[String]("description");
      e <- dbobj.getAs[String]("name");
      f <- dbobj.getAs[String]("tag");
      g <- dbobj.getAs[Int]("containertype");
      h <- dbobj.getAs[Date]("createddate")
  )
  {
      val ctype = ContainerType(g)
      val jodadt = new DateTime(h) 
      val data = new ContainerMetaData(a,b,c,d,e,f,ctype,jodadt)
      Some(data)
  }
  None
}

type mismatch;  found   : None.type  required: om.domain.ContainerMetaData  

Some(data)
def readDocument(dbobj:MongoDBObject)= 
{
  for(a <- dbobj.getAs[String]("classname");
      b <- dbobj.getAs[Long]("id"); 
      c <- dbobj.getAs[Long]("version");
      d <- dbobj.getAs[String]("description");
      e <- dbobj.getAs[String]("name");
      f <- dbobj.getAs[String]("tag");
      g <- dbobj.getAs[Int]("containertype");
      h <- dbobj.getAs[Date]("createddate")
  )
  {
      val ctype = ContainerType(g)
      val jodadt = new DateTime(h) 
      val data = new ContainerMetaData(a,b,c,d,e,f,ctype,jodadt)
      Some(data)
  }
  None
}

method `readDocument` has return statement; needs result tye

trait MongoDAOSerializer[T] {
    def createDocument(content:T) :  DBObject
    def readDocument(db:MongoDBObject) : Option[T]
}

