Pos
Neg
Zero
NonPos
NonNeg
+
-
*
/
Pos
Neg
Zero
NonPos + Pos = leastUpperBound(Zero + Pos, Neg + Pos)

leastUpperBound(Zero, Neg) = NonPos
leastUpperBound()
case object NonNeg extends Sign {
    def +(other: Sign) = leastUpperBound(Zero + other, Pos + other)
    def -(other: Sign) = ...
    def * = ...
    ...
}

case object NonPos extends Sign {
    def +(other: Sign) = leastUpperBound(Zero + other, Neg + other)
    ...
}

case object NonZero extends Sign {
    def +(other: Sign) = leastUpperBound(Neg + other, Neg + other)
    ...
}

case object NonNeg extends UpperBoundSign[Pos, Zero]

Pos
Zero
object
