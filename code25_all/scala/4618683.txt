apply
import scala.collection.generic.ImmutableMapFactory
import scala.collection.immutable.HashMap

class ChainedMap[A, B](private val superMap: ChainedMap[A, B])
  extends HashMap[A, B] {
  override def get(key: A): Option[B] = {
    if (contains(key)) {
      get(key)
    } else if (superMap != null) {
      superMap.get(key)
    } else {
      None
    }
  }
}

object ChainedMap extends ImmutableMapFactory[ChainedMap] {
  override def apply[A, B](superMap: ChainedMap[A, B],
                           elems: (A, B)*): ChainedMap[A, B] = {
    // What goes here?
  }
}

val parentMap = ChainedMap(null, "x" -> 1, "y" -> 2)
val childMap = ChainedMap(parentMap, "a" -> 42)

