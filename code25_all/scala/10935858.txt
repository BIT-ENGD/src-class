import language.dynamics
object D extends Dynamic {
    def selectDynamic( field : String ) = Symbol( field )
}

object DynamicTest extends App {
    println( D.a )
}

object DynamicTest extends App {
    println( D.x )
}

[error] DynProb.scala:7: type mismatch;
[error]  found   : D.type
[error]  required: ?{val x: ?}
[error] Note that implicit conversions are not applicable because they are ambiguous:
[error]  both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
[error]  and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
[error]  are possible conversion functions from D.type to ?{val x: ?}
[error]     println( D.x )
[error]              ^
[error] one error found

