def splitIt[N <: Nat,
            M <: Nat,
            S <: Nat](u: Sized[List[Int], N] {type A = N},
                      v: Sized[List[Int], M] {type A = M},
                      t: Sized[List[Int], S] {type A = S})(implicit sum: SumAux[N, M, S]): Unit = {
  val z = t.splitAt[N]
}

No implicit view available from List[Int] => scala.collection.GenTraversableLike[S,List[Int]].

not enough arguments for method sizedOps: (implicit evidence$2: List[Int] => scala.collection.GenTraversableLike[S,List[Int]])shapeless.SizedOps[S,List[Int],S]. Unspecified value parameter evidence$2.

def splitIt[N <: Nat,
            M <: Nat, S <: Nat](u: Sized[List[Int], N] {type A = Int},
                                v: Sized[List[Int], M] {type A = Int},
                                t: Sized[List[Int], S] {type A = Int})(implicit sum: DiffAux[S, N, M], toInt: ToInt[N]): Unit = {
  val z = t.splitAt[N]
}

