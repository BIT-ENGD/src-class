def sitemap = SiteMap(
  Menu.i("Home") / "index" >> User.AddUserMenusAfter, // the simple way to declare a menu
  Menu.i("Artifact") / "artifact", // Works
  // Menu.i("Autobiography") / "journal", // Works if I comment out the next line.
  AutobiographyPageMenu.menu,
  Menu.param[AutobiographyPage](​"Autobiography2", "Autobiography2", // Similar code as previous line. Doesn't work.
                                pageName => Full(AutobiographyPage(​pageName)),
                                ap => ap.pageName) / "journal2",
  Param.menu, // Added to see if D. Pollack's code would work. It didn't.

  // more complex because this menu allows anything in the
  // /static path to be visible
  Menu(Loc("Static", Link(List("static"), true, "/static/index"),
           "Static Content")))

case class AutobiographyPage(pageName: String)

object AutobiographyPageMenu {

  val menu = Menu.param[AutobiographyPage](​"Autobiography", "Autobiography",
                                           pageName => Full(AutobiographyPage(​pageName)),
                                           ap => ap.pageName) / "journal"
  // I'm not sure what these two lines are for...
  lazy val loc = menu.toLoc
  def render = "*" #> loc.currentValue.map(_.​pageName)
}

// This code is copied from the Simply Lift book:

// capture the page parameter information
case class ParamInfo(theParam: String)

// a snippet that takes the page parameter information
class ShowParam(pi: ParamInfo)  {
  def render = "*" #> pi.theParam
}

object Param {
  // Create a menu for /param/somedata
  val menu = Menu.param[ParamInfo]("Param", "Param",
                                   s => Full(ParamInfo(s)),
                                   pi => pi.theParam) / "param"
  lazy val loc = menu.toLoc

  def render = "*" #> loc.currentValue.map(_.​theParam)
}

