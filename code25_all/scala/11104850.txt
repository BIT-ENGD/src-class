class MongoUser private () extends MongoRecord[MongoUser]
  with MongoId[MongoUser] {

    def meta = MongoUser

    object firstname extends StringField(this, "")
    object lastname extends StringField(this, "")
    object password extends PasswordField(this, "")
    object email extends EmailField(this, 90)
    object business extends StringField(this, "")

    /*
    * validation method for checking email is unique
    */
    protected def emailUnique(emailVal:String) = {
      meta.findAll("email", emailVal) match {
        case Nil => Nil
        case _ => List(FieldError(email, "Email should be unique"))
      }
    }
}

object SignupWizard extends Wizard {
  object user extends WizardVar(MongoUser.createRecord)

  val person = new Screen {

    addFields(() => user.is.firstname)
    addFields(() => user.is.lastname)
    addFields(() => user.is.password)
    addFields(() => user.is.email)


    override def nextScreen = {
      //user.is.save 
      business
    }
  }

  val business = new Screen {
    addFields(() => user.is.business)
  }

  def finish() {
    user.is.save
  }

}

/*
 *Screen for user login
 */

object LoginScreen extends LiftScreen {
  object user extends ScreenVar(MongoUser)

  addFields(() => user.is.email)
  addFields(() => user.is.password)


  def finish() {
    S.notice(
      user.is.login(
        user.email.toString,
        user.password.toString).toString)
    }

}

object email extends EmailField(this, 90) {
      override def validations = {
        emailUnique _ ::
        super.validations
      }
 }

