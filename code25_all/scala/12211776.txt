def div2(i: Int): Validation[String, Int] = 
    if (i%2 == 0) Validation.success(i/2)
    else Validation.failure("odd")

def div4(i: Int) = for {
    a <- div2(i)
    b <- div2(a)
} yield b

scalaz.Validation[String,Int]
M[_]
scalaz.Bind
Monad
Validation[String, Int]
object Instances {
implicit def validationMonad[E] = new Monad[({type L[A] = Validation[E, A]})#L] {
    override def point[A](a: => A) =
        Validation.success(a)
    override def bind[A, B](fa: Validation[E, A])(f: A => Validation[E, B]) =
        fa bind f
}
}

Validation
Validation
bind
import Validation._
import Instances._
validationMonad
ValidationInstances1
ValidationInstances2
Functor of Validation
