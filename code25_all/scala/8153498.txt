/* I assume that we have some types S and T */

sealed trait Container[U]
class SContainer(s: S) extends Container[S]
class TContainer[U <: T](u: U) extends Container[U]

/* this requires something more */
def invoke[U](f: String => U): Container[U]

Container
S
T
Container
invoke
U
def invoke(f: String => S): Container[S]
def invoke[U <: T](f: String => U): Container[U]

invoke
