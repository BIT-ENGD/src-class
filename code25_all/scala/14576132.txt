abstract class parent

case class child1(name:String,category:String) extends parent

case class child2(name:String,category1:String,category2:String) extends parent

val childList = List[parent]()

scala> child1("Child","One") :: child2("Child","Two","dhshs")::childList
res2: List[parent] = List(child1(Child,One), child2(Child,Two,dhshs))

scala> res2 map {case child1 => "Child1";case child2 => "Child2"}

List[String]("Child1","Child2")
<console>:15: error: unreachable code
              res2 map {case child1 => "Child1";case child2 => "Child2"}

scala> res2 map {r => r match {case child1 => "Child1"}}
res8: List[java.lang.String] = List(Child1, Child1)

scala> res2 map {case child1 => "Child1"}
res9: List[java.lang.String] = List(Child1, Child1)

