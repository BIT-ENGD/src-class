lazy val scalatestandspecscoexisting = Project(
  id = "scalatest-and-specs-coexisting",
  base = file("."),
  settings = Project.defaultSettings ++
    GraphPlugin.graphSettings ++
    Seq(
    name := "Scalatest-And-Specs-Coexisting",
    organization := "com.bifflabs",
    version := "0.1",
    scalaVersion := "2.9.2",
//  libraryDependencies ++= Seq(scalaTest, mockito)   //Tests Pass, no-specs2
    libraryDependencies ++= Seq(scalaTest, specs2, mockito)  //Tests Fail
  )
)

import org.scalatest.FunSuite
import org.scalatest.mock.MockitoSugar
import org.mockito.Mockito.when

trait MockingBird {
  //Behavior only reproduces when input is Function1
  def sing(input: Set[String]): String
}

class MockSuite extends FunSuite with MockitoSugar {

  val iWannaRock = Set("I wanna Rock")
  val rock = "Rock!"

  val wereNotGonnaTakeIt = Set("We're not gonna take it")
  val no = "No! We ain't gonna take it"

  test("A mock should match on parameter but isn't") {

    val mockMockingBird = mock[MockingBird]
    when(mockMockingBird.sing(iWannaRock)).thenReturn(rock)
    //Appears to return this whenever any Set is passed to sing
    when(mockMockingBird.sing(wereNotGonnaTakeIt)).thenReturn(no)

    // Succeeds because it was set up last
    assert(mockMockingBird.sing(wereNotGonnaTakeIt) === no)
    // Fails because the mock returns "No! We ain't gonna take it"
    assert(mockMockingBird.sing(iWannaRock) === rock)
  }
}

 [info] MockSuite:
 [info] - A mock should match on parameter but isn't *** FAILED ***
 [info]   "[No! We ain't gonna take it]" did not equal "[Rock!]" (MockSuite.scala:38)
 [error] Failed: : Total 1, Failed 1, Errors 0, Passed 0, Skipped 0

