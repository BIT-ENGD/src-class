String.length
val f: String => Int = _.length

val f = { s: String => s.length }

Lift[String](_.length)
Lift[Option[Int]].lift(_.filter)

class Lift[T] {                                                          
   def apply[R](f: T => R): T => R = f

   def lift[A, R](f: (T) => (A) => R): (T, A) => R = 
         f(_)(_) 
   def lift[A1, A2, R](f: (T) => (A1, A2) => R): (T, A1, A2) => R =
         f(_)(_,_)
   // ... etc. ...
}
object Lift {
   def apply[T] = new Lift[T]
}

Option.filter
Lift[Option[Int]].lift[Int => Boolean, Option[Int]](_.filter)
lift
lift
Option.filter
