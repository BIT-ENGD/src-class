case class Source( serviceId: String, time: String )
case class Credentials( tenantId:String, userId: String )
sealed abstract class Message( credentials:Credentials, sources: Vector[Source] )
trait FormEvent
trait MailEvent

case class FetchQuestion( questionId: String, credentials:Credentials, sources: Vector[Source] ) extends Message( credentials, sources ) with FormEvent
case class MailQuestion( questionId: String, credentials: Credentials, sources: Vector[Sources]) extends Message( credentials, sources ) with MailEvent

def route( msg:Message, tenantId: String, sources: Vector[Source] ) = msg match {
  case fe:FormEvent => s"form message for $tenantId with sources $sources."
  case me:MailEvent => s"mail message for $tenantId with sources $sources."
}

// Emulated Akka Receive, compilation error when matching.
def receive( a: Any ) = a match {
  case msg@Message( credentials, srs ) => route( msg.copy( sources = (srs :+ Source( "routing", "justnow" ) ) ), credentials.tenantId, srs) 
}

case class Source( serviceId: String, time: String )
case class Credentials( tenantId:String, userId: String )
case class Trail(credentials: Credentials, sources: Vector[Source] )
trait Message {
  def trail: Trail
}

object Message {
  def unapply( msg: Message ) = Option( msg.trail ) 
}

trait FormEvent
trait MailEvent

case class FetchQuestion( questionId: String, trail:Trail ) extends Message with FormEvent
case class MailQuestion( questionId: String, trail:Trail ) extends Message with MailEvent

def route( msg:Message, tenantId: String, newSources: Vector[Source] ) = msg match {
  case fe:FormEvent => s"form message $msg for $tenantId with sources $newSources."
  case me:MailEvent => s"mail message $msg for $tenantId with sources $newSources."
}

// Emulated Akka Receive, compilation error when matching.
def receive( a: Any ) = a match {
  case msg@Message( Trail( Credentials( tenantId, _ ), srs ) ) => route( msg, tenantId, (srs :+ Source( "routing", "justnow" ) ) ) 
}

val fq = FetchQuestion( "question1", Trail( Credentials( "tenant", "user"), Vector( Source( "service1", "before" ) ) ) )

receive( fq )

