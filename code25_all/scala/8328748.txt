def seqed[T](f: (T,T) => T): (Seq[T], Seq[T]) => Seq[T] = (_,_).zipped map f

xs
ys
(xs(0) f ys(0), xs(1) f ys(1), ...)
xss
Seq(Seq(1,2),Seq(3,4))
f
(a: Int, b: Int) => a + b
xss reduceLeft seqed(f)         // Seq(4, 6)

xss reduceLeft seqed[Int](_+_)

[Int]
tupled
class SeqFunction[T](f: (T,T) => T) {
  def seqed: (Seq[T], Seq[T]) => Seq[T] = (_,_).zipped map f
}
implicit def seqFunction[T](f: (T,T) => T) = new SeqFunction(f)

xss reduceLeft f.seqed
xss reduceLeft ((_:Int) + (_:Int)).seqed

// pseudocode
xss reduceLeft (_+_).seqed         // ... or failing that
xss reduceLeft (_+_).seqed[Int]

