  lazy val andExpression: PackratParser[Expression] = equalityExpression | expression ~ "&" ~ expression ^^ {
      case x ~"&"~y => AndExpr(x,y)
    }

  lazy val orExpression: PackratParser[Expression] = andExpression | ( expression ~ "|" ~ expression ) ^^ {
      case x ~"|"~y => OrExpr(x,y)
    }

"a & b", "a | c", "(a & b) | c"

"a && b", "a &&& b", "a ||||| b"

e ~ "&".{1} ~ e
lazy val absolutePath: PackratParser[NodePath] = "/" ~ relativePath ^^ {
    case "/" ~ rel => NodePath( rel.nodeExpr, true );

  }  

  lazy val relativePath: PackratParser[NodePath] = repsep( nodeExpression , "/" ) ^^ {
    case x => 
        if ( debug) printf("x=%s NodePath\n",x ); 
        NodePath( x , false )

   lazy val nodeExpression: PackratParser[Token] = qname | variable | step 

   lazy val expression = orExpression | nodeExpression | variable | literal | function | ...

NodePath( List[QName]() )
relativeExpression
QName
( "x" , "/x", "x/y", "/x/y", ... )
""
