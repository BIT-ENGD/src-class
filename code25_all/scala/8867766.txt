ClassLoader classLoader = new URLClassLoader(new URL[] {
  new File("module.jar").toURI().toURL()});
Class clazz = classLoader.loadClass("my.class.name");
Object instance = clazz.newInstance();

//check and cast to an interface, then use it
if (instance instanceof MyInterface)
  ...

trait
Module
Module.scala
trait Module {
  def name: String
}

object Module {
  lazy val ModuleClassName = "my.module.ExModule"
}

Module
module.jar
package my.module

import Module

object ExModule extends Module {}

var classLoader = new URLClassLoader(Array[URL](
  new File("module.jar").toURI.toURL))
var clazz = classLoader.loadClass(Module.ModuleClassName)

java.lang.InstantiationException: my.module.ExModule

clazz.isInstanceOf[Module]

false
ExModule
object
class
class
classLoader.loadClass(...)
java.lang.NoClassDefFoundError
ExModule
trait
clazz.isInstanceOf[Class[Module]]//or Class[Byte], or Class[_]...

true
