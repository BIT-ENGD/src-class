object IntHistogram {

  def main(args: Array[String]) {
    val wordsToCount = "foo foo bar foo bar wtf foo bar".split(" ")
    val histogram = new IntHistogram
    for (word <- wordsToCount) histogram(word) += 1
    println(histogram)
    /* 
       (foo,4)
       (bar,3)
       (wtf,1)
    */
  }

}

class IntHistogram extends collection.mutable.HashMap[String,Int] {
  override def default(key:String) = 0
  def descendingPairs = toList.sortBy(_._2).reverse
  override def toString() = descendingPairs.mkString("\n")
}

class DoubleHistogram extends collection.mutable.HashMap[String,Double] {
  override def default(key:String) = 0
  def descendingPairs = toList.sortBy(_._2).reverse
  override def toString() = descendingPairs.mkString("\n")
}

trait Histogram[Num] extends collection.Map[String,Num] {
  override def default(key:String) = 0
  def descendingPairs = toList.sortBy(_._2).reverse
  override def toString() = descendingPairs.mkString("\n")
}

