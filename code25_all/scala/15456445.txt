trait MaxMin
case class Max() extends MaxMin
case class Min() extends MaxMin

object AlphaBeta {

  type Move = List[State]
  type FitnessMove = Tuple2[Int, List[Move]]

  def not(p: Player) = p match {
    case _: Player2 => Player1()
    case _: Player1 => Player2()
  }

  def max(x: FitnessMove, y: FitnessMove) = if (x._1 >= y._1) x else y
  def min(x: FitnessMove, y: FitnessMove) = if (x._1 <= y._1) x else y
  def terminal(turn: Int) = if (turn >= 64) true else false

  def search(board: Board, player: Player, turn: Int, MAX_DEPTH: Int = 5): Move = {
    def alphaBeta(node: Board, depth: Int, alpha: Int, beta: Int, 
      moveChoice: List[Move], player: Player, p: MaxMin, turn: Int): FitnessMove =
      if (depth == 0 || terminal(turn))
        (player.evalHeuristic(node, turn), moveChoice)
      else
        p match {
          case _: Max =>
            player.getPossibleMoves(node).
            takeWhile(_ => beta > alpha). // Pruning
            foldLeft((alpha, moveChoice)) { case ((alpha, moveChoice), move) =>
              val simulate = player.simulateMove(node, move)
              max((alpha, moveChoice),
                alphaBeta(simulate, depth-1, alpha, beta, 
                  move :: moveChoice, not(player), Min(), turn+1))
            }
          case _: Min =>
            player.getPossibleMoves(node).
            takeWhile(_ => beta > alpha). // Pruning
            foldLeft((beta, moveChoice)) { case ((beta, moveChoice), move) =>
              val simulate = player.simulateMove(node, move)
              (
                min((beta, moveChoice),
                  alphaBeta(simulate, depth-1, alpha, beta, 
                    moveChoice, not(player), Max(), turn+1))._1,
                  moveChoice
              )
            }
        }
    val (_, moveChoice) = alphaBeta(board, MAX_DEPTH, Integer.MIN_VALUE, Integer.MAX_VALUE, List.empty[Move], player, Max(), turn)
    if (!moveChoice.isEmpty) moveChoice.head
    else player.getPossibleMoves(board).head
  }

}

