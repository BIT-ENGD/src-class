Stream[Tree[A]]
trait Tree[A]
sealed trait Tree[A]
case class Branch[A](ts: Stream[Tree[A]]) extends Tree[A]
case class Leaf[A](a: A) extends Tree[A]

gameTree(b: Board): Tree[Board] = 
  if (b.isAtEndPos) Leaf(b) 
  else Branch(b.emptySlots.toStream.map((pos: Int) => gameTree(b addTic pos)))

def maximize(tree: Tree[Board]): Int = tree match {
  case Leaf(board) => board.score
  case Branch(subgames) => 
     subgames.map((tree: Tree[Board]) => minimize(tree)).max
} ...
def minimize // symmetrically 

ts: List[Tree[A]]
Time for gametree creation: 0.031s and for finding the solution 133.216s.
Time for gametree creation: 4.791s and for finding the solution 6.088s.
Time for gametree creation: 4.438s and for finding the solution 5.601s.
