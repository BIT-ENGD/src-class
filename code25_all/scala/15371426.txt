  val testList = List(Tuple2(4, 'a'), Tuple2(1, 'b'), Tuple2(2, 'c'), Tuple2(2, 'a'), Tuple2(1, 'd'), Tuple2(4, 'e'))
  require(decompress(testList) == List('a', 'a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd', 'e', 'e', 'e', 'e'))

object P12 extends App {

  def decompress(tList: List[Tuple2[Int,Any]]): List[Any] = {
    val startingList: List[Any] = List();
    val newList = tList.foldLeft(startingList)((b,a) => {
      val padCount = a._1;
      val padElement = a._2;

      println
      println("  Current list: " + b)
      println("  Current padCount: " + padCount)
      println("  Current padElement: " + padElement)
      println("  Padded using padTo: " + b.padTo(padCount, padElement))
      println

      // This doesn't work
      b.padTo(padCount, padElement)

//      // This works, yay
//      var tmpNewList = b;
//      for (i <- 1 to padCount)
//        tmpNewList = tmpNewList :+ padElement
//      tmpNewList
    })
    newList
  }

  val testList = List(Tuple2(4, 'a'), Tuple2(1, 'b'), Tuple2(2, 'c'), Tuple2(2, 'a'), Tuple2(1, 'd'), Tuple2(4, 'e'))
  require(decompress(testList) == List('a', 'a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd', 'e', 'e', 'e', 'e'))
  println("Everything is okay!")
}

