val process = Process("phantomjs --ignore-ssl-errors=yes " + myrenderscript.js + args ...)
val result = process.run(processLogger, true).exitValue() match {
  case ExitCode.SUCCESS => Left(Success)
  case ExitCode.TIMEOUT => Right(TimeoutError)
  case ExitCode.OPEN_FAILED => Right(NetworkError)
  case _ => Right(UnknownError)        
}

var version = "1.1";

var TIMEOUT = 30000,
EXIT_SUCCESS = 0,
EXIT_TIMEOUT = 2,
EXIT_OPEN_FAILED = 3;


if (phantom.args.length < 2) {
    console.log("Usage: phantomjs render.js parentUrl output [width height]");
    phantom.exit(1);
}
var url = phantom.args[0];
var output = phantom.args[1];

var width = parseInt(phantom.args[2] || 1024);
var height = parseInt(phantom.args[3] || 1024);
var clipwidth = parseInt(phantom.args[4] || 1024);
var clipheight = parseInt(phantom.args[5] || 1024);
var zoom = parseFloat(phantom.args[6] || 1.0);
var phantom_version = phantom.version.major + "." + phantom.version.minor + "." +    phantom.version.patch;
var userAgentString = "PhantomJS/" + phantom_version + " screenshot-webservice/" + version;

renderUrlToFile(url, output, width, height, clipwidth, clipheight, zoom, userAgentString, function (url, file) {
    console.log("Rendered '" + url + "' at size (" + width + "," + height + ") into '" + output + "'");
    phantom.exit(EXIT_SUCCESS);
    phantom = null;
});

setTimeout(function () {
    console.error("Timeout reached (" + TIMEOUT + "ms): " + url);
    phantom.exit(EXIT_TIMEOUT);
}, TIMEOUT);


function renderUrlToFile(url, file, width, height, clipwidth, clipheight, zoom,    userAgentString, callback) {
    console.log("renderUrlToFile start: " + url)
    var page = new WebPage();
    page.viewportSize = { width: width, height: height };
    page.clipRect = { top: 0, left: 0, width: clipwidth, height: clipheight};
    page.settings.userAgent = userAgentString;
    page.zoomFactor = zoom;
    page.open(url, function (status) {
        console.log("renderUrlToFile open page: " + url)
        if (status !== "success") {
            console.log("Unable to render '" + url + "' (" + status + ")");
            page.release();
            page.close();
            page = null;
            phantom.exit(EXIT_OPEN_FAILED);
        } else {
            console.log("renderUrlToFile open page success and pre-render: " + url)
            page.render(file);
            console.log("renderUrlToFile open page post-render: " + url)
            page.release();
            page.close();
            page = null;
            callback(url, file);
        }
    });
}

val process = Process("phantomjs --ignore-ssl-errors=yes " + myrenderscript.js + args ...).run(processLogger, connectInput)
val result = process.exitValue() match {
  case ExitCode.SUCCESS => Left(Success)
  case ExitCode.TIMEOUT => Right(TimeoutError)
  case ExitCode.OPEN_FAILED => Right(NetworkError)
  case _ => Right(UnknownError)        
}
process.destroy()

