object Units {
  case class Quantity[M <: MInt, T: Numeric](value: T) {
    type This = Quantity[M, T]

    def *[M2 <: MInt](m: Quantity[M2, T]) = 
      Quantity[M + M2, T](numeric[T].times(value, m.value))
    def /[M2 <: MInt](m: Quantity[M2, T]) = 
      Quantity[M - M2, T](numeric[T].div(value, m.value))
    def apply(v: T) = Quantity[M, T](numeric[T].times(v, value))
  }

  implicit def measure[T: Numeric](v: T) = Quantity[_0, T](v)

  implicit def numericToQuantity[T: Numeric](v: T) = 
    new QuantityConstructor[T](v)

  class QuantityConstructor[T: Numeric](v: T) {
    def m = Quantity[_1, T](v)
  }
}

MInt
_0
_1
import Units._

val length1 = 5  * (5 m) //doesn't work <-----
val length2 = (5 m) * 5  // works

measure
overloaded method value * with alternatives:
   (x: Double)Double <and>
   (x: Float)Float <and>
   (x: Long)Long <and>
   (x: Int)Int <and>
   (x: Char)Int <and>
   (x: Short)Int <and>
   (x: Byte)Int  cannot be applied to 
(scalax.units.Units3.Quantity[scalax.units.Integers._1,Int])

