trait Typeclass1[A, B] {
  def hash(a: A, b: B): String
}

trait Typeclass2[A, B] {
  def hash(a: A, b: B): B
}

trait Entity

trait MyEntity1

trait MyEntity2

object db {
  def load(any:Any):Entity = new Entity{}
}


class MyClass[T](t: T, a: String) {

  def apply(timeout: Long): T = {
    val loadFromDB = db.load(t)
    loadFromDB match {
      case myEntity1: MyEntity1 => applyTypeSafe(myEntity1)
      case myEntity2: MyEntity2 => applyTypeSafe(myEntity2)
    }
  }


  def applyTypeSafe[C](c: C)(implicit typeClass1: Typeclass1[C, T], typeclass2: Typeclass2[C, T]): (String, T) = {
    typeClass1.hash(c, t) -> typeclass2.hash(c, t)
  }
}

