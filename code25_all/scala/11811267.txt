Generator
GeneratorFactory
Generator
case class Generator[T, S](a: T, b: T, c: T) {
  def generate(implicit bf: CanBuildFrom[S, T, S]): S =
    bf() += (a, b, c) result
}

case class GeneratorFactory[T]() {
  def build[S <% Seq[T]](seq: S) = Generator[T, S](seq(0), seq(1), seq(2))
}

GeneratorFactory.build
S
Generator.generate
S
S
Generator
Char
generate
String
build
String
val gb = GeneratorFactory[Char]()
val g = gb.build("this string")
val o = g.generate

String
GeneratorFactory
Generator
val g2 = Generator('a', 'b', 'c')
g2.generate // error

g2
Generator[Char,Nothing]
S
Seq[T]
Nothing
case class Generator[T, S=Seq[T]]

val g3 = Generator[Char, String]('a', 'b', 'c')
val o3 = g3.generate  // works fine, o3 has type String

Generator.apply
apply
object Generator {
  def apply[T](a: T, b: T, c: T) = new Generator[T, Seq[T]](a, b, c)
}

val g2 = Generator('a', 'b', 'c')  // error: ambiguous reference to overloaded definition

Generator
S
Seq[T]
val g2 = Generator('a', 'b', 'c')
val o2 = g2.generate
// o2 is of type Seq[Char]

