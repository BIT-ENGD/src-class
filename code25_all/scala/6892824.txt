trait SomeTraitOf[+A] {

  def newInstanceOfA : A = /*  necessary code to make it work */

}

class SomeTraitOf[A : Manifest] {

  def newInstanceOfA(implicit m : Manifest[A]) : A =
     m.erasure.newInstance.asInstanceOf[A] 

}

sealed trait RootPeerProxy[+A] extends Proxy {

  def peer: A
  def self = peer
  def peerManifest[B >: A](): Option[Manifest[B]]
  private[scalavaadin] def newInstance() : Option[A]
}

trait PeerProxy[+A] extends RootPeerProxy[A] {
  override def peerManifest[B >: A](): Option[Manifest[B]]
  override def peer(): A = this.newInstance match {
    case None => {throw new IllegalStateException("oups")} 
    case Some(a) => a
  }
  private[scalavaadin] override def newInstance() : Option[A] = peerManifest map { m =>    m.erasure.newInstance.asInstanceOf[A] }
}

