object Cood
{ 
  val up = Cood(0, 2)
  val upRight = Cood(1, 1)
  val downRight = Cood(1, -1)
  val down = Cood(0, - 2)
  val downLeft = Cood(-1, -1)
  val upLeft = Cood(- 1, 1)    
  val dirns: List[Cood] = List[Cood](up, upRight, downRight, down, downLeft, upLeft) 
}
case class Cood(x: Int, y: Int)
{
  def +(operand: Cood): Cood = Cood(x + operand.x, y + operand.y)
  def -(operand: Cood): Cood = Cood(x - operand.x, y - operand.y)
  def *(operand: Int): Cood = Cood(x * operand, y * operand)
}

val hexCoods: Set[Cood] = ... some code
val sideCoods: Set[Cood] = hexCoods.flatMap(i => Cood.dirns.map(_ + i).toSet)

