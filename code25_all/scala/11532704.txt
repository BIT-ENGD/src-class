hlisted
FnHListerAux
F
def async[F, A <: HList, R](
  shell: Shell,
  success: F,
  failure: FunctionTypes.Failure,
  dummy: F)(implicit h: FnHListerAux[F, A => R],
            u: FnUnHListerAux[A => R, F]): F =
{ (args: A) =>

  require(shell != null, "Shell cannot be null")
  require(shell.getDisplay() != null, "The shell must have a display")

  val display = shell.getDisplay()
  display.asyncExec(new Runnable() {
    def run(): Unit = {
      try {
        success.hlisted(args)
      } catch {
        case e: Throwable =>
          failure(e)
      }
    }
  })

  dummy.hlisted(args)
}.unhlisted

