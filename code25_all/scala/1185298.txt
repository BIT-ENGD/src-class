Input
Output
Output
Input
class Input[T] {
  var output: Option[Output[_ <: T]] = None
}
class Output[T] {
  var input: Option[Input[_ >: T]] = None
}

Input
Output
Input
Output
connect
Input
Output
def connect[T](output: Output[T], input: Input[_ >: T]) = {
  output.input = Some(input)
  input.output = Some(output)
}

val out = new Output[String]
val in = new Input[AnyRef]
connect(out, in)

test.scala:17: error: type mismatch;
 found   : Output[String]
 required: Output[AnyRef]
  connect(out, in)
          ^

connect[String]
connect
connect
Output
out connect in
