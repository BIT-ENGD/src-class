val res = Queryable[Account].map(_.name)

val db = Database.forURL("jdbc:mysql://localhost:3306/databasename", driver = "com.mysql.jdbc.Driver", user="username", password="password")
val backend = new SlickBackend(MySQLDriver, AnnotationMapper)

db withSession {
  val r=backend.toList(res)
  println(r.toString)
}

val r=backend.toList(res)

[ToolBoxError: reflective typecheck has failed: ambiguous implicit values: both value StringCanBuildFrom in object Predef of type => scala.collection.generic.CanBuildFrom[String,Char,String] and method conforms in object Predef of type [A]=> <:<[A,A] match expected type T] 

@table("account")
case class Account (
    @column("ID") id: Long,
    ...
    @column("Name") name: String,
    ...
)

