abstract class Message()
case class FooMessage() extends Message
case class BarMessage() extends Message
//... other messages ...

trait Component
{
  def handleMessage(msg: Message):Unit
}

trait ComponentType1 extends Component
{
  abstract override def handleMessage(msg: FooMessage) = {
    //handle foo, pass it up the chain
    super.handleMessage(msg)
  }

  abstract override def handleMessage(msg: BarMessage) = {
    //handle bar, pass it up the chain
    super.handleMessage(msg)
  }
}

//handles some other messages, also might handle the same messages as ComponentType1
trait ComponentType2 extends Component { .. }

ComponentType
Message
Component
handleMessage
Component
Message
msg
handleMessage
