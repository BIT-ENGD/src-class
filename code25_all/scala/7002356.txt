class Applayable[-R,T] (val host : Function[R,T]) {
  def $: R=>T = host.apply
}
implicit def mkApplayable[R,T] (k : Function[R,T]) : Applayable[R,T] = new Applayable(k)

val inc : Int => Int = _ + 1
inc $ 1

def inc(x:Int) : Int = x+1
inc $ 1

