import play.api.libs.json._
import scala.reflect.macros.Context
import language.experimental.macros

object Extension {

  def apply[A]: Format[A] = macro applyImpl[A]

  def applyImpl[A: c.WeakTypeTag](c: Context): c.Expr[Format[A]] = {
    import c.universe._
    val aTpeW   = c.weakTypeOf[A]
    val aClazz  = aTpeW.typeSymbol.asClass

    if (!aClazz.isSealed) { // fall back to Json.format
      val t = reify { Json.format[A] } .tree
      return c.Expr[Format[A]](t)
    }

    ???
  }
}

A
Json.format
[error] .../Extension.scala:47: No unapply function found
[error]       val t = reify { Json.format[A] } .tree
[error]                                  ^

format
format
def format[A] = macro JsMacroImpl.formatImpl[A]

