def Online = Action { implicit request =>
loginForm.bindFromRequest.fold(
  formWithErrors => BadRequest(html.login(formWithErrors)),
  user => Contact.AddOnline("email" -> user._1)
)

trait Secured {

  /**
  * Retrieve the connected user email.
  */
  private def username(request: RequestHeader) =
   request.session.get("email")

  /**
  * Redirect to login if the user in not authorized.
  */
  private def onUnauthorized(request: RequestHeader) = 
  Home.flashing("failure"->"You    are not logged in");

 // --

   /** 
   * Action for authenticated users.
   */
  def IsAuthenticated(f: => String => Request[AnyContent] => Result)=
  Security.Authenticated(username, onUnauthorized) { user =>
  Action(request => f(user)(request))
  }

setOnline(user.email)
setOnline(user.email)
