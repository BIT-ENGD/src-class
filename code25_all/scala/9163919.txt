>>=
>>=
foldleft
val dataMap:Map[K,V]

def call[F](funcList:List[funcOb[K, V, F]]):Either[F,Seq[(K,Option[V])]] = {
  type t[a] = Either[F,a]
  funcList.
    map(v => {
      v.funcs.
        foldLeft((v.name,dataMap.get(v.name)).right[F])( _ >>= _ )
    }
  ).sequence[t,(K,Option[V])]
}

case class funcOb[K,V,F]( name:K,
     funcs:List[(K,Option[V]) => Either[F, (K, Option[V])]] = List.empty )

...: type mismatch;
[error]  found   : (K, Option[V]) => Either[F,(K, Option[V])]
[error]  required: (K, Option[V]) => Either[F,(K, Option[V])]
[error]             foldLeft((v.name,dataMap.get(v.name)).right[F])( _ >>= _ )

