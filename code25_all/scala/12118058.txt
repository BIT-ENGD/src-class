Extractor[A]
A
case class Extractor[A](id: String, start: Step[A], factory: Factory[A])
sealed trait Step[A] {
  def process(ctx: Context[A]): List[A]
}
trait Factory[A] { def create(extracts: List[(String,String)]): List[A] }
  val extractor: Parser[Extractor[_]] = trace ~ "EXTRACT" ~ extractorType ~ extractorId ~ step ^^ {
    case t ~ _ ~ ty ~ id ~ step => {
      val extr = ty match {
        case "SUBTITLES" => {
          Extractor[MovieInfos.Subtitle](id, step.asInstanceOf[Step[MovieInfos.Subtitle]], new SubtitleFactory)
        }
        case x => throw new InvalidExtractorType(x)
      }
      extr.trace(t)
    }
  }

val step: Parser[Step[_]]
Step[A]
A
asInstanceOf
"SUBTITLES"
case "REVIEWS" => ...
Extractor[A]
new SubtitleFactory
A
MovieInfos.Subtitle
step
asInstanceOf
Parser[Extractor[_]]
step.asInstanceOf[Step[MovieInfos.Subtitle]]
Extractor[MovieInfos.Subtitle]
