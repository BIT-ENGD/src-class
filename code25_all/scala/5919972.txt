trait Parser {
  type Result
  def parse(s: String): Result
}

class IdParser extends Parser {
  case class Result(s: String)
  def parse(s: String) = new Result(s)
}

class Comparator[P <: Parser](p: P) {
  def compare(s1: String, s2: String) = p.parse(s1) == p.parse(s2)
}

println(new Comparator(new IdParser).compare("a", "b"))

class CustomisableComparator[P <: Parser](p: P, 
      cmp: (P#Result, P#Result) => Boolean = (r1: P#Result, r2: P#Result) => r1 == r2) {
  def compare(s1: String, s2: String) = cmp(p.parse(s1), p.parse(s2))
} 

println(new CustomisableComparator(new IdParser).compare("a", "b"))

P
CustomisableComparator
IdParser
Parser
println(new CustomisableComparator(new IdParser, (r1: IdParser#Result, r2: IdParser#Result) => r1 == r2).compare("a", "b"))

(this.IdParser#Result, this.IdParser#Result) => Boolean
(?#Result, ?#Result) => Boolean
