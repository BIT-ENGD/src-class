class Network extends Graph
class Host extends Node
class Molecule extends Graph
class Atom extends Node
abstract class Graph {
  type CompatibleNode <: Node
  protected var myNodes = new ArrayBuffer[CompatibleNode]()

  def attachNode(node : compatibleNode) = {
      .... 

      // Inform the node about the attachement so it can do update
      node.attachToGraph(this)

      // save the node
      myNodes += node
  }
}

abstract class Node {
  type CompatibleGraph >: scala.Null <: Graph
  protected var myGraph : CompatibleGraph = null

  def attachToGraph(graph : compatibleGraph) = {
      .... 

      // Inform the graph about the attachement so it can do update
      graph.attachNode(this)

      // save the node
      myGraph = graph
  }
}

class Network extends Graph { override type CompatibleNode = Host}
class Host extends Node { override type CompatibleGraph = Network}

class Molecule extends Graph { override type CompatibleNode = Atom}
class Atom extends Node { override type CompatibleGraph = Molecule}

graph.attachNode(this)
graph.CompatibleNode
Graph
...

def detachFromGraph() = {

     ....

     // inform my graph 
     myGraph.detachNode(this.asInstanceOf[myGraph.CompatibleNode])

     ...
 }

myGraph.compatibleNode : requiered stable identifier
p.x
p
x
