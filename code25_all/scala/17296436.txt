apply
object Wrapper {
  def apply(block: TypeA => String) = {
    TypeA a = ...
    block(a)
  }
}

TypeA
TypeA
Wrapper { implicit a => functionThatUseImplicitA() } 

block
Function1
Function2
object Wrapper2 {
  def apply(block: (TypeA, TypeB) => String) = {
    TypeA a = ...
    TypeB b = ...
    block(a, b)
  }
}

Wrapper { implicit (a, b) => functionThatUseImplicitAB() } 

Wrapper { (a, b) => 
  implicit val ia = a
  implicit val ib = b
  functionThatUseImplicitAB()
} 

