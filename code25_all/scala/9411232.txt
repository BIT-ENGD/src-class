Map[DateTime, T]
Map[DateTime, T]
Map
def -(key: DateTime) = iv.-(key)
def get(key: DateTime) = iv.get(key)

+[B1 :>B](kv: (A, B1)):Map[A, B1]

Map
type DtMap[T] = Map[DateTime, T]
Map
case class DtValMap[T](iv: Map[DateTime, T]) extends Map[DateTime, T] {
  def -(key: DateTime) = new DtValMap(iv.-(key))
  def get(key: DateTime) = iv.get(key)
  def +[T1 >: T](kv: (DateTime, T1)): DtValMap[T1] = new DtValMap(iv + kv)
  def iterator: Iterator[(DateTime, T)] = iv.iterator
}

:>
>:
