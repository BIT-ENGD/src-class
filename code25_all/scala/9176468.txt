val request: Defered[Int] = client.getSomeIntAsynFromSocket();

request.addCallBack(result => result.success[String])
request.addErrback(error => error.fail[Integer])

val f = Future {
    val queue = java.util.concurrent.ArrayBlockingQueue[Validation[String, Int]](1)

    val request: Defered[Int] = client.getSomeIntAsynFromSocket();
    request.addCallBack(result => queue.add(result.success[String]))
    request.addErrback(error => queue(error.fail[Integer]))

    f.take
}

