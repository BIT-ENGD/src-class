trait Calculation[Input, Result] {
   def calculate(in: Input): Result
}

class CalculationImpl : Calculation[String, int] {
   // missing parameter type for expanded function
   // The argument types of an anonymous function must be fully known. (SLS 8.5)
   def calculate = {
      case "one" => 1
      case "two" => 2
      case s: String => 0
   }
}

calculate
Function1
Input
Result
trait Calculation[Input, Result] {
   def calculate: Input => Result // Works, but semantics have changed.
}

class CalculationImpl : Calculation[String, int] {
   def calculate = {
      case "one" => 1
      case "two" => 2
      case s: String => 0
   }
}

