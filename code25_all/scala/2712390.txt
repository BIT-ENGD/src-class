f: (T,T) => T
Option[T]
None
None
def opt_apply[T](f: (T,T) => V, x: Option[T], y: Option[T]): Option[T] = {
  (x,y) match {
    case (Some(u),Some(v)) => Some(f(u,v))
    case _ => None
  }
}

(x zip y) map {case (u,v) => f(u,v)}
Iterator[T]
Option[T]
