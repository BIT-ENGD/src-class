bar
Foo
Static
import language.experimental.macros
import scala.reflect.macros.Context

package object statics {

  type Static = macro Statics.addStaticField

  object Statics {

    def addStaticField(c: Context): c.Tree = {
      import c.universe._

      val STATIC = 1 << 23
      type CompilerSymbol = scala.tools.nsc.Global#Symbol
      def setFlag(symbol: Symbol, flag: Long) {
        val compilerSymbol = symbol.asInstanceOf[CompilerSymbol]
        println("Setting flag ...")
        compilerSymbol.setFlag(flag)
      }
      def printFlags(symbol: Symbol) {
        println("Flags: " + symbol.asInstanceOf[CompilerSymbol].flagString)
      }

      val staticField: ValDef =
        ValDef(
          mods = Modifiers(),
          name = TermName("bar"),
          tpt  = TypeTree(),
          rhs  = Literal(Constant(42))
        )
      printFlags(staticField.symbol)
      setFlag(staticField.symbol, STATIC)
      printFlags(staticField.symbol)

      val Template(parents, _, existingCode) = c.enclosingTemplate

      Template(Nil, emptyValDef, staticField :: existingCode)
    }
  }
}

setFlag
Flags: 
Setting flag ...
Flags: <static>

package statics

class Foo extends Static

object Main extends App {
  Foo.bar        // Fails to compile
  (new Foo).bar  // Compiles
}

show
showRaw
STATIC
