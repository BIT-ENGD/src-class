abstract class A

class B extends A

class C extends A

send
B
implicit def routingKeyFor[T <: A](value: T) =
  value.getClass.getSimpleName

implicit def routingKeyFor(value: C) = "custom C"

def send[T <: A](value: T)(implicit createRoutingKey: T => String):
Validation[Throwable, String] = Success(createRoutingKey(value))

val resultOfSendingB = send(new B)
val resultOfSendingC = send(new C)

routingKeyFor
implicit def someOtherName[T <: A](value: T) = 
  value.getClass.getSimpleName

