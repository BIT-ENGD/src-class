[ERROR] TestService.scala:49: error: type mismatch;
[INFO]     found   : .services.TestService.type (with underlying type object .services.TestService)
[INFO]     required: .services.TestService

class TestService extends Service
{
  val mBinder: IBinder = new TestService.TestServiceBinder
  val list  = List("Linux", "Android", "iOs", "WP")

  override def onCreate 
  {
    Toast.makeText(this, TAG + " created", Toast.LENGTH_LONG).show;
    Log.d(TAG, "onCreate");
  }

  override def onDestroy
  {
    Toast.makeText(this, TAG + " destroyed", Toast.LENGTH_LONG).show;
    Log.d(TAG, "onCreate");
  }

  override def onStart(intent: Intent, startid: Int)
  {
    Toast.makeText(this, TAG + " started", Toast.LENGTH_LONG).show;
    Log.d(TAG, "onStart");
  }

  override def onBind(intent: Intent): IBinder = mBinder

  def getList: List[String] = list

}

object TestService
{
  class TestServiceBinder extends Binder
  {
    def getService: TestService = TestService.this
  }
}

class HomeActivity extends Activity with FindView
{

  private final val TAG = "HomeActivity"

  lazy val buttonTest: Button = findView[Button](R.id.testButton)

  private var mService: TestService = _
  private var mBound: Boolean = false

  val mConnection: ServiceConnection = new TestServiceConnection

  override def onCreate(savedInstanceState: Bundle)
  {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.main)

    buttonTest.setOnClickListener(ButtonTestOnClickListener)

    Log.i(TAG, "onCreate")
  }

  override def onStart
  {
    super.onStart
    val intent: Intent = new Intent(this, classOf[TestService])
    bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
  }

  override def onStop
  {
    super.onStop
    if(mBound)
    {
      unbindService(mConnection)
      mBound = false
    }
  }

  object ButtonTestOnClickListener extends View.OnClickListener
  {
    def onClick(v: View)
    {
      if(mBound)
      {
        Toast.makeText(v.getContext, mService.getList.toString, Toast.LENGTH_LONG).show
      }
    }
  }

  class TestServiceConnection extends ServiceConnection
  {
    def onServiceConnected(className: ComponentName, service: IBinder)
    {
      val binder = (new TestService.TestServiceBinder).asInstanceOf[TestServiceBinder]
      mService = binder.getService
      mBound = true
    }

    def onServiceDisconnected(className: ComponentName)
    {
      mBound = false
    }
  }

}

def getService: TestService = TestService.this
