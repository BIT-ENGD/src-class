import scala.reflect.runtime.universe._
import scala.annotation.StaticAnnotation

class Reflection

object Reflection {

  def reflect[T: TypeTag](x: Class[T]): Type = {
    typeOf[T]
  }

  def main(args: Array[String]) {
    var tpe = reflect(classOf[Hero])
    for (member <- tpe.members)
      for (annotation <- member.annotations)
        annotation.tpe match {
          case t if t <:< typeOf[weapon[_]]
                  => println(s"found weapon member: $member")
          case t if t <:< typeOf[action]
                  => println(s"found action member: $member")
        }
  }
}

class weapon[T <: WeaponType](x: String = null) extends StaticAnnotation
class action extends StaticAnnotation
class WeaponType(damage: Int)
case class Knife extends WeaponType(12)

class Hero {

  @weapon[Knife] var weapon: String = _
  @action def hitWithKnife() {

  }

}

 [] ?_$1 setInst sample.Knife

