trait A

trait B[C] {
  def c: C
}

trait E[C <: B[C], D <: A]

case class MyMap[M <: A, L <: B[L], N[L, M]](map: Map[M, N[L, M]])

object MyMap {
  def empty[M <: A, L <: B[L], N[L, M]] = MyMap(Map.empty[M, N[L, M]])
}

val myMap = MyMap.empty[A, T forSome { type T <: B[T] }, E]

