this.reactions += {
  case KeyReleased(src, key, mod, _) => {
  // do some stuff
  // but how to consume this KeyEvent??
  }
}

object keys extends Publisher {
  peer.addKeyListener(new KeyListener {
    def keyPressed(e: java.awt.event.KeyEvent) { publish(new KeyPressed(e)) }
    def keyReleased(e: java.awt.event.KeyEvent) { publish(new KeyReleased(e)) }
    def keyTyped(e: java.awt.event.KeyEvent) { publish(new KeyTyped(e)) }
  })
}

case class KeyReleased(val source: Component, key: Key.Value, val modifiers: Key.Modifiers, 
                location: Key.Location.Value)
               (val peer: java.awt.event.KeyEvent) extends KeyEvent {
def this(e: java.awt.event.KeyEvent) = 
this(UIElement.cachedWrapper[Component](e.getSource.asInstanceOf[JComponent]), 
    Key(e.getKeyCode), e.getModifiersEx, Key.Location(e.getKeyLocation))(e) 
}

