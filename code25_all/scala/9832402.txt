import scala.util.parsing.combinator.JavaTokenParsers

class X extends JavaTokenParsers {
  lazy val elems = elem("wrong elem", "#WB-" contains _)
  lazy val lists = repsep(rep(elems), ",")
  lazy val p1 = int ~ int ~ lists
  lazy val p2 = int ~ int ~ (whiteSpace ~> lists)

  def go[A](p: Parser[A]) = parseAll(p, "1 2   WB#,---,BBB") match {
    case NoSuccess(msg, _) => sys.error(msg)
    case _ =>
  }

  lazy val int: Parser[Int] =
    wholeNumber ^^ {
      try _.toInt catch {
        case e: NumberFormatException => sys.error("invalid number")
      }
    }
}

go
val x = new X
x go x.p1

java.lang.RuntimeException: string matching regex `\z' expected but `W' found

x go x.p1

java.lang.RuntimeException: string matching regex `\s+' expected but `W' found

Parser[Int ~ Int ~ List[List[Char]]]
elem
