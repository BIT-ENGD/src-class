abstract class A
class B extends A
class C extends A
class D extends A
class E extends A

val xs = List(new D, new B, new E, new E, new C, new B)

val ys = (xs collect {
    case b: B => None
    case c: C => None
    case notBorC => notBorC
}).filter(_ != None).asInstanceOf[List[A]]

