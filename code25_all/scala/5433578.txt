case class X(...)
val xs: Seq[X] = ... // some method result
val ys: Seq[X] = ... // some other method result

xs.distinct.sameElements(xs) // true
ys.distinct.sameElements(ys) // true

xs forall(ys contains _)    // true
xs.toSet subsetOf ys.toSet  // false

Set
Seq
(...).distinct.sameElements(...)
distinct.sameElements
val rnd = scala.util.Random
def int2Label(i: Int) = "[%4s]".format(Seq.fill(rnd.nextInt(4))(i).mkString)
val s = Seq(1,2,3,4)

// as expected :
val m1: Map[Int,String] = s.map(i => (i,int2Label(i))).toMap
println(m1) // Map(5 -> [ 555], 1 -> [    ], 2 -> [  22], 3 -> [    ])
println(m1) // Map(5 -> [ 555], 1 -> [    ], 2 -> [  22], 3 -> [    ])

// but accessing m2 several times yields different results. Why?
val m2: Map[Int,String] = s.map(i => (i,i)).toMap.mapValues { int2Label(_) }
println(m2) // Map(5 -> [   5], 1 -> [  11], 2 -> [  22], 3 -> [ 333])
println(m2) // Map(5 -> [  55], 1 -> [  11], 2 -> [    ], 3 -> [    ])

m2
m2
m1
