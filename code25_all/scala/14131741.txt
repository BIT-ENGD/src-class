case class Post(id:Long, message:String)

object Post extends ObjectModel {
  val simple = {
    get[Long]("id") ~
    get[String]("message") map {
      case id~message=>
        Post(
          id,
          message
        )
    }
  }

  def fetch(): List[Post] = {
    DB.withConnection { implicit connection =>
      val ret = SQL( "SELECT id, message FROM post" ).as(Post.simple *)
    }
  }
}

case class Post(id:Long, message:String, starred:Boolean)

object Post extends ObjectModel {
  val simple = {
    get[Long]("id") ~
    get[String]("message") map {
      case id~message=>
        Post(
          id,
          message,
          didStar(id, userId)
        )
    }
  }
...

