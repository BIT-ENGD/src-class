val purchaseOrderJson = PurchaseOrderJson.toJson(purchaseOrder)
val clientPurchaseOrder = PurchaseOrderJson.fromJson(purchaseOrderJson)

val reflectionCheck = classOf[PurchaseOrder].getMethods.forall {
 (method: Method) =>
    if (!method.invoke(purchaseOrder).equals(method.invoke(clientPurchaseOrder))) {
      println("%s unequal: %s vs %s".format(method.getName, method.invoke(purchaseOrder), method.invoke(clientPurchaseOrder)))
      false
    } else {
      true
    }
}

"purchaseOrders": [{
    "id": "522423",
    "lineItems": [{
        "notes": "Important item",
        "origin": "Spain"
      },{
        "notes":null,
        "origin": "Italy"
    }]
}]

trait PurchaseOrder {
  def id: String
  def lineItems: Vector[LineItem]
}

trait LineItem {
  def notes: Option[String]
  def origin: String
}

class PurchaseOrderJson(
    @(JsonProperty @field) override val id: String,
    @(JsonProperty @field) override val lineItems: Vector[LineItemImpl]
) extends PurchaseOrder {
    def this() = this("",Vector.empty[LineItemImpl])
}

case class LineItemImpl(notes: Option[String]) extends LineItem

class LineItemImpl(
    @(JsonProperty @field) override val notes: Option[String] = None
) extends LineItem {
    def this() = this(None)
}

lineItems unequal: Vector(com.giltgroupe.purchaseorder.core.json.LineItemImpl@5b6ca395) vs Vector(com.giltgroupe.purchaseorder.core.json.LineItemImpl@3967ba17)

