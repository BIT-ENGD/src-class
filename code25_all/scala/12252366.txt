... the types of the elements can be tracked separate from the actual element values. To do this we create an purely abstract type (it has no instances) which models a list of types, let's call it TList.
implicit def hlistToTypedLink[TL](a: HList[TL]):TypedLink[TL] = new TypedLink[TL](a.map(a:X => new TypedHandle[X]))

 val m = List(1, 2, 3, 4) :^: List("str1", "str2") :^: KNil

 KCons[Int,java.lang.String :: HNil,List]

KCons[String, Int :: HNil, TH]

KCons[Foo, Bar, Baz :: HNil, TH]

