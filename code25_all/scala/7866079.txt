def assert(condition: Boolean, message: String) {
  if(!condition){ throw new AssertionError(message) }
}

def assertThrows[E](f: => Unit) {
  try {
    f
  } catch {
    case e: E => { return }
    case _: Exception => { }
  }
  throw new AssertionError("Expected error of type " + classOf[E] )
}

assert
assertThrows
E
class type expected but E found error
throw new AssertionError("error expected")
warning: abstract type E in type pattern is unchecked since it is eliminated by erasure
f: => Unit
