List[Option[AnyRef]]
Option[String]
trim
lazy val messageContext = Map(
  None -> None,
  Some("hello") -> None,
  Some(4) -> Some(negate _),
  None -> None
) map { t => wrapText(t._1, t._2)  } toList

private def wrapText[A](option: Option[A], transFn: Option[(A) => String]): String = option match {
  case Some(o) => " (%s)".format(transFn.getOrElse(stringIdentity _)(o))
  case _ => ""
}

private def stringIdentity[A](a: A) = a.toString

private def negate(n: Number) = n * -1

error: type mismatch;
 found   : Option[java.lang.Number => java.lang.String]
 required: Option[AnyVal{def getClass(): java.lang.Class[_ >: Double with Int <: AnyVal]} => String]
  ) map { t => wrapText(t._1, t._2)  } toList

List[""," (hello)"," (-4)",""]
