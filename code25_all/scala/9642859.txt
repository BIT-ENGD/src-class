true true
true false
true false
def apply(in:Any)
true true
true false
 object TestClass extends App {

  val xTrue = TypeXObject(TypeX("s"))
  val xFalse = TypeXObject(TypeY(1))
 }

 case class TypeX(string:String)

 case class TypeY(int:Int)

 object TypeXObject extends HasAbstractType{override type T = TypeX}

 object TypeYObject extends HasAbstractType{override type T = TypeY}

 abstract class HasAbstractType {
   type T
   def apply(in:Any):Any = {
     println(in.isInstanceOf[T])
     in
   }
 }

true false
manifest[T1].erasure.isInstance(t1)
manifest[T1].erasure.isInstance(t2)
