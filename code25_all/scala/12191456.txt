object radExtractor{
    def unapplySeq(row:HtmlTableRow):Option[List[String]]={
      val lista = (for{
        a<-row.getByXPath("td/span/a")
        ah= a.asInstanceOf[DomNode]
        if(ah.getFirstChild!=null)
      } yield a.asInstanceOf[DomNode].getFirstChild.toString).toList
      lista match{
        case Nil=>None
        case l @ List(duns,companyname,address,city,postal,_bs,orgnummer, _*) =>Some(l) 
        case _ =>println("WTF");None
      }
    }
  }

val toReturn = for{
      rad<-rader
      val radExtractor(duns,companyname,address,city,postal,_,orgnummer,_*)=rad
} yield Something(duns,companyname,address,city,postal,orgnummer)

None
MatchError
None
    val toReturn = rader.collect{case radExtractor(duns,companyname,address,city,postal,_,orgnummer,  _*)=>
          Something(companyname=companyname,address=address,city=city,postalcode=postal,orgnummer=orgnummer,duns=duns.toInt)
}

