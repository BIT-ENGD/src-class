[info] Compiling 1 Scala source to /home/matt/Documents/transledge/app/target/scala-2.9.2/test-classes...
[error] /home/matt/Documents/transledge/app/src/test/scala/com/transledge/drewes/parser_suite.scala:40: overloaded method value should with alternatives:
[error]   (notWord: ParserSuite.this.NotWord)ParserSuite.this.ResultOfNotWordForSeq[com.transledge.Instruction,List[com.transledge.Instruction]] <and>
[error]   (haveWord: ParserSuite.this.HaveWord)ParserSuite.this.ResultOfHaveWordForSeq[com.transledge.Instruction] <and>
[error]   (beWord: ParserSuite.this.BeWord)ParserSuite.this.ResultOfBeWordForAnyRef[List[com.transledge.Instruction]] <and>
[error]   (rightMatcher: org.scalatest.matchers.Matcher[List[com.transledge.Instruction]])Unit
[error]  cannot be applied to (org.scalatest.matchers.Matcher[Traversable[com.transledge.AddNode]])
[error]       parsing(square_node, input) should contain(AddNode("foo"))
[error]                                   ^
[error] one error found
[error] (test:compile) Compilation failed
[error] Total time: 3 s, completed 21-Feb-2013 15:15:04

import org.scalatest.FunSpec
import scala.util.parsing.combinator._
import com.transledge.drewes.{Parser => DrewesParser}
import com.transledge._
import org.scalatest.matchers.ShouldMatchers

class ParserSuite extends DrewesParser with FunSpec with ShouldMatchers {

  def parsing[A](parser: Parser[A], input: String): A = parse(parser, input).get

  // snipping other tests

  describe("square_node") {
    val input = """\squarenode{foo}(1cm, 2cm)"""
    it("should create a node") {
      parsing(square_node, input) should contain(AddNode("foo")) // Line 40
    }
  }
}

AddNode
Instruction
package com.transledge

abstract class Instruction
case class AddNode(id: String) extends Instruction

package com.transledge.drewes
import scala.util.parsing.combinator._
import com.transledge._

trait Parser extends RegexParsers {
  def node_id: Parser[String] = "[a-zA-Z\\-_:0-9]+".r
  def node_name: Parser[String] = ("{" ~> node_id <~ "}") | node_id

  def point: Parser[String] = "[^,()]+".r
  def position: Parser[(String, String)] = "(" ~> point ~ "," ~ point <~ ")" ^^ { case a ~ "," ~ b => (a.trim, b.trim) }

  def square_node: Parser[List[Instruction]] = "\\squarenode" ~> node_name ~ position ^^ { case name ~ position => List(AddNode(name)) }

}

should(rightMatcher: Matcher[List[T]])
Traversable
List
Traversable
List
Traversable
List
