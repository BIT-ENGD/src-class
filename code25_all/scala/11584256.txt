Map()
Option[Long]
Option[User]
(Map[ Option[Long], List[Tuple3[Job,Option[Client],Option[Project]]] ]()
Option[User]
theMap.foldLeft(users){
      (u,j) => 
        if(j._1!=None) {
          Map(u, j._2)
        } else {
          Map(User.placeholder, j._2)
        }
    }.flatten

type mismatch; found : List[Option[models.User]] required: (?, ?)

Long
user.id
allJobs.map{
     case ((i,l)) =>
       val user = users.map{ user =>
         if(user.map(_.id)==i) user
       }
       Tuple2(user.head, l)
   }

