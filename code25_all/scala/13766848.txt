  def getColumns[T <: Array[_]] ():Array[(String,T)] ={
     Array(Tuple2("test",Array(1.0,2.0,3.0)))
  }

 def getColumns[T <: Array[Double]] ():Array[(String,T)] ={
     Array(Tuple2("test",Array(1.0,2.0,3.0)))
  }

Array[AnyVal]
class SystemError(message: String, nestedException: Throwable) extends Exception(message, nestedException) {
  def this() = this("", null)
  def this(message: String) = this(message, null)
  def this(nestedException : Throwable) = this("", nestedException)
}

class FileDataSource(path:String) {
   val fileCatch = catching(classOf[FileNotFoundException], classOf[IOException]).withApply(e => throw new SystemError(e))

   def getStream():Option[BufferedSource]={
     fileCatch.opt{Source.fromInputStream(getClass.getResourceAsStream(path))}
   }
}

class CSVReader(src:FileDataSource) {

  def lines= src.getStream().get
  val head = lines.getLines.take(1).toList(0).split(",")
  val otherLines = lines.getLines.drop(1).toList

  def getColumns():Array[(String,Array[_])] ={
    val transposeLines = otherLines.map { l => l.split(",").map {
      d => d match {
        case String => d
        case Int => d.toInt
        case Double => d.toDouble
      }}.transpose }

    head zip transposeLines.map {_.toArray}
  }
}

