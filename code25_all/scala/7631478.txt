 trait Transform[T] { def apply( t: T ) : T }

 case class Add[Double] extends Transform[Double] { def apply( t: Double ) ... }
 case class Append[String] extends Transform[String] { def apply( t: String ) ... }

 object Identity extends Transform[Nothing] {
    def apply( t: Nothing ) = t
 }

 val array = Array[Transform[String]]( Transform.Identity )

 ... Identity.asInstanceOf[Transform[String]]

