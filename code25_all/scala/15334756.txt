trait ValueSource[A] {
  def value(a: Int): A
}

trait ValueSourceOps[A] {
  def self: Int
  def F: ValueSource[A]
  def value: A = F.value(self)
}

trait ToValueSourceOps {
  implicit def toValueSourceOps[A](index: Int)(implicit F0: ValueSource[A]): ValueSourceOps[A] =    new ValueSourceOps[A] {
    def self = index
    def F: ValueSource[A] = F0
  }
}

object Test extends ToValueSourceOps {
  def value[A: ValueSource](index: Int): A = toValueSourceOps(index).value
}

def value[A: ValueSource](index: Int): A = index.value

