var task = newTask("update product", "update for customer " + customerId.toString)
try {
          val vcdRouter = actorSystem.actorFor("user/supervisor/router-10.10.10.10:443")

          val vdcId = new UUID("92ddba5e-8101-4580-b9a5-e3ee6ea5718f")
          val vdcGet = sendExpect[AdminVdcType](vcdRouter, GetVdc(vdcId))
          val vdcPut = VdcPutConfig(vdcGet, c)
          val vdcPutTask = sendExpect[TaskType](vcdRouter, UpdateVdc(vdcId, vdcPut))

          task = task.copy(Progress = 100, status = SuccessType)

        } catch {
          case failure: NoResponseBodyException =>
            logger.debug("*** In putCustomerProduct, got a Left(VcdGatewayException)")
            task = task.copy(Progress = 100, status = Error, Error = Option(exceptionToError(failure, BadGateway)))

          case failure: VcdGatewayException ⇒
            logger.debug("*** In putCustomerProduct, got a Left(VcdGatewayException)")
            task = task.copy(Progress = 100, status = Error, Error = Option(exceptionToError(failure, GatewayTimeout)))

          case failure: Exception ⇒
            logger.debug("*** In putCustomerProduct, got a Left(Exception)")
            task = task.copy(Progress = 100, status = Error, Error = Option(exceptionToError(failure)))

        }

