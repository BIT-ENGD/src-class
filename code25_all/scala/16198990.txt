sealed abstract class SomeEnumThing {
    type RenderedType
}
object Type1 extends SomeEnumThing {
    type RenderedType = String
}
object Type2 extends SomeEnumThing  {
     type RenderedType = Array[Byte]
}

def render(something : SomeEnumThing) : something.RenderedType = { .... }

sealed abstract class SomeThing {
    type RenderedType
}
object Type1 extends SomeThing {
    type RenderedType = String
}
object Type2 extends SomeThing  {
     type RenderedType = Long
}

def render(something : SomeThing) : something.RenderedType = 
  something match {
    case Type1 => "test"
    case Type2 => 0l
}

