import sindi._

trait Digits {
  val dig1: Int
  val dig2: Double
}

class MyDigits(override val dig1: Int, override val dig2: Double) extends Digits {
  override def toString = super.toString + "\ndigit 1: " + dig1 + "\ndigit 2: " + dig2
}

//DigitModule ist Sindi specific.
final class DigitModule(override val ctx: Context) extends Module {
  override val bindings = Bindings(
    bind[Digits] to provider(new MyDigits(digit1, digit2))
  )
  private var digit1: Int = _
  private var digit2: Double = _

  def digits(d1: Int, d2: Double) : Digits = {
    digit1 = d1
    digit2 = d2
    inject[Digits]
  }
}

