import models.Calendar
import org.specs2.mutable._

import play.api.test._
import play.api.test.Helpers._

class CalendarSpec extends Specification {
"Calendar model" should {

  "be retrieved by id" in {

    val fakeApp = FakeApplication()
    running(fakeApp) {

      lazy val calendarId= Calendar.addCalendar(
        Calendar(subject="test",
          upAccount = "mytest",
          masterId = 1,
          calendarType = 1,
          isAllDayEvent = false,
          hasAttachment = false,
          category = "test",
          instanceType = 1,
        upName = "test" ))
      lazy val Some(calendar) = Calendar.getCalendar(calendarId.get)

      calendar.upAccount must equalTo("mytest")
    }
  }
}
}

[info] Calendar model should
[error] ! Fragment evaluation error
[error]     ThrowableException: play.api.test.Helpers$.play$api$http$HeaderNames$_setter_$ACCESS_CONTROL_ALLOW_ORIGIN_$eq(Ljava/lang/String;)V (TraversableLike.scala:194)
[error] play.api.http.HeaderNames$class.$init$(StandardValues.scala:195)
[error] play.api.test.Helpers$.<init>(Helpers.scala:16)
[error] play.api.test.Helpers$.<clinit>(Helpers.scala:111)
[error] CalendarSpec$$anonfun$1$$anonfun$apply$1.apply(CalendarSpec.scala:13)
[error] CalendarSpec$$anonfun$1$$anonfun$apply$1.apply(CalendarSpec.scala:10)
[error] play.api.test.Helpers$.play$api$http$HeaderNames$_setter_$ACCESS_CONTROL_ALLOW_ORIGIN_$eq(Ljava/lang/String;)V
[error] play.api.http.HeaderNames$class.$init$(StandardValues.scala:195)
[error] play.api.test.Helpers$.<init>(Helpers.scala:16)
[error] play.api.test.Helpers$.<clinit>(Helpers.scala:111)
[error] CalendarSpec$$anonfun$1$$anonfun$apply$1.apply(CalendarSpec.scala:13)
[error] CalendarSpec$$anonfun$1$$anonfun$apply$1.apply(CalendarSpec.scala:10)

