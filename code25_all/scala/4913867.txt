package test.ui {

import org.scalatest._
import matchers.ShouldMatchers
import ui._
import observer._

object ButtonObserverSpecification extends Spec {
  "A Button Observer should observe button clicks" in {
      val observableButton = new ObservableButton("Okay")
      val buttonObserver = new ButtonCountObserver
      observableButton.addObserver(buttonObserver)

      for (i <- 1 to 3) observableButton.click()
      buttonObserver.count should equal (3)
    }
  }
}

error: value in is not a member of java.lang.String
"A Button Observer should observe button clicks" in {

package ui {

abstract class Widget

class Button(val label: String) extends Widget {
  def click() = {
    println (label + " was clicked")
  }
}

}

package observer {

trait Subject {
  type Observer = {def receiveUpdate(subject: Any)}
  private var observers = List[Observer]()

  def addObserver(observer: Observer) = observers ::= observer

  def notifyObservers = observers foreach (_.receiveUpdate(this))
}

}

package ui {

import observer._

class ObservableButton(name: String) extends Button(name) with Subject {
  override def click() = {
    super.click()
    notifyObservers
  }
}

class ButtonCountObserver {
  var count = 0

  def receiveUpdate(subject: Any) = count += 1
}

}

package ui
import org.specs._
import observer._

object ButtonObserverSpec extends Specification {
  "A Button Observer" should {
    "observe button clicks" in {
      val observableButton = new ObservableButton("Okay")
      val buttonObserver = new ButtonCountObserver
      observableButton.addObserver(buttonObserver)

      for (i <- 1 to 3) observableButton.click()
      buttonObserver.count mustEqual 3
    }
  }
}

package test.ui {

import org.scalatest._
import matchers.ShouldMatchers
import ui._
import observer._
import org.scalatest.junit.JUnitRunner
import org.junit.runner.RunWith

@RunWith(classOf[JUnitRunner])
object ButtonObserverTest extends WordSpec with ShouldMatchers {
  "A Button Observer" should {
    "observe button clicks" in {
      val observableButton = new ObservableButton("Okay")
      val buttonObserver = new ButtonCountObserver
      observableButton.addObserver(buttonObserver)

      for (i <- 1 to 3) observableButton.click()
      buttonObserver.count should equal (3)
    }
  }
}
}

package test.ui {

import org.scalatest.WordSpec
import org.scalatest.matchers.ShouldMatchers
import ui._
import observer._

class ButtonObserverTest extends WordSpec with ShouldMatchers {
  "A Button Observer" should {
    "observe button clicks" in {
      val observableButton = new ObservableButton("Okay")
      val buttonObserver = new ButtonCountObserver
      observableButton.addObserver(buttonObserver)

      for (i <- 1 to 3) observableButton.click()
      buttonObserver.count should equal (3)
    }
  }
}
}

