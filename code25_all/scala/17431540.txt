value JObject is not a case class constructor, nor does it have an unapply/unapplySeq 

case JObject(JField("username", JString(s)) :: JField("email", Jstring(e)) :: Nil) => new NewUser(s, e, null, null)

import org.json4s._
import org.scalatra.json._
import org.specs2.mutable.Specification

case class NewUser(
    username: String, 
    email: String, 
    password: String, 
    confirm_password: String
)

object DataStore {
  val users = List(
      NewUser("yacomink", "yacomink.anteateaaaaar@yahoo.com", "aol123", "aol123"),
      NewUser("LadyAva", "lady_ava@excite.com", "aol456", "aol456"),
      NewUser("MoeLarryAndJesus", "moelarryandjesus@aol.com", "aol789", "aol789")
      )
}

object CustomSerialization extends Specification{
  import native.Serialization
  import native.Serialization.{read, write => swrite}
  import net.liftweb.json.JsonAST._
  import java.util.regex.Pattern
  import org.json4s.CustomSerializer

  class UserSerializer extends CustomSerializer[NewUser](format => (
      {
        case JObject(JField("username", JString(s)) :: JField("email", Jstring(e)) :: Nil) => new NewUser(s, e, null, null)
      },
      {
        case x: NewUser => JObject(JField("username", JString(x.username)) ::JField("email", JString(x.email)) :: Nil)
      }
      ))

  implicit val formats = native.Serialization.formats(NoTypeHints) + new UserSerializer   

  val i = new NewUser("Larry", "lmack@gmail.com", "lol123", "lol123")
  val ser = swrite(i)

  println(ser)
      }

