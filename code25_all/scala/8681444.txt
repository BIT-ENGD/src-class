trait Poked extends Actor {
  override def receive = {
    case Poke(port, x) => ReceivePoke(port, x)
  }

  def ReceivePoke(port: String, x: Any)
}

trait Peeked extends Actor {
  override def receive = {
    case Peek(port) => ReceivePeek(port)
  }

  def ReceivePeek(port: String)
}

val peekedpoked = actorRef(new Actor extends Poked with Peeked)

def receive = (Poked.receive: Receive) orElse (Peeked.receive: Receive) orElse ...

