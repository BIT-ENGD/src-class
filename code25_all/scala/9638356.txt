class Parent
class Sub extends Parent
class SubSub extends Sub

Condition[Sub] and Condition[Parent] and Condition[SubSub]
Condition[SubSub]
class Condition[-A<:AnyRef] {
  def and[R<:A, P>:R<:AnyRef](that:Condition[P]):Condition[R]=
    new AndCondition[R](this, that)
}

class AndCondition[-A<:AnyRef](left:Condition[_>:A], right:Condition[_>:A]) 
  extends Condition[A]

val a:AndCondition[SubSub] =
  new AndCondition(
    new AndCondition(
      new AndCondition(
        new Condition[Parent], 
        new Condition[Sub]), 
      new Condition[Parent]),
    new Condition[SubSub])

val b: Condition[SubSub] = 
   new Condition[Parent] and 
     new Condition[SubSub] and 
     new Condition[Sub]

val c: Condition[SubSub]=
  new Condition[Parent] and 
    new Condition[SubSub] and 
    new Condition[Sub] and 
    new Condition[Parent]

error: inferred type arguments
[com.solvedirect.test.SubSub,com.solvedirect.test.SubSub,com.solvedirect.test.Parent]
do not conform to method and's type parameter bounds 
[R <: Nothing,R <: R,P >: R <: AnyRef]

