class Foo(val items:List[String], val number:Int)

object FooEnough {
  def unapply(f:Foo):Option[(List[String], Int)] = if(f.number > 2) Some(f.items, f.number) else None
}

val foo = new Foo("a" :: "b" :: "c" :: Nil, 3)
val matches:String = foo match {
  case FooEnough("a" :: "b" :: "c" :: Nil, 3) => "first case"
  case "a" :: "b" :: "c" :: Nil FooEnough 4 => "second case"
}
//matches == "first case"

object FooSpectrum {
  def unapply(f:Foo):Option[(String, List[String], Int)] =
    if(f.number > 2) Some("zx", f.items, f.number) else None
}

foo match {
  case FooSpectrum("zx", "a" :: "b" :: "c" :: Nil, 3) => "first case" //compiles
  case "zx" FooSpectrum "a" :: "b" :: "c" :: Nil 4 => "second case" //doesn't compile
}

