scala> ( 0 to 10).toStream.map(i =>{println("bla" + i); -i})
bla0
res0: scala.collection.immutable.Stream[Int] = Stream(0, ?)

scala> class B(val a:Seq[Int]){println(a.tail.head)}
defined class B

scala> new B(res0)
bla1
-1
res1: B = B@fdb84e

class HazelSimpleResultSet[T] (col: Seq[T], comparator:Comparator[T]) extends HGRandomAccessResult[T] with CountMe
{
  val foo: Int = -1  // col of type Stream[T] already fully evaluated here.

  def count = col.size
  ....
}

    keyvalues.foldLeft(Stream.empty[KeyType]){ case (a, b) => ({ println("evaluating "+ b); unpack[KeyType](b)}) #:: a}

