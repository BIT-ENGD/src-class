 import scala.util.control.Exception._

 val cls = classManifest[T].erasure

 // Invoke special constructor if it's available. Otherwise use default constructor.
 allCatch opt cls.getConstructor(classOf[Project]) match {
   case Some(con) =>
     con.newInstance(project) // use constructor with one Project param
   case None =>
     cls.newInstance // just use default constructor
 };

 error: type mismatch;
    [scalac]  found   : java.lang.reflect.Constructor[_]
    [scalac]  required: java.lang.reflect.Constructor[_$1(in method init)] where
              type _$1(in method init)
    [scalac]     allCatch opt cls.getConstructor(classOf[Project]) match {
    [scalac]                                    ^
    [scalac] one error found

