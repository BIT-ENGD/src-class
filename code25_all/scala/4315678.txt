class Obj[M <: Maker]

class Maker {
  implicit val me: this.type = this
  def make[M <: Maker](implicit maker: M) = new Obj[M]
  def accept(obj: Obj[this.type]) = {...}
}

object M extends Maker {
  val a = make
}

M.accept(M.a)

type mismatch; found : com.test.Obj[object com.test.M] required: com.test.Obj[com.test.M.type]

object com.test.M
com.test.M.type
