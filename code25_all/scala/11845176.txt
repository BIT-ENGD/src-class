lazy val task = TaskKey[Unit]
lazy val setting = SettingKey[String]
config("dev")
config("stage")
config("prod")
build.sbt
setting
setting in stage := "foo"
task
>dev:task
setting
dev
>stage:task
setting
stage
task
setting := "default setting"

setting in stage := "stage setting"

setting in prod  := "prod setting"

import sbt._
import Keys._

object TaskBuild extends Build {
  val setting = SettingKey[String]("setting", "a simple string setting")

  val task = TaskKey[Unit]("task", "a simple task experiment")

  val taskTask = task <<= setting map { s: String =>
    println("Setting is: " + s)
  }

  lazy val dev = config("dev") describedAs("dev environment settings")
  lazy val stage = config("stage") describedAs("stage environment settings")
  lazy val prod = config("prod") describedAs("prod environment settings")

  lazy val root = Project(
    "project",
     file("."),
     settings = Defaults.defaultSettings ++ Seq(taskTask)
  )
  .configs(dev, stage, prod)
}

