package test

import org.scalatest.matchers.{MatchResult, Matcher, ShouldMatchers}

import scala.xml.NodeSeq
import org.scalatest.FunSpec

class MySpec extends FunSpec with ShouldMatchers with MyMatcher {

  describe("where is wrong?") {
    it("showOK") {
      val xml = <span>abc</span>
      xml should contn("b")
    }
  }
}

trait MyMatcher {

  class XmlMatcher(str: String) extends Matcher[NodeSeq] {
    def apply(xml: NodeSeq) = {
      val x = xml.toString.contains(str)
      MatchResult(
        x,
        "aaa",
        "bbb"
      )
    }
  }

  def contn(str: String) = new XmlMatcher(str)

}

[error] /Users/freewind/src/test/scala/test/MyMacher.scala:14: overloaded method value should with alternatives:
[error]   (beWord: MySpec.this.BeWord)MySpec.this.ResultOfBeWordForAnyRef[scala.collection.GenSeq[scala.xml.Node]] <and>
[error]   (notWord: MySpec.this.NotWord)MySpec.this.ResultOfNotWordForAnyRef[scala.collection.GenSeq[scala.xml.Node]] <and>
[error]   (haveWord: MySpec.this.HaveWord)MySpec.this.ResultOfHaveWordForSeq[scala.xml.Node] <and>
[error]   (rightMatcher: org.scalatest.matchers.Matcher[scala.collection.GenSeq[scala.xml.Node]])Unit
[error]  cannot be applied to (MySpec.this.XmlMatcher)
[error]       xml should contn("b")
[error]           ^
[error] one error found
[error] (test:compile) Compilation failed

name := "scalatest-test"

scalaVersion := "2.10.1"

version := "1.0"

resolvers ++= Seq("snapshots"     at "http://oss.sonatype.org/content/repositories/snapshots",
            "releases"        at "http://oss.sonatype.org/content/repositories/releases",
            "googlecode"      at "http://sass-java.googlecode.com/svn/repo"
            )

libraryDependencies += "org.scalatest" %% "scalatest" % "2.0.M5b" % "test"

