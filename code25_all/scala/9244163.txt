package my

abstract class Tree
case class Sum(l: Tree, r: Tree) extends Tree
case class Var(n: String) extends Tree 
case class Const(i: Int) extends Tree 

object TestTree {

  type Environment = String => Int

  def eval(t: Tree, env: Environment): Int = t match {
    case Sum(l, r) => eval(l, env) + eval(r, env)
    case Var(n) => env(n)
    case Const(v) => v
  }

  def main(args: Array[String]){

    val s : Sum = Sum(Var("x"), Const(10))
    // Then how to define a variable of type environment to pass it to the `eval` function:
    //eval(s, Environment) ??
  }
}

eval
