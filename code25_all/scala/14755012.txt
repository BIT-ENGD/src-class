def tweetJpeg = Action(parse.urlFormEncoded) { request =>
  val form = request.body
  val folder = form("folder").head
  val mediaType = form("type").head
  val photo = form("photo").head
  val path = folder + "/" + mediaType + "/" + photo
  val config = Play.current.configuration;
  val awsAccessKey = config.getString("awsAccessKey").get
  val awsSecretKey = config.getString("awsSecretKey").get
  val awsBucket = config.getString("awsBucket").get
  val awsCred = new BasicAWSCredentials(awsAccessKey, awsSecretKey)
  val amazonS3Client = new AmazonS3Client(awsCred)
  val obj = amazonS3Client.getObject(awsBucket, path)
  val stream = obj.getObjectContent()    

  val twitterKey = config.getString("twitterKey").get
  val twitterSecret = config.getString("twitterSecret").get
  val token = form("token").head
  val secret = form("secret").head
  val tweet = form("tweet").head
  val cb = new ConfigurationBuilder();
  cb.setDebugEnabled(true)
    .setOAuthConsumerKey(twitterKey)
    .setOAuthConsumerSecret(twitterSecret)
    .setOAuthAccessToken(token)
    .setOAuthAccessTokenSecret(secret)
  val tf = new TwitterFactory(cb.build())
  val twitter = tf.getInstance()
  val status = new StatusUpdate(tweet)
  status.media(photo, stream)
  val twitResp = twitter.updateStatus(status)

  Logger.info("Tweeted " + twitResp.getText())
  Ok("Tweeted " + twitResp.getText())
}

def facebookJpeg = Action(parse.urlFormEncoded) { request =>
  val form = request.body
  val folder = form("folder").head
  val mediaType = form("type").head
  val photo = form("photo").head
  val path = folder + "/" + mediaType + "/" + photo
  val config = Play.current.configuration;
  val awsAccessKey = config.getString("awsAccessKey").get
  val awsSecretKey = config.getString("awsSecretKey").get
  val awsBucket = config.getString("awsBucket").get
  val awsCred = new BasicAWSCredentials(awsAccessKey, awsSecretKey)
  val amazonS3Client = new AmazonS3Client(awsCred)
  val obj = amazonS3Client.getObject(awsBucket, path)
  val stream = obj.getObjectContent()

  val token = form("token").head
  val msg = form("msg").head
  val facebookClient = new DefaultFacebookClient(token)
  val fbClass = classOf[FacebookType]
  val param = com.restfb.Parameter.`with`("message", msg)
  val attachment = com.restfb.BinaryAttachment`with`(photo + ".png", stream)
  val fbResp = facebookClient.publish("me/photos", fbClass, attachment, param)

  Logger.info("Posted " + fbResp.toString())
  Ok("Posted " + fbResp.toString())
}

