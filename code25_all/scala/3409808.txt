val multimap = new java.util.HashMap[Int, java.util.List[String]]
multimap.put(1, Arrays.asList("One"))
multimap.put(2, Arrays.asList("Two", "Three"))

val mapOfLists: java.util.Map[Int, java.util.Set[String]] =
    asMap(multimap, Builder.SET)

trait Builder[C[_] <: java.util.Collection[_]]
{
    def create[V]: C[V]
}

object Builder
{
    val SET = new Builder[java.util.Set]()
    {
        def create[V]: java.util.Set[V] = new java.util.HashSet[V]
    }
}

def asMap[K, V, C[_] <: java.util.Collection[_]](
        multimap: java.util.Map[K, _ <: java.util.Collection[V]], builder: Builder[C]): java.util.Map[K, C[V]] =
{
    val result = new java.util.HashMap[K, C[V]]
    val iterator: Iterator[K] = multimap.keySet.iterator
    while (iterator.hasNext)
    {
        val key = iterator.next
        val collection: C[V] = builder.create[V]
        collection.asInstanceOf[java.util.Collection[V]].addAll(multimap.get(key))
        result.put(key, collection)
    }
    result
}

[ERROR] error: type mismatch;
[INFO]  found   : java.util.Collection[V]
[INFO]  required: java.util.Collection[_ <: _$2] where type _$2
[INFO]             collection.addAll(multimap.get(key))

