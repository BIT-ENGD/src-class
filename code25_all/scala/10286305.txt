private def parser: Parser[Any] = a ~ b ~ c ^^ {
    <do stuff here>
}

private def a: Parser[String] = "\"[^\"]*\"".r | "[^(),>]*".r

private def b: Parser[String] = opt("(" ~> ".*".r <~ ")") ^^ {
    case Some(y) => y.trim
    case None       => ""
}

private def c: Parser[String] = rep(".@" ~> "[^>.]*".r) ^^ (new String(_).trim)

test0
test1.@attr
"test2"
"test3".@attr
test4..
test5..@attr
"test6..".@attr
"test7.@attr".@attr
test8(icl>uw)
test9(icl>uw).@attr
"test10..().@"(icl>uw).@attr
test11(icl>uw(agt>uw2,obj>uw3),icl>uw4(agt>uw5))
test12(icl>uw1(agt>uw2,obj>uw3),icl>uw4).@attr1.@attr2
test13(agt>thing,obj>role>effect)

11:07:44.662 [main] DEBUG - Parsed: test8()
11:07:44.667 [main] ERROR - FAILURE parsing: test8(icl>uw) -- `)' expected but `i' found

