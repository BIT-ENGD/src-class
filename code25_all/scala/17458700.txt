import scala.reflect.runtime.universe._
import java.net.InetAddress
import scala.util.Try

type InetAddr = java.net.InetAddress

def tryMap[A](xs: Seq[Try[A]]) =
  Try(Some(xs.map(_.get))).
     getOrElse(None)

def toInet(address: String): Try[InetAddr] = {
  Try(InetAddress.getByName(address))
}


def stringToInet[A: TypeTag](xs: Seq[A]): Option[Seq[InetAddr]] = typeOf[A] match {
  case t if t =:= typeOf[String] => tryMap(xs.map(toInet)).getOrElse(None)
  case t if t =:= typeOf[InetAddr] => Some(xs)
  case _ => None
}

<console>:18: error: type mismatch;
 found   : String => scala.util.Try[InetAddr]
 required: A => ?
         case t if t =:= typeOf[String] => tryMap(xs.map(toInet)).getOrElse(None)

