case class Uno( name:String, age:Int, pets:List[String], stuff:Dos )
case class Dos( foo:String )

object Boom extends App {
    val ru = scala.reflect.runtime.universe
    val m = ru.runtimeMirror(getClass.getClassLoader)

    val u = Uno("Marcus",19,List("fish","bird"),Dos("wow"))

    println("NAME: "+unpack(u,"name")) // Works
    println("PETS: "+unpack(u,"pets")) // Works

    // ----- Goes Boom -------
    val dos = unpack(u,"stuff")
    println("Other: "+unpack(dos,"foo")) // Boom!
    // -----------------------

    // Get object value for named parameter of target
    def unpack[T]( target:T, name:String )(implicit man:Manifest[T]) : Any = {
        val im = m.reflect(target)
        val fieldX = ru.typeOf[T].declaration(ru.newTermName(name)).asTerm.accessed.asTerm
        im.reflectField(fieldX).get
    }

}

