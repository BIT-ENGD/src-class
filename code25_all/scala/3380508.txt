package lib
import scala.xml._
import java.net.URL
import net.liftweb.couchdb.{CouchDB, Database}
import dispatch.{Http, StatusCode}

/**
 * @author smix
 * 
 * Feeds manager
 */
object Manager {
 var db = List[Database]()
 /*
  * Initialize CouchDb databases
  */
 def init = {
  this.appendDb(new Database("myserver.com", 5984, "content"))
 }

 /*
  * Append a new database to the databases list
  */
 private def appendDb(database: Database) : Unit = {
  database :: db 
  // Strange exception if database has been already created
  /* try {
   this.db.head.createIfNotCreated(new Http())
  } catch {
   case e:java.lang.NoClassDefFoundError => {}
  } */
 }

 /*
  * Fetch articles from feed by url
  */
    def fetchItems(feedUrl: String): List[scala.xml.Elem] = { 
   val rssFeed = XML.load( (new URL(feedUrl)).openConnection.getInputStream )
   val items = rssFeed \ "channel" \ "item"

   val articles: List[scala.xml.Elem] = List()
   for(item <- items) {
      item :: articles
   }

   articles
    }

}

Exception in thread "main" java.lang.NoClassDefFoundError: lib/Manager$
 at collector$.main(collector.scala:5)
 at collector.main(collector.scala)
Caused by: java.lang.ClassNotFoundException: lib.Manager$
 at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
 at java.security.AccessController.doPrivileged(Native Method)
 at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
 at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
 at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
 at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
 ... 2 more

db
var db = List[Int]()
1 :: this.db
