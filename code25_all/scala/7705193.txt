case class StreamItem(name: String, path: String, level: String)

class StreamComet extends CometActor with CometListener {

    private var streams: List[StreamItem] = Nil 

    def registerWith = StreamServer

    override def lowPriority = {

        case v: List[StreamItem] => streams = v; reRender()

    }

    def render = {

        "li *" #> streams.map(stream =>

            ".name *" #> stream.name &
            ".stream [id]" #> stream.path.toString

        )

    }

}


object StreamServer extends LiftActor with ListenerManager {

    private var streams: List[StreamItem] = Nil

    def createUpdate = streams

    override def lowPriority = {

        case stream: String if stream.length > 0 =>

            streams :+= StreamItem("James", stream, "_1");
            updateListeners()

    }

}

