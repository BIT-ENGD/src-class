Array[Super]
Array[Sub]
class Super
class Sub extends Super
def wantsSuperArray(a: Array[Super]) { println(a.size) }

Sub
scala> val s = new Sub
s: Sub = Sub@2c9fa2fb

Array[Sub]
scala> val subArray = Array(s)
subArray: Array[Sub] = Array(Sub@2c9fa2fb)

Array
Array[Sub]
Array[Super]
Sub
Super
scala> wantsSuperArray(subArray)
<console>:13: error: type mismatch;
 found   : Array[Sub]
 required: Array[Super]
Note: Sub <: Super, but class Array is invariant in type T.
You may wish to investigate a wildcard type such as `_ <: Super`. (SLS 3.2.10)
              wantsSuperArray(subArray)
                              ^

wantsSuperArray()
Array[Sub]
scala> wantsSuperArray(Array(new Sub))
1

scala> wantsSuperArray(Array(s))
1

Array
scala> wantsSuperArray(Array[Sub](new Sub))
<console>:11: error: type mismatch;
 found   : Array[Sub]
 required: Array[Super]
Note: Sub <: Super, but class Array is invariant in type T.
You may wish to investigate a wildcard type such as `_ <: Super`. (SLS 3.2.10)
              wantsSuperArray(Array[Sub](new Sub))
                                        ^

wantsSuperArray
Array[Sub]
Array[Super]
Array
wantsSuperArray()
