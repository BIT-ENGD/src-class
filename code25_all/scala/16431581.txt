class SomeSuite extends Specification with DataTables {

// TODO: define context somehow???
// val context = new Before { println("BEFORE") }

"test 1" should {
  "do something" in {
    context |
    "col1" | "col2" |
    val1   ! val2   |
    val3   ! val4   |> {
      (a, b) => //some assertion with (a, b)
    }
  }
}
}

class SomeSuite extends Specification with DataTables {

  implicit val context = new Before { def before = println("BEFORE") }

  "test 1" should {
    "do something" in {
      "col1"  | "col2"  |
      val1    ! val2    |
      val3    ! val4    |> { (a, b) => 
        a must_== b // this is wrapped with context
      }
    }
  }
}

