object TestImplicits {
  class View
  implicit class RichView[A <: View](v: A) {
    def onClicked() = println(v + " was clicked")
  }
  implicit def intToView[A <: View](i: Int): A = ???
  implicit def intToRichView(id: Int): RichView[View] = ???
  1.onClicked()
}

<console>:20: error: type mismatch;
 found   : Int(1)
 required: ?{def onClickedd: ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method intToView in object TestImplicits of type [A <: TestImplicits.View]
(i: Int)A
 and method intToRichView in object TestImplicits of type (id: Int)TestImplicits
.RichView[TestImplicits.View]
 are possible conversion functions from Int(1) to ?{def onClickedd: ?}
                  1.onClickedd()
                  ^

onClicked
1.onClicked()
intToView(1).onClicked()
<console>:20: error: value onClicked is not a member of Nothing
                  intToView(1).onClicked()
                               ^

