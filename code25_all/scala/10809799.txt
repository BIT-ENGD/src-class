def crudUsers(operation: String) = Action(parse.json) { request =>
 (request.body).asOpt[User].map { jsonUser =>
  try {
    DBGlobal.db.withTransaction {
      val queryResult = operation match {
        case "create" =>
           UsersTable.forInsert.insertAll(jsonUser)
           Json.generate(Map("status" -> "Success", "message" -> "Account inserted"))

        case "update" =>
           val updateQ = UsersTable.where(_.email === jsonUser.email.bind).map(_.forInsert)
           println(updateQ.selectStatement)
           updateQ.update(jsonUser)
           Json.generate(Map("status" -> "Success", "message" -> "Account updated"))

        case "retrieve" =>
           val retrieveQ = for(r <- UsersTable) yield r
           println(retrieveQ.selectStatement)
           Json.generate(retrieveQ.list)

        case "delete" =>
           val deleteQ = UsersTable.where(_.email === jsonUser.email)
           deleteQ.delete
           Json.generate(Map("status" -> "Success", "message" -> "Account deleted"))
      }
      Ok(queryResult)
    }
  } catch {
    case _ =>
      val errMsg: String = operation + " error"
      BadRequest(Json.generate(Map("status" -> "Error", "message" -> errMsg)))
  }
}.getOrElse(BadRequest(Json.generate(Map("status" -> "Error", "message" -> "error"))))

For request 'GET /1/users' [Invalid Json]
