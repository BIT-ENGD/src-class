object Main {
    def main(args: Array[String]): Unit = {

        var calc = calculate( "" , _:List[Int])
        var values:List[Int] = List()

        if(args.size < 1) println("No arguments supplied") else{
            args collect {_ match{
                    case arg if arg.contains("-") => {
                            if(values.size>0){
                                calc(values)
                                values = List()}
                            calc = calculate( arg , _:List[Int])
                        }
                    case arg => {
                            try{
                                val value=arg.toInt
                                values = values ::: List(value)
                            }catch{case e:NumberFormatException=>println("\nError:Invalid argument:\""+arg+"\"\nCannot convert to Integer.\n")}
                    }
                }
            }
            calc(values)
        }
    }

    def sum(values:List[Int]) { println("The sum is:"+(values.foldLeft(0)((sum,value) => sum + value))) }

    def subtract(values:List[Int]) {
        val initial:Int = values(0)

        var total:Int = 0
        for(i <- 1 until values.size){
            total = total + values(i)
        }
        val diff:Int = initial - total
        println("The difference is:"+diff)
    }

    def calculate(operation:String,values:List[Int]) = operation match {
        case "-sum" => sum(values)
        case "-diff" => subtract(values)
        case _ => println("Default operation \"Sum\" will be applied");sum(values)
    }
}

