CanBuildFrom
A[B, ?]
A[C, D]
A
B
def firstAndLast[CC, A, That](seq: CC)(implicit asSeq: CC => Seq[A], cbf: CanBuildFrom[CC, A, That]): That = {
  val b = cbf(seq)
  b += seq.head
  b += seq.last
  b.result
}

List("abc", "def") map firstAndLast
List("abc", "def") map firstAndLast[String, Char, String]

CC
String
A
That
List("abc", "def") map firstAndLast[CC = String]

List("abc", "def") map firstAndLast[String, <guess>, <guess>]

