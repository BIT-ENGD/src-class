trait Heap {
  def addItem(item: Int): Heap
}

case class heap(n: Int,
                l: Heap,
                r: Heap ) extends Heap {
  val node: Int = n
  val left: Heap = l
  val right: Heap = r

  def addItem(item: Int): Heap = {
    if (item < node) {
      new heap(item,r.addItem(node),l)
    } else {
      new heap(node,l,r.addItem(node))
    }
  }
}

case class leaf extends Heap {
  def addItem(item: Int): Heap = {
    new heap(item,new leaf,new leaf)
  }
} 




object test extends Application {
  var a = new leaf
  a.addItem(5);
}


Exception in thread "main" java.lang.NoClassDefFoundError: Heap (wrong name: heap)

