  class Container[+T](val map: Map[Int, T] = Map.empty[Int, T]){
    def add[B >: T](i: Int, b: B) = new Container(map + (i->b))
//    lazy val freqs = (map.toList groupBy (x=>x._2) mapValues(_.size))
//    lazy val uniq = map.toSet
      lazy val keySet = map.keySet
  }

Set
Map
Set
lazy val freqs:Map[_ <: Any, Int] = 
  (map.toList groupBy (x=>x._2) mapValues(_.size))

lazy val uniqueValues = freqs.keySet

Set[T]
Set[Any]
freqs
keySet
Set[T]
