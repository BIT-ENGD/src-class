case class MyString(s: String) {}

implicit def string2mystring(x: String): MyString = new MyString(x)
implicit def mystring2string(x: MyString) = x.s

object Apply {
    def unapply(s: MyString): Option[String] = Some(s)
}

val Apply(z) = "a"  // error: scrutinee is incompatible with pattern type

String
MyString
string2mystring("a")
val Apply(y) = MyString("a")
