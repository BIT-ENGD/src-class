import scala.util.parsing.combinator._

class JSON extends JavaTokenParsers {
        def obj: Parser[Map[String, Any]] =
                "{"~> repsep(member, ",") <~"}" ^^ (Map() ++ _)

        def arr: Parser[List[Any]] =
                "["~> repsep(value, ",") <~"]"

        def member: Parser[(String, Any)] =
                stringLiteral~":"~value ^^
                        { case name~":"~value => (name, value) }

        def value: Parser[Any] = (
                obj
                | arr
                | stringLiteral
                | floatingPointNumber ^^ (_.toInt)
                | "null" ^^ (x => null)
                | "true" ^^ (x => true)
                | "false" ^^ (x => false)
                )
}

import java.io.FileReader
import scala23.JSON

class JSONTest extends JSON {
        def main(args: String) {
                val reader = new FileReader(args)
                println(parseAll(value, reader))
        }
}

class JSONTest extends JSON {
  def main(args: String) {
    val reader = new FileReader(args)
    val header = ("abc", "def")
//    println(parseAll(value, reader).map(addHeader(_, header)))
    println(parseAll(value, reader).map(addHeader(_.asInstanceOf[Map[String, Any]], header)))
  }
  def addHeader(xyz:Map[String, Any], header:(String, Any)):Map[String, Any] = {
    xyz.map {
      case (k, m:Map[String, Any]) => (k, addHeader(m))
      case e => e
    } + header
  }
}

