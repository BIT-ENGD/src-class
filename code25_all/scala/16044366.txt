trait A

trait B extends A

case class C extends B

trait Tester[-T] {def test (t : T) : Boolean}

object Tester{

  def test[T] (t : T)(implicit tester : Tester[T]) = tester.test(t)

  implicit def ATester = new Tester[A] {
    override def test (a : A) = true
  }

  implicit def BTester = new Tester[B] {
    override def test (b : B) = false
  }

}

val c = C()
Tester.test(c)

