import scalaz._
import Scalaz._

class Id[+A] (val value : A) { }

implicit object IdMonad extends Monad[Id] {
    override def pure[A](a : => A) = new Id(a)
    override def bind[A, B](a : Id[A], f : A => Id[B]) = f(a.value)
}

class ExtendedId[A] (value : A, val printer : A => String) extends Id[A](value) { }

ExtendedId
ExtendedId[A]
Id[A]
def increment1(v : ExtendedId[Int]) : Id[Int] = {
    for(v <- v) yield v + 1;
    //    ^
    //  error: could not find implicit value for parameter t:  scalaz.Functor[test.package.ExtendedId]
}

ExtendedId
Id[Int]
def asId[A](a : ExtendedId[A]) : Id[A] = a

def increment2(v : ExtendedId[Int]) {
    for(v <- asId(v)) yield v + 1;
}

asId
ExtendedId[A]
Id[A]
Id[A]
map
ExtendedId[A]
Id[A]
