sys addShutdownHook{
    logger.warn("SHUTTING DOWN...")
    // irrelevant logic here...
}

Runtime.getRuntime.addShutdownHook(ThreadOperations.delayOnThread{
        logger.warn("SHUTTING DOWN...")
        // irrelevant logic here...
    }
)

ThreadOperations.delayOnThread
object ThreadOperations {

    def startOnThread(body: =>Unit) : Thread = {
        onThread(true, body)
    }

    def delayOnThread(body: =>Unit) : Thread = {
        onThread(false, body)
    }

    private def onThread(runNow : Boolean, body: =>Unit) : Thread = {
        val t=new Thread {
            override def run=body
        }
        if(runNow){t.start}
        t
    }

    // more irrelevant operations...
}

object Gate extends App {
    val givenArgs = if(args.isEmpty){
                        Array("run")
                    }else{
                        args
                    }

    val jar = Main.getClass.getProtectionDomain().getCodeSource().getLocation().getFile;
    val dir = jar.dropRight(jar.split(System.getProperty("file.separator")).last.length + 1)
    val arguments = Seq("java", "-cp", jar, "boot.Main") ++ givenArgs.toSeq
    Process(arguments, new java.io.File(dir)).run();
}

