// Left list
def showTotalArea: CssBindFunc = {
    ".totalArea *" #> totalAreaList.map(values => 
        ".areaImage [src]" #> values(6) &
        ".areaName *" #> values(4) &
        ".areaComment *" #> values(5) &
        ".copy" #> ajaxButton(S.?("add"), () => doCopy(values(1), "new")) 
    )
}

// Right list
def liftForm(xhtml: NodeSeq): NodeSeq = {  
    var areaList = newOrderList.map(values =>{
        <li id={values(1)} class="items currentOrder">
            <table >
                <thead></thead>
                <tbody>
                    <tr>
                        <td class="listImage">
                            <img class="areaImage" src={values(6)}/>
                        </td>
                        <td >
                            <tr><p class="areaName">{values(4)}</p></tr>
                            <tr><p class="areaComment">{values(5)}</p></tr>
                        </td>
                        <td class="listCheck" >
                            {ajaxButton("delete", () => doConfirm(values(1)), "class" -> "button delete")}
                        </td>
                    </tr>       
                    <tr class = "auto">
                        <td></td>
                        <td class="listSelect" >
                            {
                            val it = ajaxRadio[String](radioList, Box.legacyNullTest(values(2)), doRadioChange(values(1), _)).toForm.grouped(4)
                            for(i <- it)yield(<tr>{i.flatMap(y => <td> {y} </td>)}</tr>)
                            }
                        </td>
                    </tr>                   
                </tbody>
            </table>
        </li>})
    areaList1 = areaList.toString   
    SHtml.ajaxForm(
    bind("list",xhtml,"areaList" -> <ul class="sortable">{areaList}</ul>)
    )
}

// save button
def showFormButton = {
    ".post" #> submit("save", doCompose) &
    ".cancel" #> submit("cancel", doCancel) &
    "#result" #> text("", result = _ )
}

// add button
def doCopy(areaId: String, areaType: String): JsCmd = {
    println("+++++++addArea: " + areaId)
    println("+++++++areaType: " + areaType)
    // check
    if (isExist(areaId)) {
        Alert("The selected area is already in the list.")
    } else {
    val addList = selectedList(totalAreaList, areaId)
    newOrderList = newOrderList:::List(addList)
    println("+++++++newOrderList: " + newOrderList)
    JsRaw("alert(’ButtonAdd clicked’);") &
    JsRaw("""$("liftForm").submit();""")            
    }
}

def selectedList(areaList: List[List[String]], areaId: String): List[String] = {
    var returnList: List[String] = Nil 
    areaList.map(values => 
        if (values(1) ==  areaId) {
            returnList = values
        }
    )
    return returnList
}

// delete button
def doConfirm(areaId: String): JsCmd = {
    Confirm("Are you sure to delete?", SHtml.ajaxInvoke(() => doDelete(areaId))._2.cmd)
}
def doDelete(areaId: String): JsCmd = {
    println("+++++++deleteArea: " + areaId)
    newOrderList.map(values => 
        if (values(1) ==  areaId) {
            newOrderList = newOrderList - values
        }
    )
    println("+++++++newOrderList: " + newOrderList)
    JsRaw("""$("liftForm").submit();""")            
}

// save button 
private def doCompose() {
    println("++++++newOrderList: " + newOrderList.toString)
    //save newOrderList to database
}

How to display the operation result without clicking save button?

