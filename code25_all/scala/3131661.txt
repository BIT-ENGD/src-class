this
def prepList[B >: A](prefix: PlayList[B]) : PlayList[B] =
  prefix.foldr(this: PlayList[B])((node, suffix) => suffix.prepNode(node))

B >: A
this
PlayList[A]
PlayList[B]
B >: A
A
node
B
prefix
f
foldr
B
foldr
suffix
this
PlayList[A]
B >: A
suffix.prepNode()
B
suffix.prepNode(node)
node
B
foldr
this
(node: B, suffix: PlayList[B])
suffix.prepNode(node)
"found: B, required: A"
sealed abstract class PlayList[+A] {
  import PlayList._
  def foldr[B](b: B)(f: (A, B) => B): B

  def prepNode[B >: A](b: B): PlayList[B] = nel(b, this)
  def prepList[B >: A](prefix: PlayList[B]): PlayList[B] =
    // need to specify type here explicitly
    prefix.foldr(this: PlayList[B])((node, suffix) => suffix.prepNode(node))

  override def toString = foldr("")((node, string) => node + "::" + string)
}

object PlayList {
  def nil[A]: PlayList[A] = Nil
  def nel[A](head: A, tail: PlayList[A]): PlayList[A] = Nel(head, tail)
  def nel[A](as: A*): PlayList[A] = as.foldRight(nil[A])((a, l) => l.prepNode(a))
}

case object Nil extends PlayList[Nothing] {
  def foldr[B](b: B)(f: (Nothing, B) => B) = b
}
case class Nel[+A](head: A, tail: PlayList[A]) extends PlayList[A] {
  def foldr[B](b: B)(f: (A, B) => B) = f(head, tail.foldr(b)(f))
}

foldr
(T)((U, T) => T)
U
T
foldr
T
this: PlayList[A]
suffix: PlayList[B]
B >: A
PlayList[B]
T == PlayList[B]
U
T
node
B
U == B
U == B
suffix
U == B
foldr
U == A
PlayList
PlayList[B]
T == PlayList[B]
U == B
foldr
B
PlayList[B]
foldr
prepNode
