val reportsWithCalculatedUsage = time("Calculate USAGE") {
  reportsHavingCalculatedCounter.flatten.flatten.toList.groupBy(_._2.product).mapValues(_.map(_._2)) mapValues { list =>
    list.foldLeft(List[ReportDataHelper]()) {
      case (Nil, head) =>
        List(head)
      case (tail, head) =>
        val previous = tail.head
        val current = head copy (
          usage = if (head.machine == previous.machine) head.counter - previous.counter else head.usage)
        current :: tail
    } reverse
  }
}

reportsHavingCalculatedCounter
val reportsHavingCalculatedCounter: 
 scala.collection.immutable.Iterable[scala.collection.immutable.IndexedSeq[scala.collection.immutable.Map[Strin
 g,com.agilexs.machinexs.logic.ReportDataHelper]]]
reportsHavingCalculatedCounter
ReportDataHelper
flatten.flatten
foldLeft
reverse
flatten
val reportsHavingCalculatedCounter2: Seq[ReportDataHelper] = time("Counter2") {
  val builder = new ArrayBuffer[ReportDataHelper](50000)
  var c = 0
  reportsHavingCalculatedCounter.foreach { v =>
    v.foreach { v =>
      v.values.foreach { v =>
        c += 1
        builder += v
      }
    }
  }
  println("Count:" + c)
  builder.result
}

Counter2 (15.075s)
v.values.foreach
