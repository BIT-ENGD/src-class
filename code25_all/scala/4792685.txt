 trait Solution {} //Immutable abstact class
 trait Listener(val modifier: Modifier) {
    def onChange(iSolution: Solution): Solution
 }
 trait Modifier { //Implementations use different descendants of Solution
    def addListener(listener: Listener)
    def emptySolution: Solution
    def transfrom1(iSolution: Solution): Solution //Downcast of argument canâ€™t be avoided in implementations of these
    def transfrom2(iSolution: Solution): Solution
 }
 class Listener1 extends Listener { //Should be independent from Solution concrete type. Current implentation meets this requirement by introducing downcasts in Modifier.
    val modifier: Modifier
    def onChange(iSolution: Solution) = modifier.transform1(modifier.transform2(iSolution)) // Some action involving solution transformations with modifier
 }

