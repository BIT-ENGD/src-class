trait T { type A }
trait GenFoo[A0, S <: T { type A = A0 }]
trait Foo[S <: T] extends GenFoo[S#A, S]

S <: T{type A = S#A}
-explaintypes
S <: T{type A = S#A}?
  S <: T?
  true
  S specializes type A?
    this.A = this.A?
      S = this.type?
      false
    false
  false
false

trait Foo[S <: T { type A = S#A } ] extends GenFoo[S#A, S]

Foo[S <: T]
S#A
S#A
A0
GenFoo
