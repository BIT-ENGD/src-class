def serveJson[T: JsonWriter](data: T) = {
  contentType = "text/json"
  data.toJson.prettyPrint
}

def serveExcel[T: ExcelWriter](data: T) = {
  contentType = "application/excel"
  data.toExcel.getBytes
}

// ExcelWriter.scala

package com.example.app.excel

import org.apache.poi.hssf.usermodel.HSSFWorkbook
import annotation.implicitNotFound

@implicitNotFound(msg = "Cannot find ExcelWriter type class for ${T}")
trait ExcelWriter[T] {
  def write(obj: T): HSSFWorkbook
}

object ExcelWriter {
  implicit def func2Writer[T](f: T => HSSFWorkbook): ExcelWriter[T] = new ExcelWriter[T] {
    def write(obj: T) = f(obj)
  }
}


// Imports.scala
package com.example.app.excel

import org.apache.poi.hssf.usermodel.HSSFWorkbook

object Imports {

  type ExcelWriter[T] = com.example.app.excel.ExcelWriter[T]
  implicit def pimpAny[T](any: T) = new AnyExcelPimp(any)
  private[excel] class AnyExcelPimp[T](any: T) {
    def toExcel(implicit writer: ExcelWriter[T]): HSSFWorkbook = writer.write(any)
  }

}

import cc.spray.json._
import excel.Imports._
serveJson
import excel.Imports._
import cc.spray.json._
serveExcel
