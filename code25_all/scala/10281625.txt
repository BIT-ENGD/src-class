object Outer {
   case class OuterCase(outerParam: Int)
   object Inner {
      case class InnerCase(innerParam: Int)
   }
}

import scala.tools.nsc.interpreter.ProductCompletion

object EncapsulatedCase extends App {
   val outer = Outer.OuterCase(1)
   println("outer: " + new ProductCompletion(outer).caseNames)

   val inner = Outer.Inner.InnerCase(2)
   println("inner: " + new ProductCompletion(inner).caseNames)
}

outer
inner
outer: List(outerParam)
inner: List()

InnerCase
OuterCase
outer
inner
scala
julien@minare:~/prog/testing$ scala -version
Scala code runner version 2.9.2 -- Copyright 2002-2011, LAMP/EPFL
julien@minare:~/prog/testing$ scala -cp target/scala-2.9.2/classes:/Users/julien/.sbt/boot/scala-2.9.2/lib/scala-library.jar:/Users/julien/.ivy2/cache/org.scala-lang/scalap/jars/scalap-2.9.2.jar:
/Users/julien/.sbt/boot/scala-2.9.2/lib/scala-compiler.jar org.example.EncapsulatedCase
outer: List(outerParam)
inner: List()

> scala-version
[info] 2.9.2
> sbt-version
[info] 0.11.2
> show external-dependency-classpath
[info] ArrayBuffer(Attributed(/Users/julien/.sbt/boot/scala-2.9.2/lib/scala-library.jar), Attributed(/Users/julien/.ivy2/cache/org.scala-lang/scalap/jars/scalap-2.9.2.jar), Attributed(/Users/julien/.sbt/boot/scala-2.9.2/lib/scala-compiler.jar))
[success] Total time: 0 s, completed Apr 24, 2012 9:20:21 AM
> run-main org.example.EncapsulatedCase
[info] Running org.example.EncapsulatedCase 
outer: List()
inner: List()

