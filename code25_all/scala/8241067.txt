abstract trait BaseProduct[T <: BaseProduct[T]] extends MongoRecord[T] with ObjectIdPk[T] {
  self:T =>
  def whatever
  ...
}

abstract trait SimpleType[T <: BaseProduct[T]] extends BaseProduct[T] {
  self:T =>
  val producttype = "product/simple"
}

abstract trait ConfigurableType[T <: BaseProduct[T],E <: SimpleType[E]] extends BaseProduct[T] {
  self: T =>
  val producttype = "product/configurable"
}

class ClothingProduct extends SimpleType[ClothingProduct] {
  def meta = ClothingProduct
}

class ConfigurableClothing extends ConfigurableType[ConfigurableClothing,ClothingProduct] {
  val childmeta = ClothingProduct
  val configurableFields = List(color,size)
  def meta = ConfigurableClothing
}

object Cart extends SessionVar[List[CartItem]](List()) {
  def addProduct(product:SimpleType[_],quantity:Int = 1) = {
    this.get.partition(_.product.id.is == product.id.is) match {
      case (Nil,xs) => this.set(CartItem(product,quantity) :: xs)
      case (x,xs) => this.set(CartItem(product,x.head.quantity + quantity) :: xs)
    }
  }
}

case class CartItem(product:SimpleType[_], quantity:Int)  {
  def lineTotal:Double = quantity * product.price.is
}

def addBasketLink(prod:BaseProduct[_]) = {
prod match {
  case x:SimpleType[_] => Cart.addProduct(x)
  case _ => S.notice("Sorry not possible to add to Basket")
}

