case class ChatMessage(name: String, text: String)

class ChatComet extends CometActor with CometListener {

    private var messages: List[ChatMessage] = Nil 

    def registerWith = ChatServer

    override def lowPriority = {
        case v: List[ChatMessage] => messages = v; reRender()
    }

    def render = {  
        "li *" #> messages.map(message =>   
            ".name *" #> message.name &
            ".text *" #> message.text           
        )       
    }   
}

object ChatServer extends LiftActor with ListenerManager {

    private var messages: List[ChatMessage] = Nil

    def createUpdate = messages

    override def lowPriority = {
        case message: String if message.length > 0 =>
            messages :+= ChatMessage("Anon", message);
            updateListeners()   
    }
}

case class StreamItem(name: String, path: String, level: String)

class StreamComet extends CometActor with CometListener {

    private var streams: List[StreamItem] = Nil 

    def registerWith = StreamServer

    override def lowPriority = {
        case v: List[StreamItem] => 
            streams = v;
            reRender();
          partialUpdate(Call("STREAMMOD.stream_view.add_stream({ path : '" + streams.reverse(0).path + "', level : '_1'})"));   
    }

    def render = {
        "li *" #> streams.map(stream =>
            ".name *" #> stream.name.toString &
            ".stream [id]" #> stream.path.toString  
        )
    }
}

object StreamServer extends LiftActor with ListenerManager {

    private var streams: List[StreamItem] = Nil

    def createUpdate = streams

    override def lowPriority = {    
        case stream: String if stream.length > 0 =>     
            streams :+= StreamItem("James", stream, "_1");
            updateListeners()       
    }
}

