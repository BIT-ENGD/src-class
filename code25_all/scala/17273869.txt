Any
Any
CallbackNode
Any
A
trait Graph[N] {
  var nodes: List[N]
  var edges: List[Edge[N]]

  def register(node: N) { nodes = node :: nodes }
  def dependants(node: N): Seq[N] = { ... }
}

object MyGraph with Graph[CallbackNode[Any]] {
  ...
}

class CallbackNode[+A](getter: => A) {
  var cache: Option[Any]
  MyGraph.register(this)

  def onChange(callback: Any => Unit) { ... }
  def update() {
    val v = getter
    storeInCache(v)
    dependants.foreach { n => n.notify() }
    callbacks.foreach { c => c(v) }
  }

  ...
}

