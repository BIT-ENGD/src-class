abstract class IntQueue {
  def get(): Int
  def put(x: Int)
}

import scala.collection.mutable.ArrayBuffer
class BasicIntQueue extends IntQueue {
  private val buf = new ArrayBuffer[Int]
  def get() = buf.remove()
  def put(x: Int) { buf += x }
}

//class BasicIntQueue ...

  override def get() = buf.remove()
  override def put(x: Int) { buf += x }

trait Doubling extends IntQueue {
  abstract override def put(x: Int) { super.put(2 * x) }
}
class MyQueue extends BasicIntQueue with Doubling

  abstract override def put(x: Int) { super.put(2 * x) } 

  abstract override def put(x: Int) { 2 * x } 

BasicIntQueue with Doubling
