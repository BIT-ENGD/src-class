def update(id: Long) = CORSAction { implicit request =>
  request.body.asJson.map { json =>
    json.asOpt[Wine].map { wine =>
      wine.copy(id=Id(id)).update.fold(
        errors => JsonBadRequest(errors),
        wine => Ok(toJson(wine).toString)
      )
    }.getOrElse       (JsonBadRequest("Invalid Wine entity"))
  }.getOrElse         (JsonBadRequest("Expecting JSON data"))
}

object WineFormatter {

  implicit object JsonWineFormatter extends Format[Wine] {

    def writes(o: Wine): JsValue = {
      toJson( Map(
        "id"          -> toJson(o.id),
    [...]

    def reads(j: JsValue): Wine = {
      Wine(
        id = (j \ "id").as[Option[Pk[Long]]] 
    [...]

def parse[T](implicit request: Request[AnyContent]): Option[T] = {
  request.body.asJson.map { json =>
    json.asOpt[T].map { entity =>
      entity
    }
  }
}

import play.api.libs.json.JsValue
type EntityWithJsonFormatter[T] = T {def reads(j: JsValue): T}

def parse[T: EntityWithJsonFormatter](request: Request[AnyContent]): Option[T] = {
  request.body.asJson.map { json =>
    json.asOpt[T].map { entity =>
      entity
    }
  }
}

