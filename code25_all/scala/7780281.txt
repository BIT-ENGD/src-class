sealed abstract class AST[T <: AST[T]] {
    def child : List[T] ;
}

case class LeafAST[T <: AST[T]]( x : Int ) extends AST[T] {
    def child = Nil 
}

case class BranchAST[T <: AST[T]]( left : T, right : T ) extends AST[T] {
    def child = left :: right :: Nil
}

def countLeaves[T <: AST[T]]( x : AST[T]) : Int = x match {
    case LeafAST( x ) => 1
    case BranchAST( left, right ) => countLeaves[T](left) + countLeaves[T](right) 
}

sealed
