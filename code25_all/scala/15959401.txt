object TestOp {

  class SafeDereference[A](obj: A) {
    def ?[B >: Null](function: A => B): B = if (obj == null) null else function(obj)
  }
  implicit def safeDereference[A](obj: A) = new SafeDereference(obj)

  class C { 
    def getValue: Int = 0                     
  }

  def main(args: Array[String]) {
    val c = new C
    val x:Int = c ? (_.getValue)
  }
}

[error] TestOp.scala:14: type mismatch;
[error]  found   : Any
[error]  required: Int
[error]     val x:Int = c ? (_.getValue)
[error]                   ^
[error] one error found
[error] {file:/home/mmalak/streaming-demo/}default-ae36bd/compile:compile: Compilation failed

object TestOp {

  class SafeDereference[A](obj: A) {
    def ?[B >: Null](function: A => B): B = if (obj == null) null else function(obj)
  }
  implicit def safeDereference[A](obj: A) = new SafeDereference(obj)

  class C { 
    def getValue: Int = 0                     
  }

  def main(args: Array[String]) {
    val c:C = null
    val x = (c ? (_.getValue)).asInstanceOf[java.lang.Integer].asInstanceOf[Int]
    println("x="+x)
  }
}

x=0

