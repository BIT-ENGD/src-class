&>
through
Enumerator[String]
Enumerator[Int]
val toInt: Enumeratee[String,Int] = Enumeratee.map[String]{ s => s.toInt }
val ints: Enumerator[Int] = strings &> toInt

Enumeratee.grouped
Array[Byte]
Enumerator.fromFile
Enumerator.fromStream
Array[Byte]
Enumerator[String]
'\n'
Array[Byte]
Array[Byte]
iter: Iteratee[Array[Byte], T]
Enumerator[Array[Byte]]
Enumerator[T]
iter
import play.api.libs.iteratee._
type AB = Array[Byte]

def takeWhile(pred: Byte => Boolean): Iteratee[AB, AB] = {
  def step(e: Input[AB], acc: AB): Iteratee[AB, AB] = e match {
    case Input.EOF => Done(acc, Input.EOF)
    case Input.Empty => Cont(step(_, acc))
    case Input.El(arr) =>
      val (taking, rest) = arr.span(pred)
      if (rest.length > 0) Done(acc ++ taking, Input.El(rest)) 
      else Cont(step(_, acc ++ taking)) 
  }
  Cont(step(_, Array()))
}

val line = for {
  bytes <- takeWhile(b => !(b == '\n' || b == '\r'))
  _     <- takeWhile(b =>   b == '\n' || b == '\r')
} yield bytes

Ok.stream(Enumerator.fromFile(filename) &> chunkBy(line)).as("text/plain")

