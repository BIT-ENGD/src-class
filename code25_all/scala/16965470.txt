class MyMapper extends Mapper[Object,Text,Text,IntWritable] {
    val one = new IntWritable(1)
    val word = new Text

    override def map(key:Object, value:Text, context:Mapper[Object,Text,Text,IntWritable]#Context)  {
        context.write(word, one)
    }
}

object WordCount {

    def main(args:Array[String]):Int = {
        val conf = new Configuration()
        val job = new Job(conf, "word count")

        job.setJarByClass(classOf[MyMapper])
        job.setMapperClass(classOf[MyMapper])
        job.setNumReduceTasks(0)
        job.setOutputKeyClass(classOf[Text])
        job.setOutputValueClass(classOf[IntWritable])
        FileInputFormat.addInputPath(job, new Path(args(0)))
        FileOutputFormat.setOutputPath(job, new Path((args(1))))
        if (job.waitForCompletion(true)) 0 else 1
    }

}

