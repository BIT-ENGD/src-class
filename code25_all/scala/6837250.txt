class UnmatchablePlugin(val global: Global) extends Plugin {
  val name = "unmatchable-check-gen"
  val description = "marks a class unmatchable"
  val components = List[PluginComponent](UnmatchableComponent)

  private object UnmatchableComponent extends PluginComponent with Transform {
    val global: UnmatchablePlugin.this.global.type = UnmatchablePlugin.this.global
    val runsAfter = List("parser")
    // Using the Scala Compiler 2.8.x the runsAfter should be written as below
    // val runsAfter = List[String]("parser");
    val phaseName = UnmatchablePlugin.this.name

    def newTransformer(unit: global.CompilationUnit) = UnmatchableTransformer

    object UnmatchableTransformer extends global.Transformer {
      override def transform(tree: global.Tree) = {
        import global._

        tree match {
          case cd @ global.CaseDef(global.Bind(_, global.Typed(exp,tpt)) , _, _) => {

            //Need to turn tpt.tpe.sym into a ClassDef
            println("sym: " + tpt.tpe.sym)
            tree
            }
          case t => super.transform(t)
        }
      }
    }
  }
}

