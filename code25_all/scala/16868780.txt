val p = for {
  pr <- Future { ProviderGenerator.generate(content) }
  c <- Future { ModelGenerator.generate(content) }
} yield(pr, c)

Async {
  if (p.isCompleted)
    println("Futures completed")
  p.onSuccess({
    case (pr: ActionResult, c: ActionResult) => {
      response.add(pr)
      response.add(c)
      Ok(Json.toJson(response))
    }
  })
  p onFailure {
    case _ => println("It failed")
  }
  p.map {
    case (pr: ActionResult, c: ActionResult) => {
      println("I am in case")
      response.add(pr)
      response.add(c)
      Ok(Json.toJson(response))
    }
    case _ => {
      println("I am in else case")
      Ok(Json.toJson(response))
    }
  }
}

