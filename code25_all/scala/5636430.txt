Fruit
Orange
Apple
abstract class Fruit
class Orange extends Fruit
class Apple extends Fruit
write
Orange
Apple
trait Writer[T] {def write(t:T)}

implicit object AppleWriter extends Writer[Apple] {
   def write(a:Apple) {println("I am an apple!")} 
}

implicit object OrangeWriter extends Writer[Orange] {
   def write(o:Orange) {println("I am an orange!")} 
}

def write[T](t:T)(implicit w:Writer[T]){w.write(t)}
writeFruits
def writeFruits(fruits:List[Fruit]) {for (fruit <- fruits) write(fruit)}
writeFruits
write[Apple]
write[Orange]
fruit
writeFruits
writeFruits
