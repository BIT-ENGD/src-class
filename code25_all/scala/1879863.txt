import scala.actors.Actor._;
import scala.actors.Actor;

case class Request(val s:String);

case class Message(val s:String);

class Connection  {
  private val act:Actor = actor {
     loop {
      react {
        case m:Message =>  receive { case r:Request => reply { m } }
      } 
    }
}

  def getNextResponse(): Message = {
    return (act !? new Request("get")).asInstanceOf[Message];
  }

  //this would call the network layer and send something over the wire
  def doSomething() {
    generateResponse();
  }

  //this is simulating the network layer getting some data back 
  //and sending it to the appropriate Connection object
  private def generateResponse() {
   act ! new Message("someData");
   act ! new Message("moreData");    
   act ! new Message("even more data");
  }

}


object runner extends Application {
 val conn = new Connection(); 
    conn.doSomething();
    println( conn.getNextResponse());
    println(conn.getNextResponse());
    println(conn.getNextResponse());
}

