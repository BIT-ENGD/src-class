Logger log = LoggerFactory.getLogger( getClass() );
log.debug( "Hello, {}.  The current time is {}", "robert", new Date() );

import play.api._
import play.api.mvc._
import org.slf4j.LoggerFactory

object Application extends Controller {
  val log: org.slf4j.Logger = LoggerFactory.getLogger(getClass())

  def hb = Action {
    val message = makeMessage()
    // COMPILER HATES THIS:  ambiguous reference compiler error here
    log.info("Hello {}.  The current time is {}", "robert", new java.util.Date() )
    Ok(message)
  }
  def makeMessage(): String = { return "stuff" }
}

[dm2-server] $ compile
[info] Compiling 2 Scala sources to /Users/bobk/work/dm2-server/target/scala-2.10/classes...
[error] /Users/bobk/work/dm2-server/app/controllers/Application.scala:16: ambiguous reference to overloaded definition,
[error] both method info in trait Logger of type (x$1: String, x$2: <repeated...>[Object])Unit
[error] and  method info in trait Logger of type (x$1: String, x$2: Any, x$3: Any)Unit
[error] match argument types (String,String,java.util.Date)
[error]     log.info("Hello {}.  The current time is {}", "robert", new java.util.Date() )
[error]         ^
[error] one error found
[error] (compile:compile) Compilation failed
[error] Total time: 1 s, completed Jun 6, 2013 10:54:41 AM

