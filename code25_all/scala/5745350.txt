case class Post(msg: String)

object Client extends Application {
  val client = new ClientRemote
  client.sendMessage
}

class ClientRemote extends Actor {
  val server = select(Node("127.0.0.1", 9010), 'name) //' or server IP

  def sendMessage(): Unit = {
    server ! Post("Hello!")
  }

  def act() {
    // do something
  }
}

case class Post(msg: String)

object Server extends Application {
  val server = new ServerRemote
  server.start
}

class ServerRemote extends Actor {
  def act() {
    alive(9010)
    println("server is started!")
    register('name, self)                  //' register to port
    loop {
      react {
        case Post(msg) => println(msg)
      }
    }
  }
}

