List(a, b)
List()
List(a, b, b, c)

List(a)
List(b)
List(a, b, b, c)

package scalatest;

public class JStringHolder {
String s = null;

public JStringHolder(String newString){
    s = newString;
}

@Override
public String toString() {
    return s;
}

@Override
public boolean equals(Object obj) {
    System.out.println("SHEQ " + this.s + " AND " + ((JStringHolder)obj).s + " " + this.s.equals(((JStringHolder)obj).s));
    return this.s.equals(((JStringHolder)obj).s);
}
}

package scalatest

object ListTest {

  trait AbstractTest 
  case class Test(stringHolder: scalatest.JStringHolder) extends AbstractTest {
    override def toString = stringHolder.toString()
    override def equals(ot: Any) : Boolean = {
      return stringHolder.equals(ot.asInstanceOf[Test].stringHolder)
    }

  }

  def main(args : Array[String]) : Unit = {
    val l1 = List(Test(new JStringHolder("a")), Test(new JStringHolder("b")))
    val l2 = List(Test(new JStringHolder("b")), Test(new JStringHolder("c")))
    println (l1.diff(l2))
    println (l1.intersect(l2))
    println (l1.union(l2))
  }
}

