trait Reactive {

  type Condition = () => Boolean
  type Reaction = (Condition) => Unit

  var reactions = Map[Condition, Reaction]()

  def addReaction(c: Condition, r: Reaction) { reactions += (c -> r) }

  def addReactions(rs: List[Tuple2[Condition, Reaction]]) {
    for(r <- rs) r match { case(condition, reaction) => addReaction(condition, reaction) }
  }


  def updateReactive() {
    for(reaction <- reactions) reaction match {
      case (c, r) => r(c)
    }
  } 
}

addReactions()
addReactions(List(
(() => UserInput.lastInput.isKeyHit('g'), () => (is: Boolean) => activateDevice(0))
))

Reactive
