xml.Node
import xml._

def paths(node: Node): Set[String] = {
  def inner(base: String, node: Node): Set[String] = {
    if (node.isInstanceOf[Elem]) {
      val newBase = "%s/%s".format(base, node.label)
      val selfAndChildren = node.child.flatMap(
        inner(newBase, _)).toSet.asInstanceOf[Set[String]] + newBase
      val attributes = node.attributes.map(a => 
        "%s/@%s".format(newBase, a.key)).toSet.asInstanceOf[Set[String]]
      selfAndChildren ++ attributes
    } else Set.empty[String]
  }
  inner("", node)
}

scala> val x = <a><b z="true"><c>3</c></b></a>
x: scala.xml.Elem = <a><b z="true"><c>3</c></b></a>

scala> paths(x)                               
res1: Set[String] = Set(/a/b/c, /a/b, /a/b/@z, /a)

toSet
Element
isInstanceOf[T]
