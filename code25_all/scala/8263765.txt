def findResult[A, B](t: Traversable[Function1[A, B]], value: A, p: B => Boolean): Option[B] = {
  var result: Option[B] = None
  breakable {
    for (e <- t) {
      val r = e(value)
      if (p(r)) { result = Some(r); break }
    }
  }
  result
}


// test
val f1 = (s: String) => if (s == "a") "aa" else null
val f2 = (s: String) => if (s == "b") "bb" else null
val l = List(f1, f2)

findResult(l, "b", (v: Any) => v != null) must equal(Some("bb"))

