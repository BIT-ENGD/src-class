class MyCaseSpec extends Spec with ShouldMatchers{
    describe("The Thingy"){
        it("should work"){
            val eventListener = TestProbe()

            val myStuffUnderTest = Actor.actorOf(new ComplexActor(eventListener.ref)).start();
            myStuffUnderTest ! "Start"

            val eventMessage = eventListener.receiveOne(10.seconds).asInstanceOf[SomeEventMessage]
            eventMessage.data should be ("Result")
        }

    }
}

[akka:event-driven:dispatcher:global-11] [LocalActorRef] Actor has not been started, you need to invoke 'actor.start()' before using it
akka.actor.ActorInitializationException: Actor has not been started, you need to invoke 'actor.start()' before using it
[Gamlor-Laptop_c15fdca0-219e-11e1-9579-001b7744104e]
at akka.actor.ScalaActorRef$class.$bang(ActorRef.scala:1399)
at akka.actor.LocalActorRef.$bang(ActorRef.scala:605)
at akka.mobile.client.RemoteMessaging$RemoteMessagingSupervision$$anonfun$receive$1.apply(RemoteMessaging.scala:125)
at akka.mobile.client.RemoteMessaging$RemoteMessagingSupervision$$anonfun$receive$1.apply(RemoteMessaging.scala:121)
at akka.actor.Actor$class.apply(Actor.scala:545)
....

   protected def receive = {
      case msg: MaximumNumberOfRestartsWithinTimeRangeReached => {
        val lastException = msg.getLastExceptionCausingRestart
        faultHandling ! ConnectionError(lastException, messages.toList, self) // < Line 125. The faultHandling is the TestProbe actor
        become({
            // Change to failure-state behavior
          }
    // Snip

