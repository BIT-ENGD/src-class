case class Post(title: String,
    content: String,
    created: String,
    lastUpdate: String,
    writer: Long,
    id: Long = 0)

def create(title: String, content: String, userId: Long) = {
  DB.withConnection { implicit connection =>
    SQL("INSERT INTO post (title, content, created, writer) VALUES ({title}, {content}, NOW(), {writer})")
        .on(
          'title -> title,
          'content -> content,
          'writer -> userId).executeUpdate()
}

val postForm = Form(
  tuple(
    "title" -> nonEmptyText,
    "content" -> nonEmptyText))

userId
postForm
postForm.bindFromRequest.fold(
  formWithErrors => BadRequest(views.html.post.newPost(formWithErrors)),
    newPost => {
      try {
        val userId = request.session.get("id").getOrElse("0")
        models.Post.create(newPost._1, newPost._2, userId.toLong)
      } catch {
        case e => BadRequest(views.html.post.newPost(postForm.fill(newPost)))
      }
    Redirect(routes.Application.index)
})

try-catch
BadRequest
