val caller = serviceClient.newDoSomething()
val request = DoSomethingRequest(...)

val response = caller.call(request)

DoSomethingResponse
caller.call
Request => Response
class ServiceAPI {
    val client = Service.getDefaultClient

    def serviceCall[Req, Resp](auth: String, caller: Req => Resp)
                              (func: Req => Unit)(implicit m:Manifest[Req]):Resp = {

        val request = m.erasure.newInstance.asInstanceOf[Req]
        request.setAuth(auth)

        func(request)

        caller(request)
    }
}

serviceCall(myAuth, client.newEventCall.call(_)) {
    _.setFoo("foo") // On request
    _.setBar(2) // On request
}

client.newEventCall.call(_)
Req
Resp
error: missing parameter type for expanded function ((x$4) => client.newEventCall.call(x$4))

serviceCall(myAuth, client.newEventCall.call(_:EventRequest)) { ... }

