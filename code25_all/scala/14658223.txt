class A {
  def foo() {
    println("A.foo")
  }
}

class B {
  def foo() {
    println("B.foo")
  }
}

foo()
type Fooable = {
  def foo()
}

trait Q extends Fooable {
  override def foo() {
    println("before super.foo")
    super.foo()
    println("after super.foo")
  }
}

(new A with Q).foo()
(new B with Q).foo()    

error: class type required but AnyRef{def foo(): Unit} found trait Q extends Fooable {

java.sql.Connection.close()
java.io.Closeable.close()
android.app.Activity.onDestroy()
android.app.Service.onDestroy()
