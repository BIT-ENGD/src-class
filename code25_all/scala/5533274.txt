trait Version
trait KCtx[V <: Version]
type Ctx = KCtx[_ <: Version]
trait Cursor { def t[T](fun: Ctx => T): T }
trait WorldFactory {
  def apply[C1 <: Ctx, A](implicit c: C1): World[C1, A]
}
trait World[C1 <: Ctx, A] {
  def state(implicit c: C1): Option[State[C1, A]]
  def state_=(s: Option[State[C1, A]])(implicit c: C1): Unit
}
trait StateFactory {
  def apply[C1 <: Ctx, A](v: A)(implicit c: C1): State[C1, A]
}
trait State[C1 <: Ctx, A] { def v: A }

w.state_=
def test1(wf: WorldFactory, sf: StateFactory, csr: Cursor): Unit =
  csr.t { implicit c =>
    val w   = wf.apply
    val s   = sf(22)
    w.state = Some(s)
  }

found: State[KCtx[...],Int] -- required State[KCtx[...],Nothing]
def test2(wf: WorldFactory, sf: StateFactory, csr: Cursor): Unit =
  csr.t { implicit c =>
    val w   = wf.apply[Ctx, Int]
    val s   = sf(22)
    w.state = Some(s)
  }

found: State[KCtx[_$1],Int] -- required State[Ctx,Int]
def test3(wf: WorldFactory, sf: StateFactory, csr: Cursor): Unit = {
  def helper[C1 <: Ctx](implicit c: C1): Unit = {
    val w   = wf.apply[C1, Int]
    val s   = sf(22)
    w.state = Some(s)
  }
  csr.t(helper(_))
}

def
csr.t
test2
c
c.type
KCtx[_ <: Version]
Ctx
csr.t
WorldFactory.apply
Nothing
implicit c
wf.apply[???, Int]
test3
