def setUser() = Action(parse.json) {
  implicit request =>
    val id = (request.body \ "id").as[String]
    val username = (request.body \ "username").as[String]
    val previousURI = request.session.get("previousURI") match {
      case Some(x) => x
      case None => "/"
    }
    Ok(previousURI).withSession(
      "id" -> id,
      "username" -> username
    )
}

case class User(id: Option[String], username: Option[String])

case class Context(user: User, request: Request[AnyContent])
  extends WrappedRequest(request)

trait Auth {

  def CheckLogin(f: Context => Result) = {

    Action { request =>
      request.session.get("username").map { token =>
        // username? yes continue...
        val id = request.session.get("id")
        val username = request.session.get("username")
        f(Context(new User(id, username), request))
      }.getOrElse {
        // no redirect to login
        Results.Redirect(routes.Application.login).withSession(
          "previousURI" -> request.uri
        )
      }

    }

  }

}

type mismatch; found : play.api.mvc.BodyParser[play.api.libs.json.JsValue] required: controllers.Context => play.api.mvc.Result

