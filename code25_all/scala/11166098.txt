object X
def f(e: Either[Int, X.type]) = e match {
  case Left(i) => i
  case Right(X) => 0
}

warning: match may not be exhaustive.
It would fail on the following input: Right(<not X>)

error: pattern type is incompatible with expected type;
 found   : object X
 required: X.type
           case Right(X) => 0

