scala.Enumeration
object EnumerationTypes {

  class EnumerationProcessor[E <: Enumeration](enum: E, value: E#Value) {
    def process: E#Value = {
      value
    }
  }

  object Enum extends Enumeration {
    type EnumValue = Value

    val a = Value(1, "a")
    val b = Value(2, "b")
  }

  case class Obj(val flag: Enum.EnumValue)

  def main(args: Array[String]) {
    val processor = new EnumerationProcessor(Enum, Enum.a)
    val obj = Obj(processor.process)
  }
}
error: type mismatch;
 found   : EnumerationTypes.Enum#Value
 required: EnumerationTypes.Enum.EnumValue
    val obj = Obj(processor.process)
object EnumerationTypesOk {

  class EnumerationProcessor[E <: Enumeration](enum: E, value: E#Value) {
    def process: E#Value = {
      value
    }
  }

  class Enum extends Enumeration {
    type EnumValue = Value

    val a = Value(1, "a")
    val b = Value(2, "b")
  }
  object Enum extends Enum

  case class Obj(val flag: Enum#EnumValue)

  def main(args: Array[String]) {
    val processor = new EnumerationProcessor(Enum, Enum.a)
    val obj = Obj(processor.process)
  }
}
value
enum.EnumValue
