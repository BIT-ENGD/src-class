abstract class OuterClass
{
    class InnerClass extends Actor
    {
        loop
        {
            react
            {
                case m: T => someFunction(m)
            }
        }

        def someFunction(m: T)
        {
            ...search function map for specific function...
            specificFunction()
        }

        ...extra methods here...
    }

    var functionmap=scala.sollection.mutable.Map.empty[String,()=>String]
    var actorpool: ArrayBuffer[Actor]=new ArrayBuffer(0)

    def main(args: Array[String])
    {
        ...create X actors and add them to the pool...
        populatefunctionmap
    }

    def populatefunctionmap() //defined elsewhere
}

class RunMe extends OuterClass
{
    def populatefunctionmap()
    {
        ...add some functions to the map...
    }
}

functionmap
this
RunMe
self
not found: value self
