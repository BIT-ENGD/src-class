Animal[A <: String]
B <: String
Animal[B]
sealed trait Person[+T <: Person[T]]
case class Student() extends Person[Student]
case class Professor() extends Person[Professor]

University
Person[_]
val p: Person[_] = Student()
case class University(p: Person[_])

type arguments [Any] do not conform to trait Person's type parameter bounds [+T <: Person[T]]

University
case
case class BoundUniversity[P <: Person[P]](p: Person[P])

Person[_]
val p: Person[_] = Student()
BoundUniversity(p)

inferred type arguments [_$1] do not conform to method apply's type parameter bounds [P <: Person[P]]

def general[P <: Person[P]](p: P) = println(p)

Person
Person[+T <: Person[T]]
val p: Person[P]
P <: Person[P]
case class University(p: Person[_])
