object Color extends Enumeration {
  val Red, Black = Value
}

abstract class RedblackTree[+T <: Ordered[T]] {
  def isEmpty: Boolean
  def member[T](x: T): Boolean
}

case object Empty extends RedblackTree[Nothing] {
  override def isEmpty = true
  override def member[T](x: T) = false
}

final case class Tree[T <: Ordered[T]](
    color: Color.Value,
    leftSubTree: RedblackTree[T],
    data: T,
    rightSubTree: RedblackTree[T]
    ) extends RedblackTree[T] {
  override def isEmpty = false
  override def member[T](x: T) = x < data

