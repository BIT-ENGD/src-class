Node
apply
State
State
Node
trait Node[SE <: SideEffect] {
  def apply(state: State)(implicit sideEffect: SE): (State, Node[_])
}

def execute(state: State, node: Node): (State, Node) = node(state) match {
  case (result, end: End) => (result, end)
  case (result, continue) => execute(result, continue)
}

def execute[SE <: SideEffect](state: State, node: Node[SE])(implicit sideEffect: SE): (State, Node[_]) = {
  node(state) match {
    case (result, end: End) => (result, end)
    case (result, continue) => execute(result, continue)
  }
}

<console>:20: error: inferred type arguments [_0] do not conform to method execute's type parameter bounds [SE <: SideEffect]
             case (result, continue) => execute(result, continue)
                                        ^
<console>:20: error: type mismatch;
 found   : Node[_0] where type _0
 required: Node[SE]
             case (result, continue) => execute(result, continue)
                                                        ^
<console>:20: error: could not find implicit value for parameter sideEffect: SE
             case (result, continue) => execute(result, continue)
                                               ^

execute
execute
Nodes
