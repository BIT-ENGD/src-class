case class Node(name:String, parent:Option[Node], children:List[Node])

def addChild(n:String):Node = {
  Node(name, parent, Node(n, Some(this), Nil)::children)
}

case class Node(name: String, parent: () => Option[Node], children: List[Node]) {
  def makeChild(name: String) = {
    lazy val newParent:Node = Node(this.name, this.parent, kid :: this.children)
    lazy val kid:Node = Node(name, () => Some(newParent), Nil)
    newParent
  }
}

