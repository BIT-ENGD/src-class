def storeBadgeImage(badgeHandle: String, imgFile: File) = {
   val cmd = """
        |update badge
        |set img={imgBytes}
        |where handle = {badgeHandle}
  """
  var fis = new FileInputStream(imgFile)
  var imgBytes: Array[Byte] = Resource.fromInputStream(fis).byteArray
  // at this point I see the image in my browser if I return the imgBytes in the HTTP response, so I'm good so far.
  DB.withConnection { implicit c =>
  {
    try {
      SQL(cmd stripMargin).on("badgeHandle" -> badgeHandle, "imgBytes" -> imgBytes).executeUpdate() match {
        case 0 => "update failed for badge " + badgeHandle + ", image " + imgFile.getCanonicalPath
        case _ => "Update Successful"
      }
    } catch {
      case e: SQLException => e.toString()
    }
  }
}

def fetchBadgeImage(badgeHandle: String) = {
    val cmd = """
        |select img from badge
        |where handle = {badgeHandle}
  """
  DB.withConnection { implicit c =>
    SQL(cmd stripMargin).on("badgeHandle" -> badgeHandle)().map {
      case Row(image: Array[Byte]) => {
        "image = " + image
      }
      case Row(Some(unknown: Any)) => {
        println(unknown + " unknown type is " + unknown.getClass.getName)  //[B@11be1c6 unknown type is [B
        "unknown"
      }
  }
}

