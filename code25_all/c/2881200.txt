struct msghdr msg; 
struct iovec iov[1];  
memset(&msg, '\0', sizeof(msg));
msg.msg_iov = iov;
msg.msg_iovlen = 1;
iov[0].iov_base = (char *) &pkt;
iov[0].iov_len = sizeof(pkt);

struct cmsghdr cmsgcmsg[1];  
msg.msg_control = cmsgcmsg;
msg.msg_controllen = sizeof(struct cmsghdr);


nRet = recvmsg(udpSocket, &msg, 0);

if (nRet > 0) {
    struct cmsghdr *cmsg;
    for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL; cmsg = CMSG_NXTHDR(&msg,cmsg)) {

    if ((cmsg->cmsg_level == IPPROTO_IP) && (cmsg->cmsg_type == IP_TOS) &&
    (cmsg->cmsg_len) ){
              int tos = *(uint8_t *)CMSG_DATA(cmsg);
              int isecn =  ((tos & INET_ECN_MASK) == INET_ECN_CE);
            printf("the tos = %i , is ecn = %d \n", tos, isecn); 

     }
    }

