GLuint selectBuf[BUFSIZE]; // BUFSIZE is defined to be 512
GLint hits;
GLint viewport[4];

if( ( state != GLUT_DOWN ) && ( button != GLUT_LEFT_BUTTON ) )
    return;

glGetIntegerv (GL_VIEWPORT, viewport);
glSelectBuffer (BUFSIZE, selectBuf);
(void) glRenderMode (GL_SELECT);
glInitNames();
glPushName(0);
gluPickMatrix ((GLdouble) x, (GLdouble) y, 20.0,20.0, viewport);

draw(GL_SELECT); // the function that does the rendering of the pieces

hits = glRenderMode(GL_RENDER);

processHits (hits, selectBuf); // a function that displays the hits obtained

void processHits (GLint hits, GLuint buffer[])
{
    unsigned int i, j;
    GLuint ii, jj, names, *ptr;

    printf ("hits = %d\n", hits);
    ptr = (GLuint *) buffer;
    for(i = 0; i < hits; i++) {
        printf("hit n. %d ---> %d",i, *(buffer+i));
    }
}

draw
void draw(GLenum mode) {
    glClear (GL_COLOR_BUFFER_BIT);
    GLuint x,y;

    int corPeca; //colourpiece in english
    int corCasa; //colourHouse (each square has a diferent color, like checkers)
    for (x =0; x < colunas; x++) { //columns
        for(y=0; y < colunas; y++) {
            if ( (tabuleiro[y*colunas+x].peca) == 1) //board
                corPeca = 1;
            else
                corPeca = 2;

            if((tabuleiro[y*colunas+x].quadrado)==1) //square
                corCasa = 1;
            else
                corCasa = 2;

            if (mode == GL_SELECT){
                GLuint name = 4;
                glLoadName(name);
            }
            desenhaCasa(x,y,corCasa);       //draws square
            desenhaPeca(x,y,corPeca, mode); //draws piece
        }
    }
}

glLoadName
processHits
