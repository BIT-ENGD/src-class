typedef struct channel_tag channel_t;

channel_t* open_channel(size_t channel_id);
void close_channel(channel_t *channel);

#include "channel.h"

struct channel_tag {
    size_t channel_id;
};

channel_t* open_channel(size_t channel_id)
{
    channel_t *channel = malloc(sizeof *channel);

    if(channel == NULL) {
        fprintf(stderr, "Cannot allocate memory\n");
        return NULL;
    }

    channel->channel_id = channel_id;
    printf("Channel [ %zu ] has been created\n", channel->channel_id);

    return channel;
}

void close_channel(channel_t *channel)
{
    printf("Channel [ %zu ] resources has been released\n", channel->channel_id);
    free(channel);
}

int main(void)
{
    size_t i = 0;

    channel_t *channel = NULL;

    for(i = 0; i < 4; i++) {
        channel = open_channel(i);

        if(channel == NULL) {
            fprintf(stderr, "Cannot create channel [ %zu ]\n", i);
        }
    }

    /* Do some stuff with the channels and now free them before the program exists. 
       However, I need to loop and pass all of them, not just one */
    for(i = 0; i < 4; i++) {
       close_channel(channel);
    }
    return 0;
}

