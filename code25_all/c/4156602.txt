argv0
origname
origname
sprintf
Hello World! It's me, thread #0 ./multithread 3!
origname 0 ./multithread 3!
origname
sprintf
#include <pthread.h>
#include <stdio.h>
#define NUM_THREADS     2
void sendstring(char *string)
{
    printf("%s",string);
}
struct thread_data{
    int  thread_id;
    char *argv0;
};

struct thread_data thread_data_array[NUM_THREADS];


void *PrintHello(void *parameter)
{
    struct thread_data *childpara;
    childpara = (struct thread_data *)parameter;
    int i = 0;
    char origname[20];
    strncpy(origname, childpara->argv0,strlen(childpara->argv0));
    origname[strlen(childpara->argv0)] = '\0';
    printf("init origname %s argv0 %s\n",origname, childpara->argv0);

    while(1)
    {
            printf("origname %s\n",origname);
            sleep(1);
            char buffer[30];
            sprintf(buffer,"Hello World! It's me, thread #%ld %s %d!\n", childpara->thread_id, childpara->argv0, i++);
            sendstring(buffer);
    }
    pthread_exit(NULL);
}

int main (int argc, char *argv[])
{
    pthread_t threads[NUM_THREADS];
    int rc;
    long t;
    for(t=0; t<NUM_THREADS; t++){
            thread_data_array[t].thread_id = t;
            thread_data_array[t].argv0 = argv[0];
            rc = pthread_create(&threads[t], NULL, PrintHello,(void *) &thread_data_array[t]);      

            if (rc){
                    printf("ERROR; return code from pthread_create() is %d\n", rc);
                    exit(-1);
            }
    }
    pthread_exit(NULL);
}

