#include <stdio.h>              /* Standard buffered input/output        */
#include <stdlib.h>             /* Standard library functions            */
#include <string.h>             /* String operations                     */
#include <pthread.h>        /* Thread related functions              */
#include "pf1.h"        /* Header specific to this app           */



pthread_attr_t attr;

void *thread_worker(void *name_file)
{

FILE *entrada, *salida;
char* nombres = (char*)name_file; 
int numero;
char temp [10000];

int i;
stats_t estadisticas;

printf ("File_name:%s\n", nombres);
entrada = fopen(nombres, "r");
salida =  fopen (strcat(nombres, ".sorted"), "w");

while (!feof(entrada)){
fscanf (entrada, "%s\n",temp);
numero++;
}

char* lista[numero]; //array to sort the file
rewind (entrada);

    for (i=0;i<numero;i++) 
    {

        fscanf(entrada," %[^\n]", temp);


        lista[i] = (char*)malloc((strlen(temp)+1)*sizeof(char));

        strcpy(lista[i], temp);

    }


size_t large = sizeof(lista) / sizeof(char *);



qsort(lista,large ,sizeof(char *) ,cstring_cmp );

printf ("Archivo Ordenado\n", i+1);

for (i=0;i<large;i++)


printf("%s\n",lista[i]);


 pthread_exit(NULL);
}


int main(int argc, char *argv [])
{

stats_t **stats;
int i, rc;
 pthread_t my_threads[argc-1]; 
 pthread_attr_init(&attr);

if (argc <3) {
printf ("|files| > 2\n");
}else{
printf("files to sorted: %d\n", argc - 1);

for (i = 1; i < argc; i++){ 

    //printf("%s%s\n", argv[i], (i < argc-1) ? " " : "");

rc = pthread_create(&my_threads[i], &attr, thread_worker, (void *)argv[i]);
      if (rc){
         printf("ERROR; return code from pthread_create() is %d\n",rc);
         return -1;
      }
}

}
  return 0;

} /*end main */

#ifndef PF1_H_

#define PF1_H_





typedef struct _stats_t

{

    char *longest, *shortest;

    unsigned int numlines;

} stats_t;

int cstring_cmp(const void *a, const void *b)

{

    const char **ia = (const char **)a;

    const char **ib = (const char **)b;

    return -strcasecmp(*ia, *ib);

    /* strcmp functions works exactly as expected from

    comparison function */

}


void print_cstring_array(char **array, size_t len)

{

    size_t i;



    for(i=0; i<len; i++)

        printf("%s | ", array[i]);



    putchar('\n');

}




#endif /* PF1_1_H_ */

