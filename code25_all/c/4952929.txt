data()
strcpy()
char passive_ip[25] = ""; 

data(passive_ip, passive_port); 

void data(char* srvr, int prt) { 
    printf("In Data: connecting to %s:%i", srvr, prt);

    struct hostent *hp = gethostbyname(srvr);

    if (hp == NULL) {
        printf("gethostbyname() failed\n");
    } else {
        printf("%s = ", hp->h_name);
        unsigned int i=0;
        //  while ( hp -> h_addr_list[i] != NULL) {
        printf( "%i %s ",i, inet_ntoa( *( struct in_addr*)( hp -> h_addr_list[0])));
        //      i++;
        //  }
        printf("\n");
    }

    char hostname[15];
    strcpy(hostname, inet_ntoa( *( struct in_addr*)( hp -> h_addr_list[0])));


    int sockfd;
    int len;
    struct sockaddr_in address;
    int result;
    char* buffer;


    /*  Create a socket for the client.  */
    sockfd = socket(PF_INET, SOCK_STREAM, 0);

    /*  Name the socket, as agreed with the server.  */
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = inet_addr(  hostname    );
    address.sin_port = htons(prt);
    len = sizeof(address);

    /*  Now connect our socket to the server's socket.  */
    result = connect(sockfd, (struct sockaddr *)&address, len);

    if(result == -1) {
        perror("oops (data): client3");
        exit(1);
    }

    read(sockfd, buffer, MY_BUFFER_SIZE);


} // this is line 121

