int main(int argc, char *argv[])
{
    int    sockfd, newsockfd, portno, clilen;
    char   buffer[3];
    struct sockaddr_in serv_addr, cli_addr;
    int    n;

    if (argc < 2)
    {
         fprintf(stderr,"ERROR, no port provided\n");
         exit(1);
    }

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0){error("ERROR opening socket");}

    bzero((char *) &serv_addr, sizeof(serv_addr));
    portno                    = atoi(argv[1]);
    serv_addr.sin_family      = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port        = htons(portno);


    if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
        {error("ERROR on binding");}

    listen(sockfd,5);

    clilen = sizeof(cli_addr);
    newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);

    if (newsockfd < 0){error("ERROR on accept");}


    while (UNTIL END OF FILE)
    {
        <DO SOME FILE READING STUFF>

        n = write(newsockfd, "test/n", 5);

        if (n < 0){error("ERROR writing to socket");}


        bzero(buffer,3);
        n = read(newsockfd,buffer,3);

        if (n < 0){error("ERROR reading from socket");}

        buffer[n] = 0;

        <DO SOME STRING STUFF>

        while(done != 1)
        {
            bzero(buffer,3);
            n = read(newsockfd,buffer,3);

            if (n < 0){error("ERROR reading from socket");}

            buffer[n] = 0;    

            if(strcmp(buffer, "CO"))
            {
                done = 1;
            }
        }

        done = 0;
    }

    <DO STUFF>


    n = write(newsockfd, "DN\n", 2);

    if (n < 0){error("ERROR writing to socket");}

    close(sockfd);
    close(newsockfd);

    return 0;   

}

