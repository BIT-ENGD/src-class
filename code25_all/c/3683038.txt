typedef struct world_map {
    char ** map_array;
    int X, Y;
} MAP_s;
//
MAP_s * map;

int init_map_array(void) {
    int i; // temp
    map = malloc(sizeof (MAP_s));
    map->X = 20; // Columns
    map->Y = 10; // Rows
    //
    map->map_array = malloc(map->Y * (sizeof (char *)));
    //
    if (map->map_array == 0) {
        printf("ERROR: out of memory!");
        return -1;
    } else {
        for (i = 0; i < map->Y; ++i) {
            map->map_array[i] = malloc(map->X * sizeof (char));
            if (map->map_array[i] == 0) {
                printf("ERROR: out of memory!");
                return -1;
            }
        }
    }
    int curr_pos_x, curr_pos_y;
    int limit_x = map->X;
    int limit_y = map->Y;
    //
    for (curr_pos_y = 0; curr_pos_y < limit_y; ++curr_pos_y) {
        for (curr_pos_x = 0; curr_pos_x < limit_x; ++curr_pos_x) {
            map->map_array[curr_pos_y][curr_pos_x] = "#";
        }
    }
    return 1;
}

int draw_map(void) {
    int curr_pos_x, curr_pos_y;
    int limit_x = map->X;
    int limit_y = map->Y;
    //
    for (curr_pos_y = 0; curr_pos_y < limit_y; ++curr_pos_y) {
        for (curr_pos_x = 0; curr_pos_x < limit_x; ++curr_pos_x) {
            printf("%c", map->map_array[curr_pos_y][curr_pos_x]);
        }
        printf("\n");
    }
}

int main(void) {
    init_map_array();
    draw_map();
    //
    printf("STRUCT: %i\n", sizeof (map));
    printf("X: %i\n", sizeof (map->X));
    printf("Y: %i\n", sizeof (map->Y));
    printf("ARRAY: %i\n", sizeof (map->map_array));
return (EXIT_SUCCESS);
}

