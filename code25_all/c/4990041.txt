    typedef struct token
    {
     char* value;
     struct token* next;
    }TOKEN;

 target1:
 dependency1
 {
 command1,
 command2
 }

    TOKEN *head = NULL;
// represents each formatted line from the script file
char* line = malloc(161*sizeof(char));

FILE* fileRead = openFile("RawRules.txt", "r");

while((line = readLine(line, fileRead)) != NULL) 
{
    head = add(head, line);
}

displaylist(head);
freeNodes(head);
fclose(fileRead);

 TOKEN* add(TOKEN *head, char* value){
 TOKEN *tmp;

if(head == NULL){
    head=(TOKEN *)malloc(sizeof(TOKEN));
    if(head == NULL){
        printf("Error! memory is not available\n");
        exit(0);
    }
    head-> value = value;
    head-> next = head; 
}else{
    tmp = head;

    while (tmp-> next != head)
        tmp = tmp-> next;
    tmp-> next = (TOKEN *)malloc(sizeof(TOKEN)); 
    if(tmp -> next == NULL)
    {
        printf("Error! memory is not available\n");
        exit(0);
    }
    tmp = tmp-> next;
    tmp-> value = value;
    tmp-> next = head;
}
return head;

 // reads a line of a file into buffer
 char* readLine(char* buffer, FILE* file) {
buffer = fgets(buffer, 161, file);
return buffer;
 }

    while(true) 
{
    char* ll = malloc(161*sizeof(char));
    ll = readLine(ll, fileRead);

    f(ll != NULL)
        head = add(head, ll);
    else 
        break;
}

