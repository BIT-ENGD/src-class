for (;;)
{
  if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
  {
    do
    {
      if (msg.message == WM_QUIT) break;
      TranslateMessage(&msg);
      DispatchMessage(&msg);
    } 
    while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE));
  }

  draw();
}

WM_PAINT
WM_TIMER
InvalidateRect
InvalidateRect
DWORD WINAPI PaintCommandThreadProc(LPVOID lpParameter)
{
  Plugin* plugin = static_cast<Plugin*>(lpParameter);
  HANDLE updateEvent = plugin->updateEvent();

  while (updateEvent == plugin->updateEvent())
  {
    ::WaitForSingleObject(updateEvent, 100);
    ::Sleep(0);
    if (updateEvent == plugin->updateEvent())
    {
      ::PostMessage(plugin->hwnd(), WM_USER+0x10, 0, 0);
    }
  }
  return 0;
}

...

LRESULT CALLBACK PluginWinProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
  bool processDefault = true;
  LRESULT result = 0;

  Plugin* plugin = reinterpret_cast<Plugin*>( GetWindowLong(hWnd, GWL_USERDATA) );

  switch (msg) {
    ...
    case WM_GL_MESSAGE:
      {
        ::InvalidateRect( hWnd, NULL, FALSE );
        processDefault = false;
        result = TRUE;
      }
      break;

    case WM_PAINT:
      {
        draw(hWnd);
        ::SetEvent( plugin->updateEvent() );
        processDefault = false;
        result = TRUE;
      }
      break;
    ...
  }

  if (processDefault && plugin && plugin->m_wndOldProc)
    result = ::CallWindowProc(plugin->m_wndOldProc, hWnd, msg, wParam, lParam);

  return result;
}

