solver.c:24: warning: passing argument 2 of ‘mtrx_multiple’ from incompatible pointer type
mat.h:5: note: expected ‘double *’ but argument is of type ‘double **’
solver.c:30: warning: assignment makes pointer from integer without a cast
solver.c:39: warning: assignment makes pointer from integer without a cast
/tmp/ccmU9zRf.o: In function `vec_norm':
math.c:(.text+0x331): undefined reference to `sqrt'
collect2: ld returned 1 exit status

solver.c
double *cg_solve( sparse_mat_t A,  double *b,  double *x ) { 

   double *a;
   double **r;
   double *be;
   double **p;
   double **x0;
   x0[0] = vec_copy(x, size);
   ...
   line 24:   r[0] = vec_subtraction( b, mtrx_multiple(A, x0), size );
   line 30:   x0[k+1] = vec_addition( x0[k], vec_numb_multiple(a[k], p[k], size), size ); 
   line 39:   p[k+1] = vec_addition( r[k+1], vec_numb_multiple(be[k], p[k], size), size );
}

math.h
line 5:   double *mtrx_multiple (sparse_mat_t A, double *c);

math.c
double *vec_subtraction (double *a, double *b, int n) { 
    double *result = malloc(sizeof(double)*n);  
    int i;  
    for(i=0; i<n; i++)
        result[i] = a[i]-b[i];  
    return result;
}

double *vec_addition (double *a, double *b, int n) {    
   double *result = malloc(sizeof(double)*n);   
   int i;   
   for(i=0; i<n; i++)
       result[i] = a[i]+b[i];   
   return result;
}

double *vec_numb_multiple (double a, double *b, int n) {
    double *result = malloc(sizeof(double)*n);
    int i;
    for(i=0; i<n; i++)
       result[i] = a*b[i];  
    return result;
}
double *mtrx_multiple (sparse_mat_t A, double *c) {
   double *result;
   int i, j;
   result = malloc((A.size) * sizeof *result);
   printf("c.n: %d \n", A.size);
   for (i = 0; i < A.size; i++) {
      int v = 0;
      for (j = A.ia[i]; j < A.ia[i + 1]; j++) {
         v += A.a[j] * c[A.ja[j]];  
      }
      result[i] = v;
    }
    return result;
}

double vec_norm (double *a, int n){
   double result;
   int i;
   for(i=0; i<n; i++)
      result =  result + ( a[i] * a[i] );
   result = sqrt(result);
   return result;
}
double *vec_copy (double *a, int n) {
   double *result;
   int i;
   for(i=0; i<n; i++)
      result[i] = a[i];
   return result;
}

solver.c:30: warning: assignment makes pointer from integer without a cast
solver.c:39: warning: assignment makes pointer from integer without a cast
/tmp/ccL4uSoH.o: In function 'vec_norm':
math.c:(.text+0x331): undefined reference to 'sqrt'
collect2: ld returned 1 exit status

