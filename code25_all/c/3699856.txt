#include <cv.h>
#include <cxcore.h>
#include <highgui.h>

struct matchingpair{
    CvPoint p1, p2;
};    

struct matchingpair_array{   
    struct matchingpair* elements;  
    int length;
};

struct matchingpair_array *refineMatch(struct matchingpair* pairs,int pointcount, int bestpair);

#include "refine.h"
#include "utils.h"
#include <stdlib.h>

struct matchingpair_array *refineMatch(struct matchingpair* pairs,int pointcount, int bestpoint){
    struct matchingpair_array refinedPairs;
    refinedPairs.elements=malloc(incount*sizeof(struct matchingpair));
    int *in=malloc(pointcount*sizeof(int)), i=0,incount=8;

    // several statements - including filling in[] with data

    for(i=0;i<incount;i++){ 
        refinedPairs.elements[i]=pairs[in[i]];
        fprintf(stderr,"%d\n",in[i]);
    }
    refinedPairs.length=incount;
    free(in); 
    // several other free() operations non include refinedPairs or elements
    return &refinedPairs;
}

#include "refine.h"
#include <stdio.h>

int main( int argc, char** argv ){
    struct matchingpair* pairs;
    int matchcount=0,bestpair;
    pairs=(struct matchingpair*)malloc(pairArrSize*sizeof(struct matchingpair));

    //values are assigned to pairs, matchcount and bestpair

    struct matcingpair_array* result=(struct matcingpair_array*)refineMatch(pairs,matchcount,bestpair); /*(casting removed this warining)
    warning: initialization from incompatible pointer type*/
    fprintf(stderr,"%d \n",result->length); //error: dereferencing pointer to incomplete type

    //some other code

}

