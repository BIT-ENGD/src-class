4 #include <stdio.h>
5 #include <string.h>
6 #include <sys/types.h>
7 #include <sys/socket.h>
8 #include <netdb.h>
9 #include <arpa/inet.h>
10
11 int main(int argc, char *argv[]) {
12
13   struct addrinfo server_hints;
14   struct addrinfo *server_res;
15   int    server_sockfd;
16   int    server_addrinfo;
17   int    server_bind;
18
19   struct addrinfo client_hints;
20   struct addrinfo *client_res;
21   int    client_sockfd;
22   int    client_addrinfo;
23   int    client_bind;
24
25   int    conn_info;
26
27   // Completamos la estrucctura de direcci贸n del servidor con getaddrinfo():
28
29   memset(&server_hints, 0, sizeof (server_hints));
30   server_hints.ai_family   = AF_UNSPEC;     // Usa IPv4 or IPv6
31   server_hints.ai_socktype = SOCK_STREAM;   // TCP
32   server_hints.ai_flags    = AI_PASSIVE;    // Rellena la ip del server
33
34   server_addrinfo = getaddrinfo(NULL, "2000", &server_hints, &server_res);
35
36   if (server_addrinfo != 0){
37     fprintf(stderr, "Getaddrinfo server: %s\n", gai_strerror(server_addrinfo));
38     return 1;
39   }
40
41
42   // Crea la conexi贸n del socket:
43
44   server_sockfd = socket(server_res->ai_family, server_res->ai_socktype, server_res->ai_protocol);
45
46   if (server_sockfd == -1){
47     fprintf(stderr, "Socket: %s\n", gai_strerror(server_sockfd));
48     return 1;
49   }
50
51
52   // Para eliminar esas veces que te pone que "Address already in use."
53
54   int yes=1;
55
56   if (setsockopt(server_sockfd,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1) {
57     perror("setsockopt");
58     return 1;
59   }
60
61
62   // Lo lincamos con el puerto que le pasamos en getaddrinfo():
63
64   server_bind = bind(server_sockfd, server_res->ai_addr, server_res->ai_addrlen);
65
66
67   if (server_bind == -1){
68     fprintf(stderr, "Socket: %s\n", gai_strerror(server_sockfd));
69     return 1;
70   }
71
72
73   // Completamos la estrucctura de direcci贸n del cliente con getaddrinfo():
74   memset(&client_hints, 0, sizeof(client_hints));
75   client_hints.ai_family   = AF_UNSPEC;
76   client_hints.ai_socktype = SOCK_STREAM;
77
78   client_addrinfo = getaddrinfo("82.197.1.1", "80", &client_hints, &client_res);
79
80   if (client_addrinfo != 0){
81     fprintf(stderr, "Getaddrinfo server: %s\n", gai_strerror(client_addrinfo));
82     return 1;
83   }
84
85
86   conn_info = connect(server_sockfd, client_res->ai_addr, client_res->ai_addrlen);
87
88   if (conn_info == -1){
89     fprintf(stderr, "Connect: %s\n", gai_strerror(conn_info));
90     return 1;
91   }
92
93
94   char *men = "GET /index.php?uuu=hi&ppp=bye HTTP/1.0\r\nHost: %s\r\nUser-Agent: Mozilla/5.0\r\n\r\n"    ;
95
96   send(server_sockfd, men, strlen(men), 0);
97
98   // Limpiamos la conexi贸nes:
99
100   close(server_sockfd);
101   freeaddrinfo(server_res);
102   freeaddrinfo(client_res);

