typedef struct {
 GLuint vertex;
 GLuint normal;
} indice_pairs_t;

2 3
6 7
6 7
4 5

0 1 1 2

// First is always unique and first in order:
unique[0] = pairs[0];
order[0] = 0;
num_unique = 1;

// Skip first, we just did it:
for (i = 1; i < num_pairs; i++) {

 // Check if what we have is already the same
 for (y = 0; y < num_unique; y++) {

  if (unique[y].vertex == pairs[i].vertex&&unique[y].normal == pairs[i].normal) {
   /* A new pair was found to be the same; put the old unique index in order;
    keep num of unique items same: */
   order[i] = y;
  } else {
   /* A new pair was unique; copy it in unique pairs and increment number
    of unique items; put in order the new number */
   unique[num_unique] = pairs[i];
   order[i] = num_unique;
   num_unique++; // it follows since it was already incremented to 1.
   break;
  }

 }

}

