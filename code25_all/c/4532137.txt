#define INIT 3

typedef struct point{
    int x;
    int y;
    int c;
    int d;
}Point;
Point empty(){
    Point p;
    p.x=1;
    p.y=10;
    p.c=100;
    p.d=1000; //if you put different values it will act differently - weird
    return p;
}
void printArray(Point * r){
    int i;
    int total = r[0].y+1;
    for(i=0;i<total;i++){
          printf("%2d | P [%2d,%2d][%4d,%4d]\n",i,r[i].x,r[i].y,r[i].c,r[i].d);
    }
}

void reallocFunction(Point * r){
    r=(Point *) realloc(r,r[0].x*2*sizeof(Point));
    r[0].x*=2;
}
void enter(Point* r,int c){
    int i;
    for(i=1;i<c;i++){
        r[r[0].y+1]=empty();
        r[0].y++;
        if( (r[0].y+2) >= r[0].x ){ /*when the amount of Points is near
                                     *the end of allocated memory.
                                      reallocate the array*/
            reallocFunction(r);
        }
    }
}

int main(int argc, char** argv) {
    Point * r=(Point *) malloc ( sizeof ( Point ) * INIT );
    r[0]=empty();
    r[0].x=INIT;    /*so here I store for how many "Points" is there memory
                    //in r[0].y theres how many Points there are.*/
    enter(r,5);
    printArray(r);
    return (0);
}

