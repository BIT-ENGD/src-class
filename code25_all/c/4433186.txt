/* Program that reads a sequence of words from keyboard
   and prints the list of words without duplicates and
   sorted in ascending lexicographic order.
   The input words are written one per line and the
   sequence is terminated by an empty line.
   The program works with at most MAX words, each at
   most MAXL characters long. Longer words are truncated
   and words in excess are ignored.
*/

#include <stdio.h>
#include <string.h>

#define MAXL           80  /* maximum word length */
#define MAX           100  /* maximum number of words */

/* word storage */
char storage[MAX][MAXL];
char *words[MAX];

void init(char *pnt[], char matr[][MAXL], int max);
int read_words (char *s[], int max);
void sort_strings (char *s[], int len);
void swap_char_pnt(char **xp, char **yp);
void print_words(char *s[], int n);
int find (char *s[], char w[], int n);

main()
{
  int nw; /* actual number of words */

  /* initialize array of pointers */
  init(words, storage, MAX);

  /* read and store words */
  printf("Enter words one per line\n");
  nw = read_words(words, MAX);

  printf("\nList of unsorted words:\n");
  print_words(words, nw);

  /* sort words */
  sort_strings(words, nw);

  /* print words */
  printf("\nList of sorted words:\n");
  print_words(words, nw);
}


/* initializes an array of pointers to the rows of
 a matrix of characters
 max is the number of pointers to initialize
*/
void init(char *pnt[], char matr[][MAXL], int max) {
  int i;

  for (i=0; i<max; i++)
    pnt[i] = matr[i];
}

/* Reads a sequence of words from stdin, one per line
 Reads at most max words and stores them in s
 Returns actual number of words read
*/
int read_words (char *s[], int max)
{
  int i;
  fgets(s[0], MAXL, stdin);
  for (i=1; i<max && fgets(s[i], MAXL, stdin)!=NULL; ) {
        if(!strcmp(s[i],"\n"))
    break;
    if (find(s, s[i], i)==-1)
    i++;
  }
  return i;
}

int find (char *s[], char w[], int n)
{
  int i;

  if (n<0)
    return -1;
  for (i=0; i<n; i++)
    if (!strcmp(s[i],w))
    break;
  if (i==n)
    return -1;
  else
    return i;
}

/* Sorts an aray of pointers to strings in ascending order
*/
void sort_strings (char *s[], int len)
{
  int i,k; /* vector index and counter */
  char swaps=1; /* boolean variable: true if any swap has occurred in last round */

  for (k=1; k<=len-1 && swaps; k++) {
  swaps=0;
  for (i=0; i<len-k; i++)
  if (strcmp(s[i],s[i+1])>0) {
      /* swap */
      swap_char_pnt(&s[i], &s[i+1]);
      swaps=1;
  }
  }
}

void swap_char_pnt(char **xp, char **yp) {
  char *temp;

  temp = *xp;
  *xp = *yp;
  *yp = temp;
}

void print_words(char *s[], int n)
{
  int i;

  for (i=0; i<n; i++)
    printf("%s", s[i]);

}

