ListResult result=listFind(currentLines, compareBasicLines, &linePrototype);  <-here problem

int compareBasicLines(ptrLine line1, ptrLine line2){
    COMPARE_NUMBER_STRINGS(line1, line2);
}

COMPARE_NUMBER_STRINGS(line1, line2);
#define COMPARE_NUMBER_STRINGS(var1, var2)                              \
                    if(var1 == NULL || var2 == NULL){                   \
                        return 0;                                       \
                    }                                                   \
                    return strcmp(var1->strNumber, var2->strNumber);

/**
 * Searches the list for an element fitting the criteria starting from the
 * current element.
 * Note that you need to call listGetFirst if you wish to search from the start
 * of the list. The search starts from the current element.
 * @param list
 *  The list to search in
 * @param compare
 *  Comparison function to decide if an element in the last is equal to the
 *  target elemnt. This function should return 0 for equal elements
 * @param target
 *  A target element to compare with each element in the list.
 * @return
 *  LIST_NULL_ARGUMENT if list or compare are NULL
 *  LIST_INVALID_CURRENT if the current pointer of the list is in invalid state
 *  LIST_NO_SUCH_ELEMENT if no element was found from the current element until
 *  the end of the list
 *  LIST_SUCCESS an element was found and the current pointer of the list is now
 *  set to this element
 *
 */

ListResult listFind(List list, CompareListElements compare, ListElement target);

typedef int (*CompareListElements)(ListElement, ListElement);

typedef void* ListElement;

