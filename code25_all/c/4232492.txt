# Configuration file to be loaded 

# protocol to use either ISDN, SIP, 
protocol: ISDN

# run application in the following mode, makecall or waitcall
mode: makecall

static int load_config(FILE *fp)
{
    char line_read[LINE_SIZE] = {0};
    char *type = NULL;
    char field[LINE_SIZE] = {0};
    char *carriage_return = NULL;

    /* Read each line */
    while(fgets(line_read, LINE_SIZE, fp) != NULL) {
        if(line_read != NULL) {
            /* Ignore any hashs and blank lines */
            if((line_read[0] != '#') && (strlen(line_read) > 1)) {
                /* I don't like the carriage return, so remove it. */
                carriage_return = strrchr(line_read, '\n');
                if(carriage_return != NULL) {
                    /* carriage return found so relace with a null */
                    *carriage_return = '\0';
                }

                /* Parse line_read to extract the field name i.e. protocol, mode, etc */
                parse_string(field, line_read);
                if(field != NULL) {
                    type = strchr(line_read, ':');
                    type+=2; /* Point to the first character after the space */

                    if(strcmp("protocol", field) == 0) {
                        /* Check the protocol type */
                        printf("protocol [ %s ]\n", type);
                    }
                    else if (strcmp("mode", field) == 0) {
                        /* Check the mode type */
                        printf("mode [ %s ]\n", type);
                    }
                }
            }
        }
    }

    return TRUE;
}

/* Extract the field name for the read in line from the configuration file. */
static void parse_string(char *dest, const char *string)
{
    /* Copy string up to the colon to determine configuration type */
    while(*string != ':') {
        *dest++ = *string++;
    }
    /* Insert nul terminator */
    *dest = '\0';
}

