(num of rows in a matrix % num of nodes == 0)

#include <stdio.h>
#include "mpi.h"
#include "matrix.c" // matrix definitions and matrix operation functions are here

int main(int argc, char *argv[])
{
  MPI_Status status;
  int num, rank, size, tag, high,low,i;
  int offset, tmphigh,rows;

  MPI_Init(&argc, &argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  MPI_Comm_size(MPI_COMM_WORLD, &size);

  rows=MAX/size; // MAX is the length(=height) of the matrices
  tag = 201;
  low=rank*rows;
  high=low+rows;


  if (rank == 0) {
    fillMatrix(b,MAX);
    fillMatrix(a,MAX);
  }

  MPI_Bcast(&b[0][0],MAX*MAX,MPI_INT,0,MPI_COMM_WORLD);

  if(rank==0){
    for(i=1;i<size;i++){
      offset=i*rows;
      MPI_Send(&a[offset][0],rows*MAX,MPI_INT,i,tag,MPI_COMM_WORLD);
    }

  }else{
      MPI_Recv(&a[low][0],rows*MAX,MPI_INT,0,tag,MPI_COMM_WORLD,&status);
  }

  printMatrix(a,MAX);

  MPI_Finalize();
  return 0;
}

int a[MAX][MAX], b[MAX][MAX], c[MAX][MAX];
int len; //(edited after Jeremy W. Sherman's comment )
//this was the reason that caused this problem. changing this to int len=MAX; solved the problem

void fillMatrix(int (*matrix)[len], int len){
    int i=0,j=0;
    for(i=0;i<len;i++){
        for(j=0;j<len;j++){
            matrix[i][j]=j;
        }
    }
    //printMatrix(matrix,len);
}

