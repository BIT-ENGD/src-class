void shipDraw() {
 glPushMatrix();

 glMultMatrixf(ship->t.m);

 glBegin(GL_TRIANGLES);
 glColor3f(0,0,1);
 glVertex3f(0, 0, -1);  
 glVertex3f(0, 1, 1);
 glVertex3f(0, -1, 1);
 glEnd();

 glPopMatrix(); 
}

//Draw loop
 while(!gfxUserQuit()) {  
  entUpdateAll(); 

  gfxPrepare(1,1);

  gfxSetCamera(&camera->t); //Have to call this twice!?!?
  gfxSetCamera(&camera->t);

  entDrawAll(); 
  gfxPresent();
 }

//Graphics code
void gfxPrepare(int clearColor, int clearStencil) {
 //TODO parse args
 glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
 glLoadIdentity();
}

void gfxPresent() {
 glfwSwapBuffers();
}

void gfxSetCamera(transform *t) { 
 float *m = t->m;

 float viewmatrix[16]={
  m[0], m[4], m[8], 0,
  m[1], m[5], m[9], 0,
  m[2], m[6], m[10], 0,

  -(m[0]*m[12] +
  m[1]*m[13] +
  m[2]*m[14]),

  -(m[4]*m[12] +
  m[5]*m[13] +
  m[6]*m[14]),

  -(m[8]*m[12] +
  m[9]*m[13] +
  m[10]*m[14]), 1};
 glLoadMatrixf(viewmatrix);
}

while(!gfxUserQuit()) {     
        entUpdateAll(); 

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


        float *m = camera->t.m;
        float viewmatrix[16]={
            m[0], m[4], m[8], 0,
            m[1], m[5], m[9], 0,
            m[2], m[6], m[10], 0,

            -(m[0]*m[12] +
            m[1]*m[13] +
            m[2]*m[14]),

            -(m[4]*m[12] +
            m[5]*m[13] +
            m[6]*m[14]),

            -(m[8]*m[12] +
            m[9]*m[13] +
            m[10]*m[14]), 1}; 

        float viewmatrix2[16]={
            m[0], m[4], m[8], 0,
            m[1], m[5], m[9], 0,
            m[2], m[6], m[10], 0,

            -(m[0]*m[12] +
            m[1]*m[13] +
            m[2]*m[14]),

            -(m[4]*m[12] +
            m[5]*m[13] +
            m[6]*m[14]),

            -(m[8]*m[12] +
            m[9]*m[13] +
            m[10]*m[14]), 1};

        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
        glLoadMatrixf(viewmatrix2);

        entDrawAll();   
        glfwSwapBuffers();
    }

