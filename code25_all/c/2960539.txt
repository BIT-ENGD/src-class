accept()
handle_connection()
while(1)
listen()
accept()
connect()
connect()
void * handle_connections(void * arg)
accept()
int handle_request(void * arg, struct message * msg)
struct message * msg
struct sockaddr_in
#define SERVER_PORT 10000
#define CLIENT_PORT     3456
#define MAX_CONNECTION  20
#define MAX_MSG     50

void * handle_connections(void * arg)
{
    struct fd_info * info;
    struct sockaddr_in client_address;
    struct timeval timeout;
    fd_set readset, copyset;

    bzero((char * ) &client_address, sizeof(client_address)); // copy zeroes into string
    client_address.sin_family = AF_INET;
    client_address.sin_addr.s_addr = htonl(INADDR_ANY);
    client_address.sin_port = htons(CLIENT_PORT);

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    rv = listen(sockfd,MAX_CONNECTION);


    while(1)
    {
        new_sockfd = accept(sockfd, (struct sockaddr *) &client_address, &client_addr_len); //blocks

        if (new_sockfd < 0) {
            printf("C: ERROR accept() %i: %s \n", errno, strerror(errno));
            sleep(2);
        } else {
            printf("C: accepted\n");
            FD_SET(new_sockfd, &readset);   // sets bit for new_sockfd to list of sockets to watch out for
            if (maxfd < new_sockfd)
                maxfd = new_sockfd;
            if (minfd > new_sockfd)
                minfd = new_sockfd;
        }       //end if else (new_sockfd)

    }   // end of the forever while loop
}

int handle_request(void * arg, struct message * msg)
{
    char * cname, gname, payload;
    char * command[3];

    int i, rv, sockfd, client_addr_len;

    struct sockaddr_in client_address;
    struct fd_info * info;

    info = (struct fd_info *) arg;
    sockfd = info->sock_fd;


    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1)
    {
        printf("HR: ERROR socket() %i: %s \n", errno, strerror(errno));
        break;
    }
    else if (sockfd > 0)
    {
        printf("HR: new socks is %i \n", sockfd);
        printf("HR: sin_family is %i: %i\n", msg->peer.client_address.sin_family, msg->peer.client_address.sin_port);
        //*************************************************************
        //this is the part that returns error 111: Connection refused!!!
        //*************************************************************
        rv = connect(sockfd, (struct sockaddr *) &msg->peer.client_address, sizeof(struct sockaddr));
        if (rv == -1) 
        {
            printf("HR: ERROR: connect() %i: %s \n", errno, strerror(errno));
            printf("HR: at %li \n", msg->peer.client_address.sin_addr.s_addr);
            break;
        }
        else if (rv > 0)
        {
            info->max_fd = sockfd;
            printf("HR: connected successfully!! \n");
        }
    }   
}

