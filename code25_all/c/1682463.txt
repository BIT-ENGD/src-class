    [DllImport("DLLfilename.dll")]
    public static extern void DLL_SetCallback(CallbackDelegate pfn);

    public delegate void CallbackDelegate();

    //setDelegate() is called in init() of the C# app
    public void setDelegate()
    {
        CallbackDelegate CallbackDelegateInstance = new CallbackDelegate(callback);
        DLL_SetCallback(CallbackDelegateInstance);
    }

    public void callback()
    {
        //This is the function which will be called by the DLL

        MessageBox.Show("Called from the DLL..");
    }

    #include "externalLibrary.h"
    typedef void (__stdcall CallbackFunc)(void);
    CallbackFunc* func;    //global in DLL

    //Exported

    extern "C" __declspec(dllexport) void DLL_SetCallback(CallbackFunc* funcptr)
    {

      //setting the function pointer

        func = funcptr;
        return;
    }

//Exported

extern "C" __declspec(dllexport) void RegisterEventHandler(Target, Stream,&ProcessEvent , NULL)
{
     //ProcessEvent is func to be caled by 3rd party callback

     //Call third-party function to register &ProcessEvent func-ptr (succeeds)

     ...
     return;
}        

//This is the function which never gets called from the 3rd party callback
//But gets called when all the code in the DLL is moved to a standard C program.

void  __stdcall ProcessEvent (params..)
{
    //Do some work..

        func();         //Call the C# callback now


    return;
}

