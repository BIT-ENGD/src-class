#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define MAXBUFLEN 1024

// Usage: ./server PORT
int main(int argc, char *argv[])
{
    int sockfd;
    struct sockaddr_in server;
    size_t clientSize;
    struct sockaddr_storage client;
    char buf[MAXBUFLEN];
    int portno = atoi(argv[1]);
    int numbytes;

    printf("Port: %d\n", portno);

    // Create UDP Socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        perror("Can't create socket");
        exit(-1);
    }

    // Configure socket
    memset(&server, 0, sizeof server);
    server.sin_family = AF_INET; // Use IPv4
    server.sin_addr.s_addr = INADDR_ANY; // My IP
    server.sin_port = htons(portno); // Server Port

    // Bind socket
    if ((bind(sockfd, (struct sockaddr *) &server, sizeof(server))) == -1) {
        close(sockfd);
        perror("Can't bind");
    }

    while (1) {
        printf("Waiting for data...\n");

        // Receive data from Client
        clientSize = sizeof(client);
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1,0,
                (struct sockaddr *) &client, &clientSize);

        buf[numbytes] = '\0';

        printf("client sent: %s\n", buf);

        // Rely to client
        sendto(sockfd, buf, MAXBUFLEN-1, 0,
                (struct sockaddr *) &client, &clientSize);
    }

    printf("Closing");
    close(sockfd);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define MAXBUFLEN 1024

//Usage: ./client PORT IP FILE
int main(int argc, char *argv[]) {
    int sockfd;
    struct sockaddr_in server;
//  struct sockaddr_storage client;
    char buf[MAXBUFLEN];
    int portno = atoi(argv[1]);
    char *serverIP = argv[2];
    char *filename = argv[3];
    int numbytes;

    printf("Port: %d, IP:%s, File:%s\n", portno, serverIP, filename);

    // Create UDP Socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        perror("Can't create socket");
        exit(-1);
    }

    // The server IP and Port
    memset(&server, 0, sizeof server);
    server.sin_family = AF_INET; // Use IPv4
    server.sin_port = htons(portno); // Server Port
    struct hostent *hp = gethostbyname(serverIP);
    memcpy((char*)&server.sin_addr, (char*)hp->h_name, hp->h_length);

    printf("Sent %s\n", filename);

    // No need to bind, just send request for file
    int serverSize = sizeof(server);
    sendto(sockfd, argv[3], strlen(argv[3]), 0,
            (struct sockaddr *) &server, serverSize);

    printf("Waiting for reply\n");

    recvfrom(sockfd, buf, MAXBUFLEN-1, 0,
            (struct sockaddr *) &server, serverSize);

    buf[numbytes] = '\0';

    printf("server sent: %s\n", buf);

    close(sockfd);
}

Waiting for data...

./client 8083 127.0.0.1 hello
Port: 8083, IP:127.0.0.1, File:hello
Sent hello
Waiting for reply
server sent: 

