#import <UIKit/UIKit.h>

@class SightsTableViewController, Sight;

@interface XMLParser : NSObject {

   NSMutableString *currentElementValue;
   NSMutableArray *allSights;
   NSMutableArray *Arr;
   SightsTableViewController *sightsDelegate;
   Sight *aSight; 
}

- (XMLParser *) initXMLParser; 
- (XMLParser *) arrayResult;

@property (nonatomic, retain) NSMutableArray *allSights;
@end   

#import <UIKit/UIKit.h>

@class SightsTableViewController, SightsDetailController;

@interface SightsTableViewController : UITableViewController <UITableViewDelegate>, UITableViewDataSource> {
    IBOutlet UITableView *sightsTableView;
    NSMutableArray *allSights;
    NSMutableArray *Arr;
    SightsDetailController *sightsDetailController;
    SightsTableViewController *sightsDelegate;

 }

 @property (nonatomic, retain) NSMutableArray *allSights;
 @property (nonatomic, retain) NSMutableArray *Arr;
 @property (nonatomic, retain) SightsDetailController *sightsDetailController;


 @end

#import "XMLParser.h"
#import "SightsTableViewController.h"
#import "Sight.h"

@implementation XMLParser
@synthesize allSights;
- (XMLParser *) arrayResult {

     Arr = [[NSMutableArray alloc] init];
     [Arr addObject:@"fisrt"];
     [Arr addObject:@"two"];
     [Arr addObject:@"three"];
     [Arr addObject:@"four"];
     [Arr addObject:@"five"];
     NSLog(@"%@", Arr);

     return Arr;
}

- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName 
   namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qualifiedName 
 attributes:(NSDictionary *)attributeDict {

        if([elementName isEqualToString:@"Sights"]) {
               //Initialize the array.
                sightsDelegate.allSights = [[NSMutableArray alloc] init];
        }
        else if([elementName isEqualToString:@"Sight"]) {

              //Initialize the sight.
              aSight = [[Sight alloc] init];

              //Extract the attribute here.
              aSight.sightID = [[attributeDict objectForKey:@"id"] integerValue];

              NSLog(@"Reading id value :%i", aSight.sightID);
         }

         NSLog(@"Processing Element: %@", elementName);
 }

 - (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName 
 namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName {

             if([elementName isEqualToString:@"Sights"])
               return;

          //There is nothing to do if we encounter the Sight element here.
          //If we encounter the Sight element howevere, we want to add the sight object to the array
          // and release the object.
          if([elementName isEqualToString:@"Sight"]) {
              //adding values
              [allSights addObject:aSight];

              [aSight release];
              aSight = nil;
          }
          else 
             [aSight setValue:currentElementValue forKey:elementName];

          [currentElementValue release];
          currentElementValue = nil;
  } 
  - (void) dealloc {
      [Arr release]; 
      [aSight release];
      [allSights release];
      [super dealloc];
}

@end

#import "SightsTableViewController.h"
#import "SightsDetailController.h"
#import "XMLParser.h"
#import "Sight.h"

@implementation SightsTableViewController
@synthesize sightsDetailController, allSights, Arr;
- (void)viewDidLoad {
         [super viewDidLoad];


         NSURL *url = [[NSURL alloc] initWithString:@"http://onsnab.ru/sights.xml"];
         NSXMLParser *xmlParser = [[NSXMLParser alloc] initWithContentsOfURL:url];

         //Initialize the delegate.
         XMLParser *parser = [[XMLParser alloc] initXMLParser];

         //Set delegate

         [xmlParser setDelegate:parser];

         //Start parsing the XML file.
         BOOL success = [xmlParser parse];

         if(success)
          NSLog(@"No Errors");
         else
          NSLog(@"Error Error Error!!!");

         [[XMLParser alloc] arrayResult];
            //showing NULL :(
         NSLog(@"%@", sightsDelegate.allSights);
         self.navigationItem.title = @"Sights";

   }

  - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
          return [sightsDelegate.allSights count];
  }

  - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {

            static NSString *CellIdentifier = @"Cell";

            UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (cell == nil) {
                cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:CellIdentifier] autorelease];
            }
            NSString *cellValue = [sightsDelegate.allSights objectAtIndex:indexPath.row];
            cell.text = cellValue;

            // Set up the cell
            return cell; 
}

- (void)dealloc {
         [sightsDelegate release];
         [sightsDetailController release];
         [super dealloc];
}


 @end

