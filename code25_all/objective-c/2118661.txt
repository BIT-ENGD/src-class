//setting up bitmap context
 size_t width = 400;
 size_t height = 400;
 size_t bitsPerComponent = 8;
 size_t bytesPerRow = 4 * width;
 void* imageData = malloc(bytesPerRow * height);
 CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB(); 
 CGContextRef context = CGBitmapContextCreate(imageData, width, height, bitsPerComponent, bytesPerRow, colorSpace, kCGImageAlphaPremultipliedLast);
 CFRelease(colorSpace);

 //transforming it to usual coordinate system
 CGRect mapRect = CGRectMake(0, 0, width, height);
 UIGraphicsPushContext(context);
 CGContextTranslateCTM(context, 0, mapRect.size.height);
 CGContextScaleCTM(context, 1, -1);

 //actull drawing - nothing complicated here, 2 lines and 3 text strings on white background
 CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);
 CGContextFillRect(context, mapRect);

 CGContextSetLineWidth(context, 3);
 CGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);

 CGContextMoveToPoint(context, 10, 10);
 CGContextAddLineToPoint(context, 20, 20);
 CGContextStrokePath(context);

 CGContextMoveToPoint(context, 20, 20);
 CGContextAddLineToPoint(context, 100, 100);
 CGContextStrokePath(context);

 [UIColor blackColor].set;
 [[NSString stringWithString:@"tag1"] drawInRect:CGRectMake(10, 10, 40, 15) withFont:[UIFont systemFontOfSize:15]];
 [[NSString stringWithString:@"tag2"] drawInRect:CGRectMake(20, 20, 40, 15) withFont:[UIFont systemFontOfSize:15]];
 [[NSString stringWithString:@"tag3"] drawInRect:CGRectMake(100, 100, 40, 15) withFont:[UIFont systemFontOfSize:15]];

 //getting UIImage from bitmap context
 CGImageRef _trueMap = CGBitmapContextCreateImage(context);
 if (_trueMap) {
  UIImage* _map = [UIImage imageWithCGImage:_trueMap];
  CFRelease(_trueMap);
  //displaying what we got
  //self.map leads to UIImageView
  self.map = _map;
 }

 //releasing context and memmory
 UIGraphicsPopContext();
 CFRelease(context);
 free(imageData);

@interface Painter : NSOperation {
 //The controller which contains UIImageView we will use to display image
 MapViewController* mapViewController;

 CGContextRef context;
 void* imageData;
}

@property (nonatomic, assign) MapViewController* mapViewController;

- (id) initWithRootController:(MapViewController*)mvc__;

@end

- (id) initWithRootController:(MapViewController*)mvc__ {
 if (self = [super init]) { 
  self.mapViewController = mvc__;
  size_t width = 400;
  size_t height = 400;
  size_t bitsPerComponent = 8;
  size_t bytesPerRow = 4 * width;
  imageData = malloc(bytesPerRow * height);
  CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB(); 
  context = CGBitmapContextCreate(imageData, width, height, bitsPerComponent, bytesPerRow, colorSpace, kCGImageAlphaPremultipliedLast);
  CFRelease(colorSpace);
 }
 return self;
}
- (void) main {
 size_t width = 400;
 size_t height = 400;

 //transforming it to usual coordinate system
 CGRect mapRect = CGRectMake(0, 0, width, height);
 UIGraphicsPushContext(context);
 CGContextTranslateCTM(context, 0, mapRect.size.height);
 CGContextScaleCTM(context, 1, -1);

 //actull drawing - nothing complicated here, 2 lines and 3 text strings on white background
 CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);
 CGContextFillRect(context, mapRect);

 CGContextSetLineWidth(context, 3);
 CGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);

 CGContextMoveToPoint(context, 10, 10);
 CGContextAddLineToPoint(context, 20, 20);
 CGContextStrokePath(context);

 CGContextMoveToPoint(context, 20, 20);
 CGContextAddLineToPoint(context, 100, 100);
 CGContextStrokePath(context);

 [UIColor blackColor].set;
 [[NSString stringWithString:@"tag1"] drawInRect:CGRectMake(10, 10, 40, 15) withFont:[UIFont systemFontOfSize:15]];
 [[NSString stringWithString:@"tag2"] drawInRect:CGRectMake(20, 20, 40, 15) withFont:[UIFont systemFontOfSize:15]];
 [[NSString stringWithString:@"tag3"] drawInRect:CGRectMake(100, 100, 40, 15) withFont:[UIFont systemFontOfSize:15]];

 //getting UIImage from bitmap context
 CGImageRef _trueMap = CGBitmapContextCreateImage(context);
 if (_trueMap) {
  UIImage* _map = [UIImage imageWithCGImage:_trueMap];
  CFRelease(_trueMap);
  //displaying what we got
  [mapViewController performSelectorOnMainThread:@selector(setMap:) withObject:_map waitUntilDone:YES];
 }

 //releasing context and memmory
 UIGraphicsPopContext();
 CFRelease(context);
 free(imageData);
}

NSOperationQueue* repaintQueue = [[NSOperationQueue alloc] init];
repaintQueue.maxConcurrentOperationCount = 1;
[repaintQueue addOperation:[[[Painter alloc] initWithRootController:self] autorelease]];

