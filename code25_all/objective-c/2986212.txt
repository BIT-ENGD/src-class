_kCATransitionFade", referenced from:
  _kCATransitionFade$non_lazy_ptr in ViewTransitionsAsViewControllerViewController.o
 (maybe you meant: _kCATransitionFade$non_lazy_ptr)

#import "ViewTransitionsAsViewControllerViewController.h"
#import <QuartzCore/QuartzCore.h>


@implementation ViewTransitionsAsViewControllerViewController
@synthesize containerView, doTransitionButton;
 // Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
 - (void)viewDidLoad {  
UIImage *image1 = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"image1.jpg" ofType:nil]];
view1 = [[UIImageView alloc] initWithImage:image1];
UIImage *image2 = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"image2.jpg" ofType:nil]];
view2 = [[UIImageView alloc] initWithImage:image2];
view2.hidden = YES;
[containerView addSubview:view1];
[containerView addSubview:view2];
transitioning = NO;

[super viewDidLoad];
}

 // Override to allow orientations other than the default portrait orientation.
 - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
 // Return YES for supported orientations
 return (interfaceOrientation == UIInterfaceOrientationPortrait);
 }

-(void)dealloc
{
[containerView release];
[view1 release];
[view2 release];
[super dealloc];
}

-(void)performTransition
{ 
// First create a CATransition object to describe the transition
CATransition *transition = [CATransition animation];
transition.duration = 0.05;
transition.timingFunction = [CAMediaTimingFunction      
functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
transition.type =kCATransitionFade;
transitioning = YES;
transition.delegate = self;
// Next add it to the containerView's layer. This will perform the transition based on how we change its contents.
[containerView.layer addAnimation:transition forKey:nil];
// Here we hide view1, and show view2, which will cause Core Animation to animate view1 away and view2 in.
view1.hidden = YES;
view2.hidden = NO;
 // And so that we will continue to swap between our two images, we swap the instance variables     referencing them.
UIImageView *tmp = view2;
view2 = view1;
view1 = tmp;
}

-(void)animationDidStop:(CAAnimation *)theAnimation finished:(BOOL)flag
{
 transitioning = NO;
}

-(IBAction) doTransition:(id)sender
{
 if(!transitioning)
{
[self performTransition];
}
}
@end

