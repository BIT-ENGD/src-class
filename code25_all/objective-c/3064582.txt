char ip[] = "192.168.0.244";
NSString *ipAddress = [[NSString alloc] initWithCString:ip];

/* Build our socket context; this ties an instance of self to the socket */
CFSocketContext CTX = { 0, self, NULL, NULL, NULL };

/* Create the server socket as a TCP IPv4 socket and set a callback */
/* for calls to the socket's lower-level connect() function */  
TCPClient = CFSocketCreate(NULL, PF_INET, SOCK_STREAM, IPPROTO_TCP, kCFSocketDataCallBack, (CFSocketCallBack)ConnectCallBack, &CTX);

if (TCPClient == NULL)
  return;

/* Set the port and address we want to listen on */
struct sockaddr_in addr;
memset(&addr, 0, sizeof(addr));
addr.sin_len = sizeof(addr);
addr.sin_family = AF_INET;
addr.sin_port = htons(PORT);
addr.sin_addr.s_addr = inet_addr([ipAddress UTF8String]);

CFDataRef connectAddr = CFDataCreate(NULL, (unsigned char *)&addr, sizeof(addr));
CFSocketConnectToAddress(TCPClient, connectAddr, -1);
CFRunLoopSourceRef sourceRef = CFSocketCreateRunLoopSource(kCFAllocatorDefault, TCPClient, 0);
CFRunLoopAddSource(CFRunLoopGetCurrent(), sourceRef, kCFRunLoopCommonModes);
CFRelease(sourceRef);
CFRunLoopRun();

/* The native socket, used for various operations */
// TCPClient is a CFSocketRef member variable
CFSocketNativeHandle sock = CFSocketGetNative(TCPClient);

Byte byteData[3];
byteData[0] = 0;
byteData[1] = 4;
byteData[2] = 0;

send(sock, byteData, strlen(byteData)+1, 0);

void ConnectCallBack(CFSocketRef socket, CFSocketCallBackType type, CFDataRef address, const void *data, void *info)
{
    // SocketsViewController is the class that contains all the methods
    SocketsViewController *obj = (SocketsViewController*)info;

    UInt8 *unsignedData = (UInt8 *) CFDataGetBytePtr(data);

    char *value = (char*)unsignedData;
    NSString *text = [[NSString alloc]initWithCString:value length:strlen(value)];
    [obj writeToTextView:text];
    [text release]; 
}

