- (void) startConnection
{
    char ip[] = "192.168.0.244";
    NSString *ipAddress = [[NSString alloc] initWithCString:ip];

    /* Build our socket context; this ties an instance of self to the socket */
    CFSocketContext CTX = { 0, self, NULL, NULL, NULL };

    /* Create the server socket as a TCP IPv4 socket and set a callback */
    /* for calls to the socket's lower-level connect() function */  
    TCPClient = CFSocketCreate(NULL, PF_INET, SOCK_STREAM, IPPROTO_TCP,
                               kCFSocketDataCallBack, (CFSocketCallBack)DataCallBack, &CTX);

    if (TCPClient == NULL)
        return;

    /* Set the port and address we want to listen on */
    struct sockaddr_in addr;
    memset(&addr, 0, sizeof(addr));
    addr.sin_len = sizeof(addr);
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT);// PORT = 5001
    addr.sin_addr.s_addr = inet_addr([ipAddress UTF8String]);

    CFDataRef connectAddr = CFDataCreate(NULL, (unsigned char *)&addr, sizeof(addr));
    CFSocketConnectToAddress(TCPClient, connectAddr, -1);
    CFRunLoopSourceRef sourceRef =
    CFSocketCreateRunLoopSource(kCFAllocatorDefault, TCPClient, 0);
    CFRunLoopAddSource(CFRunLoopGetCurrent(), sourceRef, kCFRunLoopCommonModes);
    CFRelease(sourceRef);
    CFRunLoopRun();
} 

- (void) send
{
    if (TCPClient == NULL)
        return;

    Byte byteData[3];   
    for (int i = 1; i <= 25; i++) {
        receivedLastAnswer = NO;
        globalPos = i;
        byteData[0] = i;
        byteData[1] = 4;
        byteData[2] = 0;
        int len = 3;//strlen(byte)+1;               
        CFDataRef refData = CFDataCreate(kCFAllocatorDefault, byteData, len);
        CFSocketSendData(TCPClient, NULL, refData, 0);
        while (!receivedLastAnswer) {
            //this while is to wait until a response is send by the server
         }
    }
}

