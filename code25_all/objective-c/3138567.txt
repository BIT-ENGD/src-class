#import <Foundation/Foundation.h>
#import "CustomColor.h"


@interface Properties : NSObject {
    UIColor *bgColor;
    CustomColor *bggColor;
}
@property(retain) UIColor *bgColor;
@property (retain) CustomColor *bggColor;

+ (id)sharedProperties;
@end

#import "Properties.h"

static Properties *sharedMyProperties = nil;

@implementation Properties

@synthesize bgColor;
@synthesize bggColor;

#pragma mark Singleton Methods
+ (id)sharedProperties
{
    @synchronized(self)
    {
            if(sharedMyProperties == nil)
            [[self alloc] init];
    }
    return sharedMyProperties;
}
+ (id)allocWithZone:(NSZone *)zone
{
    @synchronized(self)
    {
            if(sharedMyProperties == nil)
            {
                sharedMyProperties = [super allocWithZone:zone];
                return sharedMyProperties;
            }
    }
    return nil;
}
- (id)copyWithZone:(NSZone *)zone
{
  return self;
}
- (id)retain {
    return self;
}
- (unsigned)retainCount {
    return UINT_MAX; //denotes an object that cannot be released
}
- (void)release {
    // never release
}
- (id)autorelease {
    return self;
}
- (id)init {
    if (self = [super init])
    {
        bgColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:1.0];

        FSColor *bc = [[FSColor alloc] init];
        bc.red = bc.green = bc.blue = bc.hue = bc.sat = bc.bri = 0;
        bggColor = bc;

    }
    return self;
}
- (void)dealloc
{
    // Should never be called, but just here for clarity really.
    [bgColor release];
    [bggColor release];
    [super dealloc];
}
@end

- (void)drawRect:(CGRect)rect 
{
    Properties *sharedProprties = [Properties sharedProperties];
    …...
    ….
    CGContextSetFillColorWithColor(context, [[sharedProprties bgColor] CGColor]);
    …..
}

