#import "Intro_Scene.h"
#import "Main_Menu.h"
#import "Label.h"


@implementation Intro_Scene
@synthesize logo,label;

-(id) init
{
 self = [super init];

 if(self != nil)
 {
  //Load logo image and set position
  logo = [Sprite spriteWithFile:@"AVlogo_1.png"];
  logo.position = ccp(-50, 0);
  logo.scale = 1.8f;
  [self addChild: logo];

  //Creates 3 actions for the logo sprite
  id action0 = [MoveTo actionWithDuration:0 position:ccp(160,270)];
  id action1 = [FadeIn actionWithDuration:3];
  id action2 = [FadeOut actionWithDuration:3];

  //Logo runs the actions
  [logo runAction: [Sequence actions:action0,action1, action2, nil]];

  //Schedules the changeScene method to switch scenes to main menu within 6 seconds of loading.
  [self schedule: @selector(changeScene) interval:6.0f];

  //Creates a label and positions it, Alternative Visuals
  label = [Label labelWithString:@"Alternative Visuals" fontName:@"Verdana" fontSize:22];
  label.position = ccp(160, 120);
  [self addChild:label];

 }

 return self;
}

//Method called after intro has run its actions, after 6 seconds it switches scenes.
-(void)changeScene
{
 [self removeChild:logo cleanup:YES];
 [self removeChild:label cleanup:YES]; 

 Main_Menu *mainMenu = [Main_Menu node];
 [[Director sharedDirector] replaceScene: mainMenu];
}

-(void)dealloc
{
 [[TextureMgr sharedTextureMgr] removeUnusedTextures];
 [label release];
 [logo release];
 [super dealloc];
}
@end

#import "Main_Menu.h"
#import "Sprite.h"
#import "cocos2d.h"

@implementation Main_Menu
@synthesize background, controlLayer;
-(id) init
{
 self = [super init];
 if(self != nil)
 {
 //Create the default background for main menu not including directional pad and highlight box
 background = [Sprite spriteWithFile:@"Main_Menu_bg.png"];
 background.position = ccp(160,240);
 [self addChild:background];

  //Adds the control later class to the main menu, control layer class displays and controls the directional pad and selector. 
  ControlLayer *layer = [[ControlLayer alloc] init];
  self.controlLayer = layer;
  [layer release];
  [self addChild: controlLayer];
 }

 return self;
}

-(void) dealloc
{
    [seld removeChild:background cleanup:YES];
    [[TextureMgr sharedTextureMgr] removeUnusedTextures];
 [background release];
 [controlLayer release];
 [super dealloc];
}


@end

