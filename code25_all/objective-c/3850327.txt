+(void) makeEvent:(int) event:(AppleEvent *)theEvent
{
    int sig = 'dock';
    OSErr err;
    AEAddressDesc targetDesc;

    targetDesc.descriptorType = typeNull;
    targetDesc.dataHandle = nil;

    err = AECreateDesc(
                   typeApplSignature,
                   &sig, sizeof(int),
                   &targetDesc
                   );
    if(err) { NSLog(@"Error creating descriptor: %i\n", err); }

    err = AECreateAppleEvent(
                         'DKoP', event,
                         &targetDesc,
                         kAutoGenerateReturnID, kAnyTransactionID,
                         theEvent
                         );
    if(err) { NSLog(@"Error creating event: %i\n", err); }

    AEDisposeDesc(&targetDesc);
    targetDesc.descriptorType = typeNull;
    targetDesc.dataHandle = nil;
}

addIntParm
+(void) addIntParm:(int) parm: (int) keyword: (AppleEvent *)theEvent
{
    OSErr err = AEPutParamPtr(
                              theEvent, keyword,
                              typeSInt32, &parm, sizeof(parm)
                              );
    if(err) { NSLog(@"Error setting parameter: %i\n", err); }
}

addFloatParm
+(void) addFloatParm:(float) parm: (int) keyword: (AppleEvent *)theEvent
{
    OSErr err = AEPutParamPtr(
                              theEvent, keyword,
                              typeIEEE32BitFloatingPoint, &parm, sizeof(parm)
                              );
    if(err) { NSLog(@"Error setting parameter: %i\n", err); }
}

sendEvent
+(void) sendEvent:(AppleEvent *)theEvent
{
    OSErr err = AESend(
                       theEvent, nil, kAENoReply, //kAEWaitReply
                       kAENormalPriority, kNoTimeOut,
                       nil, nil
                       );
    if(err) { NSLog(@"Error sending: %i\n", err); }
}

Test
+ (void) Test:(int)wid:(int)w:(int)h:(void*)points
{
    AppleEvent theEvent;
    [self makeEvent:'warp' :&theEvent];
    [self addIntParm:wid :'wnid' :&theEvent];
    [self addIntParm:w :'wwrp' :&theEvent];
    [self addIntParm:h :'hwrp' :&theEvent];
    [self addDataParm:points :sizeof(float)*4*h*w :'pots' :&theEvent];
    [self sendEvent:&theEvent];
    AEDisposeDesc(&theEvent);
}

