-(void)sendMessagePacket:(GKSession *)session packetID:(int)packetID withData:(void *)data ofLength:(int)length reliable:(BOOL)howtosend {

static unsigned char networkPacket[maxPacketSize];
const unsigned int packetHeaderSize = 2 * sizeof(int); // we have two "ints" for our header

if(length < (maxPacketSize - packetHeaderSize)) { // our networkPacket buffer size minus the size of the header info
    int *pIntData = (int *)&networkPacket[0];
    // header info
    pIntData[0] = 10;
    pIntData[1] = packetID;

    // copy data in after the header
    memcpy( &networkPacket[packetHeaderSize], data, length ); 

    NSData *packet = [NSData dataWithBytes: networkPacket length: (length+8)];

    if(howtosend == YES) { 
        [session sendDataToAllPeers:packet withDataMode:GKSendDataReliable error:nil];
    } else {
        [session sendDataToAllPeers:packet withDataMode:GKSendDataUnreliable error:nil];
    }
}   

- (void)receiveData:(NSData *)data fromPeer:(NSString *)peer inSession: (GKSession *)session context:(void *)context {
// Caller whenever data is received from the session
unsigned char *incomingPacket = (unsigned char *)[data bytes];  

//EXPECTS THAT WHAT IS IN INCOMING PACKET [0] TO BE OF DATA TYPE INTEGER
int *pIntData = (int *)&incomingPacket[0];

int packetTime = pIntData[0];

int packetID = pIntData[1];

static int lastPacketTime = -1;

    switch (packetID) {
    case NETWORK_COINTOSS:
        //DO SOMETHING
        break;

        case NETWORK_TEXT_EVENT:

            NSString *fewMore = (NSString *)&incomingPacket[8];

             fewThings *bitMore = &fewMore[peer];

            //NSLog(@"Trace Bit More: %@",fewMore);
            break;
    default:
        break;
}


NSInteger lengthBytes = [data length];
NSLog(@"Length of data : %i", lengthBytes);

    NSString *bigWord = @"BigWordBigWord";
NSInteger len = [bigWord length];
[self sendMessagePacket:gameSession  packetID:NETWORK_TEXT_EVENT withData:bigWord ofLength:(len) reliable:YES];

