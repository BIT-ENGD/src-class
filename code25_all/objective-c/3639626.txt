NSMutableArray
categories
NSArrayController
categories
NSCollectionView
Category
[category save]
[category save]
[category destroy]
    [self addObserver:self 
           forKeyPath:@"categories" 
              options:(NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld) 
              context:MyCategoriesContext];
    self.categories = [Category getCategories];

- (void)observeValueForKeyPath:(NSString *)keyPath 
                      ofObject:(id)object 
                        change:(NSDictionary *)change 
                       context:(void *)context 
{
    NSNumber *changeKind = (NSNumber *)[change objectForKey:@"NSKeyValueChangeKind"];
    if (context == MyCategoriesContext) 
    {
        switch ([changeKind intValue]) 
        {
            case NSKeyValueChangeInsertion: 
            {
                Category *c = (Category *)[change objectForKey:NSKeyValueChangeNewKey];
                NSLog(@"saving new category: %@", c);
                [c save];
                break;
            }
            case NSKeyValueChangeRemoval:
            {
                Category *c = (Category *)[change objectForKey:NSKeyValueChangeOldKey];
                NSLog(@"deleting removed category: %@", c);
                [c destroy];
                break;
            }
            case NSKeyValueChangeReplacement:
            {
              // not a scenario we're interested in right now...
                NSLog(@"category replaced with: %@", (Category *)[change objectForKey:NSKeyValueChangeNewKey]);
                break;
            }
            default: // gets hit when categories is set directly to a new array
            {
                NSLog(@"categories changed, observing each");
                NSMutableArray *categories = (NSMutableArray *)[object valueForKey:keyPath];
                NSIndexSet *allIndexes = [NSIndexSet indexSetWithIndexesInRange:NSMakeRange(0, [categories count])];
                [self observeCategoriesAtIndexes:allIndexes];
                break;
            }
        }
    } 
    else if (context == MyCategoryContext) 
  { 
            NSLog(@"saving category for change to %@", keyPath);
            [(Category *)object save];
  }
    else 
    {
        // pass it on to NSObject/super since we're not interested
        NSLog(@"ignoring change to %@:@%@", object, keyPath);
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}

categories
- (void)observeCategoriesAtIndexes:(NSIndexSet *)indexes {
        [categories addObserver:self 
             toObjectsAtIndexes:indexes 
                     forKeyPath:@"dirty"
                        options:(NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld) 
                        context:MyCategoryContext];
}

remove:
categories
2010-09-03 13:51:14.289 MyApp[7207:a0f] An instance 0x52db80 of class Category was deallocated while key value observers were still registered with it. Observation info was leaked, and may even become mistakenly attached to some other object. Set a breakpoint on NSKVODeallocateBreak to stop here in the debugger. Here's the current observation info:
<NSKeyValueObservationInfo 0x52e100> (
<NSKeyValueObservance 0x2f1a480: Observer: 0x2f0fa00, Key path: dirty, Options: <New: YES, Old: YES, Prior: NO> Context: 0x1a67b4, Property: 0x2f1a3d0>
...
)

[category destroy]
