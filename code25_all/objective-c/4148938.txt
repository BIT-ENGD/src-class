- (void)viewWillAppear:(BOOL)animated{ 
 [super viewDidLoad];
 [self parsingTheStation];
 [self load_images];
 [self setSongsScrollView];
}

/*
 // Implement loadView to create a view hierarchy programmatically, without using a nib.
 - (void)loadView {
 }
 */


- (void)parsingTheStation{
 NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@"http:...."]];
 NSData *response = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:nil];
 NSString *jsonString = [[NSString alloc] initWithData:response encoding:NSUTF8StringEncoding];
 NSData *jsonData = [jsonString dataUsingEncoding:NSUTF32BigEndianStringEncoding];
 NSDictionary *dictionary = [[CJSONDeserializer deserializer] deserializeAsDictionary:jsonData error:nil];

 songs =[[NSMutableArray alloc]init];
 NSArray *songObjects = [dictionary objectForKey:@"songs"];
 for(NSDictionary *s in songObjects){
  aSong = [[Song alloc] init];
  aSong.artist = [s objectForKey:@"by"];
  aSong.genre = [s objectForKey:@"genre"];
  aSong.cover = [s objectForKey:@"cover"];
  aSong.song_id = [s objectForKey:@"id"];
  aSong.rank = [s objectForKey:@"rank"];
  aSong.title = [s objectForKey:@"title"];
  aSong.link = [s objectForKey:@"link"];
  [songs addObject:aSong];
  [aSong release];  
 }

 NSLog(@"total number of songs is : %d",[songs count]);

}

-(void)setSongsScrollView {
 songsContainer = [[UIScrollView alloc]init];
 int songsCount = [self.songs count];
 //totla no. of songs we get +4
 int tSongs = songsCount+4;
 int n = sqrt(tSongs);
 int p = n,q = n;
 int remSongs = tSongs-(n*n);
 if(remSongs >= n){
  q = q+(remSongs/n);
  if((remSongs%n)>0)
   q++;
 }else q++;
 for(int i=0;q>p;i++){
  q--;
  p++;
 }

 NSLog(@"total songs..%d",tSongs);
 NSLog(@"total rows..%d",q);
 NSLog(@"total columns..%d",p); 

 songsContainer.contentSize = CGSizeMake(120*q, 120*p);
 int x =0, y=240, col=1;
 for(int i=0;i<songsCount;i++){
  CGRect imgFrame = CGRectMake(x, y, 118, 118);
  NSLog(@"songs conunt ...%d",[songs count]);
  Song *thesong = [[Song alloc]init];
  thesong = [self.songs objectAtIndex:i];
  NSString *filename = [NSString stringWithFormat:@"%@/%@", [LazyImageView dataPath], [thesong.cover lastPathComponent]];
  UIImageView *tempImg = [[UIImageView alloc] initWithImage:[UIImage imageWithContentsOfFile:filename]];
  tempImg.tag = i;
  tempImg.frame = imgFrame;
  [songsContainer addSubview:tempImg];
  [tempImg release];
  [thesong release];

  y += 120;
  if(y>=(120*p)){
   NSLog(@"total y..%d",y);
   col++;
   x += 120;
   if(col>=3)
    y=0;
   else 
    y=240;
  }  
 }
 NSLog(@"total y..%d",y);
 NSLog(@"content size..%d,%d",120*q,120*p);
}

-(void)load_images{
 for(int i=0;i<[songs count];i++){
  Song *rsong = [[Song alloc]init];
  rsong = [self.songs objectAtIndex:i];
  lazyBigImg = [[LazyImageView alloc] init];
  NSURL* url = [NSURL URLWithString:rsong.cover];
  [lazyBigImg loadImageFromURL:url];
  [lazyBigImg release];
  [rsong release];
 }
}

/*
 // Override to allow orientations other than the default portrait orientation.
 - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
 // Return YES for supported orientations
 return (interfaceOrientation == UIInterfaceOrientationPortrait);
 }
 */

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];

    // Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}


- (void)dealloc {
 [songs release];
 [lazyBigImg release];
 [onAirBtn release];
 [chartsBtn release];
 [dealsBtn release];
 [searchBtn release];
 [stNameLbl release];
 [aSong release];
 [songsContainer release];
    [super dealloc];
}


@end

