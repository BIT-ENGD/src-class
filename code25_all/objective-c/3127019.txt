***
***
#import <UIKit/UIKit.h>
#import "AppData.h"
#import "Constants.h"

@interface iLeanAppDelegate : NSObject <UIApplicationDelegate> {
    AppData *appData;
    UIWindow *window;
    UITabBarController *tabBarController;
}

@property (nonatomic, retain) IBOutlet UIWindow *window;
@property (nonatomic, retain) IBOutlet UITabBarController *tabBarController;
@property (nonatomic, retain) AppData *appData;

@end

#import "iLeanAppDelegate.h"


@implementation iLeanAppDelegate

@synthesize window;
@synthesize tabBarController; 
@synthesize appData;

- (void)applicationDidFinishLaunching:(UIApplication *)application {

    appData = [[AppData alloc] init];
    if ([[NSFileManager defaultManager] fileExistsAtPath:[AppData dataFilePath]]) {         //If previous settings have been found retrieve and initialise
        NSData *data = [[NSMutableData alloc] initWithContentsOfFile:[AppData dataFilePath]];
        NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];
        [unarchiver finishDecoding];    
    appData = [unarchiver decodeObjectForKey:kDataKey];
        [unarchiver finishDecoding];

    [unarchiver release];
    [data release];
}

// Add the tab bar controller's current view as a subview of the window
[window addSubview:tabBarController.view];
}

-(void)applicationWillTerminate:(NSNotification *)notification {
    NSMutableData *data = [[NSMutableData alloc] init];
    NSKeyedArchiver *archiver = [[NSKeyedArchiver alloc] initForWritingWithMutableData:data];
    [archiver encodeObject:appData forKey:kDataKey];
    [archiver finishEncoding];
    BOOL success = [data writeToFile:[AppData dataFilePath] atomically:YES];
    if (success)
        NSLog(@"OK");
    else
        NSLog(@"Problem here");
    [archiver release];
    [data release];

}

- (void)dealloc {
    [tabBarController release];
    [window release];
[appData release];
    [super dealloc];
}

@end

#import <Foundation/Foundation.h>
#import "Constants.h"

@interface AppData : NSObject <NSCoding, NSCopying> {

    BOOL audioAlert;        //YES = audio alerts are on, NO = audio alerts are off
}

+(NSString *)dataFilePath;

@property(nonatomic, assign) BOOL audioAlert;

@end

#import "AppData.h"


@implementation AppData

@synthesize audioAlert;


+(NSString *)dataFilePath {
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDirectory = [paths objectAtIndex:0];
    return [documentsDirectory stringByAppendingPathComponent:kSettingsFilename];
}


#pragma mark NSCoding

-(void)encodeWithCoder:(NSCoder *)encoder {

    [encoder encodeBool:audioAlert forKey:kSettingsKey];
}

-(id)initWithCoder:(NSCoder *)decoder {
    if (self = [super init]) {
        self.audioAlert = [decoder decodeObjectForKey:kSettingsKey];
    }

    return self;
}

#pragma mark -
#pragma mark NSCopying

-(id)copyWithZone:(NSZone *)zone {
    AppData *copy = [[[self class] allocWithZone: zone] init];
//Will do this once coding works
    return copy;
}

@end

#define kSettingsFilename   @"archive"  //Filename where all application settings are stored

#define kSettingsKey        @"settingsKey"      //Key name
#define kDataKey            @"data"

