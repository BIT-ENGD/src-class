-viewDidLoad
UIToolbar *toolbar = [[UIToolbar alloc] init];

UIBarButtonItem *flexibleSpace = [UIBarButtonItem alloc];
flexibleSpace = [flexibleSpace initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                                                    target:nil
                                                    action:nil];

// Add a back button to allow user to close the modal view
NSString *back = NSLocalizedString(@"Back", nil);
UIBarButtonItem *backButton = [UIBarButtonItem alloc];
backButton = [backButton initWithTitle:back
                                 style:UIBarButtonItemStyleDone
                                target:self
                                action:@selector(dismissModalViewControllerAnimated:)];

// Add a centered title to the toolbar

// I doubt this is the "correct" way to do this, but it seems to work.
// The "width" property of a UIBarButtonItem doesn't seem to correspond to
// the actual width if the button is flexible (i.e. the width isn't explicitly
// set), so I'm using this hack instead.
// This is obviously NOT an optimal solution. For one thing, if the button padding
// ever changes, it has to be changed manually here as well. For another, it is
// a pain to do this for every button I add to the toolbar, and furthermore the title
// is centered only according to its own width, not the toolbar's.
const CGRect toolbarFrame = [toolbar frame];
const CGFloat backWidth = [back sizeWithFont:[UIFont boldSystemFontOfSize:[UIFont buttonFontSize]]
                           constrainedToSize:toolbarFrame.size].width;

const CGRect titleFrame = {{0.0f, 0.0f},
                           {toolbarFrame.size.width - (backWidth * 2.0f), 50.0f}};
UILabel *titleLabel = [[UILabel alloc] initWithFrame:titleFrame];
[titleLabel setText:[self title]];
[titleLabel setBackgroundColor:[UIColor clearColor]];
[titleLabel setTextAlignment:UITextAlignmentCenter];
[titleLabel setFont:[UIFont boldSystemFontOfSize:20.0f]];
[titleLabel setTextColor:[UIColor whiteColor]];
[titleLabel setShadowColor:[UIColor colorWithWhite:0.0f alpha:0.5f]];
[titleLabel setShadowOffset:CGSizeMake(0.0f, -1.0f)];

UIBarButtonItem *titleItem = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];
[titleLabel release];

NSArray *items = [[NSArray alloc] initWithObjects:flexibleSpace, titleItem, backButton, nil];
[flexibleSpace release];
[titleItem release];
[backButton release];

[toolbar setItems:items];
[items release];

[view addSubview:toolbar];
[toolbar release];

MyCustomViewController *myModalViewController = [[MyModalViewController alloc] init];
[myModalViewController setTitle:@"Foo"];

UINavigationController *modalNavController = [[UINavigationController alloc] initWithRootView:myModalViewController];
[myModalViewController release];

// This is intended to be presented in another view controller class
[self presentModalViewController:modalNavController animated:YES];
[modalNavController release];

-init
- (id)init
{
    if (self = [super init]) {
        UIBarButtonItem *backButtonItem = [UIBarButtonItem alloc];
    backButtonItem = [backButtonItem initWithTitle:back
                                                     style:UIBarButtonItemStyleDone
                                                    target:[self navigationController]
                                                    action:@selector(dismissModalViewControllerAnimated:)];
        [[self navigationItem] setRightBarButtonItem:backButtonItem];
        [backButtonItem release];
    }
    return self;
}

