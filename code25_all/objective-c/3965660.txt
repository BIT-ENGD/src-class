#import <Foundation/Foundation.h> 
#import <Cocoa/Cocoa.h> 
#import <IOBluetooth/objc/IOBluetoothDeviceInquiry.h>
#import <IOBluetooth/objc/IOBluetoothDevice.h>
#import <IOBluetooth/objc/IOBluetoothHostController.h>
#import <IOBluetooth/IOBluetoothUtilities.h>

@interface getRSSI: NSObject {}
-(void) readRSSIForDeviceComplete:(id)controller device:(IOBluetoothDevice*)device 
                             info:(BluetoothHCIRSSIInfo*)info error:(IOReturn)error; 
@end

@implementation getRSSI
- (void) readRSSIForDeviceComplete:(id)controller device:(IOBluetoothDevice*)device 
                              info:(BluetoothHCIRSSIInfo*)info error:(IOReturn)error
{
    if (error != kIOReturnSuccess) {
        NSLog(@"readRSSIForDeviceComplete return error");
        CFRunLoopStop(CFRunLoopGetCurrent());
    }
    if (info->handle == kBluetoothConnectionHandleNone) {
        NSLog(@"readRSSIForDeviceComplete no handle");
        CFRunLoopStop(CFRunLoopGetCurrent());
    }
    NSLog(@"RSSI = %i dBm ", info->RSSIValue);
    [NSThread sleepUntilDate: [NSDate dateWithTimeIntervalSinceNow: 5]];
    [device closeConnection];
    [device openConnection];
    [controller readRSSIForDevice:device];
}
@end

int main (int argc, const char * argv[]) { 
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init]; 
    NSLog(@"start"); 

    IOBluetoothHostController *hci = [IOBluetoothHostController defaultController];
    NSString *addrStr = @"xx:xx:xx:xx:xx:xx";
    BluetoothDeviceAddress addr;
    IOBluetoothNSStringToDeviceAddress(addrStr, &addr);
    IOBluetoothDevice *device = [[IOBluetoothDevice alloc] init];
    device = [IOBluetoothDevice withAddress:&addr];
    [device retain];
    [device openConnection];
    getRSSI *rssi = [[getRSSI alloc] init];
    [hci setDelegate:rssi];
    [hci readRSSIForDevice:device];
    CFRunLoopRun();
    [hci release];
    [rssi release];
    [pool release]; 
    return 0; 
}

