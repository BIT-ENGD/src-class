[EAGLContext setCurrentContext:context]; 
glBindFramebufferOES(GL_FRAMEBUFFER_OES, viewFramebuffer);

//clears the color buffer bit
glClear(GL_COLOR_BUFFER_BIT);

glMatrixMode(GL_PROJECTION);

//sets up the scene w/ ortho projection
glViewport(0, 0, 320, 480);
glLoadIdentity();

glOrthof(320, 0, dynamicData.cam_x2, dynamicData.cam_x1, 1.0, -1.0);
glClearColor(1.0, 1.0, 1.0, 1.0);

/*error checking code here*/

 glTranslatef(dynamicData.ship_x, dynamicData.ship_y, 0.0);


    typedef struct {
      float ship_x, ship_y;
      float cam_x1, cam_x2;
    } dynamicRenderData;

- (dynamicRenderData)getDynRenderData
{
    //d_rd is an ivar, zeroed on initialization
    d_rd.ship_x = mainShip.position.x;
    d_rd.ship_y = mainShip.position.y;
    d_rd.cam_x1 = d_rd.ship_x - 30.0f;
    d_rd.cam_x2 = d_rd.cam_x1 + 480.0f;

    return d_rd;
}

d_rd.ship_x = 0;
- (void)draw: (dynamicRenderData)dynamicData
- (void)drawView: (dynamicRenderData)dynamicData
//controller
[glview draw: [world getDynRenderData]];

//glview (within draw)
[renderer drawView: dynamicData];

