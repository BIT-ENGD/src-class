#import <Cocoa/Cocoa.h>

@interface MyOpenGL : NSOpenGLView
{
 float rot;
 NSTimer *timer;
}

//+(NSOpenGLPixelFormat*) basicPixelFormat;

-(void) animTimer : (NSTimer *) timer;
-(void) drawRect : (NSRect) bounds;

@end

#include <OpenGL/gl.h>

#import <Cocoa/Cocoa.h>
#import "MyOpenGL.h"

@implementation MyOpenGL

/*
+ (NSOpenGLPixelFormat*) basicPixelFormat
{
    NSOpenGLPixelFormatAttribute attributes [] = {
        NSOpenGLPFAWindow,
        NSOpenGLPFADoubleBuffer,
        NSOpenGLPFADepthSize, (NSOpenGLPixelFormatAttribute)16,
        (NSOpenGLPixelFormatAttribute)nil
    };
    return [[[NSOpenGLPixelFormat alloc] initWithAttributes:attributes] autorelease];
}

-(id) initWithFrame : (NSRect) frameRect
{
 NSOpenGLPixelFormat * pf = [MyOpenGL basicPixelFormat];

 return self = [super initWithFrame: frameRect pixelFormat: pf];
}
*/

-(void) awakeFromNib
{
 rot = 0;
    timer = [NSTimer timerWithTimeInterval: (1.0f/60.0f)
         target:self
          selector:@selector(animTimer:)
          userInfo:nil
           repeats:YES];

 [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
 [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSEventTrackingRunLoopMode];
}

-(void) animTimer : (NSTimer *) atime
{
 [self setNeedsDisplay: YES];
 [self drawRect:[self bounds]];
}

-(void) drawRect: (NSRect) bounds
{
 glClearColor(0,0,0,0);
 glClear(GL_COLOR_BUFFER_BIT);
 glLoadIdentity();
 glRotatef(rot,1,0,0);

 glBegin(GL_TRIANGLES);
 {
  glColor3f(1,0,0); glVertex3f(0,0.6,0);
  glColor3f(0,1,0); glVertex3f(-0.2,-0.3,0);
  glColor3f(0,0,1); glVertex3f(0.2,0.3,0);
 }
 glEnd();

 glFlush();
 rot++;
}

@end

+(NSOpenGLPixelFormat*) basicPixelFormat;
-(id) initWithFrame : (NSRect) frameRect
drawRect
