#import <Cocoa/Cocoa.h>


@interface AppController : NSObject <NSSpeechSynthesizerDelegate, NSTableViewDelegate>
{
    IBOutlet NSTextField *textField;
    NSSpeechSynthesizer *speechSynth;
    IBOutlet NSButton *stopButton;
    IBOutlet NSButton *startButton;
    IBOutlet NSTableView *tableView;
    NSArray *voiceList;

}

- (IBAction)sayIt:(id)sender;
- (IBAction)stopIt:(id)sender;

@end

#import "AppController.h"


@implementation AppController

- (id)init
{
    [super init];

    //Log to help me understand what is happening
    NSLog(@"init");

    speechSynth = [[NSSpeechSynthesizer alloc] initWithVoice:nil];
    [speechSynth setDelegate:self];
    voiceList = [[NSSpeechSynthesizer availableVoices] retain];
    return self;
}

- (IBAction)sayIt:(id)sender
{

    NSString *string = [[textField stringValue] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];

    //Is the string zero-length?
    if([string length] == 0) {
        NSLog(@"String from %@ is a string with a length of %d.", textField, [string length]);
        [speechSynth startSpeakingString:@"Please enter a phrase first."];
    }
    [speechSynth startSpeakingString:string];
    NSLog(@"Started to say: %@", string);
    [stopButton setEnabled:YES];
    [startButton setEnabled:NO];
}

- (IBAction)stopIt:(id)sender
{
    NSLog(@"Stopping...");
    [speechSynth stopSpeaking];
}

- (void) speechSynthesizer:(NSSpeechSynthesizer *)sender didFinishSpeaking:(BOOL)complete
{
    NSLog(@"Complete = %d", complete);
    [stopButton setEnabled:NO];
    [startButton setEnabled:YES];
}

- (NSInteger)numberOfRowsInTableView:(NSTableView *)aTableView
{
    return [voiceList count];
}

- (id)tableView: (NSTableView *)tv objecValueForTableColumn: (NSTableColumn *)tableColumn
            row:(NSInteger)row
{
    NSString *v = [voiceList objectAtIndex:row];
    NSLog(@"v = %@",v);
    NSDictionary *dict = [NSSpeechSynthesizer attributesForVoice:v];
    return [dict objectForKey:NSVoiceName];
}

/*
- (BOOL)respondsToSelector:(SEL)aSelector
{
    NSString *methodName = NSStringFromSelector(aSelector);
    NSLog(@"respondsToSelector: %@", methodName);
    return [super respondsToSelector:aSelector];
}
*/

@end

