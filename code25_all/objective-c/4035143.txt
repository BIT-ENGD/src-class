[APIMachine getToken]
[APIMachine getToken]
static PoorAPI2 *_instance;
@implementation PoorAPI2

@synthesize apiToken, timeOpened, tokenTTL;

+ (PoorAPI2*)sharedAPI
{

    @synchronized(self) {
        if (_instance == nil) {         
            _instance = [[super allocWithZone:NULL] init];
        }
    }
    return _instance;
}

-(NSString *)API_open{

    //boring code to get api token redacted

if ([doneness isEqualToString:@"success"]) {
    NSDictionary *data = [json objectForKey:@"data"];
    apiToken = [data objectForKey:@"api_token"];
    tokenTTL = [data objectForKey:@"ttl"];
    timeOpened = [NSDate date];

}else{
    NSLog(@"FFFFFFFUUUUUUUUUUUU this error should be handled better.");
}

return apiToken;    
}

-(BOOL)isConnectionOpen{
    return ([timeOpened timeIntervalSinceNow]  > tokenTTL);
}

-(NSString *)getToken{
    if([self isConnectionOpen]){
        return apiToken;
    }else{
        return [_instance API_open];
    }
}

-(id)init{
    if(self = [super init]){
        apiToken = [[NSString alloc] initWithString:@""];
        timeOpened = [[NSDate alloc] initWithTimeIntervalSinceNow:0];
        tokenTTL = 0;
    }
    return self;
}

+ (id)allocWithZone:(NSZone *)zone
{   
    return [[self sharedAPI]retain];    
}

- (id)copyWithZone:(NSZone *)zone
{
    return self;    
}

- (id)retain
{   
    return self;    
}

- (unsigned)retainCount
{
    return NSUIntegerMax;  //denotes an object that cannot be released
}

- (void)release
{
    //do nothing
}

- (id)autorelease
{
    return self;    
}

@end

