- (id)copyWithZone:(NSZone *)zone 
{
     return [self retain];
}

- (id)copyWithZone:(NSZone *)zone
{
    NSCell *cellCopy = NSCopyObject(self, 0, zone);
    /* Assume that other initialization takes place here. */
    cellCopy->image = nil;
    [cellCopy setImage:[self image]];
    return cellCopy;
}

@interface MySampleClass : NSObject {
NSString *myName;
NSString *myTitle;
BOOL     isAFlag;

NSArray *aListOfProperites; // collection holds objects of another class named 'MySampleProperty'
}

@property (nonatomic, copy, readonly) NSString *myName;
@property (nonatomic, copy, readonly) NSString *myTitle;
@property (nonatomic, readonly) BOOL isAFlag;

@property (nonatomic, copy, readonly) NSArray *aListOfProperties;

-(id)initWithNameTitleAndFlag:(NSString *)aName title:(NSString *)aTitle flag:(BOOL)aFlag;

-(void)addProperty:(MySampleProperty *)aProperty;
@end

@implementation MySampleClass

-(id)initWithNameTitleAndFlag:(NSString *)aName title:(NSString *)aTitle flag:(BOOL)aFlag
{
    self = [super init];
    if (nil != self)
    {
       [self setMyName:aName];
       [self setMyTitle:aTitle];
       [self setAFlag:aFlag];
    }
    return self;
}

// all of my object setters do a 'copy' instead of retain or assign
-(void)setMyName:(NSString *)aNewName
{
if (aNewName != myName) 
{
     [myName release];
     myName = [aNewName copy];
}
}
- (id)copyWithZone:(NSZone *)zone
{
// do I do a simple retain on the object or follow NSCopyObject policies?
}

@end

