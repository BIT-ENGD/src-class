stack trace:

  17 UIKit     528 Bytes  -[UIApplication _run]

  16 UIKit      64 Bytes  -[UIApplication sendEvent:]

  15 UIKit      64 Bytes  -[UIApplication handleEvent:withNewEvent:]

  14 UIKit      64 Bytes  -[UIApplication _runWithURL:sourceBundleID:]

  13 UIKit      16 Bytes  -[UIApplication _performInitializationWithURL:sourceBundleID:]

  12 helm      16 Bytes  -[helmAppDelegate applicationDidFinishLaunching:] Classes/helmAppDelegate.m:113

  11 helm      16 Bytes  +[CoreDataHelper entityWithUIDexists:::] Classes/CoreDataHelper.m:50

  10 helm      16 Bytes  +[CoreDataHelper searchObjectsInContextCopy:::::] Classes/CoreDataHelper.m:39

   9 CoreData      16 Bytes  -[NSManagedObjectContext executeFetchRequest:error:]

   8 CoreData      16 Bytes  -[NSPersistentStoreCoordinator(_NSInternalMethods) executeRequest:withContext:]

   7 CoreData      16 Bytes  -[NSSQLCore executeRequest:withContext:]

   6 CoreData      16 Bytes  -[NSSQLiteConnection connect]

   5 CoreData      16 Bytes  -[NSSQLConnection createSchema]

   4 CoreData      16 Bytes  -[NSSQLConnection createTablesForEntities:]

   3 CoreData      16 Bytes  -[NSSQLConnection createTableForEntity:]

   2 CoreData      16 Bytes  -[NSSQLAdapter newCreateTableStatementForEntity:]

   1 Foundation      16 Bytes  -[NSCFString appendFormat:]

   0 CoreFoundation      16 Bytes  -[NSObject respondsToSelector:]

BOOL b=[CoreDataHelper entityWithUIDexists:@"AddressBook" :context :[NSNumber numberWithInt:1]];

+(NSMutableArray *) searchObjectsInContextCopy: (NSString*) entityName : (NSManagedObjectContext *) managedObjectContext : (NSPredicate *) predicate : (NSString*) sortKey : (BOOL) sortAscending 
{
    NSLog(@"searchObjectsInContext");
    NSFetchRequest *request = [[NSFetchRequest alloc] init];
    NSEntityDescription *entity = [NSEntityDescription entityForName:entityName inManagedObjectContext:managedObjectContext];
    [request setEntity:entity]; 

    // If a predicate was passed, pass it to the query
    if(predicate != nil)
    {
        [request setPredicate:predicate];
    }

    // If a sort key was passed, use it for sorting.
    if(sortKey != nil)
    {
        //NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:sortKey ascending:sortAscending selector: @selector(caseInsensitiveCompare:)];
        NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:sortKey ascending:sortAscending selector: @selector(caseInsensitiveCompare:)];
        NSArray *sortDescriptors = [[NSArray alloc] initWithObjects:sortDescriptor, nil];
        [request setSortDescriptors:sortDescriptors];
        [sortDescriptors release];
        [sortDescriptor release];
    }

    NSError *error;

    NSMutableArray *mutableFetchResults = [[managedObjectContext executeFetchRequest:request error:&error] mutableCopy];

    [request release];

    return mutableFetchResults;
}


+(BOOL) entityWithUIDexists: (NSString *) entityName : (NSManagedObjectContext *) managedObjectContext : (NSNumber *) uid {
    BOOL b;
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"(uid == %@)", uid];
    NSMutableArray *ary=[self searchObjectsInContextCopy: entityName : managedObjectContext : predicate : nil : YES]; 
    if(ary==nil) {
        b=NO;
    } else {
        b=[ary count] >0 ? YES :NO;
    }

    [ary release];
    return b;
}

