UITabBarController
UItableViewController
managedObjectContext
UITableViewController
viewDidLoad:
MessageAppDelegate *appDelegate = (MessageAppDelegate *)[[UIApplication sharedApplication] delegate];
managedObjectContext = [appDelegate managedObjectContext];

UITableViewCell
didSelectRowAtIndexPath
[self readMessage:pk];
-(void)readMessage:(NSInteger)pk {  
// First I select the data
NSFetchRequest *request = [[NSFetchRequest alloc] init];
// had to setReturnsObjectsAsFaults to NO so I could access the message data
[request setReturnsObjectsAsFaults:NO];
NSEntityDescription *entity = [NSEntityDescription entityForName:@"Message" inManagedObjectContext:self.managedObjectContext];
[request setEntity:entity];
NSPredicate *predicate = [NSPredicate predicateWithFormat:@"pk == %d", pk];
[request setPredicate:predicate];

NSError *error;
NSArray *items = [self.managedObjectContext executeFetchRequest:request error:&error];
[request release];

// Then I update the object
for (Message *thisMessage in items) {
    //I display the message to the console before updating to check the value
    DLog(@"before reading message %@", thisMessage);
    // we set the message flat to YES
    [thisMessage setRead:YES];
    // we set some sample text here (just for testing)
    [thisMessage setMessageText:@"New message text"];
    // I then display the message to the console checking that the flag and text has been updated
    DLog(@"read message %@", thisMessage);
}

// Finally I save the updated message calling the function posted below
[self saveMOC];
}

- (void)saveMOC {
 NSError *error;
 if (![managedObjectContext save:&error]) {
  NSLog(@"there was an error saving the message!");
 }
}

readMessage
    request = [[NSFetchRequest alloc] init];
//required to avoid presenting objects as faults!!
[request setReturnsObjectsAsFaults:NO];
entity = [NSEntityDescription entityForName:@"Message" inManagedObjectContext:[self managedObjectContext]];
[request setEntity:entity];


//Set the sort descriptor
NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"pk" ascending:NO];
NSArray *sortDescriptors = [[NSArray alloc] initWithObjects:sortDescriptor, nil];
[request setSortDescriptors:sortDescriptors];
[sortDescriptors release];
[sortDescriptor release];

//Execute the request
NSMutableArray *mutableFetchResults = [[self.managedObjectContext executeFetchRequest:request error:&error] mutableCopy];
if (mutableFetchResults == nil) {
    // Handle the error later
    DLog(@"ERROR: Unable to fetch the results");
}

[self setMessagesArray:mutableFetchResults];
    NSLog(@"Data now is: %@", mutableFetchResults);
[mutableFetchResults release];
[request release];

