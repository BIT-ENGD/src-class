while $object->next()
shift @ary or return undef
sub next {
   my ( $self, $args ) = @_;
   my $next = shift @{ $self->{list_of_things} } or return undef;
   my ( $car, $engine_size, $color )
       = split( /\Q$opts->{fieldsep}/, $next );
   $self->car         = $host;
   $self->engine_size = $engine_size;
   $self->color       = $color;

while
%hash
keys(%{$hash})
use strict;
use warnings;
use Data::Dumper;

my $list_of_things = {
    volvo => {
        color => "red",
        engine_size => 2000,
    },
    bmw => {
        color => "black",
        engine_size => 2500,
    },
    mini => {
        color => "british racing green",
        engine_size => 1200,
    }
};

sub next {
    my $args = $_;
    my @list = keys( %{$list_of_things} );
    return undef if scalar @list == "0";
    my $next = $list_of_things->{ $list[0] };
    delete $list_of_things->{ $list[0] };
    return $next;
}

while ( next()) {
    print Dumper $_;
    print scalar keys %{ $list_of_things }
}

use Data::Dumper qw( Dumper );

sub make_list_iter {
   my @list = @_;
   return sub { @list ? shift(@list) : () };
}

sub next {
   make_list_iter( keys %$hash );
}

my $hash = { ... };

while ( my ($k) = next->() ) {
   print Dumper $hash->{$k};
}

