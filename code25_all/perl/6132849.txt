if (length($someInput) gt 1500){
    $someInput=substr($someInput, 0, 1500);
}

#sanitises and returns the given input
sub sanitiseInput {
    my ($input) = @_;
    $input = trim(param($input));
    $input = HTML::Entities::decode($input);
    $input =~ s/<script[^>]*?>.*?<\/script>//gi; # strip out javascript
    $input =~ s/<style[^>]*?>.*?<\/style>//gi;   # strip out styles
    $input =~ s/<![\s\S]*?--[ \t\n\r]*>//gi;     # strip out multi-line comments
    $input =~ s/&/&amp;/gi;                      # & to &amp;
    $input =~ s/</&lt;/gi;                       # < to &lt;
    $input =~ s/>/&gt;/gi;                       # > to &gt;
    $input =~ s/"/&#34;/gi;                      # " to &#34;
    $input =~ s/'/&#39;/gi;                      # ' to &#39;
    $input =~ s/\r\n/<br>/gi;                    # return and newline to <br>
    $input =~ s/\r/<br>/gi;                      # return to <br>
    $input =~ s/\n/<br>/gi;                      # newline to <br>
    return $input;                               #return the new value
}

sub mailer {
    my ($from_eddress, $to_eddress, $subject, $mail_content, $fail_eddress)=@_;
    open(MAIL, "|/usr/sbin/sendmail -f $from_eddress $to_eddress") or print "Cannot fork to mail - $!\n";
    print MAIL "From: $from_eddress\n";
    print MAIL "To: $to_eddress \n";
    print MAIL "Subject: $subject\n";
    if ($fail_eddress != '') { print MAIL "fail-to: $fail_eddress\n"; }
    print MAIL "Content-type: text/html\n\n";
    print MAIL "\n";
    print MAIL "<html><head><style>body, p, th, td {font-size: 0.75em; font-family:  Arial, Helvetica, sans-serif;} a {font-size: 1em; font-family:  Arial, Helvetica, sans-serif;} .large{font-size: 1.2em;} .small{font-size: .8em;} </style></head><body>";
    print MAIL "$mail_content";
    print MAIL "</body></html>";
    close (MAIL);
}

