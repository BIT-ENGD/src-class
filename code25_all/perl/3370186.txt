use Class::Struct;

    struct (TimingStruct => {
        _timingSense  => '$',
        _timingType   => '$',
        _relatedPin   => '$',
        _whenCond     => '$'
      });

    struct (OutPinStruct => {
        _outPinName   => '$',
        _outFunction  => '$',
        _timingarray  => '@', #_timingarc => 'TimingStruct'
      });

    my @tarray = ();
    my $t;

    $t = TimingStruct->new(_timingSense => 'Unate',
                           _timingType  => 'Wave',
                           _relatedPin  => 'CO',
                           _whenCond    => 'A ^ B'
                         );
    push(@tarray, $t);
    $t = TimingStruct->new(_timingSense => 'Combinational',
                           _timingType  => 'Rising',
                           _relatedPin  => 'ICO',
                           _whenCond    => 'A ^ B ^ CI'
                         );

    push(@tarray, $t);

    my $op = OutPinStruct->new(_outPinName => "CO",
                               _outFunction => "A ^ B ^ CI",
                               _timingarray => \@tarray);


    print $op->_outPinName  . "\n";
    print $op->_outFunction . "\n";
    print $op->_timingarray . "\n";
    my $t = ${${$op->_timingarray}[0]}[0];
    print "\$t = \$op->_timingarray = $t->_timingSense() \n";
    my @t = {$op->_timingarray};
    print "\@t = \@{\$op->_timingarray} = $$t[1] \n";

