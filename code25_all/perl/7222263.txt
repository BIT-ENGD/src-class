elsif($RunCommand =~ m/^\s*ping\s+(.+)/)

elsif($RunCommand =~ m/^\s*|\s+(.+)/)

# First discard command attempts that contain & ; < > |, then acceptable commands are executed, then final else to non-functional command

 if($RunCommand =~ m/^\s*&\s+(.+)/)
    {
            # Print PageHeaderBC that informs of non-functional command
            &PrintPageHeaderBC("c");

    }

 elsif($RunCommand =~ m/^\s*;\s+(.+)/)
    {
            # Print PageHeaderBC that informs of non-functional command
            &PrintPageHeaderBC("c");

    }

 elsif($RunCommand =~ m/^\s*<\s+(.+)/)
    {
            # Print PageHeaderBC that informs of non-functional command
            &PrintPageHeaderBC("c");

    }

 elsif($RunCommand =~ m/^\s*>\s+(.+)/)
    {
            # Print PageHeaderBC that informs of non-functional command
            &PrintPageHeaderBC("c");

    }

 elsif($RunCommand =~ m/^\s*|\s+(.+)/)
    {
            # Print PageHeaderBC that informs of non-functional command
            &PrintPageHeaderBC("c");

    }

# Now start acceptable commands

# PING
elsif($RunCommand =~ m/^\s*ping\s+(.+)/)
{
    &PrintPageHeader("c");
            #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
            $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
            print "<code>$Prompt $RunCommand</code><xmp>";
            $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
            if(!$WinNT)
            {
                    $SIG{'ALRM'} = \&CommandTimeout;
                    alarm($CommandTimeoutDuration);
            }
            if($ShowDynamicOutput) # show output as it is generated
            {
                    $|=1;
                    $Command .= " |";
                    open(CommandOutput, $Command);
                    while(<CommandOutput>)
                    {
                            $_ =~ s/(\n|\r\n)$//;
                            print "$_\n";
                    }
                    $|=0;
            }
            else # show output after command completes
            {
                    print `$Command`;
            }
            if(!$WinNT)
            {
                    alarm(0);
            }
            print "</xmp>";

}
# TELNET
elsif($RunCommand =~ m/^\s*telnet\s+(.+)/)
{
    &PrintPageHeader("c");
    #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
    $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
    print "<code>$Prompt $RunCommand</code><xmp>";
    $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
    if(!$WinNT)
    {
        $SIG{'ALRM'} = \&CommandTimeout;
        alarm($CommandTimeoutDuration);
    }
    if($ShowDynamicOutput) # show output as it is generated
    {
        $|=1;
        $Command .= " |";
        open(CommandOutput, $Command);
        while(<CommandOutput>)
        {
            $_ =~ s/(\n|\r\n)$//;
            print "$_\n";
        }
        $|=0;
    }
    else # show output after command completes
    {
        print `$Command`;
    }
    if(!$WinNT)
    {
        alarm(0);
    }
    print "</xmp>";
}
#DIG
elsif($RunCommand =~ m/^\s*dig\s+(.+)/)
    {
            &PrintPageHeader("c");
            #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
            $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
            print "<code>$Prompt $RunCommand</code><xmp>";
            $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
            if(!$WinNT)
            {
                    $SIG{'ALRM'} = \&CommandTimeout;
                    alarm($CommandTimeoutDuration);
            }
            if($ShowDynamicOutput) # show output as it is generated
            {
                    $|=1;
                    $Command .= " |";
                    open(CommandOutput, $Command);
                    while(<CommandOutput>)
                    {
                            $_ =~ s/(\n|\r\n)$//;
                            print "$_\n";
                    }
                    $|=0;
            }
            else # show output after command completes
            {
                    print `$Command`;
            }
            if(!$WinNT)
            {
                    alarm(0);
            }
            print "</xmp>";
    }
#NSLOOKUP
elsif($RunCommand =~ m/^\s*nslookup\s+(.+)/)
    {
            &PrintPageHeader("c");
            #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
            $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
            print "<code>$Prompt $RunCommand</code><xmp>";
            $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
            if(!$WinNT)
            {
                    $SIG{'ALRM'} = \&CommandTimeout;
                    alarm($CommandTimeoutDuration);
            }
            if($ShowDynamicOutput) # show output as it is generated
            {
                    $|=1;
                    $Command .= " |";
                    open(CommandOutput, $Command);
                    while(<CommandOutput>)
                    {
                            $_ =~ s/(\n|\r\n)$//;
                            print "$_\n";
                    }
                    $|=0;
            }
            else # show output after command completes
            {
                    print `$Command`;
            }
            if(!$WinNT)
            {
                    alarm(0);
            }
            print "</xmp>";
    }

#HOST
elsif($RunCommand =~ m/^\s*host\s+(.+)/)
    {
            &PrintPageHeader("c");
            #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
            $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
            print "<code>$Prompt $RunCommand</code><xmp>";
            $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
            if(!$WinNT)
            {
                    $SIG{'ALRM'} = \&CommandTimeout;
                    alarm($CommandTimeoutDuration);
            }
            if($ShowDynamicOutput) # show output as it is generated
            {
                    $|=1;
                    $Command .= " |";
                    open(CommandOutput, $Command);
                    while(<CommandOutput>)
                    {
                            $_ =~ s/(\n|\r\n)$//;
                            print "$_\n";
                    }
                    $|=0;
            }
            else # show output after command completes
            {
                    print `$Command`;
            }
            if(!$WinNT)
            {
                    alarm(0);
            }
            print "</xmp>";
    }

#NMAP
elsif($RunCommand =~ m/^\s*nmap\s+(.+)/)
    {
            &PrintPageHeader("c");
            #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
            $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
            print "<code>$Prompt $RunCommand</code><xmp>";
            $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
            if(!$WinNT)
            {
                    $SIG{'ALRM'} = \&CommandTimeout;
                    alarm($CommandTimeoutDuration);
            }
            if($ShowDynamicOutput) # show output as it is generated
            {
                    $|=1;
                    $Command .= " |";
                    open(CommandOutput, $Command);
                    while(<CommandOutput>)
                    {
                            $_ =~ s/(\n|\r\n)$//;
                            print "$_\n";
                    }
                    $|=0;
            }
            else # show output after command completes
            {
                    print `$Command`;
            }
            if(!$WinNT)
            {
                    alarm(0);
            }
            print "</xmp>";
    }

#TRACEROUTE
    elsif($RunCommand =~ m/^\s*traceroute\s+(.+)/)
    {
            &PrintPageHeader("c");
            #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
            $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
            print "<code>$Prompt $RunCommand</code><xmp>";
            $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
            if(!$WinNT)
            {
                    $SIG{'ALRM'} = \&CommandTimeout;
                    alarm($CommandTimeoutDuration);
            }
            if($ShowDynamicOutput) # show output as it is generated
            {
                    $|=1;
                    $Command .= " |";
                    open(CommandOutput, $Command);
                    while(<CommandOutput>)
                    {
                            $_ =~ s/(\n|\r\n)$//;
                            print "$_\n";
                    }
                    $|=0;
            }
            else # show output after command completes
            {
                    print `$Command`;
            }
            if(!$WinNT)
            {
                    alarm(0);
            }
            print "</xmp>";
    }

#WHOIS
    elsif($RunCommand =~ m/^\s*whois\s+(.+)/)
    {
            &PrintPageHeader("c");
            #$Prompt = $WinNT ? "$CurrentDir> " : "[admin\@$ServerName $CurrentDir]\$ ";
            $Prompt = $WinNT ? "$CurrentDir> " : "\$ ";
            print "<code>$Prompt $RunCommand</code><xmp>";
            $Command = "cd \"$CurrentDir\"".$CmdSep.$RunCommand.$Redirector;
            if(!$WinNT)
            {
                    $SIG{'ALRM'} = \&CommandTimeout;
                    alarm($CommandTimeoutDuration);
            }
            if($ShowDynamicOutput) # show output as it is generated
            {
                    $|=1;
                    $Command .= " |";
                    open(CommandOutput, $Command);
                    while(<CommandOutput>)
                    {
                            $_ =~ s/(\n|\r\n)$//;
                            print "$_\n";
                    }
                    $|=0;
            }
            else # show output after command completes
            {
                    print `$Command`;
            }
            if(!$WinNT)
            {
                    alarm(0);
            }
            print "</xmp>";
    }

else
{
            # Print PageHeaderBC that informs of non-functional command
    &PrintPageHeaderBC("c");

    }
&PrintCommandLineInputForm;
&PrintPageFooter;

