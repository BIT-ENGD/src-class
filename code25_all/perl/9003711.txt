LWP::UserAgent
get
get
sub grab {
    my($addr, $port, $timeout) = @_;
    my $it;

    eval {
        local $SIG{ALRM} = sub {
            die "alarm\n";
        };

        alarm $timeout if $timeout;

        my $iaddr = inet_aton($addr)
        or die "client no host: $!";
        my $paddr = sockaddr_in($port, $iaddr)
        or die "client sockaddr_in: $!";
        my $proto = getprotobyname("tcp");

        socket(Client, PF_INET, SOCK_STREAM, $proto)
        or die "Client socket: $!";

        local $SIG{ALRM} = sub {
            close(Client);
            die "alarm\n";
        };

        connect(Client, $paddr)
        or die "Client connect: $!";
        while(my $line = <Client>) {
            $it .= $line;
        }

        print alarm(0), " seconds left \n";
        close(Client) or die "Client close: $!";
    };
    if($@) {
        die unless $@ eq "alarm\n";
    }

    return $it;
}

strawberry/perl/vendor/lib/LWP/Protocol/http.pm
sub sysread {
    my $self = shift;
    if (my $timeout = ${*$self}{io_socket_timeout}) {
        die "read timeout" unless $self->can_read($timeout);
    }
    else {
        # since we have made the socket non-blocking we
        # use select to wait for some data to arrive
        $self->can_read(undef) || die "Assert";
    }
    sysread($self, $_[0], $_[1], $_[2] || 0);
}

sub can_read {
    my($self, $timeout) = @_;
    my $fbits = '';
    vec($fbits, fileno($self), 1) = 1;
    SELECT:
    {
        my $before;
        $before = time if $timeout;
        my $nfound = select($fbits, undef, undef, $timeout);
        if ($nfound < 0) {
            if ($!{EINTR} || $!{EAGAIN}) {
                # don't really think EAGAIN can happen here
                if ($timeout) {
                    $timeout -= time - $before;
                    $timeout = 0 if $timeout < 0;
                }
                redo SELECT;
            }
            die "select failed: $!";
        }
        return $nfound > 0;
    }
}

