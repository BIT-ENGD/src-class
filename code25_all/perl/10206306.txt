sub get_diff_same_day {
  # return only the time difference between 2 dates 
  my ($dnow, $dt) = @_;
  my $dtx = $dt->clone();
  $dtx->set_year( $dnow->year );
  $dtx->set_month( $dnow->month );
  $dtx->set_day( $dnow->day );
  say $dnow;
  say $dtx;

  return $dtx->subtract_datetime_absolute($dnow);
}

2012-04-18T09:56:39
2012-04-18T09:56:40

0  DateTime::Duration=HASH(0x1e10a34)
   'days' => 0
   'end_of_month' => 'wrap'
   'minutes' => 0
   'months' => 0
   'nanoseconds' => 0
   'seconds' => 3577     # <= huh?

$dtx - $dnow 

0  DateTime::Duration=HASH(0x1bada04)
   'days' => 0
   'end_of_month' => 'wrap'
   'minutes' => 0
   'months' => 0
   'nanoseconds' => 0
   'seconds' => 1

use Modern::Perl; 
use autodie;
use DateTime;


use constant OFFSET => 0;

## main
test();

sub test {
  my $now = DateTime->now( time_zone => 'local' )->add( hours => OFFSET );
  my $ddt = get_rand_date();
  my $secs = get_secs_same_day_broken ($now, $ddt);
  my $secs2 = get_secs_same_day($now, $ddt);

  if ( $secs != $secs2 ) {
    say "expecting same result ( $secs, $secs2 )";
  }
}

sub get_secs_same_day_broken {
  # return the seconds time difference between 2 dates 
  my ($dnow, $dt) = @_;
  my $dtx = $dt->clone();
  $dtx->set_year( $dnow->year );
  $dtx->set_month( $dnow->month );
  $dtx->set_day( $dnow->day );
  say "A: $dnow vs $dtx";
  return $dtx->subtract_datetime_absolute($dnow)->seconds;
}

sub get_secs_same_day {
  # return the seconds time difference between 2 dates 
  my ($dnow, $dt) = @_;
  my $dtx = $dt->clone();
  $dtx->set_year( $dnow->year );
  $dtx->set_month( $dnow->month );
  $dtx->set_day( $dnow->day );
  say "B: $dnow vs $dtx";
  return ($dtx - $dnow)->seconds;
}

sub get_rand_date {
  my $d = int(rand(27)) + 1;
  my $M = int(rand(11)) + 1;
  my $h = int(rand(24));
  my $m = int(rand(60));
  my $s = int(rand(60));

  my $dt = DateTime->new( day => $d, month => $M, year => 2012, hour => $h, minute => $m, second => $s );
  $dt->add( hours => OFFSET );

  return $dt;
}

