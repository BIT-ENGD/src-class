#!/usr/local/bin/perl
# when debugging: add -w option above
#

use strict;
use warnings;
use Benchmark qw (:all);
use Math::Complex;
use Math::Trig;
use Time::HiRes qw (gettimeofday);

system('cls');

my $dimension = $ARGV[0];
my $type = $ARGV[1];

if(!$dimension || !$type){
    print "bench.pl <n> <REAL | IMAG>\n";
    print "   <n> indicates the dimension of the vector to generate\n";
    print "   <REAL | IMAG> dictates to use real or complex vectors\n";
    exit(0);
}

my @main_v1;
my @main_v2;
my @vector_sum1;
my @vector_sum2;

for($a=1;$a<=$dimension;$a++){

    my $r1 = sprintf("%.0f", 9*rand)+1;
    my $r2 = sprintf("%.0f", 9*rand)+1;
    my $i1 = sprintf("%.0f", 9*rand)+1;
    my $i2 = sprintf("%.0f", 9*rand)+1;

    if(uc($type) eq "IMAG"){
        # Using complex vectors has the issue
        $main_v1[$a] = cplx($r1,$i1);
        $main_v2[$a] = cplx($r2,$i2);
    }elsif(uc($type) eq "REAL"){
        # Using real vectors shows no issue
        $main_v1[$a] = $r1;
        $main_v2[$a] = $r2;
    }else {
        print "bench.pl <n> <REAL | IMAG>\n";
        print "   <n> indicates the dimension of the vector to generate\n";
        print "   <REAL | IMAG> dictates to use real or complex vectors\n";
        exit(0);
    }
}

# cmpthese(-5, {
#   v1 => sub {@vector_sum1 = vector_subtract(\@main_v1, \@main_v2)},
#   v2 => sub {@vector_sum2 = vector_subtract_v2(\@main_v1, \@main_v2)},
# });
# print "\n";

print "main vectors as defined initially\n";
print_vector_matlab(@main_v1);
print_vector_matlab(@main_v2);
print "\n";

@vector_sum1 = vector_subtract(\@main_v1, \@main_v2);
print "main vectors after the subtraction using 3rd variable\n";
print_vector_matlab(@main_v1);
print_vector_matlab(@main_v2);
print "\n";

@vector_sum2 = vector_subtract_v2(\@main_v1, \@main_v2);
print "main vectors after the inline subtraction\n";
print_vector_matlab(@main_v1);
print_vector_matlab(@main_v2);
print "\n";

print "subtracted vectors from both subroutines\n";
print_vector_matlab(@vector_sum1);
print_vector_matlab(@vector_sum2);


sub vector_subtract {
    # subroutine to subtract one [n x 1] vector from another
    # result = vector1 - vector2
    # 
    my @vector1 = @{$_[0]};
    my @vector2 = @{$_[1]};
    my @result;

    my $row = 0;
    my $dim1 = @vector1 - 1;
    my $dim2 = @vector2 - 1;

    if($dim1 != $dim2){
        syswrite STDOUT, "ERROR: attempting to subtract vectors of mismatched dimensions\n";
        exit;
    }

    for($row=1;$row<=$dim1;$row++){$result[$row] = $vector1[$row] - $vector2[$row]}

    return(@result);
}

sub vector_subtract_v2 {
    # subroutine to subtract one [n x 1] vector from another
    # implements the inline subtraction method for alleged speedup
    # result = vector1 - vector2
    # 
    my @vector1 = @{$_[0]};
    my @vector2 = @{$_[1]};

    my $row = 0;
    my $dim1 = @vector1 - 1;
    my $dim2 = @vector2 - 1;

    if($dim1 != $dim2){
        syswrite STDOUT, "ERROR: attempting to subtract vectors of mismatched dimensions\n";
        exit;
    }
    for($row=1;$row<=$dim1;$row++){$vector1[$row] -= $vector2[$row]}        # subtract inline

    return(@vector1);
}

sub print_vector_matlab {       # for use with outputting square matrices only
    my (@junk) = (@_);
    my $dimension = @junk - 1;
    print "V=[";
    for($b=1;$b<=$dimension;$b++){
        # $temp_real = sprintf("%.3f", Re($junk[$b][$c]));
        # $temp_imag = sprintf("%.3f", Im($junk[$b][$c]));
        # $temp_cplx = cplx($temp_real,$temp_imag);
        print "$junk[$b];";
        # print "$temp_cplx,";
    }
    print "];\n";
}

@result = @vector1;
for($row=1;$row<=$dim1;$row++){$result[$row] -= $vector2[$row]}

return(@result);

for($row-1;$row<=$dim1;$row++){$result[$row] = $vector1[$row]}
for($row=1;$row<=$dim1;$row++){$result[$row] -= $vector2[$row]}

return(@result);

