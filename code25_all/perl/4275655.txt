ok 1 - open, /homepage-with-loginform.html, true 
ok 2 - type, id_username, JoeSixp 
ok 3 - type, id_password, secrIt
...

my $fmt = TAP::Formatter::HTML->new;
my $harness = TAP::Harness->new( { formatter => $fmt, merge => 1 } );
$harness->test_args( [ "--browser=$browser", "--config=$h{config}" ] ); 
my $agg     = $harness->runtests(@tests);

#remove passwords from HTML report
remove_password( \%h, $fmt ); # %h is an options hash
 ...



sub remove_password {

    # remove password from HTML report

    my ( $h, $fmt ) = @_;

    my $passwd = $h->{password} ||  "xxx-xxx";
    my $outhtml = ${ $fmt->html() };

    #from the TAP::Harness perldoc
    #html() - This is a reference to the scalar containing the html generated on the last test run.
    #Useful if you have "verbosity" set to silent, and have not provided a custom "output_fh" to write the report to.       

    note("replacing password with xxx-xxx in html file");

    $fmt->html(\$outhtml); # does not work
    $outhtml =~ s/$passwd/xxxxxx/msg; # works


    {
        local $/ = undef;
        my $fh = $fmt->output_fh(); #An IO::Handle filehandle for printing the HTML report to.
        if ( $fh->opened){
             # 
                     # ??? HOW DO I unobtrusively truncate the file here?
             # 
             print $fh $outhtml;  # writes back censored HTML output

        }
    }

}

#this gets the job done but it is kind of brutal
my $outf = $h->{outfile};
if ( $fh->opened){
  $fh->close();
   open $fh, ">", $outf or die "cannnot open '$outf' for truncating and writing:$!";
   print $fh $outhtml;              
  close $fh;
}

