getHeaders
my $fileContentsRef = $this->getFileContent;
my $fileContentsRef1 =  $$fileContentsRef;
$fileContentsRef1 =~ /Spaltenname.*?Datentyp.*?---\n(.*?)\n\n/gsmi;

my $fileContentsRef = $this->getFileContent;
$$fileContentsRef =~ /Spaltenname.*?Datentyp.*?---\n(.*?)\n\n/gsmi;

$fileContentsRef1
open FILE, "a1.bad"; 
$file_contents .= do { local $/; <FILE> }; 
close FILE; 
my $log = auswerter->new(\$file_contents); 


#-----------------------------------------------------------------
# Subs
#-----------------------------------------------------------------

# CONSTRUCTOR
sub new
{
    my $fileRef = $_[1];
    my $self = {};
    bless $self;
    $self->initialize();
    if($fileRef) { $self->{fileRef} = $fileRef; }
    return $self;
}
sub initialize
{
#-----------------------------------------------------------------
# Configuration
#-----------------------------------------------------------------
    my $this = shift;
}
sub setFile {
    my $this = shift;
    $this->{file} = shift;
}
sub getFileContent
{
  my $this = shift;
  return    $this->{fileRef};
}
sub getHeaders
{
  print "HEADERS...\n";

  my $this = shift;
  my @headers = ();
  my $fileContentsRef = $this->getFileContent;
  my $fileContentsRef1 =  $$fileContentsRef;

  $fileContentsRef1 =~ /Spaltenname.*?Datentyp.*?---\n(.*?)\n\n/gsmi;
  @headers = split ("\n", $1 ); 
  foreach (@headers)
  {
    $_ =~ s/^(.*?)\s.*/$1/;
  } 
  return \@headers;
}
sub getErrList
{
    print "ERR LIST...\n";
    my $this = shift;
    my @errors = ();
    my $fileContentsRef = $this->getFileContent;
    my $fileContentsRef1 =  $$fileContentsRef;

    $fileContentsRef1 =~ /Spaltenname.*?(Satz.*)ORA.*?^Tabelle/gsmi;
    return \@errors if !$1;

    @errors = split ("\n\n", $1 );
    foreach (@errors)
    {

           $_ =~ s/.*Spalte (.*?)\..*/$1/msgi;
    }
    return \@errors;
}
sub getEntries
{
  my $this = shift;
  my @entries = ();
  my $fileContentsRef = $this->getFileContent;
  my $fileContentsRef1 =  $$fileContentsRef;
  $fileContentsRef1 =~ /.*==\n(.*)/gsmi;
  @entries = split ("\n", $1 );
  return \@entries;
}
sub sqlldrAnalyze
{
    my $this = shift;
    my $token = shift;
    my $errRef =$this->getErrList();
    return "" if $#$errRef < 0 ;

    my $headersRef = $this->getHeaders();
    my $entriesRef = $this->getEntries();
    my $i = 0;
    my $str = "";
    $str = "<html>";
    $str .= "<table rules=\"all\">";
    $str .= "<tr>";
    foreach ( @$headersRef)
    {
      $str .= "<th>".$_."</th>";
    }
    $str .= "</tr>";    
    foreach ( @$entriesRef)
    {
      my @errOffset  = grep { $headersRef->[$_] =~ $errRef->[$i] }0..$#$headersRef  ;
      my @entries =  split($token, $_);
      $str .= "<tr>";
      foreach (my $j =0; $j <= $#entries;$j++)
      {
        $str .= "<td nowrap";
        $str .= " style=\"background-color: red\"" if $j  == $errOffset[0];;
        $str .= ">";
        $str .= "<b>" if $j  == $errOffset[0];
        $str .= $entries[$j];
        $str .= "</b>" if $j == $errOffset[0];
        $str .= "</td>";        
    }
    $str .= "</tr>\n";
    $i++;
  }
  $str .= "</table>";
  $str .= "</html>";
  return $str;
}
return 1;

