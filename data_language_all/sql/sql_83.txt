##############用户&品牌分析
简化计算
  lastday + last_3_day_click_times 
+ last_3_day_buy_times   + last_7_day_click_times 
+ last_7_day_buy_times + last_15_day_click_times
+ total_click_times  +  total_collect_times
#############

SELECT 
a.user_id,
a.brand_id,
lastday,
last_3_day_click_times,
last_3_day_buy_times,
last_7_day_click_times,
last_7_day_buy_times,
last_15_day_click_times,
total_click_times,
total_buy_times,
total_collect_times,
buy_times
FROM 
 (SELECT user_id,brand_id,DATEDIFF("2014-07-15",MAX(visit_datetime))
AS lastday 
FROM t_alibaba_data 
WHERE visit_datetime < "2014-07-15"
GROUP BY user_id,brand_id)
AS a 
LEFT JOIN
(SELECT user_id,brand_id,
COUNT(CASE WHEN TYPE = 0 THEN 1  END) AS last_3_day_click_times ,
COUNT(CASE WHEN TYPE = 1 THEN 1  END) AS last_3_day_buy_times 
FROM t_alibaba_data 
WHERE visit_datetime < "2014-07-15"
AND visit_datetime > "2014-07-11"
GROUP BY user_id,brand_id )
AS b 
ON a.user_id = b.user_id AND a.brand_id = b.brand_id
LEFT  JOIN
(SELECT user_id,brand_id,
COUNT(CASE WHEN TYPE = 0 THEN 1  END) AS last_7_day_click_times ,
COUNT(CASE WHEN TYPE = 1 THEN 1  END) AS last_7_day_buy_times 
FROM t_alibaba_data 
WHERE visit_datetime < "2014-07-15"
AND visit_datetime > "2014-07-07"
GROUP BY user_id,brand_id )
AS c
ON a.user_id = c.user_id AND a.brand_id = c.brand_id
LEFT JOIN
(SELECT user_id,brand_id,
COUNT(CASE WHEN TYPE = 0 THEN 1  END) AS last_15_day_click_times 
FROM t_alibaba_data 
WHERE visit_datetime < "2014-07-15"
AND visit_datetime > "2014-06-30"
GROUP BY user_id,brand_id )
AS d 
ON a.user_id = d.user_id AND a.brand_id = d.brand_id
LEFT JOIN 
(SELECT user_id,brand_id,
COUNT(CASE WHEN TYPE = 0 THEN 1  END) AS total_click_times ,
COUNT(CASE WHEN TYPE = 1 THEN 1  END) AS total_buy_times ,
COUNT(CASE WHEN TYPE = 2 THEN 1  END) AS total_collect_times ,
COUNT(CASE WHEN TYPE = 3 THEN 1  END) AS total_cart_times 
FROM t_alibaba_data 
WHERE visit_datetime < "2014-07-15"
GROUP BY user_id,brand_id )
AS f 
ON a.user_id = f.user_id AND a.brand_id = f.brand_id
LEFT JOIN 
(SELECT user_id,brand_id,
COUNT(1) AS buy_times 
FROM t_alibaba_data 
WHERE visit_datetime >= "2014-07-15"
AND visit_datetime < "2014-08-15"
AND TYPE = 1
GROUP BY user_id,brand_id)
AS g 
ON a.user_id = g.user_id AND a.brand_id = g.brand_id



--TODO: Change the operator name sql.alerts@sparkhound.com
--TODO: Uncomment --EXEC (@TSQL) when confirmed


--These jobs do not have a notify operator setting
select j.job_id, j.name, CategoryName = jc.name, j.enabled, j.description
, OwnerName = suser_sname(j.owner_sid), date_created,date_modified, j.notify_email_operator_id
  from msdb.dbo.sysjobs  j
inner join msdb.dbo.syscategories jc
on j.category_id = jc.category_id
where j.notify_email_operator_id = 0  
and j.name not in ('syspolicy_purge_history')

DECLARE AddFailureNotifications CURSOR FAST_FORWARD 
FOR
select convert(nvarchar(4000),	'
EXEC msdb.dbo.sp_update_job @job_id=N'''+convert(varchar(64), job_id)+''', /*'+j.name+'*/ 
		@notify_level_email=2, 
		@notify_email_operator_name=N''sql.alerts@sparkhound.com''')
from msdb.dbo.sysjobs  j
where j.notify_email_operator_id = 0  
and j.name not in ('syspolicy_purge_history')

declare @tsql nvarchar(4000) = null
OPEN AddFailureNotifications
FETCH NEXT FROM AddFailureNotifications 
INTO @tsql

WHILE @@FETCH_STATUS = 0
BEGIN
	--EXEC (@TSQL)
	SELECT @TSQL
	FETCH NEXT FROM AddFailureNotifications 
	INTO @tsql
END

CLOSE AddFailureNotifications
DEALLOCATE AddFailureNotifications;

