/* Run against a UMLS database with all english language sources and all level sources */

/*
use umls2013ab;
*/

/* For HCPCS codes utilize the UMLS to add header terms */

drop table hcpcs_umls_mapping;

create table  hcpcs_umls_mapping as
  select t.*, tt.* from (
  select mr.CUI, mr.AUI, mr.SAB,  ms.VSAB, ms.SRL as source_release_level, mr.LUI, mr.SUI, mr.CODE as code, mr.STR as description 
    from mrconso mr  join mrsab ms on ms.RSAB = mr.SAB and ms.SABIN = 'Y'
      where mr.SAB in ('CPT', 'HCDT', 'HCPCS')
   and TTY = 'PT'
  ) t
  join mrrel mr1 on mr1.AUI1 = t.AUI and mr1.REL = 'PAR'
  join
  (select mr.CUI as header_CUI, mr.LUI as header_LUI, mr.SUI as header_SUI, mr.AUI as header_AUI, 
    mr.SAB as header_SAB,  mr.CODE as header_code, mr.STR as header_description 
      from mrconso mr 
      where mr.SAB in ('MTHCH', 'MTHHH')
   and TTY = 'HT') tt
   on tt.header_AUI = mr1.AUI2

  ;
 /* 15425 */
 
create index idx_hum_cui on hcpcs_umls_mapping(cui);
create index idx_mc_cui on mrconso(cui);

create table synthetic_mrsty as 
select CUI, GROUP_CONCAT(distinct STN order by STN asc separator '|') as synthetic_STN,
  GROUP_CONCAT(distinct STY order by STN asc separator '|') as synthetic_STY
from mrsty group by CUI;

create index idx_sms_cui on synthetic_mrsty(CUI);

drop table hcpcs_umls_mapping_enhanced1;
create table hcpcs_umls_mapping_enhanced1 as 
  select hum.*, sm.synthetic_STN, sm.synthetic_STY from hcpcs_umls_mapping hum join synthetic_mrsty sm on hum.CUI = sm.CUI; 

drop table cui_flattened_str_open;

create table cui_flattened_str_open as 
  select mr.CUI, count(*) as alternative_counter, 
      GROUP_CONCAT(distinct STR order by SAB, TTY asc separator '|') as alternative_description, 
      GROUP_CONCAT(distinct AUI order by SAB, TTY asc separator '|') as alternative_AUI, 
      GROUP_CONCAT(distinct TTY order by SAB, TTY asc separator '|')  as alternative_TTY,
      GROUP_CONCAT(distinct SAB order by SAB, TTY asc separator '|')  as alternative_SAB
    from MRCONSO mr where mr.SRL = 0
    group by mr.CUI
    ; 

create index idx_cfso_cui on cui_flattened_str_open(cui);

drop table hcpcs_umls_mapping_enhanced2;
create table hcpcs_umls_mapping_enhanced2
  select hume.*, cfso.alternative_description, cfso.alternative_AUI, cfso.alternative_TTY,cfso.alternative_SAB  from hcpcs_umls_mapping_enhanced1 hume left outer join   
    cui_flattened_str_open cfso on 
        cfso.CUI = hume.CUI;
    ;

create table hcpcs_umls_mapping_enhanced
  select *, 
    case 
      when source_release_level = 0 then description
      when popped_description != description then popped_description
      else concat('(h) ',header_description)
      end as cleaned_description
      from     
    (select *, 
      case when locate('|', alternative_description) then
        left(alternative_description, locate('|', alternative_description) - 1) 
       else alternative_description end as popped_description
      from hcpcs_umls_mapping_enhanced2) t;


/* 

The final table has the following output:

CUI	AUI	SAB	VSAB	source_release_level	LUI	SUI	code	description	header_CUI	header_LUI	header_SUI	header_AUI	header_SAB	header_code	header_description	synthetic_STN	synthetic_STY	alternative_description	alternative_AUI	alternative_TTY	alternative_SAB	popped_description	cleaned_description
C0187190	A0331401	CPT	CPT2013	3	L0225864	S0300971	25920	Disarticulation through wrist	C0519308	L0695805	S0803165	A13076486	MTHCH	Level 4: 25900-25931	Amputation on the Musculoskeletal System of the Forearm and Wrist	B1.3.1.3	Therapeutic or Preventive Procedure	disarticulation through wrist|wrist disarticulation	A18652480|A18578061|A8483499	PT|SY|PN	CHV|MTH	disarticulation through wrist	(h) Amputation on the Musculoskeletal System of the Forearm and Wrist
C1384684	A0331443	CPT	CPT2013	3	L0225897	S0301004	25927	Transmetacarpal amputation	C0519308	L0695805	S0803165	A13076486	MTHCH	Level 4: 25900-25931	Amputation on the Musculoskeletal System of the Forearm and Wrist	B1.3.1.3	Therapeutic or Preventive Procedure	Transmetacarpal amputation (procedure)	A13083935	PN	MTH	Transmetacarpal amputation (procedure)	Transmetacarpal amputation (procedure)
C0186539	A0644161	CPT	CPT2013	3	L0225107	S0589047	25900	Amputation, forearm, through radius and ulna	C0519308	L0695805	S0803165	A13076486	MTHCH	Level 4: 25900-25931	Amputation on the Musculoskeletal System of the Forearm and Wrist	B1.3.1.3	Therapeutic or Preventive Procedure	Amputation thru forearm|Amputation through forearm|Amputation of forearm through radius AND ulna|Forearm amputation	A16987112|A8350934|A13083931|A8368657	AB|PT|PN|ET	ICD9CM|MTH|MTHICD9	Amputation thru forearm	Amputation thru forearm
C0186542	A0644162	CPT	CPT2013	3	L0502091	S0589049	25909	Amputation, forearm, through radius and ulna; re-amputation	C0519308	L0695805	S0803165	A13076486	MTHCH	Level 4: 25900-25931	Amputation on the Musculoskeletal System of the Forearm and Wrist	B1.3.1.3	Therapeutic or Preventive Procedure	Amputation of forearm through radius AND ulna, reamputation	A13083927	PN	MTH	Amputation of forearm through radius AND ulna, reamputation	Amputation of forearm through radius AND ulna, reamputation
C0186541	A0644163	CPT	CPT2013	3	L0225112	S0589050	25907	Amputation, forearm, through radius and ulna; secondary closure or scar revision	C0519308	L0695805	S0803165	A13076486	MTHCH	Level 4: 25900-25931	Amputation on the Musculoskeletal System of the Forearm and Wrist	B1.3.1.3	Therapeutic or Preventive Procedure	Amputation, forearm, through radius and ulna; secondary closure or scar revision	A13083926	PN	MTH	Amputation, forearm, through radius and ulna; secondary closure or scar revision	(h) Amputation on the Musculoskeletal System of the Forearm and Wrist

by combining the CUI,STY,cleaned_description can be used as a description. When possible the mapping goes to a description from a
public domain STR 

A cleaned_description which starts with (h) indicates that there is no alternative description.

*/

#
# In your Quartz properties file, you'll need to set 
# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#
#
# By: Ron Cordell - roncordell
#  I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.

DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;

CREATE TABLE QRTZ_JOB_DETAILS(
SCHED_NAME VARCHAR(120) NOT NULL,
JOB_NAME VARCHAR(200) NOT NULL,
JOB_GROUP VARCHAR(200) NOT NULL,
DESCRIPTION VARCHAR(250) NULL,
JOB_CLASS_NAME VARCHAR(250) NOT NULL,
IS_DURABLE VARCHAR(1) NOT NULL,
IS_NONCONCURRENT VARCHAR(1) NOT NULL,
IS_UPDATE_DATA VARCHAR(1) NOT NULL,
REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
JOB_DATA BLOB NULL,
PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
JOB_NAME VARCHAR(200) NOT NULL,
JOB_GROUP VARCHAR(200) NOT NULL,
DESCRIPTION VARCHAR(250) NULL,
NEXT_FIRE_TIME BIGINT(13) NULL,
PREV_FIRE_TIME BIGINT(13) NULL,
PRIORITY INTEGER NULL,
TRIGGER_STATE VARCHAR(16) NOT NULL,
TRIGGER_TYPE VARCHAR(8) NOT NULL,
START_TIME BIGINT(13) NOT NULL,
END_TIME BIGINT(13) NULL,
CALENDAR_NAME VARCHAR(200) NULL,
MISFIRE_INSTR SMALLINT(2) NULL,
JOB_DATA BLOB NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
REPEAT_COUNT BIGINT(7) NOT NULL,
REPEAT_INTERVAL BIGINT(12) NOT NULL,
TIMES_TRIGGERED BIGINT(10) NOT NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_CRON_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
CRON_EXPRESSION VARCHAR(120) NOT NULL,
TIME_ZONE_ID VARCHAR(80),
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
  (          
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR(1) NULL,
    BOOL_PROP_2 VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_BLOB_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
BLOB_DATA BLOB NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_CALENDARS (
SCHED_NAME VARCHAR(120) NOT NULL,
CALENDAR_NAME VARCHAR(200) NOT NULL,
CALENDAR BLOB NOT NULL,
PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))
ENGINE=InnoDB;

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_FIRED_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
ENTRY_ID VARCHAR(95) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
INSTANCE_NAME VARCHAR(200) NOT NULL,
FIRED_TIME BIGINT(13) NOT NULL,
SCHED_TIME BIGINT(13) NOT NULL,
PRIORITY INTEGER NOT NULL,
STATE VARCHAR(16) NOT NULL,
JOB_NAME VARCHAR(200) NULL,
JOB_GROUP VARCHAR(200) NULL,
IS_NONCONCURRENT VARCHAR(1) NULL,
REQUESTS_RECOVERY VARCHAR(1) NULL,
PRIMARY KEY (SCHED_NAME,ENTRY_ID))
TYENGINEPE=InnoDB;

CREATE TABLE QRTZ_SCHEDULER_STATE (
SCHED_NAME VARCHAR(120) NOT NULL,
INSTANCE_NAME VARCHAR(200) NOT NULL,
LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
CHECKIN_INTERVAL BIGINT(13) NOT NULL,
PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
ENGINE=InnoDB;

CREATE TABLE QRTZ_LOCKS (
SCHED_NAME VARCHAR(120) NOT NULL,
LOCK_NAME VARCHAR(40) NOT NULL,
PRIMARY KEY (SCHED_NAME,LOCK_NAME))
ENGINE=InnoDB;

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);

CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);

commit; 
