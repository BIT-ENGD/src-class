module CmlLCH

open System
open System.Diagnostics
open Hopac
open Hopac.Bench
open Hopac.Infixes

module EgPaper =
  let egpaper =
#if SHOW
    let l = obj ()
    let inline show stage kind var =
      lock l <| fun () -> printf "<%s%s%s>" stage kind var
#else
    let inline show _ _ _ = ()
#endif
    let inline make kind var op =
      Alt.withNackJob <| fun nack ->
      show "T" kind var
      Job.start (nack >>- fun () -> show "A" kind var) >>-.
      op ^-> fun _ -> show "D" kind var
    Job.delay <| fun () ->
    let x = Ch ()
    let y = Ch ()
    let z = Ch ()
    Job.queue (make "+" "x" (x *<- ()) <|>
               make "+" "y" (y *<- ())) >>=.
    Job.queue (make "-" "y" y <|>
               make "-" "z" z) >>=.
    Job.queue (make "-" "x" x) >>=.
    Job.queue (make "+" "z" (z *<- ()))

  let run n =
    printf "EgPaper %8d: " n
    let timer = Stopwatch.StartNew ()
    let () = run (Job.forN n egpaper)
    let d = timer.Elapsed
    printf "%fs\n" d.TotalSeconds

module SwapCh =
  type SwapChannel<'a> = Ch<'a * IVar<'a>>

  let swapch () = Ch ()

  let swap swapCh outMsg =
        swapCh *<-=>- fun inIv -> (outMsg, inIv)
    <|> swapCh ^=> fun (inMsg, outIv) -> outIv *<= outMsg >>-. inMsg

  let bench = Job.delay <| fun () ->
    let sCh = swapch ()
    swap sCh () |> Job.queue >>=.
    swap sCh ()

  let run n =
    printf "SwapCh %8d: " n
    let timer = Stopwatch.StartNew ()
    let () = run (Job.forN n bench)
    let d = timer.Elapsed
    printf "%fs\n" d.TotalSeconds

module BufferedCh =
  type BufferedCh<'a> = Ch<'a> * Ch<'a>

  let buff () = Job.delay <| fun () ->
    let inCh = Ch ()
    let outCh = Ch ()
    Job.iterateServer ([], [])
     (function
       | ([], []) ->
         inCh ^-> fun x -> ([x], [])
       | ((x::xs) as xxs, ys) ->
             inCh ^-> fun y -> (xxs, y::ys)
         <|> outCh *<- x ^->. (xs, ys)
       | ([], ys) ->
         Alt.always (List.rev ys, [])) >>-.
    (inCh, outCh)

  let send (inCh, _) x = inCh *<- x
  let recv (_, outCh) = outCh :> Job<_>

  let bench =
    buff () >>= fun buf ->
    send buf 1 |> Job.queue >>=.
    send buf 2 |> Job.queue >>=.
    recv buf |> Job.queueIgnore >>=.
    recv buf |> Job.Ignore

  let run n =
    printf "BufferedCh %8d: " n
    let timer = Stopwatch.StartNew ()
    let () = run (Job.forN n bench)
    let d = timer.Elapsed
    printf "%fs\n" d.TotalSeconds

do let mutable n = 1
   for i=1 to 6 do
     n <- n*10
     GC.clean ()
     EgPaper.run n

do let mutable n = 1
   for i=1 to 6 do
     n <- n*10
     GC.clean ()
     SwapCh.run n

do let mutable n = 1
   for i=1 to 6 do
     n <- n*10
     GC.clean ()
     BufferedCh.run n
