#!/usr/bin/env sh

#Here is a script to deploy cert to vsftpd server.

#returns 0 means success, otherwise error.

#DEPLOY_VSFTPD_CONF="/etc/vsftpd.conf"
#DEPLOY_VSFTPD_RELOAD="service vsftpd restart"

########  Public functions #####################

#domain keyfile certfile cafile fullchain
vsftpd_deploy() {
  _cdomain="$1"
  _ckey="$2"
  _ccert="$3"
  _cca="$4"
  _cfullchain="$5"

  _debug _cdomain "$_cdomain"
  _debug _ckey "$_ckey"
  _debug _ccert "$_ccert"
  _debug _cca "$_cca"
  _debug _cfullchain "$_cfullchain"

  _ssl_path="/etc/acme.sh/vsftpd"
  if ! mkdir -p "$_ssl_path"; then
    _err "Can not create folder:$_ssl_path"
    return 1
  fi

  _info "Copying key and cert"
  _real_key="$_ssl_path/vsftpd.key"
  if ! cat "$_ckey" >"$_real_key"; then
    _err "Error: write key file to: $_real_key"
    return 1
  fi
  _real_fullchain="$_ssl_path/vsftpd.chain.pem"
  if ! cat "$_cfullchain" >"$_real_fullchain"; then
    _err "Error: write key file to: $_real_fullchain"
    return 1
  fi

  DEFAULT_VSFTPD_RELOAD="service vsftpd restart"
  _reload="${DEPLOY_VSFTPD_RELOAD:-$DEFAULT_VSFTPD_RELOAD}"

  if [ -z "$IS_RENEW" ]; then
    DEFAULT_VSFTPD_CONF="/etc/vsftpd.conf"
    _vsftpd_conf="${DEPLOY_VSFTPD_CONF:-$DEFAULT_VSFTPD_CONF}"
    if [ ! -f "$_vsftpd_conf" ]; then
      if [ -z "$DEPLOY_VSFTPD_CONF" ]; then
        _err "vsftpd conf is not found, please define DEPLOY_VSFTPD_CONF"
        return 1
      else
        _err "It seems that the specified vsftpd conf is not valid, please check."
        return 1
      fi
    fi
    if [ ! -w "$_vsftpd_conf" ]; then
      _err "The file $_vsftpd_conf is not writable, please change the permission."
      return 1
    fi
    _backup_conf="$DOMAIN_BACKUP_PATH/vsftpd.conf.bak"
    _info "Backup $_vsftpd_conf to $_backup_conf"
    cp "$_vsftpd_conf" "$_backup_conf"

    _info "Modify vsftpd conf: $_vsftpd_conf"
    if _setopt "$_vsftpd_conf" "rsa_cert_file" "=" "$_real_fullchain" \
      && _setopt "$_vsftpd_conf" "rsa_private_key_file" "=" "$_real_key" \
      && _setopt "$_vsftpd_conf" "ssl_enable" "=" "YES"; then
      _info "Set config success!"
    else
      _err "Config vsftpd server error, please report bug to us."
      _info "Restoring vsftpd conf"
      if cat "$_backup_conf" >"$_vsftpd_conf"; then
        _info "Restore conf success"
        eval "$_reload"
      else
        _err "Oops, error restore vsftpd conf, please report bug to us."
      fi
      return 1
    fi
  fi

  _info "Run reload: $_reload"
  if eval "$_reload"; then
    _info "Reload success!"
    if [ "$DEPLOY_VSFTPD_CONF" ]; then
      _savedomainconf DEPLOY_VSFTPD_CONF "$DEPLOY_VSFTPD_CONF"
    else
      _cleardomainconf DEPLOY_VSFTPD_CONF
    fi
    if [ "$DEPLOY_VSFTPD_RELOAD" ]; then
      _savedomainconf DEPLOY_VSFTPD_RELOAD "$DEPLOY_VSFTPD_RELOAD"
    else
      _cleardomainconf DEPLOY_VSFTPD_RELOAD
    fi
    return 0
  else
    _err "Reload error, restoring"
    if cat "$_backup_conf" >"$_vsftpd_conf"; then
      _info "Restore conf success"
      eval "$_reload"
    else
      _err "Oops, error restore vsftpd conf, please report bug to us."
    fi
    return 1
  fi
  return 0
}
#!/usr/bin/env bash

# Caution is a virtue
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

log()  { printf "$*\n" ; return $? ;  }

fail() { log "\nERROR: $*\n" ; exit 1 ; }

create_home() {
  ievms_home="${HOME}/ievms"
  mkdir -p "${ievms_home}"
  cd "${ievms_home}"
}

install_packages() {
  apt-get install -y uck curl unzip
}

download_cross_compiler() {
  url="http://landley.net/aboriginal/downloads/binaries/cross-compiler-i686.tar.gz"
  archive=`basename "${url}"`
  log "Downloading cross compiler archive from ${url} to ${ievms_home}/${archive}"
  if [[ ! -e "${archive}" ]] && ! curl -L "${url}" -o "${archive}"
  then
    fail "Failed to download ${url} to ${ievms_home}/${archive} using 'curl', error code ($?)"
  fi
}

extract_cross_compiler() {
  cross_compiler=`basename "${archive}" .tar.gz`
  log "Extracting cross compiler archive from ${archive} to ${ievms_home}/${cross_compiler}"
  if [[ ! -e "${cross_compiler}" ]] && ! tar -zxf "${archive}"
  then
    fail "Failed to extract ${archive} to ${ievms_home}/${cross_compiler} using 'tar', error code ($?)"
  fi
}

download_kernel() {
  url="http://www.kernel.org/pub/linux/kernel/v3.0/linux-3.5.tar.bz2"
  archive=`basename "${url}"`
  log "Downloading kernel archive from ${url} to ${ievms_home}/${archive}"
  if [[ ! -e "${archive}" ]] && ! curl -L "${url}" -o "${archive}"
  then
    fail "Failed to download ${url} to ${ievms_home}/${archive} using 'curl', error code ($?)"
  fi
}

extract_kernel() {
  kernel_src=`basename "${archive}" .tar.bz2`
  log "Extracting kernel archive from ${archive} to ${ievms_home}/${kernel_src}"
  if [[ ! -e "${kernel_src}" ]] && ! tar -jxf "${archive}"
  then
    fail "Failed to extract ${archive} to ${ievms_home}/${kernel_src} using 'tar', error code ($?)"
  fi
}

configure_kernel() {
  kernel_config="/vagrant/control/kernel.config"
  log "Configuring kernel from ${kernel_config} to ${ievms_home}/${kernel_src}/.config"
  cp "${kernel_config}" "${kernel_src}/.config"
}

build_kernel() {
  kernel="${ievms_home}/${kernel_src}/arch/x86/boot/bzImage"
  cd "${kernel_src}"
  log "Building kernel in ${ievms_home}/${kernel_src} to ${kernel}"
  if [[ ! -e "${kernel}" ]] && ! make
  then
    fail "Failed to build kernel in ${ievms_home}/${kernel_src} using 'make', error code ($?)"
  fi
  cd -
}

download_iso() {
  url="http://pogostick.net/~pnh/ntpasswd/cd110511.zip"
  archive=`basename "${url}"`
  log "Downloading ntpasswd ISO archive from ${url} to ${ievms_home}/${archive}"
  if [[ ! -e "${archive}" ]] && ! curl -L "${url}" -o "${archive}"
  then
    fail "Failed to download ${url} to ${ievms_home}/${archive} using 'curl', error code ($?)"
  fi
}

extract_iso() {
  iso=`basename "${archive}" .zip`.iso
  log "Extracting ntpasswd ISO archive from ${archive} to ${ievms_home}/${iso}"
  if [[ ! -e "${iso}" ]] && ! unzip "${archive}"
  then
    fail "Failed to extract ${archive} to ${ievms_home}/${iso} using 'unzip', error code ($?)"
  fi
}

unpack_iso() {
  remaster_iso="${HOME}/tmp/remaster-iso"
  log "Unpacking ntpasswd ISO from ${iso} to ${remaster_iso}"
  if [[ ! -e "${remaster_iso}" ]] && ! uck-remaster-unpack-iso "${iso}"
  then
    fail "Failed to unpack ${iso} to ${remaster_iso} using 'uck-remaster-unpack-iso', error code ($?)"
  fi
}

extract_initrd() {
  initrd="${ievms_home}/initrd"
  initrd_cgz="${remaster_iso}/initrd.cgz"
  mkdir -p "${initrd}"
  cd "${initrd}"
  log "Extracting initrd from ${initrd_cgz} to ${initrd}"
  if ! gzip -cd "${initrd_cgz}" | cpio -i -d -H newc --no-absolute-filenames
  then
    fail "Failed to extract ${initrd_cgz} to ${initrd} using 'gzip | cpio', error code ($?)"
  fi
}

copy_scripts() {
  log "Copying scripts"
  cp "/vagrant/control/stage2" "${initrd}/scripts/"
  cp "/vagrant/control/xpsw.reg" "${initrd}/scripts/"
  cp "/vagrant/control/xpusr.reg" "${initrd}/scripts/"
  cp "/vagrant/control/xpvboxga.bat" "${initrd}/scripts/"
  cp "/vagrant/control/deuac.reg" "${initrd}/scripts/"
  cp "/vagrant/control/reuac.reg" "${initrd}/scripts/"
  cp "/vagrant/control/vboxga.bat" "${initrd}/scripts/"
  cp "/vagrant/control/vsint.cer" "${initrd}/scripts/"
  cp "/vagrant/control/ievms.xml" "${initrd}/scripts/"
  cp "/vagrant/control/ievms.bat" "${initrd}/scripts/"
  cp "/vagrant/control/isolinux.cfg" "${remaster_iso}/isolinux.cfg"
  cp "/vagrant/control/isolinux.cfg" "${remaster_iso}/syslinux.cfg"
  cp "${kernel}" "${remaster_iso}/"
  chmod 755 "${remaster_iso}/bzImage"
  rm -f "${remaster_iso}/vmlinuz" "${remaster_iso}/scsi.cgz" "${remaster_iso}/readme.txt"
}

compress_initrd() {
  cd "${initrd}"
  log "Compressing initrd from ${initrd} to ${initrd_cgz}"
  if ! find . | cpio -o -H newc | gzip > "${initrd_cgz}"
  then
    fail "Failed to compress ${initrd} to ${initrd_cgz} using 'cpio | gzip', error code ($?)"
  fi
}

pack_iso() {
  iso_out="/vagrant/ievms-control.iso"
  log "Packing ievms ISO from ${remaster_iso} to ${iso_out}"
  if ! genisoimage -o "${iso_out}" -b isolinux.bin -c boot.cat -p "ievms" -no-emul-boot -boot-load-size 4 -boot-info-table -V "IEVMS" -cache-inodes -r -J -l -joliet-long "${remaster_iso}"
  then
    fail "Failed to pack ${remaster_iso} to ${iso_out} using 'genisoimage', error code ($?)"
  fi
}

create_home
install_packages
download_cross_compiler
extract_cross_compiler
export PATH="${ievms_home}/${cross_compiler}/bin:$PATH"
download_kernel
extract_kernel
configure_kernel
build_kernel
download_iso
extract_iso
unpack_iso
extract_initrd
copy_scripts
compress_initrd
pack_iso
#!/usr/bin/env bash

# Caution is a virtue
set -o nounset
set -o errtrace
set -o errexit
set -o pipefail

log()  { printf "$*\n" ; return $? ;  }

fail() { log "\nERROR: $*\n" ; exit 1 ; }

create_home() {
  ievms_home="${HOME}/ievms"
  mkdir -p "${ievms_home}"
  cd "${ievms_home}"
}

install_packages() {
  apt-get install -y uck curl unzip
}

download_cross_compiler() {
  url="http://landley.net/aboriginal/downloads/binaries/cross-compiler-i686.tar.gz"
  archive=`basename "${url}"`
  log "Downloading cross compiler archive from ${url} to ${ievms_home}/${archive}"
  if [[ ! -e "${archive}" ]] && ! curl -L "${url}" -o "${archive}"
  then
    fail "Failed to download ${url} to ${ievms_home}/${archive} using 'curl', error code ($?)"
  fi
}

extract_cross_compiler() {
  cross_compiler=`basename "${archive}" .tar.gz`
  log "Extracting cross compiler archive from ${archive} to ${ievms_home}/${cross_compiler}"
  if [[ ! -e "${cross_compiler}" ]] && ! tar -zxf "${archive}"
  then
    fail "Failed to extract ${archive} to ${ievms_home}/${cross_compiler} using 'tar', error code ($?)"
  fi
}

download_kernel() {
  url="http://www.kernel.org/pub/linux/kernel/v3.0/linux-3.5.tar.bz2"
  archive=`basename "${url}"`
  log "Downloading kernel archive from ${url} to ${ievms_home}/${archive}"
  if [[ ! -e "${archive}" ]] && ! curl -L "${url}" -o "${archive}"
  then
    fail "Failed to download ${url} to ${ievms_home}/${archive} using 'curl', error code ($?)"
  fi
}

extract_kernel() {
  kernel_src=`basename "${archive}" .tar.bz2`
  log "Extracting kernel archive from ${archive} to ${ievms_home}/${kernel_src}"
  if [[ ! -e "${kernel_src}" ]] && ! tar -jxf "${archive}"
  then
    fail "Failed to extract ${archive} to ${ievms_home}/${kernel_src} using 'tar', error code ($?)"
  fi
}

configure_kernel() {
  kernel_config="/vagrant/control/kernel.config"
  log "Configuring kernel from ${kernel_config} to ${ievms_home}/${kernel_src}/.config"
  cp "${kernel_config}" "${kernel_src}/.config"
}

build_kernel() {
  kernel="${ievms_home}/${kernel_src}/arch/x86/boot/bzImage"
  cd "${kernel_src}"
  log "Building kernel in ${ievms_home}/${kernel_src} to ${kernel}"
  if [[ ! -e "${kernel}" ]] && ! make
  then
    fail "Failed to build kernel in ${ievms_home}/${kernel_src} using 'make', error code ($?)"
  fi
  cd -
}

download_iso() {
  url="http://pogostick.net/~pnh/ntpasswd/cd110511.zip"
  archive=`basename "${url}"`
  log "Downloading ntpasswd ISO archive from ${url} to ${ievms_home}/${archive}"
  if [[ ! -e "${archive}" ]] && ! curl -L "${url}" -o "${archive}"
  then
    fail "Failed to download ${url} to ${ievms_home}/${archive} using 'curl', error code ($?)"
  fi
}

extract_iso() {
  iso=`basename "${archive}" .zip`.iso
  log "Extracting ntpasswd ISO archive from ${archive} to ${ievms_home}/${iso}"
  if [[ ! -e "${iso}" ]] && ! unzip "${archive}"
  then
    fail "Failed to extract ${archive} to ${ievms_home}/${iso} using 'unzip', error code ($?)"
  fi
}

unpack_iso() {
  remaster_iso="${HOME}/tmp/remaster-iso"
  log "Unpacking ntpasswd ISO from ${iso} to ${remaster_iso}"
  if [[ ! -e "${remaster_iso}" ]] && ! uck-remaster-unpack-iso "${iso}"
  then
    fail "Failed to unpack ${iso} to ${remaster_iso} using 'uck-remaster-unpack-iso', error code ($?)"
  fi
}

extract_initrd() {
  initrd="${ievms_home}/initrd"
  initrd_cgz="${remaster_iso}/initrd.cgz"
  mkdir -p "${initrd}"
  cd "${initrd}"
  log "Extracting initrd from ${initrd_cgz} to ${initrd}"
  if ! gzip -cd "${initrd_cgz}" | cpio -i -d -H newc --no-absolute-filenames
  then
    fail "Failed to extract ${initrd_cgz} to ${initrd} using 'gzip | cpio', error code ($?)"
  fi
}

copy_scripts() {
  log "Copying scripts"
  cp "/vagrant/control/stage2" "${initrd}/scripts/"
  cp "/vagrant/control/xpsw.reg" "${initrd}/scripts/"
  cp "/vagrant/control/xpusr.reg" "${initrd}/scripts/"
  cp "/vagrant/control/xpvboxga.bat" "${initrd}/scripts/"
  cp "/vagrant/control/deuac.reg" "${initrd}/scripts/"
  cp "/vagrant/control/reuac.reg" "${initrd}/scripts/"
  cp "/vagrant/control/vboxga.bat" "${initrd}/scripts/"
  cp "/vagrant/control/vsint.cer" "${initrd}/scripts/"
  cp "/vagrant/control/ievms.xml" "${initrd}/scripts/"
  cp "/vagrant/control/ievms.bat" "${initrd}/scripts/"
  cp "/vagrant/control/isolinux.cfg" "${remaster_iso}/isolinux.cfg"
  cp "/vagrant/control/isolinux.cfg" "${remaster_iso}/syslinux.cfg"
  cp "${kernel}" "${remaster_iso}/"
  chmod 755 "${remaster_iso}/bzImage"
  rm -f "${remaster_iso}/vmlinuz" "${remaster_iso}/scsi.cgz" "${remaster_iso}/readme.txt"
}

compress_initrd() {
  cd "${initrd}"
  log "Compressing initrd from ${initrd} to ${initrd_cgz}"
  if ! find . | cpio -o -H newc | gzip > "${initrd_cgz}"
  then
    fail "Failed to compress ${initrd} to ${initrd_cgz} using 'cpio | gzip', error code ($?)"
  fi
}

pack_iso() {
  iso_out="/vagrant/ievms-control.iso"
  log "Packing ievms ISO from ${remaster_iso} to ${iso_out}"
  if ! genisoimage -o "${iso_out}" -b isolinux.bin -c boot.cat -p "ievms" -no-emul-boot -boot-load-size 4 -boot-info-table -V "IEVMS" -cache-inodes -r -J -l -joliet-long "${remaster_iso}"
  then
    fail "Failed to pack ${remaster_iso} to ${iso_out} using 'genisoimage', error code ($?)"
  fi
}

create_home
install_packages
download_cross_compiler
extract_cross_compiler
export PATH="${ievms_home}/${cross_compiler}/bin:$PATH"
download_kernel
extract_kernel
configure_kernel
build_kernel
download_iso
extract_iso
unpack_iso
extract_initrd
copy_scripts
compress_initrd
pack_iso
