#!/usr/bin/env bash
# Summary: List hook scripts for a given pyenv command
# Usage: pyenv hooks <command>

set -e
[ -n "$PYENV_DEBUG" ] && set -x

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
  echo exec
  echo rehash
  echo version-name
  echo version-origin
  echo which
  exit
fi

PYENV_COMMAND="$1"
if [ -z "$PYENV_COMMAND" ]; then
  pyenv-help --usage hooks >&2
  exit 1
fi

if ! enable -f "${BASH_SOURCE%/*}"/pyenv-realpath.dylib realpath 2>/dev/null; then
  if [ -n "$PYENV_NATIVE_EXT" ]; then
    echo "pyenv: failed to load \`realpath' builtin" >&2
    exit 1
  fi
READLINK=$(type -p greadlink readlink | head -1)
if [ -z "$READLINK" ]; then
  echo "pyenv: cannot find readlink - are you missing GNU coreutils?" >&2
  exit 1
fi

resolve_link() {
  $READLINK "$1"
}

realpath() {
  local path="$1"
  local name
  # Use a subshell to avoid changing the current path
  (
  while [ -n "$path" ]; do
    name="${path##*/}"
    [ "$name" = "$path" ] || cd "${path%/*}"
    path="$(resolve_link "$name" || true)"
  done

  echo "${PWD}/$name"
  )
}
fi

IFS=: hook_paths=($PYENV_HOOK_PATH)

shopt -s nullglob
for path in "${hook_paths[@]}"; do
  for script in "$path/$PYENV_COMMAND"/*.bash; do
    realpath "$script"
  done
done
shopt -u nullglob
#!/bin/bash
#
# Streisand shellcheck wrapper
#
# This test script finds all of the *.sh shell files in the project tree and
# runs shellcheck against them. 
#

# Fail on errors
set -e

# Ensure shellcheck is present
if ! command -v shellcheck > /dev/null 2>&1; then
    echo "The 'shellcheck' comand was not found in your PATH. Please install it"
    exit 1
fi

# NOTE(@cpu): We use -x to follow `source` directives across files
SHELLCHECK_ARGS=(-x)

# Determine the absolute path of this script file's directory
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd -P)"
# The Streisand project directory is one up from this script's directory, tests/
PROJECT_DIR="$SCRIPT_DIR/.."

pushd "$PROJECT_DIR"
  # Run shellcheck against all of the `.sh` script files in the Streisand
  # project directory. Ignore any `venv` directory.
  #
  # NOTE(@cpu): While tempting to -exec shellcheck directly from find this will
  # eat-up any non-zero exit codes :-( Instead we find the files first and then
  # xargs shellcheck on the found files.
  find . -path "./venv" -prune -or -name '*.sh' -print0 | xargs -0 -n1 shellcheck "${SHELLCHECK_ARGS[@]}"

  # Also explicitly run `shellcheck` against the streisand wrapper script since
  # it doesn't end in .sh
  shellcheck "${SHELLCHECK_ARGS[@]}" "$PROJECT_DIR/streisand"
popd
#!/bin/bash
#
# Streisand shellcheck wrapper
#
# This test script finds all of the *.sh shell files in the project tree and
# runs shellcheck against them. 
#

# Fail on errors
set -e

# Ensure shellcheck is present
if ! command -v shellcheck > /dev/null 2>&1; then
    echo "The 'shellcheck' comand was not found in your PATH. Please install it"
    exit 1
fi

# NOTE(@cpu): We use -x to follow `source` directives across files
SHELLCHECK_ARGS=(-x)

# Determine the absolute path of this script file's directory
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd -P)"
# The Streisand project directory is one up from this script's directory, tests/
PROJECT_DIR="$SCRIPT_DIR/.."

pushd "$PROJECT_DIR"
  # Run shellcheck against all of the `.sh` script files in the Streisand
  # project directory. Ignore any `venv` directory.
  #
  # NOTE(@cpu): While tempting to -exec shellcheck directly from find this will
  # eat-up any non-zero exit codes :-( Instead we find the files first and then
  # xargs shellcheck on the found files.
  find . -path "./venv" -prune -or -name '*.sh' -print0 | xargs -0 -n1 shellcheck "${SHELLCHECK_ARGS[@]}"

  # Also explicitly run `shellcheck` against the streisand wrapper script since
  # it doesn't end in .sh
  shellcheck "${SHELLCHECK_ARGS[@]}" "$PROJECT_DIR/streisand"
popd
