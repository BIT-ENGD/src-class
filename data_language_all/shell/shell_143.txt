#!/usr/bin/env bats

load test_helper

@test "not enough arguments for python-build" {
  # use empty inline definition so nothing gets built anyway
  local definition="${TMP}/build-definition"
  echo '' > "$definition"

  run python-build "$definition"
  assert_failure
  assert_output_contains 'Usage: python-build'
}

@test "extra arguments for python-build" {
  # use empty inline definition so nothing gets built anyway
  local definition="${TMP}/build-definition"
  echo '' > "$definition"

  run python-build "$definition" "${TMP}/install" ""
  assert_failure
  assert_output_contains 'Usage: python-build'
}
#!/usr/bin/env bash
# Summary: Show the current Python version and its origin
#
# Shows the currently selected Python version and how it was
# selected. To obtain only the version string, use `pyenv
# version-name'.

set -e
[ -n "$PYENV_DEBUG" ] && set -x

exitcode=0
OLDIFS="$IFS"
IFS=: PYENV_VERSION_NAMES=($(pyenv-version-name)) || exitcode=$?
IFS="$OLDIFS"

for PYENV_VERSION_NAME in "${PYENV_VERSION_NAMES[@]}"; do
  echo "$PYENV_VERSION_NAME (set by $(pyenv-version-origin))"
done

exit $exitcode
#!/usr/bin/env bash
# Summary: Show the current Python version and its origin
#
# Shows the currently selected Python version and how it was
# selected. To obtain only the version string, use `pyenv
# version-name'.

set -e
[ -n "$PYENV_DEBUG" ] && set -x

exitcode=0
OLDIFS="$IFS"
IFS=: PYENV_VERSION_NAMES=($(pyenv-version-name)) || exitcode=$?
IFS="$OLDIFS"

for PYENV_VERSION_NAME in "${PYENV_VERSION_NAMES[@]}"; do
  echo "$PYENV_VERSION_NAME (set by $(pyenv-version-origin))"
done

exit $exitcode
