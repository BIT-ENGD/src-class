#!/usr/bin/env bash
set -e

if [ "$1" = "--debug" ]; then
  export PYENV_DEBUG=1
  shift
fi

if [ -n "$PYENV_DEBUG" ]; then
  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
  set -x
fi

abort() {
  { if [ "$#" -eq 0 ]; then cat -
    else echo "pyenv: $*"
    fi
  } >&2
  exit 1
}

if enable -f "${BASH_SOURCE%/*}"/../libexec/pyenv-realpath.dylib realpath 2>/dev/null; then
  abs_dirname() {
    local path
    path="$(realpath "$1")"
    echo "${path%/*}"
  }
else
  [ -z "$PYENV_NATIVE_EXT" ] || abort "failed to load \`realpath' builtin"

  READLINK=$(type -p greadlink readlink | head -1)
  [ -n "$READLINK" ] || abort "cannot find readlink - are you missing GNU coreutils?"

  resolve_link() {
    $READLINK "$1"
  }

  abs_dirname() {
    local path="$1"

    # Use a subshell to avoid changing the current path
    (
    while [ -n "$path" ]; do
      cd "${path%/*}"
      local name="${path##*/}"
      path="$(resolve_link "$name" || true)"
    done

    pwd
    )
  }
fi

if [ -z "${PYENV_ROOT}" ]; then
  PYENV_ROOT="${HOME}/.pyenv"
else
  PYENV_ROOT="${PYENV_ROOT%/}"
fi
export PYENV_ROOT

# Transfer PYENV_FILE_ARG (from shims) into PYENV_DIR.
if [ -z "${PYENV_DIR}" ]; then
  if [ -n "${PYENV_FILE_ARG}" ]; then
    if [ -L "${PYENV_FILE_ARG}" ]; then
      PYENV_DIR="$(abs_dirname "${PYENV_FILE_ARG}")"
    else
      PYENV_DIR="${PYENV_FILE_ARG%/*}"
    fi
    export PYENV_DIR
    unset PYENV_FILE_ARG
  fi
else
  [[ $PYENV_DIR == /* ]] || PYENV_DIR="$PWD/$PYENV_DIR"
  cd "$PYENV_DIR" 2>/dev/null || abort "cannot change working directory to \`$PYENV_DIR'"
  PYENV_DIR="$PWD"
  cd "$OLDPWD"
fi

if [ -z "${PYENV_DIR}" ]; then
  PYENV_DIR="$PWD"
fi

if [ ! -d "$PYENV_DIR" ] || [ ! -e "$PYENV_DIR" ]; then
  abort "cannot change working directory to \`$PYENV_DIR'"
fi

PYENV_DIR=$(cd "$PYENV_DIR" && echo "$PWD")
export PYENV_DIR


shopt -s nullglob

bin_path="$(abs_dirname "$0")"
for plugin_bin in "${PYENV_ROOT}/plugins/"*/bin; do
  PATH="${plugin_bin}:${PATH}"
done
export PATH="${bin_path}:${PATH}"

PYENV_HOOK_PATH="${PYENV_HOOK_PATH}:${PYENV_ROOT}/pyenv.d"
if [ "${bin_path%/*}" != "$PYENV_ROOT" ]; then
  # Add pyenv's own `pyenv.d` unless pyenv was cloned to PYENV_ROOT
  PYENV_HOOK_PATH="${PYENV_HOOK_PATH}:${bin_path%/*}/pyenv.d"
fi
PYENV_HOOK_PATH="${PYENV_HOOK_PATH}:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks"
for plugin_hook in "${PYENV_ROOT}/plugins/"*/etc/pyenv.d; do
  PYENV_HOOK_PATH="${PYENV_HOOK_PATH}:${plugin_hook}"
done
PYENV_HOOK_PATH="${PYENV_HOOK_PATH#:}"
export PYENV_HOOK_PATH

shopt -u nullglob


command="$1"
case "$command" in
"" )
  { pyenv---version
    pyenv-help
  } | abort
  ;;
-v | --version )
  exec pyenv---version
  ;;
-h | --help )
  exec pyenv-help
  ;;
* )
  command_path="$(command -v "pyenv-$command" || true)"
  if [ -z "$command_path" ]; then
    if [ "$command" == "shell" ]; then
      abort "shell integration not enabled. Run \`pyenv init' for instructions."
    else
      abort "no such command \`$command'"
    fi
  fi

  shift 1
  if [ "$1" = --help ]; then
    if [[ "$command" == "sh-"* ]]; then
      echo "pyenv help \"$command\""
    else
      exec pyenv-help "$command"
    fi
  else
    exec "$command_path" "$@"
  fi
  ;;
esac
#!/usr/bin/env bash
# Streisand CI test script.
# Usage:
#  ./tests.sh [setup|syntax|run|ci|full]

# Set errexit option to exit immediately on any non-zero status return
set -e

echo -e "\n\033[38;5;255m\033[48;5;234m\033[1m  S T R E I S A N D  \033[0m\n"

# Compute an absolute path to the test ansible.cfg file
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export ANSIBLE_CONFIG=$DIR/ansible.cfg

# Include the check_ansible function from ansible_check.sh
source util/ansible_check.sh

function run_playbook {
  PLAYBOOK="$1"
  EXTRA_FLAGS=(${@:2})
  # Special case: If $SITE is "random" then we mix things up
  if [[ "$SITE" = "random" ]]; then
    SITE="tests/site_vars/random.yml"
    "$DIR/randomize_sitevars.sh" "$SITE"
  fi
  SITE_DECL=""
  if [ -n "$SITE" ]; then
    SITE_DECL="--extra-vars=@${SITE}"
  fi

  # The `development-setup.yml` playbook will use snap to install LXD. We need
  # to make sure the snap installed binaries are on the $PATH for Ansible
  PATH=$PATH:/snap/bin:/var/lib/snapd/snap/bin
  export PATH

  ansible-playbook \
    -i "$DIR/inventory" \
    --extra-vars=@global_vars/vars.yml \
    $SITE_DECL \
    "$PLAYBOOK" "${EXTRA_FLAGS[@]}"
}

# syntax_check runs `ansible-playbook` with `--syntax-check` to vet Ansible
# playbooks for syntax errors
function syntax_check {
  run_playbook "$DIR/syntax-check.yml" --syntax-check -vv
}

function dev_setup {
  run_playbook "$DIR/development-setup.yml"
}

function run_tests {
  run_playbook "$DIR/run.yml" --extra-vars=@"$DIR/vars_ci.yml" "$1"
}

function ci_tests {
  dev_setup && run_tests
}

function ci_tests_verbose {
  dev_setup && run_tests -vv
}

# Make sure the system is ready for the Streisand playbooks
check_ansible

# Allow overriding the RUN env var by providing an arg to the script
if [ -n "$1" ]; then
  RUN="$1"
fi

# Setup prepares the local environment for running a Streisand LXC
if [[ "$RUN" =~ "setup" ]] ; then
    dev_setup
fi

# Syntax checks for Ansible syntax errors
if [[ "$RUN" =~ "syntax" ]] ; then
    syntax_check
fi

# Shellcheck checks for bash/sh errors/pitfalls
if [[ "$RUN" =~ "shellcheck" ]] ; then
  ./tests/shellcheck.sh
fi

# Yamlcheck checks for general YAML best practices
if [[ "$RUN" =~ "yamlcheck" ]] ; then
  ./tests/yamlcheck.sh
fi

# Run will run CI tests assuming the local environment is already prepared
if [[ "$RUN" =~ "run" ]] ; then
  run_tests
fi

# CI will setup the local environment and then run tests
if [[ "$RUN" =~ "ci" ]] ; then
  ci_tests
fi

# Full will do the same as "ci" but with verbose output
if [[ "$RUN" =~ "full" ]] ; then
  ci_tests_verbose
fi
#!/usr/bin/env bash
# Streisand CI test script.
# Usage:
#  ./tests.sh [setup|syntax|run|ci|full]

# Set errexit option to exit immediately on any non-zero status return
set -e

echo -e "\n\033[38;5;255m\033[48;5;234m\033[1m  S T R E I S A N D  \033[0m\n"

# Compute an absolute path to the test ansible.cfg file
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export ANSIBLE_CONFIG=$DIR/ansible.cfg

# Include the check_ansible function from ansible_check.sh
source util/ansible_check.sh

function run_playbook {
  PLAYBOOK="$1"
  EXTRA_FLAGS=(${@:2})
  # Special case: If $SITE is "random" then we mix things up
  if [[ "$SITE" = "random" ]]; then
    SITE="tests/site_vars/random.yml"
    "$DIR/randomize_sitevars.sh" "$SITE"
  fi
  SITE_DECL=""
  if [ -n "$SITE" ]; then
    SITE_DECL="--extra-vars=@${SITE}"
  fi

  # The `development-setup.yml` playbook will use snap to install LXD. We need
  # to make sure the snap installed binaries are on the $PATH for Ansible
  PATH=$PATH:/snap/bin:/var/lib/snapd/snap/bin
  export PATH

  ansible-playbook \
    -i "$DIR/inventory" \
    --extra-vars=@global_vars/vars.yml \
    $SITE_DECL \
    "$PLAYBOOK" "${EXTRA_FLAGS[@]}"
}

# syntax_check runs `ansible-playbook` with `--syntax-check` to vet Ansible
# playbooks for syntax errors
function syntax_check {
  run_playbook "$DIR/syntax-check.yml" --syntax-check -vv
}

function dev_setup {
  run_playbook "$DIR/development-setup.yml"
}

function run_tests {
  run_playbook "$DIR/run.yml" --extra-vars=@"$DIR/vars_ci.yml" "$1"
}

function ci_tests {
  dev_setup && run_tests
}

function ci_tests_verbose {
  dev_setup && run_tests -vv
}

# Make sure the system is ready for the Streisand playbooks
check_ansible

# Allow overriding the RUN env var by providing an arg to the script
if [ -n "$1" ]; then
  RUN="$1"
fi

# Setup prepares the local environment for running a Streisand LXC
if [[ "$RUN" =~ "setup" ]] ; then
    dev_setup
fi

# Syntax checks for Ansible syntax errors
if [[ "$RUN" =~ "syntax" ]] ; then
    syntax_check
fi

# Shellcheck checks for bash/sh errors/pitfalls
if [[ "$RUN" =~ "shellcheck" ]] ; then
  ./tests/shellcheck.sh
fi

# Yamlcheck checks for general YAML best practices
if [[ "$RUN" =~ "yamlcheck" ]] ; then
  ./tests/yamlcheck.sh
fi

# Run will run CI tests assuming the local environment is already prepared
if [[ "$RUN" =~ "run" ]] ; then
  run_tests
fi

# CI will setup the local environment and then run tests
if [[ "$RUN" =~ "ci" ]] ; then
  ci_tests
fi

# Full will do the same as "ci" but with verbose output
if [[ "$RUN" =~ "full" ]] ; then
  ci_tests_verbose
fi
