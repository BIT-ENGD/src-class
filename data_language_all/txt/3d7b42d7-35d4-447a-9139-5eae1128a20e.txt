CubeGeoJSON
 
A GeoJSON library for iOS, macOS, and watchOS written in Swift.
Features:

Parse all kinds of Geometry objects
Auto-Creates MKShape subclasses to represent your GeoJSON structure
Allows serialising back to swift dictionary objects
Adds useful helper methods for doing calculations with and editing GeoJSON structures

Installation
Carthage
Carthage is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.
You can install Carthage with Homebrew using the following command:
bash
$ brew update
$ brew install carthage
To integrate CubeGeoJSON into your Xcode project using Carthage, specify it in your Cartfile:
github "3sidedcube/CubeGeoJSON" == 1.2.0
Run carthage update to build the framework and drag the built GeoJSON.framework into your Xcode project.
Manually

Add CubeGeoJSON as a git submodule by running the following command:

bash
$ git submodule add https://github.com/3sidedcube/CubeGeoJSON.git


Open the new CubeGeoJSON folder, and drag the GeoJSON.xcodeproj into the Project Navigator of your application's Xcode project.

It should appear nested underneath your application's blue project icon. Whether it is above or below all the other Xcode groups does not matter.



Make sure the GeoJSON.xcodeproj is set up with the same deployment target as your root project.

Add GeoJSON.framework as a target dependency to your project.

Usage
Initialise a new Geometry object using the default init(dictionary: [String:AnyObject) method

Contributing

Fork it!
Create your feature branch: git checkout -b my-new-feature
Commit your changes: git commit -am 'Add some feature'
Push to the branch: git push origin my-new-feature
Submit a pull request :D
