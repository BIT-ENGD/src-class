micro-html-template
Template system based roughly on Jinja2, designed with a focus on
security, simplicity, rendering speed, and minimal clientside footprint.
Features:

Small feature set — focused on simple value replacement and filters.
Small runtime — the JavaScript needed to render compiled templates
  in the client is about 1.1KB, uncompressed.
Small precompiled size — compiled templates are approximately the
  same size as the templates themselves.
Contextual escaping — anti-XSS escaping policies are
  applied automatically based on the HTML context.

Non-Features:

Compiling templates in the client — templates must be precompiled
  in nodejs.
Complex template programming — no support for loops, conditionals,
  tags, inheritance, etc.
Protection against malicious templates — it is assumed that templates
  are created by trusted users only.

Usage
Compile and render a template in nodejs:

Render the template in the client:

The result:

See the tests for more examples.
Templates
This libarary is designed for applications where templates are created only by
trusted users, but data used to render the templates is untrusted. Template
data will be automatically protected against XSS by a combination of HTML and
URI component escaping, depending on the context.
Templates must be valid HTML — macros may only appear in:
* text nodes
* quoted attribute values
Macros in unsafe contexts are ignored — macros may not appear in:
* <script> tags
* <style> tags
* style attribute values
* on* event attribute values
Ok:


Unsafe:





Contextual Escaping
The results of all macro replacements are automatically HTML escaped. However,
certain attributes are interpreted as URIs by the browser (the src attribute
of an <iframe>, for example). Macro replacements in these attributes are URI
encoded (eg. encodeURIComponent()) and then HTML escaped.



Raw Mode
Automatic contextual escaping can be disabled for individual macros: see Filters below.
Values
The values used in macro expansion are provided as literals or via the env
object (passed as an argument to render).






Filters
Filters are functions that are applied to the replacement text. Filters are
expressed as a pipeline:
jinja
<img src='https://example.com?q={{query | filter1 | filter2}}'>
Filters beginning with a . character denote method invocation:
jinja
<img src='https://example.com?q={{query | .toUpperCase}}'>
Filters and methods may take arguments:
jinja
<img src='https://example.com?q={{query | doit("foo", bar.baz) | .substr(42)}}'>
The following built-in filters are included:

id — The identity filter, does nothing.
uri — Escapes input for URI component context.
html — Escapes input for HTML context.
raw — Applied at the end of the pipeline this filter disables auto-escaping.

Note that the uri and html filters are automatically applied as needed to
prevent XSS. However, it may sometimes make sense to use them in macros, for
instance to escape URI components in an attribute that is not automatically
interpreted by the browser as a URI type:

Or if you need to double-escape a URI component for some reason:

Or when using the raw filter on trusted data:

Custom Filters
Filters can be added to the runtime in nodejs:

or in the client:

Filters may accept additional arguments:

Pass the additional arguments to the filter in the template:
jinja
<img src='https://example.com?q={{query | wrap("[", "]")}}'>
Escaping Macro Delimiters
To include the macro start delimiter {{ itself in a template it must be
escaped by preceeding it with another start delimiter, like this: {{{{.


Hacking



License
Copyright © 2017 Adzerk, Inc.
Distributed under the Apache License, Version 2.0.