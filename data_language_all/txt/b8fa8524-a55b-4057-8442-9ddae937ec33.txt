Hubot
This is a version of GitHub's Campfire bot, hubot. He's pretty cool.
You'll probably never have to hack on this repo directly.
Follow the instructions below and get your own hubot ready to deploy.
Getting Your Own
Make sure you have node.js and npm (npm comes with node
v0.6.3+) installed.
Download the latest version of hubot.
Then follow the instructions in the README in the extracted
hubot/src/templates directory. The templates directory is an example
runnable hubot.
You should install dependencies and then use make package to create a
deployable hubot.
$ npm install
$ make package

Then the directory ./hubot contains a deployable hubot that you're able to
deploy to heroku or run locally.
Adapters
Adapters are the interface to the service you want your hubot to run on. This
can be something like Campfire or IRC. There are a number of third party
adapters that the community have contributed. Check the
hubot wiki for the available ones and how to create your own.
Please submit issues and pull requests for third party adapters to the adapter
repo, not this repo (unless it's the Campfire or Shell adapter).
Hubot Scripts
Hubot ships with a number of default scripts, but there's a growing number of
extras in the hubot-scripts repository. hubot-scripts is a
way to share scripts with the entire community.
Check out the README for more help on installing
individual scripts.
External Scripts
This functionality allows users to enable scripts from npm packages which
don't have to be included in the hubot-scripts repository.
To enable to functionality you can follow the following steps.

Add the packages as dependencies into your package.json
npm install to make sure those packages are installed

To enable third-party scripts that you've added you will need to add the package
name as a double quoted string to the external-scripts.json file for your
hubot.
Creating A Script Package
Creating a script package for hubot is very simple. Start by creating a normal
npm package. Make sure you add a main file for the entry point (e.g.
index.js or index.coffee).
In this entry point file you're going to have to export a function that hubot
will use to load the scripts in your package. Below is a simple example for
loading each script in a ./scripts directory in your package.

After you've built your npm package you can publish it to npmjs.
HTTP Listener
Hubot has a HTTP listener which listens on the port specified by the PORT
environment variable. If PORT is not specified, the default port will be 8080.
You can specify routes to listen on in your scripts by using the router
property on robot.
coffeescript
module.exports = (robot) ->
  robot.router.get "/hubot/version", (req, res) ->
    res.end robot.version
There are functions for GET, POST, PUT and DELETE, which all take a route and
callback function that accepts a request and a response.
In addition, if you set EXPRESS_STATIC, the HTTP listener will serve static
files from this directory.
Events
Hubot has also an node.js EventEmitter attached. It can be used
for data exchange between scripts.

If you'll provide an event, it's very recommended to include a hubot user object
in data. In case of other reacting scripts want to respond to chat.
Persistence
Hubot also has an in-memory key-value store exposed as robot.brain that can be
used to store and retrieve data by scripts.

Look in storage.coffee for more examples.
You may also install the script redis-brain.coffee
(instructions here)
for persisting the key-value store in a redis database.
If the script needs to store user data, robot.brain has a built-in interface
for it.

More examples in roles.coffee