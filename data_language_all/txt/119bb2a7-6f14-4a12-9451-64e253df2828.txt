Blynx is a functional statically-typed language that transcompiles to Javascript. 
State: in development (alpha ~ Jan/2013)
Features

Functional (impure, side-effects are allowed yet controlled).
Statically typed.
Common types built-in (boolean, integer, float, string, list, array, dictionary, tuple).
Algebraic data types.
Polymorphic types.
Type-traits (type-classes).
Automatic type-inference.
Pattern-matching.
Special syntax to write asynchronous code.
Access to external Javascript code. 

A more detailed overview: https://github.com/tokland/blynx/wiki/Overview
Take a quick glance
Project Euler #20
Find the sum of the digits in the number 100!. We can write a compact one-liner:
coffeescript
[1..100].reduce1((*)).str.chars.map(int).reduce1((+)) #=> 648 : Int
That's ok to solve this particular problem, but programming is about building abstractions, so let's split the code into re-usable functions:

Notice that now, thanks to the abstractions and the syntax of the language, the final expression is able to mimic the exact formulation of the problem.
Functional sort
