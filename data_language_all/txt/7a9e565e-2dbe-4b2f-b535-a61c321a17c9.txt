Component Documentation
Creates a React component. fission.component is different from React.createClass in a few ways - this will document the differences, for any other behavior you should consult the React documentation.
fission.component(config)

Configuration
The configuration object you pass to fission.component is the same object you would pass to React.createClass, but with a few added aliases and nice things.
props
Type: object
This object is used to validate properties passed to the component. Alias for propTypes. Used in conjuction with fission.PropTypes which is an alias for React.PropTypes

init
Type: function
This function is called to get the default state before attempting to mount. Alias for getInitialState.

mounting
Type: function
This function is called when your component is preparing to mount. Alias for componentWillMount.

mounted
Type: function
This function is called when your component has been mounted. Alias for componentDidMount.

unmounting
Type: function
This function is called when your component is preparing to unmount (be destroyed). Alias for componentWillUnmount.

css
Type: string
On first mount of your component, this CSS for it will be added to the page. This makes it easy to modularize your stylesheets per-component and also ensures that style conflicts don't happen between components.
Using a string

Using a pre-processor
You don't want to put a bunch of CSS in your JS file, so you will probably use some browserify middleware. This example uses stylify which compiles the stylus into CSS and exports it as a string.

Pure Rendering
By default, React will re-render on any state or prop change even if the value is the same.
js
// Re-renders 3 times
this.setState({a: 123});
this.setState({a: 123});
this.setState({a: 123});
fission employs a new shouldComponentUpdate function that ensures your component won't re-render unless there has actually been a state or prop change - even on nested objects and arrays (or arrays of objects with objects of arrays of objects, you get the point).

Make sure your render function only gets its data from sanctioned source: (this.props, this.state, this.items, this.model, etc.).
If for some reason you absolutely need to disable this behavior (you have global state), you can mark your component as impure.

Immutability Helpers
fission incorporates the React immutability helpers into the core of it's component system.
Components have access to an updateState function that lets you perform high-performance immutable operations on component state. This makes it extremely easy to update nested state which helps the Pure rendering mechanism determine if a render is needed.
