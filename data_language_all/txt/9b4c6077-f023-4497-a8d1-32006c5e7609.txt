ScalaScript
Type-safe Scala.js Bindings for AngularJS 
Introduction
The goal of ScalaScript is to be more than just a type-safe Scala.js binding for AngularJS 1.4.x. ScalaScript goes to 
great lengths to make all the things you love about writing Scala on the back-end, to the front-end. To that end, various
refinements have been added to make the transition more seamless.
This project is no longer in active development
Please use MEANS.js instead.
Defining a Module

ScalaScript Examples
Filter Example

Controller Example 1: Js.Dynamic Impelementation

In the example above, we're using a Scala.js JSON literal as our scope. While this is very flexible, it's not at all 
type-safe. In addition, most IDE's will be unable to provide any useful type inference information. 
Controller Example 2: Type-Safe Implementation

In the example above, we using a generic scope object because we don't need to specify any custom scope variables, and 
we're using the @scope macro annotation to attach our methods to the $scope variable. 
Modal Dialog â€” Controller and Service

Service Example

Directive Example

The Refinements
Durations
ScalaScript provides implicit conversions so that you may use scala.concurrent.duration.FiniteDurations with $timeout,
$interval, and any other services that use time in milliseconds.

JSON data as Scala objects
ScalaScript allows you to utilize dynamic JavaScript objects or type-safe Scala objects using traits. 
Consider the following example:
scala
$http.get[js.Dynamic]("/api/tradingClock/status") onComplete {
    case Success(obj) => console.log(angular.toJson(obj))
    case Failure(e) => ...
}
Above we retrieve a JSON object (see below) in much the same fashion as you would using native JavaScript. Sometimes
one may want to retrieve the data as a js.Dynamic because of the flexibility it offers.
json
{"stateChanged":false,"active":false,"sysTime":1392092448795,"delay":-49848795,"start":1392042600000,"end":1392066000000}
However, sometimes we instead want to retrieve the data as a type-safe Scala object. ScalaScript makes this as simple as:

Above, we retrieve a JSON object via the given API and return a Market Status object. NOTE: The fact 
that MarketStatus extends js.Object is significant.
For Comprehensions
ScalaScript provides implicit conversions that convert a HttpResponse[T] into a Future[T], we can also use for
comprehensions when we need to combine data from multiple API calls.
scala
val outcome = for {
   symbols <- contestService.getHeldSecurities(playerId)
   quotes <- quoteService.getStockQuoteList(symbols)
 } yield quotes
The above code uses Scala's for comprehension to first retrieve a collection of symbols (via REST) and then use the 
symbols to then retrieve a collection of quotes (also via REST). 
To do the same in JavaScript would've required creating 
multiple promises (via $q) or ugly callbacks, and then there's the results gathering/error handling... which would also 
be more painful in JavaScript. 
Here's how it's handled via Scala.js:
scala
outcome onComplete {
  case Success(updatedQuotes) =>
    obj.quotes = updatedQuotes
  case Failure(e) =>
    toaster.error(s"Failed to load Held Securities")
    console.error(s"Failed to load Held Securities: ${e.getMessage}")
}