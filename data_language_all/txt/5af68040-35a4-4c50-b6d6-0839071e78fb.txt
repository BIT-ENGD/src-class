fuzzit.dev was acquired by GitLab and the new home for this repo is here
Continuous Fuzzing for C/C++ Example
This is an example of how to integrate your libfuzzer targets with the
Fuzzit Continuous Fuzzing Platform.
This example will show the following steps:
* Building and running a simple libFuzzer target locally
* Integrate the libFuzzer target with Fuzzit via Travis-CI
Result:
* Fuzzit will run the fuzz targets continuously on a daily basis with the latest release.
* Fuzzit will run regression tests on every pull-request with the generated corpus and crashes to catch bugs early on.
Fuzzing for C/C++ can help find both complex bugs, as well as critical security bugs as both c/c++ are unsafe languages.
This tutorial focuses less on how to build libFuzzer targets and more on how to integrate the targets with Fuzzit. A lot of 
great information is available at the libFuzzer tutorial.
Building libFuzzer Target
Prerequisite
This tutorial was tested on Ubuntu 18, though it should work on any Unix environment.
The required packages are cmake and clang > 6.0
bash
apt update && apt install -y git clang cmake
Getting the code
bash
git clone https://github.com/fuzzitdev/example-c
Compiling

Understanding the code
This code consist of a library and a command line program.
The code is a dummy code (just for the sake of the example)
that trigger an heap out-of-bound access when it is passed the correct
"secret" flag.

when the secret flag is passed, the code accesses an off-by-one in the src
array.
Fuzzing
we will use the libFuzzer binary located under fuzz/ to find the "secret" 
flag and trigger the bug.
bash
./fuzz/fuzz_test_string -exact_artifact_path=crash
Because it's a very simple code libFuzzer takes under 1 second (Although even in complex code, libFuzzer can sometimes find complicated
 bugs quickly, such as Heartbleed).
The output should look something like this:
 bash
Install fuzzit latest version:
wget -q -O fuzzit https://github.com/fuzzitdev/fuzzit/releases/latest/download/fuzzit_Linux_x86_64
chmod a+x fuzzit
upload fuzz target for long fuzz testing on fuzzit.dev server or run locally for regression
./fuzzit create job --type ${FUZZING_TYPE} fuzzitdev/fuzz-test-string ./fuzz/fuzz_test_string
 ``` 
In production it is advised to download a pinned version of the CLI
 like in the example. In development you can use the latest version:
 https://github.com/fuzzitdev/fuzzit/releases/latest/download/fuzzit_${OS}_${ARCH}.
 Valid values for ${OS} are: Linux, Darwin, Windows.
 Valid values for ${ARCH} are: x86_64 and i386.
## More Examples
You can look in the following open-source examples integrating Fuzzit with different CIs and different
 build systems:

systemd - travis, 
             case-study.
radare2 - travis
pdfgen -  circle
