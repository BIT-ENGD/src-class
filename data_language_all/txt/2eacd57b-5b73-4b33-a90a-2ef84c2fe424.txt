

| Configuration             | Build Status                          |
| ------------------------- | ------------------------------------- |
| Linux G++ 7               |                 |
| Linux Clang 4             |              |
| Linux Clang 5             |              |
| XCode 9.4.1 - OS X 10.13  |   |
| XCode 12.0 - OS X 10.15.5 |  |
| Windows                   |                   |
Starter project with minimum necessary functionality

use cmake for the build system
modular structure with each module self-contained in a subdirectory within
  the project
build helpers in common/cmake to facilitate declaration of library, exe,
  test modules, for the end-to-end lifecycle including doc generation, test,
  packaging etc...
common facilities (common module) for platform specifics, assertions
  support, logging
unit testing with Catch2
Optional Modules:
backported C++17 filesystem implementation (will be portable across Linux, Mac
    and Windows)

Any optional submodule that is not needed can be simply removed from the git submodules
and from the master CMakeLists.txt (add_subdirectory()).
Getting the code
shell
git clone --recurse-submodules -j4 https://gitlab.com/absassi/asap_app_console.git
NOTES:

-j4 requests git to parallelize cloning of repos. Needs a relatively recent version
  of git. If that is not available, simply do not use this option.

Requirements
Make sure you have a C++ compiler with C++-14 capabilities at least. Gnu, Clang and MSVC
all can do that with a recent version.
Building
shell
mkdir _build && cd _build && cmake .. && cmake --build .
You can also use any of the cmake options, generators, etc...
By default the build will create shared libraries. If you want static libraries, pass
-DBUILD_SHARED_LIBS=OFF to cmake during configuration:
shell
cmake -DBUILD_SHARED_LIBS=OFF ..
You can also use any of the cmake options, generators, etc...

The code is portable across Linux (g++ and clang), OS X and Visual Studio 2017.