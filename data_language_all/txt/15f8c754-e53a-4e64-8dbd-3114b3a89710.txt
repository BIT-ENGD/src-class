



  Babylon is a JavaScript parser used in Babel.






The latest ECMAScript version enabled by default (ES2017).
Comment attachment.
Support for JSX and Flow.
Support for experimental language proposals.

Credits
Heavily based on acorn and acorn-jsx,
thanks to the awesome work of @RReverser and @marijnh.
Significant diversions are expected to occur in the future such as streaming, EBNF definitions, sweet.js integration, interspatial parsing and more.
API
babylon.parse(code, [options])
Options


allowImportExportEverywhere: By default, import and export
  declarations can only appear at a program's top level. Setting this
  option to true allows them anywhere where a statement is allowed.


allowReturnOutsideFunction: By default, a return statement at
  the top level raises an error. Set this to true to accept such
  code.


allowSuperOutsideMethod TODO


sourceType: Indicate the mode the code should be parsed in. Can be
  either "script" or "module".


sourceFilename: Correlate output AST nodes with their source filename.  Useful when generating code and source maps from the ASTs of multiple input files.


plugins: Array containing the plugins that you want to enable.


Output
Babylon generates AST according to Babel AST format.
It is based on ESTree spec with the following deviations:

Literal token is replaced with StringLiteral, NumericLiteral, BooleanLiteral, NullLiteral, RegExpLiteral
Property token is replaced with ObjectProperty and ObjectMethod
MethodDefinition is replaced with ClassMethod
Program and BlockStatement contain additional directives field with Directive and DirectiveLiteral
ClassMethod, ObjectProperty, and ObjectMethod value property's properties in FunctionExpression is coerced/brought into the main method node.

AST for JSX code is based on Facebook JSX AST with the addition of one node type:

JSXText

Semver
Babylon follows semver in most situations. The only thing to note is that some spec-compliancy bug fixes may be released under patch versions.
For example: We push a fix to early error on something like #107 - multiple default exports per file. That would be considered a bug fix even though it would cause a build to fail.
Example

Plugins

jsx
flow
doExpressions
objectRestSpread
decorators
classProperties
exportExtensions
asyncGenerators
functionBind
functionSent
