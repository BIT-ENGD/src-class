The Directory Differential hTool
DDH traverses input directories and their subdirectories. It also hashes files as needed and reports findings.
The H in "hTool" is silent. The H in its abbreviation, "DDH," is not.
This tool is called DDH for two very good reasons.
* DDT is a dangerous pesticide
* I mistyped when I created the project
Usage
DDH is usable both as a library and as a stand alone CLI tool and aims to be simple to use in both cases.
Library example
rust
let (files, errors): (Vec<Fileinfo>, Vec<(_, _)>) = ddh::deduplicate_dirs(dirs);
let (shared, unique): (Vec<&Fileinfo>, Vec<&Fileinfo>) = files
                    .par_iter()
                    .partition(|&x| x.get_paths().len()>1);
process_full_output(&shared, &unique, &files, &errors, &arguments);
CLI Install

Install Rust
cargo install --git https://github.com/darakian/ddh ddh
The DDH binary will be installed into $CARGO_HOME/.bin/ddh, which usually is $HOME/.cargo/bin/ddh. This should be in your PATH already if you're using rustup.

CLI Features
DDH supports both a standard output for human comprehension and a parsable json output for custom tools such as ddh-move.
CLI Example

How Does DDH Work?
DDH works by hashing files to determine their uniqueness and, as such, depends heavily on disk speeds for performance. The algorithmic choices in use are discussed here.