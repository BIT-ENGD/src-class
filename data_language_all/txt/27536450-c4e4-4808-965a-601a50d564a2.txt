MVVM in Swift

MVVM is an augmented version of MVC architecture where we formally connect our view and controller, and move the business logic out of the controller and into the view model.
MVVM may sound complicated, but it’s essentially a dressed-up version of the MVC architecture that you’re already familiar with.
Generally speaking, MVVM is often combined with Functional Reactive Programming and there are a lot of FRP libraries, such as RxSwift and ReactiveCocoa.
However, if someone isn't familiar with FRP, it's still possible to leverage MVVM in a project.
In this article, I will demonstrate how to adopt MVVM without FRP libraries.
Model View Controller
Let's get started with the standard MVC approach and the example is to display an array of sorted integers within a UITableView.
In addition, we are able to insert a new integer into the correct order by clicking the add button on the top right and delete an integer by swiping a row as well.

Here, I just create a UITableViewController subclass called DemoViewController and implement the necessary UITableViewDataSource methods within it. In addition, I also put the insertion logic in addNewInteger method and deletion logic in tableView(_ tableView:, commit editingStyle:, forRowAt indexPath:) method.

Model View View Model
The first step of converting to MVVM is to create a struct called State and it stores the information related with the table view, in our case, the sorted integers.

Conclusion
The sample playground is here and this article is inspired by objc.io Swift Talk.
There are several merits of adopting MVVM in your project.
First of all, it makes the codebase more testable.
The view controller always has a bad reputation of testing but moving all business logic into the view model gives the convenience and possibility of writing tests for the logic.
Secondly, following this pattern can make the codebase more consistent and brings more readability.
Moreover, it's possible to further reduce the complexity of UI binding and asynchronous chaining with FRP libraries.
I'm totally open to discussion and feedback, so please share your thoughts. Thank you!