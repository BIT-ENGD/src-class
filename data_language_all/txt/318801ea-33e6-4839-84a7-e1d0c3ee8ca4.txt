light-morse
A library for Morse code implementation in Rust.



Documentation
Getting Started
The following instructions will explain how to get any machine up-and-running for Rust
and how to subsequently implement the library into a project.
Prerequisties
In order to run Rust on a local machine, the language has to be installed.
A detailed description of how that is done, can be found on the official Rust page.
Implementation/Embedment
Add this to your Cargo.toml:
toml
[dependencies]
light-morse = "0.2.0"
and this to your crate root:

Tests
Enter the light-morse repository and run: cargo test --verbose
Telegram-CLI
This is a full-functioning Telegram, playing sounds for the word(s) one writes.
How To Use

Go into the /examples/telegram directory.
Run telegram --message "[MESSAGE]" --morse-type "ITU, Gerke or Morse".

Note: telegram is cargo run --
Dependencies

clap - Command Line Argument Parser
ears - Play sounds and music
itertools - Extra iterator adaptors, functions and macros

Sound Effects
Cut as needed, originals by soundsnap.
Building On
Everything regarding how to build upon light-morse.
Adding Substitution / Morse Method
A substitution method can be added, as long as it looks like the following:
Rust
fn name(chr: PlainChunk) -> MorseChunk { /* Substitution for chars */ }

PlainChunk: char
MorseChunk: String

Versioning
SemVer applies for versioning. For the versions available, see the crate.
Authors

Lukas Mueller - Initial Work

Acknowledgements
The topic for this library was inspired by the morse iOS application of Ilias Ennmouri.