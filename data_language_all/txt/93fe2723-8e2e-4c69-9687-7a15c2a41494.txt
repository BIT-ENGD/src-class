Starting a Software Project
Software projects should adhere to a sane set of standards. This document outlines our recommended
standards for all projects, then links to additional technology-specific recommendations.
When starting any new software project, you should:

[ ] Use a source code management system
[ ] Use a repository hosting service
[ ] Set up Continuous Integration
[ ] Use Semantic Versioning
[ ] Have verification and development setup scripts

Source Control
Use a source code management system.
Git is recommended.
Why use source control? Have you ever:

Made a change to code, realized it was a mistake and wanted to revert back?
Lost code or had a backup that was too old?
Had to maintain multiple versions of a product?
Wanted to see the difference between two (or more) versions of your code?
Wanted to prove that a particular change broke or fixed a piece of code?
Wanted to review the history of some code?
Wanted to submit a change to someone else's code?
Wanted to share your code, or let other people work on your code?
Wanted to see how much work is being done, and where, when and by whom?
Wanted to experiment with a new feature without interfering with working code?

(As outlined on
Stack Overflow)
Repository Hosting Service
Use a repository hosting service. Using a repository hosting service combined with
source control allows for a safe development and collaboration story.
Github is recommended.
Continuous Integration
Set up Continuous Integration (CI). CI tests changes to a project's code base as they're
submitted.
CircleCI is recommended.
Versioning
Use Semantic Versioning (Semver).
Quick summary of Semantic Versioning:
Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards-compatible manner, and
PATCH version when you make backwards-compatible bug fixes.

Additional labels for pre-release and build metadata are available as
extensions to the MAJOR.MINOR.PATCH format.
Verification and Development Setup Scripts
In order to lower the barrier-to-entry for contributors, every project
should provide ./scripts/verify and ./scripts/setup scripts with the
following contract:


./scripts/verify verifies the correctness of the current state of
  the project working directory. Intended for use in CI or
  local environments. For example, could invoke ./gradlew build in
  order to compile and test a Java project.


./scripts/setup sets up the default local
  development environment(s) -- including downloading dependencies and
  additional sources, setting up IDE-specific configuration, etc. Can
  be run repeatedly to incorporate upstream changes to the
  development setup. For example, could invoke
  ./gradlew idea eclipse in order to generate Eclipse and IntelliJ
  project files for a Java project.


The scripts should be executable on Linux/MacOS environments via
./scripts/foo, i.e., should carry execution permissions and an
appropriate Shebang (#!) instruction.
Technology-Specific Checklists
The above recommendations are appropriate for all software development projects. Depending on which
technologies you are working with, you should also read the following:

Java Checklist
Web Application Checklist
Gradle Plugin Checklist
