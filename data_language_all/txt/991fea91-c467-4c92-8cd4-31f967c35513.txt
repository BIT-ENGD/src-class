Motivation
This is a test project to illustrate the issue with Play 2.6 with request headers when certain 
Content-Encoding is used in the request.
Issue summary
Most of request headers are dropped when Content-Encoding header with values gzip or deflate is sent 
with the request.
Details
With a default Play 2.6.6 setup, most of the request headers are not available in the actual 
play.api.mvc.RequestHeader.headers instance inside the controller when the compressed Content-Encoding 
header is sent. Here's an example:
When the controller looks like this:
scala
@Singleton
class HomeController @Inject()(cc: ControllerComponents) extends AbstractController(cc) {
  def testGzip() = Action { implicit request: Request[AnyContent] =>
    Ok(request.headers.toString)
  }
}
And the following curl command is executed against a Play instance running at http://localhost:9000:


Then you can see that headers Authorization and X-Custom-Header are missing from the 
request object.
To be clear, when the Content-Encoding: gzip is specified, no matter if the body of the request
actually include something gzipped, the situation with headers remain the same. It also doesn't 
matter if the Content-Type is correctly specified or not. Also to be clear,
Play can decompress the gzipped content when this Content-Encoding is specified, so that part
is fine. The problem is that headers are missing.
P.S. also worth noting that Transfer-Encoding: chunked is somehow inferred by Play, even though
it is not sent by the client.