





Emacs Slack
GNU Emacs client for Slack.

Preview
You can see some gifs on the wiki.
Dependencies

Alert
circe (for the Linewise User
  Interface library).
Emojify (optional)
Oauth2
do package install
request
websocket

Extensions

helm-slack

Configuration
How to get token

How to get token

Using Chrome, open and sign into the slack customization page,
   e.g. https://my.slack.com/customize
Right click anywhere on the page and choose "inspect" from the
   context menu. This will open the Chrome developer tools.
Find the console (it's one of the tabs in the developer tools window)
At the prompt ("> ") type the following:
   window.prompt("your api token is: ", TS.boot_data.api_token)
Copy the displayed token elsewhere, and close the window.

For further explanation, see the documentation for the emojme project:
(github.com/jackellenberger/emojme)
How to secure your token
If someone steals your token they can use the token to impersonate
you, reading and posting to Slack as if they were you.  It's important
to take reasonable precautions to secure your token.
One way to do this is by using the Emacs auth-source library. Read
the auth-source
documentation
to learn how to use it to store login information for remote services.
Then configure the auth-sources variable to select a "backend"
store. The default backend is ~/.authinfo file, which is simple but
also un-encrypted. A more complex option is to encrypt that
.~/authinfo file with gnupg and configure auth-sources to use
~/.authinfo.gpg as the source for all passwords and secrets. Other
backends exist beyond these; read the documentation for details.
How to store your slack tokens in your auth-source backend will vary
depending which backend you chose. See documentation for details. The
"host" and "user" fields can be whatever you like as long as they are
unique; as a suggestion use "myslackteam.slack.com" for host, and use
your email address for user. The "secret" or "password" field should
contain the token you obtained earlier (How to get
token).
Then finally, in your Emacs init read the token from your
auth-source:
elisp
(slack-register-team
 :name "myslackteam"
 :token (auth-source-pick-first-password
         :host "myslackteam.slack.com"
         :user "me@example.com")
 :subscribed-channels '((channel1 channel2)))
How to use
I recommend to chat with slackbot for tutorial using slack-im-select.
Some terminology in the slack- functions:
- im: An IM (instant message) is a direct message between you and exactly one other Slack user.
- channel: A channel is a Slack channel which you are a member of
- group. Any chat (direct message or channel) which isn't an IM is a group.

slack-register-team
set team configuration and create team.
:name and :token are required
slack-change-current-team
change slack-current-team var
slack-start
do authorize and initialize
slack-ws-close
turn off websocket connection
slack-group-select
select group from list
slack-im-select
select direct message from list
slack-channel-select
select channel from list
slack-group-list-update
update group list
slack-im-list-update
update direct message list
slack-channel-list-update
update channel list
slack-message-embed-mention
use to mention to user
slack-message-embed-channel
use to mention to channel
slack-file-upload
uploads a file
the command allows to choose many channels via select loop. In order to finish the loop input an empty string. For helm that's C+RET or M+TET. In case of Ivy it's C+M+j.

Notification
See alert.