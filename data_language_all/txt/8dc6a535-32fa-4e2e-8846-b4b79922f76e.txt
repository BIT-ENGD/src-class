 
Install Foo
Install project Foo in Debug and Release variants (Makefile generator):




Note that:
* library target bar for different build types has different names: libbar.a and libbard.a
* header files is equal for both variants
* cmake-config files FooConfig.cmake, FooConfigVersion.cmake and FooTargets.cmake is equal for both variants
* FooTargets-release.cmake set Release imported target properties, e.g. IMPORTED_LOCATION_RELEASE
* FooTargets-debug.cmake set Debug imported target properties, e.g. IMPORTED_LOCATION_DEBUG
Note:
* For -H see: https://cgold.readthedocs.io/en/latest/glossary/-H.html
Boo (use installed Foo)
Easiest way to find and include FooConfig.cmake file is to set CMAKE_INSTALL_PREFIX:


Also CMAKE_PREFIX_PATH and Foo_DIR can be used (do not forget to remove _builds/Boo directory
before every configure):


find_package config-mode command will include FooConfig.cmake file and import new target Foo::bar:


Note that:
* definition FOO_BAR_DEBUG will be added automatically
* include directory for target Foo::bar will be added automatically
* in Debug-mode macro FOO_BAR_DEBUG will be 1 and linker will use libbard.a library
* in Release-mode macro FOO_BAR_DEBUG will be 0 and linker will use libbar.a library
* if find_package command specify library version then FooConfigVersion.cmake module will check compatibility:

Script
See jenkins.py script for automatic testing + options --install-boo/--shared and --monolithic.
UML sequence diagram

More

Package manager
Toolchains
