Quickstart
Installation
Install the package once in a Julia Console/REPL with:
Julia
using Pkg
Pkg.add("AllanDeviations")
Loading
The package can be loaded in every Julia program with a simple using directive
Julia
using AllanDeviations
Allan Deviation of random data
Print the overlapping Allan Deviation of one million random points with rate 1.0 at octave log-spaced taus:
```Julia
using AllanDeviations
arr = rand(Float64, 1_000_000)
result = allandev(arr, 1.0)
println(result.deviation)
Julia
println("Calculated taus:")
println(result.tau)
println("Calculated Deviations:")
println(result.deviation)
println("Calculated errors:")
println(result.error)
println("Calculated Term Number:")
println(result.count)
Julia
Key-Types
allandev(arr, 1.0, taus = AllTaus)       #all possible taus
allandev(arr, 1.0, taus = QuarterOctave) #quarter octave log-spaced
allandev(arr, 1.0, taus = HalfOctave)    #half octave log-spaced
allandev(arr, 1.0, taus = Octave)        #octave log-spaced
allandev(arr, 1.0, taus = HalfDecade)    #hald decade log-spaced
allandev(arr, 1.0, taus = Decade)        #decade log-spaced
Explicit taus
allandev(arr, 1.0, taus = [2.0])           #calculate deviation at tau=2.0 if possible
allandev(arr, 1.0, taus = [2.0, 3.0, 4.0]) #calculate deviation at tau=2.0, tau=3.0 & tau=4.0 if possible
Custom log scale
allandev(arr, 1.0, taus = 1.2) #calculate 1/5 of an octave log-spaced
Custom log count
allandev(arr, 1.0, taus = 100) #calculate 100 log-spaced tau values between min and maximal possible tau
This does not guarantee that 100 deviations will be calculated since some values will be discarded
when less than two terms contributed to it

37.702 ms (30 allocations: 436.13 KiB)  #Allan Deviation
39.805 ms (30 allocations: 371.13 KiB)  #Modified Allan Deviation
28.266 ms (30 allocations: 371.13 KiB)  #Hadamard Deviation
39.969 ms (51 allocations: 449.97 KiB)  #Time Deviation
150.508 ms (32 allocations: 865.89 KiB) #Total Deviation
240.852 ms (30 allocations: 631.44 KiB) #Maximum time interval error
Done
```
However, these timings need to be taken with a grain of salt, since it does not represent real world data.