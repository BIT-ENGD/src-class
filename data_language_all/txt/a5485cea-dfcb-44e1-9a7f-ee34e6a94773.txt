lua-graph
Graph algorithms in lua
Features
The graph algorithms covered:

Graph data structure (directed / undirected / weighted / unweighted)
Depth first search
Breadth first search
Connected components 
Strongly connected components
Topological sort
Minimum spanning tree (Kruskal)
Minimum spanning tree (Prim)
Max flow min cut
Dijkstra shortest paths
Topogical sort shortest paths
Bellman Ford shortest paths

Notes
For developers who have been using library 1.0.2, the main changes are:

graph.V is removed and replaced with graph:vertexCount() and graph:vertexAt(index) method for iterating all vertices: this change was introduced so that graph vertices do not need to start with vertex 0 and do not need to be consecutive integer (can be any label).
graph:addVertexIfNotExists: allows user to add vertices later after the graph is created
graph:removeVertex: allows user to delete a vertex and its edges
graph:addEdge: Now if the vertices on which the edge is to be added does not exists in the graph, they will be automatically added

Install
bash
luarocks install luagraphs
Usage
Create an undirected unweighted graph

Create an undirected unweighted graph and add / remove vertices later

Create an undirected unweighted graph from a list of vertices and expand or shrink it

Create an directed unweighted graph

Create an undirected weighted graph

Create an directed weighted graph

Depth First Search

Breadth First Search

Connected Components

Strongly Connected Components

Topological Sort

Minimum Spanning Tree (Kruskal)

Minimum Spanning Tree (Prim)

Minimum Spanning Tree (Eager Prim)

Shortest Paths (Dijkstra)

Shortest Paths (Topological Sort)

MinCut-MaxFlow (Ford Fulkerson implementation)
