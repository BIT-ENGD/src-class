replacestream
A node.js through stream that does basic streaming text search and replace and
is chunk boundary friendly.

Installation
Install via npm:
shell
$ npm install replacestream
Examples
Search and replace over a test file
Say we want to do a search and replace over the following file:
// happybirthday.txt
Happy birthday to you!
Happy birthday to you!
Happy birthday to dear Liza!
Happy birthday to you!

Running this will print out:
bash
$ node simple.js
Happy earthday to you!
Happy earthday to you!
Happy earthday to dear Liza!
Happy earthday to you!
You can also limit the number of replaces to first n:
js
// Replace the first 2 of the instances of 'birthday' with 'earthday'
fs.createReadStream(path.join(__dirname, 'happybirthday.txt'))
  .pipe(replaceStream('birthday', 'earthday', { limit: 2 } ))
  .pipe(process.stdout);
Which would output:
bash
$ node simple.js
Happy earthday to you!
Happy earthday to you!
Happy birthday to dear Liza!
Happy birthday to you!
And you can also pass in a replacement function which will get called for each
replacement:
js
// Replace the word 'Happy' with a different word each time
var words = ['Awesome', 'Good', 'Super', 'Joyous'];
function replaceFn(match) {
  return words.shift();
}
fs.createReadStream(path.join(__dirname, 'happybirthday.txt'))
  .pipe(replaceStream('Happy', replaceFn))
  .pipe(process.stdout);
Which would output:
bash
$ node simple.js
Awesome birthday to you!
Good birthday to you!
Super birthday to dear Liza!
Joyous birthday to you!
Search and replace with Regular Expressions
Here's the same example, but with RegEx:
// happybirthday.txt
Happy birthday to you!
Happy birthday to you!
Happy birthday to dear Liza!
Happy birthday to you!

Running this will print out:
bash
$ node simple.js
Happy birthday oh oh!
Happy birthday oh oh!
Happy birthday oh dear Liza!
Happy birthday oh oh!
You can also insert captures using the $1 ($index) notation. This is similar the built in method replace.
// happybirthday.txt
Happy birthday to you!
Happy birthday to you!
Happy birthday to dear Liza!
Happy birthday to you!

Running this will print:
bash
$ node simple.js
Happy birthday to you!
Happy birthday to you!
Happy birthday to my very good and dear friend Liza!
Happy birthday to you!
You can also pass in a replacement function. The function will be passed parameters just like String.prototype.replace (e.g. replaceFunction(match, p1, p2, offset, string)). In this case the matched string is limited to the buffer the match is found on, not the entire stream.
js
function replaceFn() {
  return arguments[2] + ' to ' + arguments[1]
}
fs.createReadStream(path.join(__dirname, 'happybirthday.txt'))
  .pipe(replaceStream(/(birt\w*)\sto\s(you)/g, replaceFn))
  .pipe(process.stdout);
Which would output:
bash
$ node simple.js
Happy you to birthday!
Happy you to birthday!
Happy birthday to dear Liza!
Happy you to birthday!
Web server search and replace over a test file
Here's the same example, but kicked off from a HTTP server:

When you request the file:

NB: If your readable Stream that you're piping through the replacestream is
paused, then you may have to call the .resume() method on it.
Configuration
Changing the encoding
You can also change the text encoding of the search and replace by setting an
encoding property on the options object:
js
// Replace the first 2 of the instances of 'birthday' with 'earthday'
fs.createReadStream(path.join(__dirname, 'happybirthday.txt'))
  .pipe(replaceStream('birthday', 'earthday', { limit: 2, encoding: 'ascii' } ))
  .pipe(process.stdout);
By default the encoding will be set to 'utf8'.
List of options
Option        | Default   | Description
------        | -------   | -----------
limit         | Infinity  | Sets a limit on the number of times the replacement will be made. This is forced to one when a regex without the global flag is provided.
encoding      | utf8      | The text encoding used during search and replace.
maxMatchLen   | 100       | When doing cross-chunk replacing, this sets the maximum length match that will be supported.
ignoreCase    | true      | When doing string match (not relevant for regex matching) whether to do a case insensitive search.
regExpOptions | undefined | (Deprecated) When provided, these flags will be used when creating the search regexes internally. This functionality is deprecated as the flags set on the regex provided are no longer mutated if this is not provided.
Contributing
replacestream is an OPEN Open Source Project. This means that:

Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.

See the CONTRIBUTING.md file for more details.
Contributors
replacestream is only possible due to the excellent work of the following contributors:

Eugene WareGitHub/eugeneware
Ryan MehtaGitHub/mehtaphysical
Tim ChaplinGitHub/tjchaplin
Bryce GibsonGitHub/bryce-gibson
RomainGitHub/Filirom1
Shinnosuke WatanabeGitHub/shinnn
Steve MaoGitHub/stevemao
Shinnosuke WatanabeGitHub/
