Reading Assignment # 3
Summary of Does Distributed Development Affect Software Quality? An Empirical Case Study of Windows Vista [1]
Download Link
http://ieeexplore.ieee.org.prox.lib.ncsu.edu/stamp/stamp.jsp?tp=&arnumber=5070550
Keywords

ii1: Distributed Development: This term refers development of software that is spread across various levels - building, campus, locality, continent, world. Different teams working at different locations work together to build a complex software system. 
ii2: Collocated Development: This refers to development of software systems in which the teams are working in the same location - say same building or floor. In collocated development, teams can reach out to each other and communication and collaboration becomes relatively easy.
ii3: Software Quality: This refers to the quality of software that is being produced. Quality is typically measured in terms of failure/bugs found in the software. A poor quality software will have more bugs and encounter failures.
ii4: Outsourcing: It is a special case of distributed development model in which different companies work on building a complex software system.

Key Points

iii1: Related Work: The paper provides a brief survey of the important work done in the area of globally distributed software development. The authors discuss the effects of distributed development on bug resolution. Some papers conclude that it indirectly introduces delay while some say it does not have a strong effect. Some conclude only feasible decisions should be made in a project. Previous works have also focused on the effects on quality and productivity. It has been found that there is little, if any, correlation between geographic distance of developers and productivity and defect density. Offshoring can lead to several drawbacks such as more documentation needs. Some previous papers also focused on risk factors and categorized them. They found that globally distributed model did not increase defect density and they come up with key actions that make a successful global development model.
iii2: Motivational Statements: The term "Distributed Software Development" is a general concept and could be operationalized in various ways. The paper stresses that it is important to consider the way that developers and other entities are distributed. The authors are interested in studying the effect of global distributed software development within the same company. Through this study, they want to confirm or refute whether global distributed software development leads to more failures within the context of this setting. Further, their study is unique since there is no prior work which has done such a large scale study within an organization at multiple levels of separation (building, campus, continent,etc). Further, the authors also want to find out if the binaries that are distributed differ from their collocated counterparts in any significant ways.
iii3: Hypotheses: The paper formulates two hypotheses: H1: Binaries that are developed by teams of engineers that are distributed will have more post-release failures than those developed by collocated engineers. H2: Binaries that are distributed will be less complex, experience less code churn, and have fewer dependencies than collocated binaries. The first hypothesis is related to code quality or failures that are detected in post-release of software whereas the second hypothesis focuses on the properties of software binaries that result out of the two systems - distributed and collocated development.
iii4: Future Work: The paper concludes that distributed development has little to no effect. The authors confirm that there are scenarios in which distributed development would work well. They observe that an organizationally compact but geographically distributed project would do well as compared to geographically local and organizationally distributed project. The authors observe a lot of factors and practices that Microsoft followed which played a big role in almost nullifying the negative effects of distributed development as opposed to conventional wisdom and widely held beliefs. The authors mention that as part of future work, they would want to discuss the effects of these practices in detail on the globally distributed software development.  

Suggestions for Improvement

iv1: The authors conducted a study on Vista project , which is a Microsoft in-house product. The results can be different for a software application built to meet requirements of a customer or client than the one observed here. This is because customer or client requirements are dynamic and they tend to grow/change more frequently as compared to building an in-house product.
iv2: The authors conduct this study for product developed by "Microsoft" for obvious reasons - because they are working for Microsoft and second they have easy access to information. There are several confounding factors here - Even though distributed development takes place, Microsoft has set up great infrastructure to almost nullify the communication barrier and also its engineers travelled frequently between remote sites. Many times, project costs and budget become a big constraint for companies - medium sized - who work on building software for clients and customers.
iv3: Microsoft follows a great organizational structure along with some of the best practices to build high quality software. Because of these factors, the effect of all the communication difficulties that accompany distributed software development are almost nullified. These factors play a big role in making a successful distributed software project development. The experiment that the author has conducted is more or less an ideal scenario - where everything is almost perfect , there is enough budget for the project with ideal software engineering practices followed. This is a special case where distributed development works. 
iv4: Overall, the paper gives a result in contrast to conventional beliefs about distributed development within an organization or same company. The authors should discuss more about the effects of various practices being followed at Microsoft, which practice has the most influence, etc. so that other projects can learn from them and be able to take advantage of the global distribution model of software development.

Connection to the Initial Paper
Our selected initial paper titled Ecological Inference in Empirical Software Engineering [2] provided a conceptual framework on how prediction models can vary if metrics that are collected at aggregated with that of metrics collected at non-aggregated level. In this paper, the authors take a holistic approach, and discuss the global distributed model of software development, at different levels of separation and its effect on software quality.  
Reference
[1] Christian Bird, Nachiappan Nagappan, Premkumar Devanbu, Harald Gall,and Brendan Murphy. Does Distributed Development Affect Software Quality?: An Empirical Case Study of Windows Vista, in International conference on Software engineering (ICSE '09), pages 518-528, ACM, 2009
[2] D. Posnett, V. Filkov, and P. Devanbu. Ecological inference in empirical software engineering. In Proceedings of the 2011 26th IEEE/ACM Inter- national Conference on Automated Software Engineering, pages 362â€“371. IEEE Computer Society, 2011. 