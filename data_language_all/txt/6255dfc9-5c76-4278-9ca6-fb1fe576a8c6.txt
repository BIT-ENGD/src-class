% Helm
% Toni Tauro

Be smart. Think open source.

What is Helm?
Helm is a tool for managing Kubernetes charts.
Charts are packages of pre-configured resources.
Think of it like apt/yum/homebrew for Kubernetes.
Why Helm?

De-facto standard for templating k8s configs
Official Kubernetes project maintained by CNCF
Repeatable application installations
Painless updates
Ships with ready to use charts made by the community
best practices are baked into offical charts
Application Lifecycle / Upgrades

What's wrong with kubectl?

Resources need to be mutated after a deploy
You can kubectl edit <resource>
But,  need to implement your own updating and rollback or depend on vendor specific tooling for lifecycle management

Helm helps with lifecycle managment while allowing you to define your infrastructure as code
Helm Basics

Architecture

helm client on your local machine (like kubectl)
tiller server-side component (deployed on Kubernetes)

Quickstart

Inspecting helm managed resources

Helm releases
Differentiate multiple deploys of a chart with releases.
Possible values could be.

production, stage, integration
<customer>-production
<app>-postgresql

This depends on your organizations structure and what you use the cluster for.
What did we just deploy?

Deployment based on postgres image ✔
NetworkPolicy allowing access. ✔
PersistentVolumeClaim for storing data ✔
Secret containing autogenerated postgres-password ✔
Service to expose database in cluster ✔

Rollback

Writing helm charts

bash
helm create my-app
my-app/
├── charts
├── Chart.yaml
├── templates
│   ├── deployment.yaml
│   ├── _helpers.tpl
│   ├── ingress.yaml
│   ├── NOTES.txt
│   └── service.yaml
└── values.yaml
Templating
The Helm template language is implemented in the strongly typed Go language.
Each Helm chart contains a templates directory that contains relevant
templates.
Naming Templates

Use .yaml or .tpl suffix for files
Dasherize file names
Reflect resource kind in names


| Good | Bad |
| ---- | --- |
| foo-pod.yaml | foo-pod.yml |
| my-example-podtemplates.yaml | MyExamplePodTemplates.yaml |
| my-example-svc.yaml | my-example.yaml |
Built-in Objects

Everything below Release
Chart variable with infos from Chart.yaml
Values with data from values.yaml, the cli and other sources

A complete list is in the Helm docs


Values
The built-in object Values is empty by default. Charts and users can add to it
through values.yaml, user-supplied files and on the CLI.
Let's see how values get populated with a simple template.
bash
echo  '{{ .Values.hello.world }}' > templates/hello.tpl
Default values are in the charts values.yaml

Overriding values on the CLI
bash
helm template . --execute templates/hello.yaml \
    --set 'hello.world=Hallo!'

Flow Control

if/else for creating conditional blocks
with to specify a scope
range, which provides a "for each"-style loop

if/else

range

Debugging Templates

Helm SubCharts

Composing systems with subcharts

Charts can depend on other charts.
Dependencies are described in requirements.yaml.
helm dep build creates requirements.lock.



Subcharts and Values

subcharts cannot depend on their parent charts values.
parent charts can override values for subcharts.
global values can be accessed from any chart.



Please plan ahead when using globals or don't use them at all. Official charts rarely use them.

Feel Free to Contact Us
www.adfinis-sygroup.ch
Tech Blog
GitHub
info@adfinis-sygroup.ch
Twitter