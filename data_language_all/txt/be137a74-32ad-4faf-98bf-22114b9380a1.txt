Smart Arg



A source generated, simple to use command line argument parser. The main
rationale behind this argument parser is the use of a class to store the
argument values. Therefore, you gain static type checking and code
completion.
Types currently supported are: bool, int, double, String, File, and
Directory. Defaults can be supplied as any other Dart class and one can
determine if a parameter was set based on it's value being null or not. Types
can also be defined as a List<T> to support multiple arguments of the same
name to be specified on the command line. Anything passed on the command line
that is not an option will be considered an extra, of which you can demand a
minimum and/or maximum requirement.
Through the use of annotations, each parameter (and main class) can have
various attributes set such as help text, if the parameter is required, if
the file must exist on disk, can the parameter be negated, a short alias, and
more.
Beautiful help is of course generated automatically when the user gives an
incorrect parameter or misses a required parameter or extra.
Simple Example

Please see the API documentation for a better understanding of what
Argument types exist as well as their individual options.
Help Output
The help output of the above example is:

Build Process
smart_arg relies on the reflectable package. Therefore, you must add to
your build process. Your build.yaml file should look similar to:
targets:
  $default:
    builders:
      reflectable:
        generate_for:
          - bin/main.dart
Also, before you can execute your program and any time you change your SmartArg
class, you must execute the builder:
$ pub run build_runner build
Complete Example
A more complex example smart_arg_example.dart
produces the following output:

Command Execution
More complex command line applications often times have commands. These commands
then also have options of their own. SmartArg accomplishes this very easily:

Features and bugs
Please send pull requests, feature requests and bug reports to the
issue tracker.