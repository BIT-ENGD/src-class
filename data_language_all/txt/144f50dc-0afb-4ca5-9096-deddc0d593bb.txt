 RxSwift: ReactiveX for Swift
    

RxSwift 3.x / Swift 3.x can be found in rxswift-3.0 branch.

Rx is a generic abstraction of computation expressed through Observable<Element> interface.
This is a Swift version of Rx.
It tries to port as many concepts from the original version as possible, but some concepts were adapted for more pleasant and performant integration with iOS/macOS environment.
Cross platform documentation can be found on ReactiveX.io.
Like the original Rx, its intention is to enable easy composition of asynchronous operations and event/data streams.
KVO observing, async operations and streams are all unified under abstraction of sequence. This is the reason why Rx is so simple, elegant and powerful.
I came here because I want to ...
... understand

why use rx?
the basics, getting started with RxSwift
traits - what are Single, Completable, Maybe, Driver, and ControlProperty ... and why do they exist?
testing
tips and common errors
debugging
the math behind Rx
what are hot and cold observable sequences?

... install

Integrate RxSwift/RxCocoa with my app. Installation Guide

... hack around

with the example app. Running Example App
with operators in playgrounds. Playgrounds

... interact

All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. Join Slack Channel
Report a problem using the library. Open an Issue With Bug Template
Request a new feature. Open an Issue With Feature Request Template
Help out Check out contribution guide

... compare

with other libraries.

... find compatible

libraries from RxSwiftCommunity.
Pods using RxSwift.

... see the broader vision

Does this exist for Android? RxJava
Where is all of this going, what is the future, what about reactive architectures, how do you design entire apps this way? Cycle.js - this is javascript, but RxJS is javascript version of Rx.

Usage


Here's an example
In Action


Define search for GitHub repositories ...




let searchResults = searchBar.rx.text.orEmpty
    .throttle(0.3, scheduler: MainScheduler.instance)
    .distinctUntilChanged()
    .flatMapLatest { query -> Observable<[Repository]> in
        if query.isEmpty {
            return .just([])
        }
        return searchGitHub(query)
            .catchErrorJustReturn([])
    }
    .observeOn(MainScheduler.instance)


... then bind the results to your tableview



searchResults
    .bind(to: tableView.rx.items(cellIdentifier: "Cell")) {
        (index, repository: Repository, cell) in
        cell.textLabel?.text = repository.name
        cell.detailTextLabel?.text = repository.url
    }
    .disposed(by: disposeBag)


Requirements

Xcode 9.0
Swift 4.0
Swift 3.x (use rxswift-3.0 branch instead)
Swift 2.3 (use rxswift-2.0 branch instead)

Installation
Rx doesn't contain any external dependencies.
These are currently the supported options:
Manual
Open Rx.xcworkspace, choose RxExample and hit run. This method will build everything and run the sample app
CocoaPods
Tested with pod --version: 1.3.1

Replace YOUR_TARGET_NAME and then, in the Podfile directory, type:
bash
$ pod install
Carthage
Tested with carthage version: 0.26.2
Add this to Cartfile
github "ReactiveX/RxSwift" ~> 4.0
bash
$ carthage update
Swift Package Manager
Tested with swift build --version: Swift 4.0.0-dev (swiftpm-13126)
Create a Package.swift file.

bash
$ swift build
To build or test a module with RxTest dependency, set TEST=1. (RxSwift >= 3.4.2)
bash
$ TEST=1 swift test
Manually using git submodules

Add RxSwift as a submodule

bash
$ git submodule add git@github.com:ReactiveX/RxSwift.git

Drag Rx.xcodeproj into Project Navigator
Go to Project > Targets > Build Phases > Link Binary With Libraries, click + and select RxSwift-[Platform] and RxCocoa-[Platform] targets

References

http://reactivex.io/
Reactive Extensions GitHub (GitHub)
RxSwift RayWenderlich.com Book
Boxue.io RxSwift Online Course (Chinese ðŸ‡¨ðŸ‡³)
Erik Meijer (Wikipedia)
Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)
Reactive Programming Overview (Jafar Husain from Netflix)
Subject/Observer is Dual to Iterator (paper)
Rx standard sequence operators visualized (visualization tool)
Haskell
