






KVNProgress is a fully customizable progress HUD that can be full screen or not.

Using KVNProgress in your app?
If you're using KVNProgress in your app, I'd love to hear it! üòÄ
Please, make sure to shout it proudly here üëç
Assisto and 6,067 Apps currently using KVNProgress and counting...
 stats via CocoaPods
Table of contents

Preview
Advantages
Demo
Installation
Cocoapods
Source files


Usage
Basics
[Progress] (#progress)
Indeterminate progress
Determinate progress
[Stop button] (#stop-button)


Dismiss
Success/Error


Customization
KVNProgressConfiguration
Display times


[Known bugs] (#known-bugs)
Remains to do
License
Credits


Preview
Base interface:





Full screen interface:





Example of customized interface:




Advantages

[x] Can be full screen
[x] Uses UIMotionEffect
[x] Supports all orientations
[x] Supports iPad
[x] Animates text update
[x] Animates success checkmark
[x] Is well documented
[x] Is fully customizable
Colors
Fonts
Circle size and thickness
Blur or solid color background



Demo
Here is a video of the demo app that you can find in this project.
If you want to try it yourself, just download/checkout this repository and launch the project in Xcode.

Installation
Cocoapods
CocoaPods recommended to use KVNProgress.

Add pod 'KVNProgress' to your Podfile.
Install the pod(s) by running pod install.
Include KVNProgress wherever you need it with #import <KVNProgress/KVNProgress.h>.

Source files

Download the latest code version or add the repository as a git submodule to your git-tracked project.
Drag and drop the Classes, Categories and also the Resources directory from the archive in your project navigator. Make sure to select Copy items when asked if you extracted the code archive outside of your project.
Include KVNProgress wherever you need it with #import <KVNProgress/KVNProgress.h>.

Usage
Check out the provided demo app for many examples how you can use the components.
Basics
KVNProgress HUD will block the user from interacting with the interface behind it.
You can customize colors, font and size of the HUD.
Add the following import to the top of the file or to your Prefix header:
objc
   #import <KVNProgress/KVNProgress.h>
Progress
Indeterminate progress
To show an indeterminate progress:
objc
   // Progress has to be between 0 and 1
   [KVNProgress showProgress:0.5f];
// Adds a status below the progress
   [KVNProgress showProgress:0.5f
                      status:@"Loading"];
// Adds the HUD to a certain view instead of main window
   [KVNProgress showProgress:0.5f
                      status:@"Loading"
                      onView:view];
// Updates the progress
   [KVNProgress updateProgress:0.75f
                      animated:YES];
   objc
KVNProgressConfiguration configuration = [KVNProgressConfiguration defaultConfiguration];
configuration.showStop = YES;
configuration.tapBlock = ^(KVNProgress progressView) {
    // Do what you want
    [KVNProgress dismiss];
};
[KVNProgress setConfiguration:configuration];
objc
   [KVNProgress showSuccess];
// Or
   [KVNProgress showSuccessWithStatus:@"Success"];
// Adds the HUD to a certain view instead of main window
   [KVNProgress showSuccessWithStatus:@"Success"
                               onView:view];
   objc
   [KVNProgress showError];
// Or
   [KVNProgress showErrorWithStatus:@"Error"];
// Adds the HUD to a certain view instead of main window
   [KVNProgress showErrorWithStatus:@"Error"
                             onView:view];
   objc
   KVNProgressConfiguration *configuration = [[KVNProgressConfiguration alloc] init];
configuration.statusColor = [UIColor whiteColor];
configuration.statusFont = [UIFont fontWithName:@"HelveticaNeue-Thin" size:15.0f];
configuration.circleStrokeForegroundColor = [UIColor whiteColor];
configuration.circleStrokeBackgroundColor = [UIColor colorWithWhite:1.0f alpha:0.3f];
configuration.circleFillBackgroundColor = [UIColor colorWithWhite:1.0f alpha:0.1f];
configuration.backgroundFillColor = [UIColor colorWithRed:0.173f green:0.263f blue:0.856f alpha:0.9f];
configuration.backgroundTintColor = [UIColor colorWithRed:0.173f green:0.263f blue:0.856f alpha:1.0f];
configuration.successColor = [UIColor whiteColor];
configuration.errorColor = [UIColor whiteColor];
configuration.stopColor = [UIColor whiteColor];
configuration.circleSize = 110.0f;
configuration.lineWidth = 1.0f;
configuration.fullScreen = NO;
configuration.showStop = YES;
configuration.stopRelativeHeight = 0.4f;

configuration.tapBlock = ^(KVNProgress *progressView) {
    // Do something you want to do when the user tap on the HUD
    // Does nothing by default
  };
// You can allow user interaction for behind views but you will losse the tapBlock functionnality just above
  // Does not work with fullscreen mode
  // Default is NO
  configuration.allowUserInteraction = NO;
[KVNProgress setConfiguration:configuration];

```
If you do not specify certain properties for a configuration, they will automatically be the default's one.
Display times
To avoid the user to see a blinking HUD or even don't see it at all if you are dismissing it too quickly, the HUD will stay display for a minimum (short) period of time.
There are 3 properties you can change that do that in KVNProgressConfiguration to do that:

minimumDisplayTime that has a default value of 0.3 seconds. It handles all HUD's except for success and error ones.
minimumSuccessDisplayTime that has a default value of 2.0 seconds. It handles all success HUD's.
minimumErrorDisplayTime that has a default value of 1.3 seconds. It handles all error HUD's.

Known bugs

Showing an HUD on alertView:clickedButtonAtIndex: will give an undefined behavior that can sometimes make the HUD not appear (#29 - resolution comment). Instead, call the HUD on alertView:didDismissWithButtonIndex: to be sure the UIAlertView is completely dismissed before showing an HUD.

Remains to do

[ ] Use real-time blur

Requirements

Xcode 6
iOS 7
ARC
Frameworks:
QuartzCore
GLKit



License
This project is under MIT license. For more information, see LICENSE file.
Credits
KVNProgress was inspired by MRProgress UI.
KVNProgress was done to integrate in a project I work on: Assisto.
It will be updated when necessary and fixes will be done as soon as discovered to keep it up to date.
I work at Pinch.
You can find me on Twitter @kevinh6113.
Enjoy! :)