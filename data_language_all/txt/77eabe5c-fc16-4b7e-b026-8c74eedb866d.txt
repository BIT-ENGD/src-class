fimber
Extensible logging for Dart and Flutter.
Package is based on famous Android logging library API - Timber, this is library for simplify logging for Flutter.
Using similar (as far as Dart lang allows) method API with same concepts for tree and planting logging tree.
Also check out flutter_fimber which extends fimber to platform specific output and logging style.
Getting Started
To start add using it:
Add fimber to pubspec.yaml
pre-nullsafety
yaml
dependencies:
  fimber: ^0.4.4
- remember about import in file you plan to use Fimber
with null safety

or from git branch:
yaml
    git:
      url: git@github.com:magillus/flutter-fimber
      path: fimber
      ref: nullsafety.update

Initialize logging tree on start of your application

Start using it with static methods:

This will log the value and grab a TAG from stacktrace - that is little costly and if more logs will be done per second.
Colorize logs - ColorizeStyle
useColors property set to true will use default colors of the logos, you can change the mapping with in colorizeMap for DebugTree and CustomFormatTree
The useColors by default is disabled.
ColorizeStyle Aggregates list of AnsiStyle so you can combine styles together.
AnsiStyle is combination of AnsiColor and AnsiSelection values
Here is output of test output.

Create tagged version of Fimber
And use its instance inside class, you can create logger for a dart file or for a class.

Use block function and pass method that uses logger.
Use this function to log multiple messages with same tag, allows optional return value.
Due to nature of auto-tag generation from stacktrace this block only does it once and create local FimberLog instance to pass into the anonymous method.
dart
    var someMessage = "Test message from inside of block";
    var output = Fimber.block((log) {
      log.d("Started block");
      var i = 0;
      for (i = 0; i < 10; i++) {
        log.d("$someMessage, value: $i");
      }
      log.i("End of block");
      return i;
    });
Deprecated moved to fimber_io package
Custom line formatters
Use custom line formatters to define your logging format.

Use file log tree - the logs will go to a log file (Useful in DartVM apps).
There are log rolling with size and time/date interval, so it is possible to setup log output per hour/day or any other time.
see: SizeRollingFileTree or TimedRollingFileTree or use abstract class RollingFileTree to create your own version of rolling log file.
TODO - road map

See  Issues on Github
Add Crashlytics plugin (maybe other remote logger tools) with flutter_crashlytics

Licence
