Forge


A native implementation of TLS (and various other cryptographic tools) in
JavaScript.
Introduction
The Forge software is a fully native implementation of the TLS protocol
in JavaScript, a set of cryptography utilities, and a set of tools for
developing Web Apps that utilize many network resources.
Performance
Forge is fast. Benchmarks against other popular JavaScript cryptography
libraries can be found here:

http://dominictarr.github.io/crypto-bench/
http://cryptojs.altervista.org/test/simulate-threading-speed_test.html

Documentation

Introduction
Performance
Installation
Testing
Contributing

API

Options

Transports

TLS
HTTP
SSH
XHR
Sockets

Ciphers

CIPHER
AES
DES
RC2

PKI

RSA
RSA-KEM
X.509
PKCS#5
PKCS#7
PKCS#8
PKCS#10
PKCS#12
ASN.1

Message Digests

SHA1
SHA256
SHA384
SHA512
MD5
HMAC

Utilities

Prime
PRNG
Tasks
Utilities
Logging
Debugging
Flash Networking Support

Other

Security Considerations
Library Background
Contact
Donations


Installation
Note: Please see the Security Considerations
section before using packaging systems and pre-built files.
Forge uses a CommonJS module structure with a build process for browser
bundles. The older 0.6.x branch with standalone files is available but will
not be regularly updated.
Node.js
If you want to use forge with Node.js, it is available through npm:
https://npmjs.org/package/node-forge
Installation:
npm install node-forge

You can then use forge as a regular module:
js
var forge = require('node-forge');
The npm package includes pre-built forge.min.js, forge.all.min.js, and
prime.worker.min.js using the UMD format.
Bundle / Bower
Each release is published in a separate repository as pre-built and minimized
basic forge bundles using the UMD format.
https://github.com/digitalbazaar/forge-dist
This bundle can be used in many environments. In particular it can be installed
with Bower:
bower install forge

unpkg
unpkg provides a CDN that can serve files from npm packages directly.
https://unpkg.com/node-forge@0.7.0/dist/forge.min.js
Development Requirements
The core JavaScript has the following requirements to build and test:

Building a browser bundle:
Node.js
npm
Testing
Node.js
npm
Chrome, Firefox, Safari (optional)

Some special networking features can optionally use a Flash component.  See the
Flash README for details.
Building for a web browser
To create single file bundles for use with browsers run the following:
npm install
npm run build

This will create single non-minimized and minimized files that can be
included in the browser:
dist/forge.js
dist/forge.min.js

A bundle that adds some utilities and networking support is also available:
dist/forge.all.js
dist/forge.all.min.js

Include the file via:

The above bundles will synchronously create a global 'forge' object.
Note: These bundles will not include any WebWorker scripts (eg:
dist/prime.worker.js), so these will need to be accessible from the browser
if any WebWorkers are used.
Building a custom browser bundle
The build process uses webpack and the config file
can be modified to generate a file or files that only contain the parts of
forge you need.
Browserify override support is also present in package.json.
Testing
See the testing README for full details.
Prepare to run tests
npm install

Running automated tests with Node.js
Forge natively runs in a Node.js environment:
npm test

Running automated tests with PhantomJS
Automated testing is done via Karma. By default it will run the tests in a
headless manner with PhantomJS.
npm run test-karma

Is 'mocha' reporter output too verbose? Other reporters are available. Try
'dots', 'progress', or 'tap'.
npm run test-karma -- --reporters progress

By default webpack is used. Browserify can also be used.
BUNDLER=browserify npm run test-karma

Running automated tests with one or more browsers
You can also specify one or more browsers to use.
npm run test-karma -- --browsers Chrome,Firefox,Safari,PhantomJS

The reporter option and BUNDLER environment variable can also be used.
Running manual tests in a browser
Testing in a browser uses webpack to combine forge and all tests and then
loading the result in a browser. A simple web server is provided that will
output the HTTP or HTTPS URLs to load. It also will start a simple Flash Policy
Server. Unit tests and older legacy tests are provided. Custom ports can be
used by running node tests/server.js manually.
To run the unit tests in a browser a special forge build is required:
npm run test-build

To run legacy browser based tests the main forge build is required:
npm run build

The tests are run with a custom server that prints out the URLs to use:
npm run test-server

Running other tests
There are some other random tests and benchmarks available in the tests
directory.
Coverage testing
To perform coverage testing of the unit tests, run the following. The results
will be put in the coverage/ directory. Note that coverage testing can slow
down some tests considerably.
npm install
npm run coverage

Contributing
Any contributions (eg: PRs) that are accepted will be brought under the same
license used by the rest of the Forge project. This license allows Forge to
be used under the terms of either the BSD License or the GNU General Public
License (GPL) Version 2.
See: LICENSE
If a contribution contains 3rd party source code with its own license, it
may retain it, so long as that license is compatible with the Forge license.
API

Options
If at any time you wish to disable the use of native code, where available,
for particular forge features like its secure random number generator, you
may set the forge.options.usePureJavaScript flag to true. It is
not recommended that you set this flag as native code is typically more
performant and may have stronger security properties. It may be useful to
set this flag to test certain features that you plan to run in environments
that are different from your testing environment.
To disable native code when including forge in the browser:
js
// run this *after* including the forge script
forge.options.usePureJavaScript = true;
To disable native code when using Node.js:
js
var forge = require('node-forge');
forge.options.usePureJavaScript = true;
Transports

TLS
Provides a native javascript client and server-side TLS implementation.
Examples

Connect to a TLS server using node's net.Socket:


HTTP
Provides a native JavaScript mini-implementation of an http client that
uses pooled sockets.
Examples


SSH
Provides some SSH utility functions.
Examples


XHR
Provides an XmlHttpRequest implementation using forge.http as a backend.
Examples
js
// TODO

Sockets
Provides an interface to create and use raw sockets provided via Flash.
Examples
js
// TODO
Ciphers

CIPHER
Provides a basic API for block encryption and decryption. There is built-in
support for the ciphers: AES, 3DES, and DES, and for the modes
of operation: ECB, CBC, CFB, OFB, CTR, and GCM.
These algorithms are currently supported:

AES-ECB
AES-CBC
AES-CFB
AES-OFB
AES-CTR
AES-GCM
3DES-ECB
3DES-CBC
DES-ECB
DES-CBC

When using an AES algorithm, the key size will determine whether
AES-128, AES-192, or AES-256 is used (all are supported). When a DES
algorithm is used, the key size will determine whether 3DES or regular
DES is used. Use a 3DES algorithm to enforce Triple-DES.
Examples

Using forge in Node.js to match openssl's "enc" command line tool (Note: OpenSSL "enc" uses a non-standard file format with a custom key derivation function and a fixed iteration count of 1, which some consider less secure than alternatives such as OpenPGP/GnuPG):


AES
Provides AES encryption and decryption in CBC, CFB, OFB,
CTR, and GCM modes. See CIPHER for examples.

DES
Provides 3DES and DES encryption and decryption in ECB and
CBC modes. See CIPHER for examples.

RC2
Examples

PKI
Provides X.509 certificate and RSA public and private key encoding,
decoding, encryption/decryption, and signing/verifying.

RSA
Examples


RSA-KEM
Examples


X.509
Examples


PKCS#5
Provides the password-based key-derivation function from PKCS#5.
Examples


PKCS#7
Provides cryptographically protected messages from PKCS#7.
Examples


PKCS#8
Examples


PKCS#10
Provides certification requests or certificate signing requests (CSR) from
PKCS#10.
Examples


PKCS#12
Provides the cryptographic archive file format from PKCS#12.
Note for Chrome/Firefox/iOS/similar users: If you have trouble importing
a PKCS#12 container, try using the TripleDES algorithm. It can be passed
to forge.pkcs12.toPkcs12Asn1 using the {algorithm: '3des'} option.
Examples


ASN.1
Provides ASN.1 DER encoding and decoding.
Examples

Message Digests

SHA1
Provides SHA-1 message digests.
Examples
js
var md = forge.md.sha1.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: 2fd4e1c67a2d28fced849ee1bb76e7391b93eb12

SHA256
Provides SHA-256 message digests.
Examples
js
var md = forge.md.sha256.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592

SHA384
Provides SHA-384 message digests.
Examples
js
var md = forge.md.sha384.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: ca737f1014a48f4c0b6dd43cb177b0afd9e5169367544c494011e3317dbf9a509cb1e5dc1e85a941bbee3d7f2afbc9b1

SHA512
Provides SHA-512 message digests.
Examples


MD5
Provides MD5 message digests.
Examples
js
var md = forge.md.md5.create();
md.update('The quick brown fox jumps over the lazy dog');
console.log(md.digest().toHex());
// output: 9e107d9d372bb6826bd81d3542a419d6

HMAC
Provides HMAC w/any supported message digest algorithm.
Examples
js
var hmac = forge.hmac.create();
hmac.start('sha1', 'Jefe');
hmac.update('what do ya want for nothing?');
console.log(hmac.digest().toHex());
// output: effcdf6ae5eb2fa2d27416d5f184df9c259a7c79
Utilities

Prime
Provides an API for generating large, random, probable primes.
Examples


PRNG
Provides a Fortuna-based cryptographically-secure pseudo-random number
generator, to be used with a cryptographic function backend, e.g. AES. An
implementation using AES as a backend is provided. An API for collecting
entropy is given, though if window.crypto.getRandomValues is available, it will
be used automatically.
Examples


Tasks
Provides queuing and synchronizing tasks in a web application.
Examples
js
// TODO

Utilities
Provides utility functions, including byte buffer support, base64,
bytes to/from hex, zlib inflate/deflate, etc.
Examples


Logging
Provides logging to a javascript console using various categories and
levels of verbosity.
Examples
js
// TODO

Debugging
Provides storage of debugging information normally inaccessible in
closures for viewing/investigation.
Examples
js
// TODO

Flash Networking Support
The flash README provides details on rebuilding the
optional Flash component used for networking. It also provides details on
Policy Server support.
Security Considerations
When using this code please keep the following in mind:

Cryptography is hard. Please review and test this code before depending on it
  for critical functionality.
The nature of JavaScript is that execution of this code depends on trusting a
  very large set of JavaScript tools and systems. Consider runtime variations,
  runtime characteristics, runtime optimization, code optimization, code
  minimization, code obfuscation, bundling tools, possible bugs, the Forge code
  itself, and so on.
If using pre-built bundles from Bower or similar be aware someone else
  ran the tools to create those files.
Use a secure transport channel such as TLS to load scripts and consider
  using additional security mechanisms such as Subresource Integrity script
  attributes.
Use "native" functionality where possible. This can be critical when dealing
  with performance and random number generation. Note that the JavaScript
  random number algorithms should perform well if given suitable entropy.
Understand possible attacks against cryptographic systems. For instance side
  channel and timing attacks may be possible due to the difficulty in
  implementing constant time algorithms in pure JavaScript.
Certain features in this library are less susceptible to attacks depending on
  usage. This primarily includes features that deal with data format
  manipulation or those that are not involved in communication.

Library Background

http://digitalbazaar.com/2010/07/20/javascript-tls-1/
http://digitalbazaar.com/2010/07/20/javascript-tls-2/

Contact

Code: https://github.com/digitalbazaar/forge
Bugs: https://github.com/digitalbazaar/forge/issues
Email: support@digitalbazaar.com
IRC: #forgejs on freenode

Donations
Financial support is welcome and helps contribute to futher development:

For PayPal please send to paypal@digitalbazaar.com.
Something else? Please contact support@digitalbazaar.com.
