nginx
This role installs and configures the nginx web server. The user can specify
any http configuration parameters they wish to apply their site. Any number of
sites can be added with configurations of your choice.


Requirements
This role requires Ansible 2.0 or higher and platform requirements are listed
in the metadata file. (Some older version of the role support Ansible 1.4)
For FreeBSD a working pkgng setup is required (see: https://www.freebsd.org/doc/handbook/pkgng-intro.html )
Install
sh
ansible-galaxy install jdauphant.nginx
Role Variables
The variables that can be passed to this role and a brief description about
them are as follows. (For all variables, take a look at defaults/main.yml)

Examples
1) Install nginx with HTTP directives of choices, but with no sites
configured and no additionnal configuration:
yaml
- hosts: all
  roles:
  - {role: nginx,
     nginx_http_params: ["sendfile on", "access_log /var/log/nginx/access.log"]
                          }
2) Install nginx with different HTTP directives than previous example, but no
sites configured and no additionnal configuration.
yaml
- hosts: all
  roles:
  - {role: nginx,
     nginx_http_params: ["tcp_nodelay on", "error_log /var/log/nginx/error.log"]}
Note: Please make sure the HTTP directives passed are valid, as this role
won't check for the validity of the directives. See the nginx documentation
for details.
3) Install nginx and add a site to the configuration.

4) Install nginx and add extra variables to default config

Note: Each site added is represented by list of hashes, and the configurations
generated are populated in /etc/nginx/site-available/, a link is from /etc/nginx/site-enable/ to /etc/nginx/site-available
The file name for the specific site configurtaion is specified in the hash
with the key "file_name", any valid server directives can be added to hash.
Additional configuration are created in /etc/nginx/conf.d/
5) Install Nginx , add 2 sites (different method) and add additional configuration








6) Install Nginx , add 2 sites, add additional configuration and an upstream configuration block






7) Install Nginx, add a site and use special yaml syntax to make the location blocks multiline for clarity
```yaml

hosts: all
  roles:
role: nginx
  nginx_http_params:
sendfile on
access_log /var/log/nginx/access.log
  nginx_sites:
foo:
listen 443 ssl
server_name foo.example.com
set $myhost foo.example.com
|
     location / {
       proxy_set_header Host foo.example.com;
     }
|
     location ~ /v2/users/.+?/organizations {
       if ($request_method = PUT) {
         set $myhost bar.example.com;
       }
       if ($request_method = DELETE) {
         set $myhost bar.example.com;
       }
       proxy_set_header Host $myhost;
     }
8) Example to use this role with my ssl-certs role to generate or copie ssl certificate ( https://galaxy.ansible.com/list#/roles/3115 )yaml




hosts: all
   roles:
jdauphant.ssl-certs
role: jdauphant.nginx
   nginx_configs:
      ssl:
           - ssl_certificate_key {{ssl_certs_privkey_path}}
           - ssl_certificate     {{ssl_certs_cert_path}}
   nginx_sites:
      default:
           - listen 443 ssl
           - server_name _
           - root "/usr/share/nginx/html"
           - index index.html
9) Site configuration using a custom template.
Instead of defining a site config file using a list of attributes,
you may use a hash/dictionary that includes the filename of an alternate template.
Additional values are accessible within the template via the `item.value` variable.yaml


hosts: all

roles:
  - role: nginx
    nginx_sites:
      custom_bar:
        template: custom_bar.conf.j2
        server_name: custom_bar.example.com
Custom template: custom_bar.conf.j2:handlebars
{{ ansible_managed }}
upstream backend {
  server 10.0.0.101;
}
server {
  server_name {{ item.value.server_name }};
  location / {
    proxy_pass http://backend;
  }
}
``
Using a custom template allows for unlimited flexibility in configuring the site config file.
This example demonstrates the common practice of configuring a site server block
in the same file as its complementary upstream block.
If you use this option:
* _The hash **must** include atemplate:` value, or the configuration task will fail.
* _This role cannot check tha validity of your custom template.
If you use this method, the conf file formtting provided by this role is unavailable,
and it is up to you to provide a template with valid content and formatting for NGINX.
Dependencies
None
License
BSD
Author Information

Original : Benno Joy
Modified by : DAUPHANT Julien
