Keras.jl





Keras.jl uses PyCall.jl to build a julia wrapper around the python neural network library keras.
Installation
Keras.jl is not a registered package yet so you should install it via:
julia
julia> Pkg.clone("https://github.com/invenia/Keras.jl")
Keras.jl can handle installing tensorflow (v0.9.0) and keras (v1.0.7) using Conda.jl and the conda-forge channel.
Start by setting PYTHON environment variable so that PyCall.jl uses the default python and package for Conda.jl.
julia
julia> ENV["PYTHON"] = ""
Now rebuild PyCall.jl and Keras.jl

When building Keras.jl a default keras.json config will be written to ~/.keras/keras.json for you.
Getting Started

Running Tests
julia
julia> Pkg.test("Keras")
API Overview
Tensors
The Tensor type wraps python tensors used by keras (Tensorflow or Theano).
The wrapped PyCall code for working with these Tensors is provided.
Notes:

Many of the element-wise mathematical operations described here use the . syntax used by julia, so python tensor code like x + y would be written as x .+ y in julia.
All methods using the Tensor type will perform the appropriate python operation and return the resulting tensor in a new Tensor wrapper.

Models
An abstract Model type is defined to describe a minimal Model interface.
The Sequential model is provided with most of the standard operations provided in the examples; however, more functionality will be added as needed.
Notes:

Methods like model.layers() and model.get_inputs() have been replaced with layers(model) and inputs(model).
Mutating methods like model.fit and model.add use the appropriate julia convention of fit!(model, ...) and add!(model, layer).

Layers, Optimizers & Regularizers
All of the layers, optimizers and regularizers provided within the base keras library have minimal wrappers for convenient object creation and dispatch.
Currently, all args and kwargs for these constructors and functions are passed directly to the python code; however, the original python docstrings are accessible through the help system in juila.
Example)
`python
    # as first layer in a sequential model:
    model = Sequential()
    model.add(Dense(32, input_dim=16))
    # now the model will take as input arrays of shape (*, 16)
    # and output arrays of shape (*, 32)

    # this is equivalent to the above:
    model = Sequential()
    model.add(Dense(32, input_shape=(16,)))

    # after the first layer, you don't need to specify
    # the size of the input anymore:
    model.add(Dense(32))
`
Notes:

Methods like layer.get_weights() and layer.set_weights(W) have been replaced with more julian forms of weights(layer) and weights!(layer, W).
Rather than having separate layer.get_input() and layer.get_input_at(i) methods we simply dispatch with input(layer) and input(layer, i) appropriately.

TODO

Wrap saving and loading model state.
Migrate to Keras 2.0
100% Test coverage
Properly convert python docstrings to julia (low priority)
