Node.js - klaw
A Node.js file system walker extracted from fs-extra.


Install
npm i --save klaw

Name
klaw is walk backwards :p
Usage
klaw(directory, [options])
Returns a Readable stream that iterates
through every file and directory starting with dir as the root. Every read() or data event
returns an object with two properties: path and stats. path is the full path of the file and
stats is an instance of fs.Stats.

directory: The directory to recursively walk. Type string.
options: Readable stream options and
the following:
queueMethod: Either 'shift' or 'pop'. Type string. Default: 'shift'.
pathSorter: Sorting function for Arrays. Type function.

Streams 1 (push) example:

Streams 2 & 3 (pull) example:

If you're not sure of the differences on Node.js streams 1, 2, 3 then I'd
recommend this resource as a good starting point: https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/.
Error Handling
Listen for the error event.
Example:

Aggregation / Filtering / Executing Actions (Through Streams)
On many occasions you may want to filter files based upon size, extension, etc.
Or you may want to aggregate stats on certain file types. Or maybe you want to
perform an action on certain file types.
You should use the module through2 to easily
accomplish this.
Install through2:
npm i --save through2

Example (skipping directories):

Example (totaling size of PNG files):

Example (deleting all .tmp files):

You can even chain a bunch of these filters and aggregators together. By using
multiple pipes.
Example (using multiple filters / aggregators):
js
klaw('/some/dir')
  .pipe(filterCertainFiles)
  .pipe(deleteSomeOtherFiles)
  .on('end', function () {
    console.log('all done!')
  })
Example passing (piping) through errors:
Node.js does not pipe() errors. This means that the error on one stream, like
klaw will not pipe through to the next. If you want to do this, do the following:

Searching Strategy
Pass in options for queueMethod and pathSorter to affect how the file system
is recursively iterated. See the code for more details, it's less than 50 lines :)
License
MIT
Copyright (c) 2015 JP Richardson