CPython CMake Buildsystem
Overview
This is a replacement buildsystem for CPython.  The existing (autotools based)
buildsystem for CPython is overcomplicated and makes cross-compiling very
difficult.
This cmake-based buildsystem is better because:

It's much faster to compile: 7 seconds instead of 58 seconds in my
  unscientific test.
No compiled program for the target architecture is used in the build
  itself.  This makes cross-compiling possible.
Same project files for all platforms - there's no need to maintain the
  unix build separately from four different MSVC builds.

Usage
How to use this buildsystem:

Download and extract the Python 2.7.3 source

bash
VERSION=2.7.3
mkdir -p ~/scratch
cd ~/scratch
curl -L -O http://www.python.org/ftp/python/$VERSION/Python-$VERSION.tgz
md5sum Python-$VERSION.tgz
tar -xzvf Python-$VERSION.tgz
Expected MD5: 2cf641732ac23b18d139be077bd906cd

Checkout the buildsystem

bash
cd ~/scratch
git clone git://github.com/davidsansome/python-cmake-buildsystem

Build

bash
cd ~/scratch
mkdir -p python-build && mkdir -p python-install
cd python-build
cmake -DCMAKE_INSTALL_PREFIX:PATH=${HOME}/scratch/python-install ../python-cmake-buildsystem
make -j10
make install
CMake Options
You can pass options to CMake to control the way Python is built.  You only
need to give each option once - they get saved in CMakeCache.txt.  Pass
options on the commandline with -DOPTION=VALUE, or use the "ccmake" gui.

Cross-compiling
Cross-compiling for Windows from Linux:
There are some patches in the cmake/patches-win32 directory that make it
possible to compile Python using the mingw32 compiler.  You have to apply
these before running make:
patch -p0 < cmake/patches-win32/01-dynload_win.patch
patch -p0 < cmake/patches-win32/02-signalmodule.patch
patch -p0 < cmake/patches-win32/03-mingw32.patch
Remarks
Note: This branch is for Python version 2.7.3.  Since this buildsystem is
maintained separately from Python itself it needs to be manually updated
whenever there is a new release of Python.
Licenses
Materials in this repository are distributed under the following licenses:

All software is licensed under the Apache 2.0 License.
  See LICENSE_Apache_20 file for details.

FAQ
Why Apache 2.0 License ?
From the python.org wiki, the answer to the question What if I want to contribute my code to the PSF? mentions that if code is going to end up in Python or the standard library, the PSF will require you to license code under "Academic Free License" or "Apache License 2.0".