Option Usage
DSL operations use Scala's Option types, which are containers for values that
may or may not exist (they can be thought of as a type-safe alternative to
using null). An option may be either a Some or a None, and inner values
can be extracted using pattern matching.

Options make it really easy to chain computations that may or may not be
successful, which results in a very clean DSL. For most transformations,
methods on Option are not necessary - just using DSL methods will suffice.
For more complex transformations, it may be especially useful to use the map,
flatMap, and collect methods, which are much more concise than using
pattern matching.

As shown above, transformations on None simply result in None. This can
make expressing a series of computations very concise. The *(...) array
constructor and ^(...) object constructor automatically filter out elements
and values that are None.

For more information on Option, see the
Scaladoc or a
quick reference.
