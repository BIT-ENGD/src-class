 mdformat off(generated file) 
 Generated with Stardoc: http://skydoc.bazel.build 
Bazelisp - Common Lisp Build Rules for Bazel

lisp_binary

lisp_binary(name, add_features, allow_save_lisp, cdeps, compile_data, data, deps, entry_points,
            experimental_block_compile, experimental_block_compile_specified, image,
            instrument_coverage, main, malloc, nowarn, order, precompile_generics, runtime,
            save_runtime_options, srcs, stamp, verbose)

Supports all of the same attributes as lisp_library, plus
additional attributes governing the behavior of the completed binary. The
main attribute defines behavior (generally specifying a
function to run with no arguments) when the binary is started. By default, it
runs (cl-user::main).
Example:
lisp_binary(
    name = "binary"
    srcs = ["binary.lisp"],
    main = "binary:main",
    deps = [":library"],
)

ATTRIBUTES
| Name  | Description | Type | Mandatory | Default |
| :------------- | :------------- | :------------- | :------------- | :------------- |
| name |  A unique name for this target.   | Name | required |  |
| add_features |  Names of symbols (by default in the keyword package) to be added to *features* of this library and its consumers, at compile time and in the resulting binary. Note that this differs from the features attribute common to all build rules which controls toolchain features.   | List of strings | optional | [] |
| allow_save_lisp |  Whether to preserve the ability to run save-lisp-and-die instead of altering the binary format to be more compatible with C++ debugging tools (which, for example, allows you to get combined stacktraces of C/C++ and Lisp code). Must be True for targets used as a compilation image.   | Boolean | optional | False |
| cdeps |  C++ dependencies (generally cc_library).   | List of labels | optional | [] |
| compile_data |  Data available to this target and its consumers at build time, added to the inputs of LispCompile and LispCore actions.   | List of labels | optional | [] |
| data |  Data available to this target and its consumers in the runfiles directory at runtime.   | List of labels | optional | [] |
| deps |  Common Lisp dependencies (generally lisp_library, but you can put lisp_binary in deps for testing).   | List of labels | optional | [] |
| entry_points |  If block-compiling, this is the list of entry points passed to SB-C:COMPILE-FILES (or if using the experimental_block_compile_specified feature, to COMPILE-FILE)   | List of strings | optional | [] |
| experimental_block_compile |  Whether to block-compile the sources. If True, the sources will be block-compiled with SB-C:COMPILE-MULTIPLE-FILES as a single block, with :BLOCK-COMPILE T.It should be noted that block compilation in SBCL currently has compiler crashes that prevent this feature from being enabled on all source code, and so this feature should be used with caution.   | Boolean | optional | False |
| experimental_block_compile_specified |  Whether to pass :SPECIFIED to :BLOCK-COMPILE in :COMPILE-FILE. This causes SBCL to respect (START-BLOCK) and (END-BLOCK) declarations on a sub-file basis.   | Boolean | optional | False |
| image |  Lisp binary used as Bazel compilation image. This should be a binary with the main function #'bazel:main defined in main.lisp.   | Label | optional | //third_party/lisp/bazel:image |
| instrument_coverage |  Force coverage instrumentation. Possible values:0: Never instrument this target. Should be used if thetarget compiles generated source files or does not compilewith coverage instrumentation.1: Always instrument this target. Generally should not be used outside of tests for the coverage implementation.-1 (default): If coverage data collection is enabled, instrument this target per --instrumentation_filter.   | Integer | optional | -1 |
| main |  Name of function (by default in the cl-user package) or snippet of Lisp code to run when starting the binary. "nil" to start the default REPL. Can be overridden at runtime with the LISP_MAIN environment variable.   | String | optional | "main" |
| malloc |  Target providing a custom malloc implementation. Same as cc_binary.malloc. Note that these rules do not respect --custom_malloc.   | Label | optional | //third_party/tcmalloc:tcmalloc_or_debug |
| nowarn |  Suppressed Lisp warning types or warning handlers.   | List of strings | optional | [] |
| order |  Compilation order, one of:"serial" (default) - Each source is compiled in an image with previous sources loaded. (Note that in this configuration you should put a comment at the top of the list of srcs if there is more than one, so that formatters like Buildozer do not change the order.)"multipass" - Each source is compiled in an image with all sources loaded."parallel" - Each source is compiled independently.   | String | optional | "serial" |
| precompile_generics |  If False, skip precompiling generic functions.   | Boolean | optional | True |
| runtime |  SBCL C++ dependencies. Consumers should generally omit this attr and use the default value.   | Label | optional | //third_party/lisp/sbcl:c-support |
| save_runtime_options |  If False, process SBCL runtime options at the command-line on binary startup.   | Boolean | optional | True |
| srcs |  Common Lisp (.lisp or .lsp) source files. If there are multiple files in srcs, which other files in srcs are loaded before each file is compiled depends on the order attr.   | List of labels | optional | [] |
| stamp |  Same as cc_binary.stamp.   | Integer | optional | -1 |
| verbose |  Enable verbose debugging output when analyzing and compiling this target (0 = none (default), 3 = max).   | Integer | optional | 0 |

lisp_library

lisp_library(name, add_features, cdeps, compile_data, data, deps, entry_points,
             experimental_block_compile, experimental_block_compile_specified, image,
             instrument_coverage, nowarn, order, srcs, verbose)

The basic compilation unit for Lisp code. Can have Lisp dependencies
(deps) and C/C++ dependencies
(cdeps).
Example:
lisp_test(
    name = "library"
    srcs = ["library.lisp"],
    cdeps = [":cc-dependency-ci"],
    deps = [":dependency"],
)

ATTRIBUTES
| Name  | Description | Type | Mandatory | Default |
| :------------- | :------------- | :------------- | :------------- | :------------- |
| name |  A unique name for this target.   | Name | required |  |
| add_features |  Names of symbols (by default in the keyword package) to be added to *features* of this library and its consumers, at compile time and in the resulting binary. Note that this differs from the features attribute common to all build rules which controls toolchain features.   | List of strings | optional | [] |
| cdeps |  C++ dependencies (generally cc_library).   | List of labels | optional | [] |
| compile_data |  Data available to this target and its consumers at build time, added to the inputs of LispCompile and LispCore actions.   | List of labels | optional | [] |
| data |  Data available to this target and its consumers in the runfiles directory at runtime.   | List of labels | optional | [] |
| deps |  Common Lisp dependencies (generally lisp_library, but you can put lisp_binary in deps for testing).   | List of labels | optional | [] |
| entry_points |  If block-compiling, this is the list of entry points passed to SB-C:COMPILE-FILES (or if using the experimental_block_compile_specified feature, to COMPILE-FILE)   | List of strings | optional | [] |
| experimental_block_compile |  Whether to block-compile the sources. If True, the sources will be block-compiled with SB-C:COMPILE-MULTIPLE-FILES as a single block, with :BLOCK-COMPILE T.It should be noted that block compilation in SBCL currently has compiler crashes that prevent this feature from being enabled on all source code, and so this feature should be used with caution.   | Boolean | optional | False |
| experimental_block_compile_specified |  Whether to pass :SPECIFIED to :BLOCK-COMPILE in :COMPILE-FILE. This causes SBCL to respect (START-BLOCK) and (END-BLOCK) declarations on a sub-file basis.   | Boolean | optional | False |
| image |  Lisp binary used as Bazel compilation image. This should be a binary with the main function #'bazel:main defined in main.lisp.   | Label | optional | //third_party/lisp/bazel:image |
| instrument_coverage |  Force coverage instrumentation. Possible values:0: Never instrument this target. Should be used if thetarget compiles generated source files or does not compilewith coverage instrumentation.1: Always instrument this target. Generally should not be used outside of tests for the coverage implementation.-1 (default): If coverage data collection is enabled, instrument this target per --instrumentation_filter.   | Integer | optional | -1 |
| nowarn |  Suppressed Lisp warning types or warning handlers.   | List of strings | optional | [] |
| order |  Compilation order, one of:"serial" (default) - Each source is compiled in an image with previous sources loaded. (Note that in this configuration you should put a comment at the top of the list of srcs if there is more than one, so that formatters like Buildozer do not change the order.)"multipass" - Each source is compiled in an image with all sources loaded."parallel" - Each source is compiled independently.   | String | optional | "serial" |
| srcs |  Common Lisp (.lisp or .lsp) source files. If there are multiple files in srcs, which other files in srcs are loaded before each file is compiled depends on the order attr.   | List of labels | optional | [] |
| verbose |  Enable verbose debugging output when analyzing and compiling this target (0 = none (default), 3 = max).   | Integer | optional | 0 |

lisp_test

lisp_test(name, add_features, allow_save_lisp, cdeps, compile_data, data, deps, entry_points,
          experimental_block_compile, experimental_block_compile_specified, image,
          instrument_coverage, main, malloc, nowarn, order, precompile_generics, runtime,
          save_runtime_options, srcs, stamp, verbose)

Like lisp_binary, for defining tests to be run with the
test
command. The main attribute should name a function which
runs the tests, outputs information about failing assertions, and exits with a
non-zero exit status if there are any failures.
Example:
lisp_test(
    name = "library-test"
    srcs = ["library-test.lisp"],
    main = "library-test:run-tests",
    deps = [
        ":library",
        "//path/to/unit-test:framework",
    ],
)

ATTRIBUTES
| Name  | Description | Type | Mandatory | Default |
| :------------- | :------------- | :------------- | :------------- | :------------- |
| name |  A unique name for this target.   | Name | required |  |
| add_features |  Names of symbols (by default in the keyword package) to be added to *features* of this library and its consumers, at compile time and in the resulting binary. Note that this differs from the features attribute common to all build rules which controls toolchain features.   | List of strings | optional | [] |
| allow_save_lisp |  Whether to preserve the ability to run save-lisp-and-die instead of altering the binary format to be more compatible with C++ debugging tools (which, for example, allows you to get combined stacktraces of C/C++ and Lisp code). Must be True for targets used as a compilation image.   | Boolean | optional | False |
| cdeps |  C++ dependencies (generally cc_library).   | List of labels | optional | [] |
| compile_data |  Data available to this target and its consumers at build time, added to the inputs of LispCompile and LispCore actions.   | List of labels | optional | [] |
| data |  Data available to this target and its consumers in the runfiles directory at runtime.   | List of labels | optional | [] |
| deps |  Common Lisp dependencies (generally lisp_library, but you can put lisp_binary in deps for testing).   | List of labels | optional | [] |
| entry_points |  If block-compiling, this is the list of entry points passed to SB-C:COMPILE-FILES (or if using the experimental_block_compile_specified feature, to COMPILE-FILE)   | List of strings | optional | [] |
| experimental_block_compile |  Whether to block-compile the sources. If True, the sources will be block-compiled with SB-C:COMPILE-MULTIPLE-FILES as a single block, with :BLOCK-COMPILE T.It should be noted that block compilation in SBCL currently has compiler crashes that prevent this feature from being enabled on all source code, and so this feature should be used with caution.   | Boolean | optional | False |
| experimental_block_compile_specified |  Whether to pass :SPECIFIED to :BLOCK-COMPILE in :COMPILE-FILE. This causes SBCL to respect (START-BLOCK) and (END-BLOCK) declarations on a sub-file basis.   | Boolean | optional | False |
| image |  Lisp binary used as Bazel compilation image. This should be a binary with the main function #'bazel:main defined in main.lisp.   | Label | optional | //third_party/lisp/bazel:image |
| instrument_coverage |  Force coverage instrumentation. Possible values:0: Never instrument this target. Should be used if thetarget compiles generated source files or does not compilewith coverage instrumentation.1: Always instrument this target. Generally should not be used outside of tests for the coverage implementation.-1 (default): If coverage data collection is enabled, instrument this target per --instrumentation_filter.   | Integer | optional | -1 |
| main |  Name of function (by default in the cl-user package) or snippet of Lisp code to run when starting the binary. "nil" to start the default REPL. Can be overridden at runtime with the LISP_MAIN environment variable.   | String | optional | "main" |
| malloc |  Target providing a custom malloc implementation. Same as cc_binary.malloc. Note that these rules do not respect --custom_malloc.   | Label | optional | //third_party/tcmalloc:tcmalloc_or_debug |
| nowarn |  Suppressed Lisp warning types or warning handlers.   | List of strings | optional | [] |
| order |  Compilation order, one of:"serial" (default) - Each source is compiled in an image with previous sources loaded. (Note that in this configuration you should put a comment at the top of the list of srcs if there is more than one, so that formatters like Buildozer do not change the order.)"multipass" - Each source is compiled in an image with all sources loaded."parallel" - Each source is compiled independently.   | String | optional | "serial" |
| precompile_generics |  If False, skip precompiling generic functions.   | Boolean | optional | True |
| runtime |  SBCL C++ dependencies. Consumers should generally omit this attr and use the default value.   | Label | optional | //third_party/lisp/sbcl:c-support |
| save_runtime_options |  If False, process SBCL runtime options at the command-line on binary startup.   | Boolean | optional | True |
| srcs |  Common Lisp (.lisp or .lsp) source files. If there are multiple files in srcs, which other files in srcs are loaded before each file is compiled depends on the order attr.   | List of labels | optional | [] |
| stamp |  Same as cc_test.stamp. Build version stamping is disabled by default.   | Integer | optional | 0 |
| verbose |  Enable verbose debugging output when analyzing and compiling this target (0 = none (default), 3 = max).   | Integer | optional | 0 |

lisp_compile_srcs

lisp_compile_srcs(ctx, srcs, deps, cdeps, block_compile, block_compile_specified, entry_points,
                  image, add_features, nowarn, order, compile_data, verbose_level,
                  instrument_coverage, indexer_metadata)

Generate LispCompile actions, return LispInfo and FASL output.
This is the core functionality shared by the Lisp build rules.
PARAMETERS
| Name  | Description | Default Value |
| :------------- | :------------- | :------------- |
| ctx |  The rule context.   |  none |
| srcs |  list of src Files.   |  [] |
| deps |  list of immediate Lisp dependency Targets.   |  [] |
| cdeps |  list of immediate C++ dependency Targets.   |  [] |
| block_compile |   -    |  False |
| block_compile_specified |   -    |  False |
| entry_points |   -    |  [] |
| image |  Build image Target used to compile the sources.   |  None |
| add_features |  list of Lisp feature strings added by this target.   |  [] |
| nowarn |  List of suppressed warning type strings.   |  [] |
| order |  Order in which to load sources, either "serial", "parallel", or "multipass".   |  "serial" |
| compile_data |  list of data dependency Targets whose outputs and runfiles are made available at load/compile time for this target and its consumers.   |  [] |
| verbose_level |  int indicating level of debugging output.   |  0 |
| instrument_coverage |  Controls coverage instrumentation, with the following values: -1 (default) - Instruments if coverage is enabled for this target. 0 - Instruments never. 1 - Instruments always (for testing purposes).   |  -1 |
| indexer_metadata |  Extra metadata files to be passed to the --deps flag of LispCompile when the Kythe indexer is run. Ignored by the build image itself, but this appears in the command-line for the LispCompile action which can be inspected by action_listener.   |  [] |