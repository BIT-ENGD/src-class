
title: SimpleStack - Querying Data - Typed
hero_title:
layout: page
hero_image: /assets/background.jpg
show_sidebar: false
menubar: home_menu

Typed select statements
All these samples are based on the"Dog" class from the home page and a connection as described in the setup:
WHERE clause generation using strongly typed LINQ queries




Queries output are given for information only. 

They may change from one database to another
All generated queries will use parameters instead of string hardcoded values


Equals, Not equals, Bigger than, Less than, Like, is Null...
csharp
db.SelectAsync<Dog>(q => q.Name == "Rex");       // WHERE ("Name" = @p_1)
db.SelectAsync<Dog>(q => q.Name != "Rex");       // WHERE ("Name" <> 'Rex')
db.SelectAsync<Dog>(q => q.Weight == 10);        // WHERE ("Weight" = 10)
db.SelectAsync<Dog>(q => q.Weight > 10);         // WHERE ("Weight" > 10)
db.SelectAsync<Dog>(q => q.Weight >= 10);        // WHERE ("Weight" >= 10)
db.SelectAsync<Dog>(q => q.Weight < 10);         // WHERE ("Weight" < 10)
db.SelectAsync<Dog>(q => q.Weight <= 10);        // WHERE ("Weight" <= 10)
db.SelectAsync<Dog>(q => q.Name != null);        // WHERE ("Name" IS NOT NULL)
Support for String, DateTime and nullable Types

AND or OR

Select Distinct
csharp
// SELECT DISTINCT FROM Dogs
db.Select<Dog>(x => {
    x.Distinct();
});
Change from
The Table name by default is derived from the Poco class name (optionally decorated by Attibutes)
csharp
// SELECT * FROM someotherschema.Someothertable
db.Select<Dog>(x => {
    x.From("Someothertable","someotherschema");
});
Select only some fields
csharp
// SELECT Breed, Name FROM Dogs
db.Select<Dog>(x => {
    x.Select(y => new {y.Name,y.Breed})
});
Aggregations
csharp
// SELECT MAX("BirthDate") FROM DOG
conn.GetScalar<Dog, DateTime>(x => Sql.Max(x.BirthDate));
// SELECT AVG("Weight") FROM DOG
conn.GetScalar<Dog, decimal>(x => Sql.Avg(x.Weight));
// SELECT AVG(Age) as Age, Breed FROM DOG 
//    WHERE Name LIKE '%A%'
//    GROUP BY Breed
conn.Select<Dog>(x => {
   x.Select(y => new Dog{Age= Sql.Avg(y.Age), y.Breed}); 
   x.Where(y => y.Name.Contains("A");
   x.GroupBy(y => y.Breed);
Order By
csharp
// SELECT * FROM Dogs ORDER BY Breed
db.Select<Dog>(x => {
    x.OrderBy(y => y.Breed);
});
// SELECT * FROM Dogs ORDER BY Breed DESC
db.Select<Dog>(x => {
    x.OrderByDescending(y => y.Breed);
});
// SELECT * FROM Dogs ORDER BY Breed, Name
db.Select<Dog>(x => {
    x.OrderBy(y => y.Breed).ThenBy(y => y.Name);
});
// SELECT * FROM Dogs ORDER BY Breed ASC, Name DESC
db.Select<Dog>(x => {
    x.OrderBy(y => y.Breed).ThenByDescending(y => y.Name);
});
Limits
csharp
// SELECT * FROM Dogs LIMIT(20,40)
db.Select<Dog>(x => {
    x.Limit(20,40);
});
IN Criteria
csharp
string[] breeds = new {"Beagle", "Border Collie", "Golden Retriever"};
db.Select<Dog>(q => breeds.Contains(g.Breed));  
// WHERE "Breed" In ('Beagle', 'Border Collie', 'Golden Retriever')
Sql helper class
Aggregation function
csharp
// SELECT MAX("BirthDate") FROM DOG
conn.GetScalar<Dog, DateTime>(x => Sql.Max(x.BirthDate))
// SELECT AVG("Weight") FROM DOG
conn.GetScalar<Dog, decimal>(x => Sql.Avg(x.Weight))
Method signatures
