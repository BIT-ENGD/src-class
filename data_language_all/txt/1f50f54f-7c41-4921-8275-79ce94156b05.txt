
layout: api
id: promise.promisify
title: Promise.promisify

‚Üê Back To API Reference

##Promise.promisify



Returns a function that will wrap the given `nodeFunction`. Instead of taking a callback, the returned function will return a promise whose fate is decided by the callback behavior of the given node function. The node function should conform to node.js convention of accepting a callback as last argument and calling that callback with error as the first argument and success value on the second argument.

If the `nodeFunction` calls its callback with multiple success values, the fulfillment value will be the first fulfillment item.

Setting `multiArgs` to `true` means the resulting promise will always fulfill with an array of the callback's success value(s). This is needed because promises only support a single success value while some callback API's have multiple success value. The default is to ignore all but the first success value of a callback function.

If you pass a `context`, the `nodeFunction` will be called as a method on the `context`.

Example of promisifying the asynchronous `readFile` of node.js `fs`-module:



Note that if the node function is a method of some object, you can pass the object as the second argument like so:



But this will also work:





    var disqus_title = "Promise.promisify";
    var disqus_shortname = "bluebirdjs";
    var disqus_identifier = "disqus-id-promise.promisify";

    (function() {
        var dsq = document.createElement("script"); dsq.type = "text/javascript"; dsq.async = true;
        dsq.src = "//" + disqus_shortname + ".disqus.com/embed.js";
        (document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0]).appendChild(dsq);
    })();

Please enable JavaScript to view the comments powered by Disqus.