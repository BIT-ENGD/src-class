eventa



Simple advanced central event communicator.
An event emitter with extra methods to manage events flowing between multiple emitters.
It helps handle errors and emitting results for listeners to react to.
Install
sh
npm install eventa --save
Usage
Usage: Build Eventa

Provide load() arguments to the builder as a convenience. It accepts all forms of arguments exactly like load().
Usage: load()
Load accepts three types of things:

function - it will call the function providing itself as the first argument.
string - it will attempt to require() the string. If the string starts with './' or '../' then it will attempt to resolve it with the second argument to load(). So, when loading local modules either use require.resolve() on them first or specify __dirname as the second argument. It expects the require() result to provide a function which will be called as described above.
array - an array containing any of the above two types. When the array contains local module paths then provide __dirname as second argument, or, use require.resolve() on them.

Note, it's possible to include an array inside an array provided to load(). This allows packages and modules to provide more things to load. However, paths relative to the module must be resolved via require.resolve() unless they will resolve the same as the original load() caller, or, they are relative to the current working directory.

Usage: Common Event Emitter
Eventa provides the common event emitter functions, with some extra abilities.

Provide a context for an event listener function. This allows a class instance method to be used as a listener by providing both its function and the class instance itself. This avoids the annoying object.method.bind(object) and the extra bind wrapper function. Instead, you can do: eventa.on('event', object.method, object).
Specify the number of times a listener may be called before it is removed. This extends the once() ability to a count you specify. For example, five times: eventa.on('event', someFn, null, 5) (Note, the null is the context we're not providing).
The on() and once() functions return a "handle" object. It contains a remove function which will remove the listener from the eventa instance. This makes removing listeners much easier because it avoids requiring all the original arguments. It can be called inside the listener while an event emit is running, or, anytime.


Usage: Advanced Event Controls
Eventa helps build an event-driven app with extra functions.

start() - convenience function which emits a 'start' event. Its purpose is to encourage a focus of setting up event listeners at load including special 'start' ones to get things going once it's all ready.
load() - used to load other packages and local modules into the Eventa. Its purpose is to help split up the event listener providers into separate modules and, allow packages to provide common event listeners.
waitFor() - An advanced on() which calls the specified listener when all the specified events have occurred. It gathers their arguments and provides those to the listener in the same order as the event names are provided. By default it expects each event emits a single argument. To accept multiple arguments provide {many:true} as the options arg.
forward() - Emit an Eventa event on another emitter. Optionally, with a different event name. The opposite of watch(). It has the opposite argument order to watch. Eventa forwards an event to another emitter, so, eventa.forward('event', emitter, ...). A "handle" is returned with a remove() function to remove the forward.
watch() - Emit another emitter's event on the Eventa. Optionally, with a different event name. The opposite of forward(). It has the opposite argument order to forward. Eventa watches another emitter for an event, so, eventa.watch(emitter, 'event', ...). A "handle" is returned with a remove() function to remove the watcher. The third argument accepts a function to call with the args from the event listener. It allows creating an array of arguments to provide to the watch's event listener. Essentially, changing the other emitter's event arguments into ones of your own.
watchError() - A special case of watch() for 'error' events. Specify the emitter to watch and an error message to use. It expects the error will be emitted with a single error argument. It will emit on Eventa with a single argument as well. It will have an error property containing the error message specified to watchError() and, an Error property with the error object provided to the original listener.
accept - Provides a callback function which will emit each argument as an event using the name specified in the array. The order of the names is used to match them to the arguments. Use this to have it emit the usual error or result arguments with custom names. If the name 'error' is used then it receives the same treatment as in watchError() to produce an object with both 'error' and 'Error' properties.


Example: Event Driven
A semi-realistic example of an event-driven app:
TODO: make examples/

Cleanup
It's possible to build up empty info about events no longer in use with zero listeners.
Fix that by running eventa.cleanup(). It will recreate the internal arrays anew retaining only event info which has listeners.
Use is very dependent on your application's needs, so, I leave it to you to determine when, if ever, you need to run this.
Project Source and Distribution
As usual, the CoffeeScript source file lib/index.coffee is transpiled to create lib/index.js.
That JavaScript file is then used to produce minified and universal module versions.
| type | min | universal | file                 |
|:----:|:---:|:---------:|:---------------------|
| ES5  | no  | no        | lib/index.js     |
| ES5  | no  | yes       | lib/umd.js       |
| ES5  | yes | yes       | lib/umd.min.js   |
These versions are made available via unpkg.com.
Loading via a string will try to use require() which, won't work in a browser. So, provide the functions instead. If you have suggestions how to better improve this for using eventa in the browser, please, create an Issue and tell me all about it.
TODO: Test the distribution files and their source maps in a browser.
MIT License