Laboratório 08
Objetivos

Roteando os serviços com Netflix Zuul

Tarefas
Defina um API gateway server com Zuul

Utilize os projetos definidos no exercício anterior
Crie um novo projeto Spring Boot para representar o API gateway com Zuul zuul-server
Configure o suporte da plataforma Spring Cloud no pom.xml
xml
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Dalston.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
Adicione as seguintes dependências no projeto
spring-boot-starter-web
spring-boot-starter-actuator
spring-cloud-starter-config
Adicione também a dependência spring-cloud-starter-zuul no seu projeto
xml
  <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-zuul</artifactId>
  </dependency>
Configure o serviço do Zuul adicionando a anotação @EnableZuulProxy na aplicação

- Execute e teste novamente a aplicação
  - Foi possível realizar o acesso aos serviços agora?
    - Não se esqueça de incorporar o OAuth access token nos headers da requisição
Utilize o Eureka para descoberta dos serviços com Zuul

Utilize os projetos definidos anteriormente
Adicione a dependência do Netflix Ribbon no projeto zuul-server
xml
  <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-eureka</artifactId>
  </dependency>
Ative a utilização do Eureka habilitando a seguinte configuração nas propriedades do Zuul no Config Server
ribbon:
  eureka:
    enabled: true
Ajuste as configurações de roteamento do Zuul nas propriedades
zuul:
  routes:
    aluno-service:
      path: /aluno/**
      serviceId: aluno-service
    disciplina-service:
      path: /disciplina/**
      serviceId: disciplina-service
Execute e teste a aplicação
Execute duas instâncias do aluno-service e também do disciplina-service utilizando portas diferentes da configuradas via Ribbon
mvn spring-boot:run -DPORT=[port]


Acesse os REST endpoints roteados e verifique a descoberta dos serviços sendo realizada
http://localhost:8000/aluno/alunos/1
http://localhost:8000/disciplina/disciplinas/1  



[OPCIONAL]: Implemente um Hystrix fallback padrão via ZuulFallbackProvider

Utilize os projetos definidos anteriormente
Implemente uma classe DefaultFallbackProvider para definir um Hystrix fallback padrão

- Execute e teste a aplicação


[OPCIONAL]: Implemente filtros no Zuul Server

Utilize os projetos definidos anteriormente

Implemente um classe LoggingRequestFilter para filtrar e logar as requisições recebidas

- Execute e teste a aplicação
  - Verifique os filtros sendo executados

