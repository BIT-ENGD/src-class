Down





Blazing fast Markdown rendering in Swift, built upon cmark.
Is your app using it? Let me know!
Installation
Quickly install using CocoaPods: 
ruby
pod 'Down'
Or Carthage:
github "iwasrobbed/Down"
Or manually install:

Clone this repository
Build the Down project
Add the resulting framework file to your project
?
Profit

Robust Performance

cmark can render a Markdown version of War and Peace in the blink of an eye (127 milliseconds on a ten year old laptop, vs. 100-400 milliseconds for an eye blink). In our benchmarks, cmark is 10,000 times faster than the original Markdown.pl, and on par with the very fastest available Markdown processors.
The library has been extensively fuzz-tested using american fuzzy lop. The test suite includes pathological cases that bring many other Markdown parsers to a crawl (for example, thousands-deep nested bracketed text or block quotes).

Output Formats

Web View (see DownView class)
HTML
XML
LaTeX
groff man
CommonMark Markdown
NSAttributedString
AST (abstract syntax tree)

View Rendering
The DownView class offers a very simple way to parse a UTF-8 encoded string with Markdown and convert it to a web view that can be added to any view:
swift
let downView = try? DownView(frame: self.view.bounds, markdownString: "**Oh Hai**") {
    // Optional callback for loading finished
}
// Now add to view or constrain w/ Autolayout
// Or you could optionally update the contents at some point:
try? downView?.update(markdownString:  "## [Google](https://google.com)") {
    // Optional callback for loading finished
}
Meta example of rendering this README:

Parsing API
The Down struct has everything you need if you just want out-of-the-box setup for parsing and conversion. 

Rendering Granularity
If you'd like more granularity for the output types you want to support, you can create your own struct conforming to at least one of the renderable protocols:

DownHTMLRenderable
DownXMLRenderable
DownLaTeXRenderable
DownGroffRenderable
DownCommonMarkRenderable
DownASTRenderable
DownAttributedStringRenderable

Example:

Options
Each protocol has options that will influence either rendering or parsing:

Supports
Swift, ARC & iOS 8+
Markdown Specification
Down is built upon the CommonMark specification.
A little help from my friends
Please feel free to fork and create a pull request for bug fixes or improvements, being sure to maintain the general coding style, adding tests, and adding comments as necessary.
Credit
This library is a wrapper around cmark, which is built upon the CommonMark Markdown specification. 
cmark is Copyright (c) 2014, John MacFarlane. View full license.