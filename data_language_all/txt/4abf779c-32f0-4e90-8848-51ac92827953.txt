rtl_433
rtl_433 turns your Realtek RTL2832 based DVB dongle into a 433.92MHz generic data receiver
How to add support for unsupported sensors
Read the Test Data section at the bottom.
Installation instructions:
Compiling rtl_433 requires rtl-sdr to be installed.
Depending on your system, you may also need to install the following libraries.
Debian:
sudo apt-get install libtool libusb-1.0.0-dev librtlsdr-dev rtl-sdr build-essential autoconf cmake pkg-config

Centos/Fedora/RHEL (for Centos/RHEL with enabled EPEL):
sudo dnf install libtool libusb-devel rtl-sdr-devel rtl-sdr

Installation using cmake:
cd rtl_433/
mkdir build
cd build
cmake ../
make
make install

Installation using autoconf:
cd rtl_433/
autoreconf --install
./configure
make
make install

The final 'make install' step should be run as a user with appropriate permissions - if in doubt, 'sudo' it.
Running:
rtl_433 -h


Examples:
| Command | Description
|---------|------------
| rtl_433 -G | Default receive mode, attempt to decode all known devices
| rtl_433 -p NN -R 1 -R 9 -R 36 -R 40 | Typical usage: Enable device decoders for desired devices. Correct rtl-sdr tuning error (ppm offset).
| rtl_433 -a | Will run in analyze mode and you will get a text description of the received signal.
| rtl_433 -A | Enable pulse analyzer. Summarizes the timings of pulses, gaps, and periods. Can be used in either the normal decode mode, or analyze mode.
| rtl_433 -a -t | Will run in analyze mode and save a test file per detected signal (g###_###M_###k.cu8). Format is uint8, 2 channels.
| rtl_433 -r file_name | Play back a saved data file.
| rtl_433 file_name | Will save everything received from the rtl-sdr during the session into a single file. The saves file may become quite large depending on how long rtl_433 is left running. Note: saving signals into individual files with rtl_433 -a -t is preferred.
| rtl_433 -F json -U \| mosquitto_pub -t home/rtl_433 -l | Will pipe the output to network as JSON formatted MQTT messages. A test MQTT client can be found in tests/mqtt_rtl_433_test.py.
| rtl_433 -f 433535000 -f 434019000 -H 15 | Will poll two frequencies with 15 seconds interval.
This software is mostly usable for developers right now.
Supporting Additional Devices and Test Data
Note: Not all device protocol decoders are enabled by default. When testing to see if your device
is decoded by rtl_433, use -G to enable all device protocols.
The first step in decoding new devices is to record the signals using -a -t. The signals will be
stored individually in files named gNNN_FFFM_RRRk.cu8 that can be played back with rtl_433 -r gNNN_FFFM_RRRk.cu8.
These files are vital for understanding the signal format as well as the message data.  Use both analyzers
-a and -A to look at the recorded signal and determine the pulse characteristics, e.g. rtl_433 -r gNNN_FFFM_RRRk.cu8 -a -A.
Make sure you have recorded a proper set of test signals representing different conditions together
with any and all information about the values that the signal should represent. For example, make a
note of what temperature and/or humidity is the signal encoding. Ideally, capture a range of data
values, such a different temperatures, to make it easy to spot what part of the message is changing.
Add the data files, a text file describing the captured signals, pictures of the device and/or
a link the manufacturer's page (ideally with specifications) to the rtl_433_tests
github repository. Follow the existing structure as best as possible and send a pull request.
https://github.com/merbanan/rtl_433_tests
Please don't open a new github issue for device support or request decoding help from others
until you've added test signals and the description to the repository.
The rtl_433_test repository is also used to help test that changes to rtl_433 haven't caused any regressions.
Google Group
Join the Google group, rtl_433, for more information about rtl_433:
https://groups.google.com/forum/#!forum/rtl_433
Troubleshooting
If you see this error:
Kernel driver is active, or device is claimed by second instance of librtlsdr.
In the first case, please either detach or blacklist the kernel module
(dvb_usb_rtl28xxu), or enable automatic detaching at compile time.

then
sudo rmmod dvb_usb_rtl28xxu rtl2832
