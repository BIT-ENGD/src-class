% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Strength Pareto Evolutionary Algorithm} 
\label{sec:spea}
\index{Strength Pareto Evolutionary Algorithm}
\index{SPEA2}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Strength Pareto Evolutionary Algorithm, SPEA, SPEA2.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
Strength Pareto Evolutionary Algorithm is a Multiple Objective Optimization (MOO) algorithm and an Evolutionary Algorithm from the field of Evolutionary Computation. It belongs to the field of Evolutionary Multiple Objective (EMO) algorithms. Refer to Section~\ref{sec:strategies} for more information and references on Multiple Objective Optimization.
% What are the closely related approaches to a technique?
Strength Pareto Evolutionary Algorithm is an extension of the Genetic Algorithm for multiple objective optimization problems (Section~\ref{sec:genetic_algorithm}).
It is related to sibling Evolutionary Algorithms such as Non-dominated Sorting Genetic Algorithm (NSGA) (Section~\ref{sec:nsga}), Vector-Evaluated Genetic Algorithm (VEGA), and Pareto Archived Evolution Strategy (PAES).
% versions
There are two versions of SPEA, the original SPEA algorithm and the extension SPEA2. Additional extensions include SPEA+ and iSPEA.

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The objective of the algorithm is to locate and and maintain a front of non-dominated solutions, ideally a set of Pareto optimal solutions.
% What is a techniques plan of action?
This is achieved by using an evolutionary process (with surrogate procedures for genetic recombination and mutation) to explore the search space, and a selection process that uses a combination of the degree to which a candidate solution is dominated (strength) and an estimation of density of the Pareto front as an assigned fitness. An archive of the non-dominated set is maintained separate from the population of candidate solutions used in the evolutionary process, providing a form of elitism.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as Pseudocode, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What is the computational recipe for a technique?
% What are the data structures and representations used in a technique?
Algorithm~\ref{alg:spea} provides a pseudocode listing of the Strength Pareto Evolutionary Algorithm 2 (SPEA2) for minimizing a cost function. 
% explaination
The \texttt{Calculate\-Raw\-Fitness} function calculates the raw fitness as the sum of the strength values of the solutions that dominate a given candidate, where strength is the number of solutions that a give solution dominate.
The \texttt{Candidate\-Density} function estimates the density of an area of the Pareto front as $\frac{1.0}{\sigma^k + 2}$ where $\sigma^k$ is the Euclidean distance of the objective values between a given solution the $k$th nearest neighbor of the solution, and $k$ is the square root of the size of the population and archive combined.
The \texttt{Populate\-With\-Remaining\-Best} function iteratively fills the archive with the remaining candidate solutions in order of fitness.
The \texttt{Remove\-Most\-Similar} function truncates the archive population removing those members with the smallest $\sigma^k$ values as calculated against the archive.
The \texttt{Select\-Parents} function selects parents from a population using a Genetic Algorithm selection method such as binary tournament selection. The \texttt{Crossover\-And\-Mutation} function performs the crossover and mutation genetic operators from the Genetic Algorithm.

\begin{algorithm}[htp]
	\SetLine  

	% params
	\SetKwData{PopulationSize}{$Population_{size}$}
	\SetKwData{ArchiveSize}{$Archive_{size}$}
	\SetKwData{ProblemSize}{ProblemSize}
	\SetKwData{ProbabilityMutate}{$P_{mutation}$}
	\SetKwData{ProbabilityCrossover}{$P_{crossover}$}
	% data
	\SetKwData{Population}{Population}
	\SetKwData{Archive}{Archive}
	\SetKwData{Selected}{Selected}
	\SetKwData{Candidate}{$S_i$}
	\SetKwData{CandidateObjectives}{$Si_{objectives}$}
	\SetKwData{CandidateRawFitness}{$Si_{raw}$}
	\SetKwData{CandidateDensity}{$Si_{density}$}
	\SetKwData{CandidateFitness}{$Si_{fitness}$}
	\SetKwData{Union}{Union}

	% functions
	\SetKwFunction{InitializePopulation}{InitializePopulation} 
	\SetKwFunction{SelectParents}{SelectParents}
	\SetKwFunction{CrossoverAndMutation}{CrossoverAndMutation}
	\SetKwFunction{StopCondition}{StopCondition}	
	\SetKwFunction{Break}{Break}
	\SetKwFunction{GetNonDominated}{GetNonDominated}
	\SetKwFunction{CalculateObjectives}{CalculateObjectives}
	\SetKwFunction{CalculateRawFitness}{CalculateRawFitness}
	\SetKwFunction{CalculateSolutionDensity}{CalculateSolutionDensity}
	\SetKwFunction{Size}{Size}
	\SetKwFunction{PopulateWithRemainingBest}{PopulateWithRemainingBest}
	\SetKwFunction{RemoveMostSimilar}{RemoveMostSimilar}
	
	% I/O
	\KwIn{\PopulationSize, \ArchiveSize, \ProblemSize, \ProbabilityCrossover, \ProbabilityMutate}		
	\KwOut{\Archive}
	% Algorithm
	% initialize	
	\Population $\leftarrow$ \InitializePopulation{\PopulationSize, \ProblemSize}\;
	\Archive $\leftarrow \emptyset$\;
	% loop
	\While{$\neg$\StopCondition{}} {
		% calculate fitnes
		\For{\Candidate $\in$ \Population}{
			\CandidateObjectives $\leftarrow$ \CalculateObjectives{\Candidate}\;
		}
		\Union $\leftarrow$ \Population $+$ \Archive\;
		\For{\Candidate $\in$ \Union}{
			\CandidateRawFitness $\leftarrow$ \CalculateRawFitness{\Candidate, \Union}\;
			\CandidateDensity $\leftarrow$ \CalculateSolutionDensity{\Candidate, \Union}\;
			\CandidateFitness $\leftarrow$ \CandidateRawFitness $+$ \CandidateDensity\;
		}
		% environment selection
		\Archive $\leftarrow$ \GetNonDominated{\Union}\;
		\uIf{\Size{\Archive} $<$ \ArchiveSize}{
			\PopulateWithRemainingBest{\Union, \Archive, \ArchiveSize}\;
		}\ElseIf{\Size{\Archive} $>$ \ArchiveSize}{
			\RemoveMostSimilar{\Archive, \ArchiveSize}\;
		}
		% selection
		\Selected $\leftarrow$ \SelectParents{\Archive, \PopulationSize}\;
		% mating
		\Population $\leftarrow$ \CrossoverAndMutation{\Selected, \ProbabilityCrossover, \ProbabilityMutate}\;		
	}
	\Return{GetNonDominated{\Archive}}\;
	
	% end
	\caption{Pseudocode for SPEA2.}
	\label{alg:spea}
\end{algorithm}

% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item SPEA was designed for and is suited to combinatorial and continuous function multiple objective optimization problem instances.
	\item A binary representation can be used for continuous function optimization problems in conjunction with classical genetic operators such as one-point crossover and point mutation.
	\item A $k$ value of 1 may be used for efficiency whilst still providing useful results.
	\item The size of the archive is commonly smaller than the size of the population.
	\item There is a lot of room for implementation optimization in density and Pareto dominance calculations.
\end{itemize}

% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{spea} provides an example of the Strength Pareto Evolutionary Algorithm 2 (SPEA2) implemented in the Ruby Programming Language.
% problem
The demonstration problem is an instance of continuous multiple objective function optimization called SCH (problem one in \cite{Deb2002}). The problem seeks the minimum of two functions: $f1=\sum_{i=1}^n x_{i}^2$ and $f2=\sum_{i=1}^n (x_{i}-2)^2$, $-10\leq x_i \leq 10$ and $n=1$. The optimal solutions for this function are $x \in [0,2]$.
% algorithm
The algorithm is an implementation of SPEA2 based on the presentation by Zitzler, Laumanns, and Thiele \cite{Zitzler2002}.
%  cfg
The algorithm uses a binary string representation (16 bits per objective function parameter) that is decoded and rescaled to the function domain. The implementation uses a uniform crossover operator and point mutations with a fixed mutation rate of $\frac{1}{L}$, where $L$ is the number of bits in a solution's binary string. 

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=SPEA2 in Ruby, label=spea]{../src/algorithms/evolutionary/spea2.rb}

% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% seminal
Zitzler and Thiele introduced the Strength Pareto Evolutionary Algorithm as a technical report on a multiple objective optimization algorithm with elitism and clustering along the Pareto front \cite{Zitzler1998}. The technical report was later published \cite{Zitzler1999}.
% thesis
The Strength Pareto Evolutionary Algorithm was developed as a part of Zitzler's PhD thesis \cite{Zitzler1999a}.
% extension
Zitzler, Laumanns, and Thiele later extended SPEA to address some inefficiencies of the approach, the algorithm was called SPEA2 and was released as a technical report \cite{Zitzler2001} and later published \cite{Zitzler2002}. SPEA2 provides fine-grained fitness assignment, density estimation of the Pareto front, and an archive truncation operator.

% Learn More
% 
\subsubsection{Learn More}
% reviews
Zitzler, Laumanns, and Bleuler provide a tutorial on SPEA2 as a book chapter that considers the basics of multiple objective optimization, and the differences from SPEA and the other related Multiple Objective Evolutionary Algorithms \cite{Zitzler2004}.

