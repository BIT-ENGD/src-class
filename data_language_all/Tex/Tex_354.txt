% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Population-Based Incremental Learning} 
\label{sec:pbil}
\index{Population-Based Incremental Learning}
\index{PBIL}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Population-Based Incremental Learning, PBIL.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
Population-Based Incremental Learning is an Estimation of Distribution Algorithm (EDA), also referred to as Population Model-Building Genetic Algorithms (PMBGA) an extension to the field of Evolutionary Computation.
% What are the closely related approaches to a technique?
PBIL is related to other EDAs such as the Compact Genetic Algorithm (Section~\ref{sec:compact_genetic_algorithm}), the Probabilistic Incremental Programing Evolution Algorithm, and the Bayesian Optimization Algorithm (Section~\ref{sec:boa}). The fact the the algorithm maintains a single prototype vector that is updated competitively shows some relationship to the Learning Vector Quantization algorithm (Section~\ref{sec:lvq}).

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
Population-Based Incremental Learning is a population-based technique without an inspiration. It is related to the Genetic Algorithm and other Evolutionary Algorithms that are inspired by the biological theory of evolution by means of natural selection.
% Which features of the motivating system are relevant to a technique?

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
% \subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
% What are the functionalities inferred for a technique from the analogous inspiring system?
% A textual description of the algorithm by analogy.

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The information processing objective of the PBIL algorithm is to reduce the memory required by the genetic algorithm.
% What is a techniques plan of action?
This is done by reducing the population of a candidate solutions to a single prototype vector of attributes from which candidate solutions can be generated and assessed. Updates and mutation operators are also performed to the prototype vector, rather than the generated candidate solutions.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as Pseudocode, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What are the data structures and representations used in a technique?
The Population-Based Incremental Learning algorithm maintains a real-valued prototype vector that represents the probability of each component being expressed in a candidate solution. 
% What is the computational recipe for a technique?
Algorithm~\ref{alg:pbil} provides a pseudocode listing of the Population-Based Incremental Learning algorithm for maximizing a cost function.

\begin{algorithm}[ht]
	\SetLine  

	% data
	\SetKwData{Best}{$S_{best}$}
	\SetKwData{ProbabilityMutate}{$P_{mutation}$}
	\SetKwData{LearningRate}{$Learn_{rate}$}
	\SetKwData{MutationFactor}{$Mutation_{factor}$}
	\SetKwData{NumSamples}{$Samples_{num}$}
	\SetKwData{NumBits}{$Bits_{num}$}
	
	\SetKwData{Vector}{$V$}
	\SetKwData{CurrentBest}{$S_{current}$}
	\SetKwData{Sample}{$S_i$}
	\SetKwData{Bit}{$S_{bit}^i$}
	\SetKwData{VectorBit}{$V_{bit}^i$}

	% functions
	\SetKwFunction{InitializeVector}{InitializeVector}  
	\SetKwFunction{StopCondition}{StopCondition} 
	\SetKwFunction{GenerateSamples}{GenerateSamples} 
	\SetKwFunction{Cost}{Cost}
	\SetKwFunction{Rand}{Rand}
  
	% I/O
	\KwIn{\NumBits, \NumSamples, \LearningRate, \ProbabilityMutate, \MutationFactor}		
	\KwOut{\Best}

  % Algorithm
	\Vector $\leftarrow$ \InitializeVector{\NumBits}\;
	\Best $\leftarrow$ $\emptyset$\;
	
	\While{$\neg$\StopCondition{}} {
		\CurrentBest $\leftarrow$ $\emptyset$\;		
		\For{$i$ \KwTo \NumSamples} {
			\Sample $\leftarrow$ \GenerateSamples{\Vector}\;
			\If{\Cost{\Sample} $\leq$ \Cost{\CurrentBest}} {
				\CurrentBest $\leftarrow$ \Sample\;
				\If{\Cost{\Sample} $\leq$ \Cost{\Best}} {
					\Best $\leftarrow$ \Sample\;
				}
			}			
		}
		\ForEach{\Bit $\in$ \CurrentBest} {
			\VectorBit $\leftarrow$ \VectorBit $\times$ (1.0 $-$ \LearningRate) $+$ \Bit $\times$ \LearningRate\;
			\If{\Rand{} $<$ \ProbabilityMutate} {
				\VectorBit $\leftarrow$ \VectorBit $\times$ (1.0 $-$ \MutationFactor) $+$ \Rand{} $\times$ \MutationFactor\;
			}
		}
	}
	\Return{\Best}\;
	
	% end
	\caption{Pseudocode for PBIL.}
	\label{alg:pbil}
\end{algorithm}

% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item PBIL was designed to optimize the probability of components from low cardinality sets, such as bit's in a binary string.
	\item The algorithm has a very small memory footprint (compared to some population-based evolutionary algorithms) given the compression of information into a single prototype vector.
	\item Extensions to PBIL have been proposed that extend the representation beyond sets to real-valued vectors.
	\item Variants of PBIL that were proposed in the original paper include updating the prototype vector with more than one competitive candidate solution (such as an average of top candidate solutions), and moving the prototype vector away from the least competitive candidate solution each iteration.
	\item Low learning rates are preferred, such as 0.1.
\end{itemize}

% Code Listing
% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{pbil} provides an example of the Population-Based Incremental Learning algorithm implemented in the Ruby Programming Language. 
% problem
The demonstration problem is a maximizing binary optimization problem called OneMax that seeks a binary string of unity (all `1' bits). The objective function only provides an indication of the number of correct bits in a candidate string, not the positions of the correct bits.
% algorithm
The algorithm is an implementation of the simple PBIL algorithm that updates the prototype vector based on the best candidate solution generated each iteration. 

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Population-Based Incremental Learning in Ruby, label=pbil]{../src/algorithms/probabilistic/pbil.rb}

% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% seminal
The Population-Based Incremental Learning algorithm was proposed by Baluja in a technical report that proposed the base algorithm as well as a number of variants inspired by the Learning Vector Quantization algorithm \cite{Baluja1994}.
% early


% 
% Learn More
% 
\subsubsection{Learn More}
% reviews
Baluja and Caruana provide an excellent overview of PBIL and compare it to the standard Genetic Algorithm, released as a technical report \cite{Baluja1995} and later published \cite{Baluja1995a}. Baluja provides a detailed comparison between the Genetic algorithm and PBIL on a range of problems and scales in another technical report \cite{Baluja1995b}.
Greene provided an excellent account on the applicability of PBIL as a practical optimization algorithm \cite{Greene1996}.
H\"ohfeld and Rudolph provide the first theoretical analysis of the technique and provide a convergence proof \cite{Hohfeld1997}.
% books


