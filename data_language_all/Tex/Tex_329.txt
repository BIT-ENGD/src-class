% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Evolutionary Programming} 
\label{sec:evolutionary_programming}
\index{Evolutionary Programming}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Evolutionary Programming, EP.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
Evolutionary Programming is a Global Optimization algorithm and is an instance of an Evolutionary Algorithm from the field of Evolutionary Computation.
% What are the closely related approaches to a technique?
The approach is a sibling of other Evolutionary Algorithms such as the Genetic Algorithm (Section~\ref{sec:genetic_algorithm}), and Learning Classifier Systems (Section~\ref{sec:learning_classifier_system}). It is sometimes confused with Genetic Programming given the similarity in name (Section~\ref{sec:genetic_programming}), and more recently it shows a strong functional similarity to Evolution Strategies (Section~\ref{sec:evolution_strategies}). 

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
Evolutionary Programming is inspired by the theory of evolution by means of natural selection.
% Which features of the motivating system are relevant to a technique?
Specifically, the technique is inspired by macro-level or the species-level process of evolution (phenotype, hereditary, variation) and is not concerned with the genetic mechanisms of evolution (genome, chromosomes, genes, alleles).

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
\subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
% What are the functionalities inferred for a technique from the analogous inspiring system?
A population of a species reproduce, creating progeny with small phenotypical variation. The progeny and the parents compete based on their suitability to the environment, where the generally more fit members constitute the subsequent generation and are provided with the opportunity to reproduce themselves. This process repeats, improving the adaptive fit between the species and the environment.

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The objective of the Evolutionary Programming algorithm is to maximize the suitability of a collection of candidate solutions in the context of an objective function from the domain.
% What is a techniques plan of action?
This objective is pursued by using an adaptive model with surrogates for the processes of evolution, specifically hereditary (reproduction with variation) under competition. The representation used for candidate solutions is directly assessable by a cost or objective function from the domain. 

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as pseudo code, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What is the computational recipe for a technique?
% What are the data structures and representations used in a technique?
Algorithm~\ref{alg:evolutionary_programming} provides a pseudocode listing of the Evolutionary Programming algorithm for minimizing a cost function. 

\begin{algorithm}[ht]
	\SetLine  
	% data
	\SetKwData{Best}{$S_{best}$}
	\SetKwData{Children}{Children}
	\SetKwData{Union}{Union}
	\SetKwData{ProblemSize}{ProblemSize}
	\SetKwData{Population}{Population}
	\SetKwData{PopulationSize}{$Population_{size}$}
	\SetKwData{Parent}{$Parent_{i}$}
	\SetKwData{Child}{$Child_{i}$}
	\SetKwData{Candidate}{$S_{i}$}
	\SetKwData{CandidateWins}{$Si_{wins}$}
	\SetKwData{CandidateOther}{$S_{j}$}
	\SetKwData{BoutSize}{BoutSize}
	% functions
	\SetKwFunction{InitializePopulation}{InitializePopulation}  
	\SetKwFunction{EvaluatePopulation}{EvaluatePopulation} 
	\SetKwFunction{GetBestSolution}{GetBestSolution} 
	\SetKwFunction{StopCondition}{StopCondition}
	\SetKwFunction{Mutate}{Mutate}
  	\SetKwFunction{RandomSelection}{RandomSelection}
	\SetKwFunction{SelectBestByWins}{SelectBestByWins}
	\SetKwFunction{Cost}{Cost}
	% I/O
	\KwIn{\PopulationSize, \ProblemSize, \BoutSize}		
	\KwOut{\Best}
  	% Algorithm
	% initialize	
	\Population $\leftarrow$ \InitializePopulation{\PopulationSize, \ProblemSize}\;
	% evaluate
	\EvaluatePopulation{\Population}\;
	% best
	\Best $\leftarrow$ \GetBestSolution{\Population}\;
	% loop
	\While{$\neg$\StopCondition{}} {
		% mutate
		\Children $\leftarrow \emptyset$\;
		\ForEach{\Parent $\in$ \Population}{
			\Child $\leftarrow$ \Mutate{\Parent}\;
			\Children $\leftarrow$ \Child\;
		}
		\EvaluatePopulation{\Children}\;
		% best
		\Best $\leftarrow$ \GetBestSolution{\Children, \Best}\;
		% tournaments
		\Union $\leftarrow$ \Population $+$ \Children\;
		\ForEach{\Candidate $\in$ \Union}{
			\For{$1$ \KwTo \BoutSize}{
				\CandidateOther $\leftarrow$ \RandomSelection{\Union}\;
				\If{\Cost{\Candidate} $<$ \Cost{\CandidateOther}} {
					\CandidateWins $\leftarrow$ \CandidateWins $+$ 1\;
				}
			}
		}
		\Population $\leftarrow$ \SelectBestByWins{\Union, \PopulationSize}\;
	}
	\Return{\Best}\;
	% end
	\caption{Pseudocode for Evolutionary Programming.}
	\label{alg:evolutionary_programming}
\end{algorithm}

% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item The representation for candidate solutions should be domain specific, such as real numbers for continuous function optimization.
	\item The sample size (bout size) for tournament selection during competition is commonly between 5\% and 10\% of the population size.
	\item Evolutionary Programming traditionally only uses the mutation operator to create new candidate solutions from existing candidate solutions. The crossover operator that is used in some other Evolutionary Algorithms is not employed in Evolutionary Programming.
	\item Evolutionary Programming is concerned with the linkage between parent and child candidate solutions and is not concerned with surrogates for genetic mechanisms.
	\item Continuous function optimization is a popular application for the approach, where real-valued representations are used  with a Gaussian-based mutation operator.
	\item The mutation-specific parameters used in the application of the algorithm to continuous function optimization can be adapted in concert with the candidate solutions \cite{Fogel1991a}.
\end{itemize}

% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{evolutionary_programming} provides an example of the Evolutionary Programming algorithm implemented in the Ruby Programming Language.
% problem
The demonstration problem is an instance of a continuous function optimization that seeks $\min f(x)$ where $f=\sum_{i=1}^n x_{i}^2$, $-5.0\leq x_i \leq 5.0$ and $n=2$. The optimal solution for this basin function is $(v_0,\ldots,v_{n-1})=0.0$.
% algorithm
The algorithm is an implementation of Evolutionary Programming based on the classical implementation for continuous function optimization by Fogel et al.\ \cite{Fogel1991a} with per-variable adaptive variance based on Fogel's description for a self-adaptive variation on page 160 of his 1995 book \cite{Fogel1995}.

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Evolutionary Programming in Ruby, label=evolutionary_programming]{../src/algorithms/evolutionary/evolutionary_programming.rb}


% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?


% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% early work
Evolutionary Programming was developed by Lawrence Fogel, outlined in early papers (such as \cite{Fogel1962}) and later became the focus of his PhD dissertation \cite{Fogel1964}. Fogel focused on the use of an evolutionary process for the development of control systems using Finite State Machine (FSM) representations. 
% book
Fogel's early work on Evolutionary Programming culminated in a book (co-authored with Owens and Walsh) that elaborated the approach, focusing on the evolution of state machines for the prediction of symbols in time series data \cite{Fogel1966}.

% 
% Learn More
% 
\subsubsection{Learn More}
% revival
The field of Evolutionary Programming lay relatively dormant for 30 years until it was revived by Fogel's son, David. Early works considered the application of Evolutionary Programming to control systems \cite{Sebald1990}, and later function optimization (system identification) culminating in a book on the approach \cite{Fogel1991}, and David Fogel's PhD dissertation \cite{Fogel1992}.
% Lawrence
Lawrence Fogel collaborated in the revival of the technique, including reviews \cite{Fogel1990, Fogel1994} and extensions on what became the focus of the approach on function optimization \cite{Fogel1991a}.

% recent
Yao et al.\ provide a seminal study of Evolutionary Programming proposing an extension and racing it against the classical approach on a large number of test problems \cite{Yao1999}. Finally, Porto provides an excellent contemporary overview of the field and the technique \cite{Porto2000}.


