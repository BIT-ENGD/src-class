\mysection{Modèle de mémoire du 8086}
\myindex{Intel!8086!Memory model}
\myindex{MS-DOS}
\label{8086_memory_model}

Lorsque l'on a à faire avec des programmes 16-bit pour MS-DOS ou Win16
(\myref{dongle_16bit_dos} ou \myref{win16_near_far_pointers}),
nous voyons que les pointeurs consistent en deux valeurs 16-bit.
Que signifient-elles? Eh oui, c'est encore un artéfact étrange de MS-DOS et du 8086.

Le 8086/8088 était un CPU 16-bit, mais était capable d'accèder à des adresses mémoire
sur 20-bit (il était donc capable d'accèder 1MB de mémoire externe).

L'espace de la mémoire externe était divisé entre la \ac{RAM} (max 640KB), la \ac{ROM},
la fenêtre pour la mémoire vidéo, les cartes EMS, \etc{}.

Rappelons que le 8086/8088 était en fait un descendant du CPU 8-bit 8080.

Le 8080 avait un espace mémoire de 16-bit, i.e., il pouvait seulement adresser 64KB.

Et probablement pour une raison de portage de vieux logiciels\footnote{Je ne suis
pas sûr à 100\% de ceci}, le 8086 peut supporter plusieurs fenêtres de 64KB simultanément,
situées dans l'espace d'adresse de 1MB.

C'est une sorte de virtualisation de niveau jouet.
\myindex{x86!\Registers!CS}
\myindex{x86!\Registers!DS}
\myindex{x86!\Registers!ES}
\myindex{x86!\Registers!SS}

Tous les registres 8086 sont 16-bit, donc pour adresser plus, des registres spéciaux
de segment (CS, DS, ES, SS) ont été ajoutés.

Chaque pointeur de 20-bit est calculé en utilisant les valeurs d'une paire de registres,
de segment et d'adresse (p.e. DS:BX) comme suit:

\begin{center}
$real\_address = (segment\_register \ll 4) + address\_register$
\end{center}

Par exemple, la fenêtre de \ac{RAM} graphique (\ac{EGA}, \ac{VGA}) sur les vieux
compatibles IBM-PC a une taille de 64KB.

Pour y accèder, une valeur de 0xA000 doit être stockée dans l'un des registres de
segments, p.e. dans DS.

Ainsi DS:0 adresse le premier octet de la \ac{RAM} vidéo et DS:0xFFFF ~--- le dernier
octet de RAM.

L'adresse réelle sur le bus d'adresse de 20-bit, toutefois, sera dans l'intervalle
0xA0000 à 0xAFFFF.

Le programme peut contenir des adresses codées en dur comme 0x1234, mais l'\ac{OS}
peut avoir besoin de le charger à une adresse arbitraire, donc il recalcule les valeurs
du registre de segment de façon à ce que le programme n'ait pas à se soucier de
l'endroit où il est placé dans la RAM.

Donc, tout pointeur dans le vieil environnement MS-DOS consistait en fait en un segment
d'adresse et une adresse dans ce segment, i.e., deux valeurs 16-bit. 20-bit étaient
suffisants pour cela, cependant nous devions recalculer les adresses très souvent:
passer plus d'information par la pile semblant un meilleur rapport espace/facilité.

À propos, à cause de tout cela, il n'était pas possible d'allouer un bloc de mémoire
plus large que 64KB.

\myindex{Intel!80286}
\myindex{Intel!80386}

Les registres de segment furent réutilisés sur les 80286 comme sélecteurs, servant
a une fonction différente.

\myindex{MS-DOS!DOS extenders}

Lorsque les CPU 80386 et les ordinateurs avec plus de \ac{RAM} ont été introduits,
MS-DOS était encore populaire, donc des extensions pour DOS ont émergés: ils étaient
en fait une étape vers un \ac{OS} \q{sérieux}, basculant le CPU en mode protégé et
fournissant des \ac{API}s mémoire bien meilleures pour les programmes qui devaient
toujours fonctionner sous MS-DOS.

Des examples très populaires incluent DOS/4GW (le jeux vidéo DOOM a été compilé pour
lui), Phar Lap, PMODE.
\par
\myindex{Windows!Windows 3.x}
\myindex{Windows!Win32}

À propos, la même manière d'adresser la mémoire était utilisée dans la série 16-bit
de Windows 3.x, avant Win32.

