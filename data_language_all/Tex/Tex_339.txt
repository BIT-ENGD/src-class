% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Dendritic Cell Algorithm} 
\label{sec:dca}
\index{Dendritic Cell Algorithm}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Dendritic Cell Algorithm, DCA.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
The Dendritic Cell Algorithm belongs to the field of Artificial Immune Systems, and more broadly to the field of Computational Intelligence.
% What are the closely related approaches to a technique?
The Dendritic Cell Algorithm is the basis for extensions such as the Deterministic Dendritic Cell Algorithm (dDCA) \cite{Greensmith2008}.
It is generally related to other Artificial Immune System algorithms such as the Clonal Selection Algorithm (Section~\ref{sec:clonal_selection_algorithm}), and the Immune Network Algorithm (Section~\ref{sec:immune_network_algorithm}).

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
The Dendritic Cell Algorithm is inspired by the Danger Theory of the mammalian immune system, and specifically the role and function of dendritic cells. 
% Which features of the motivating system are relevant to a technique?
The Danger Theory was proposed by Matzinger and suggests that the roles of the acquired immune system is to respond to signals of danger, rather than discriminating self from non-self \cite{Matzinger1994, Matzinger2002}. The theory suggests that antigen presenting cells (such as helper T-cells) activate an alarm signal providing the necessarily co-stimulation of antigen-specific cells to respond. Dendritic cells are a type of cell from the innate immune system that respond to some specific forms of danger signals. There are three main types of dendritic cells: `immature' that collect parts of the antigen and the signals, `semi-mature' that are immature cells that internally decide that the local signals represent safe and present the antigen to T-cells resulting in tolerance, and `mature' cells that internally decide that the local signals represent danger and present the antigen to T-cells resulting in a reactive response.

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
% \subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
% What are the functionalities inferred for a technique from the analogous inspiring system?
% TODO

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The information processing objective of the algorithm is to prepare a set of mature dendritic cells (prototypes) that provide context specific information about how to classify normal and anomalous input patterns.
% What is a techniques plan of action?
This is achieved as a system of three asynchronous processes of 1) migrating sufficiently stimulated immature cells, 2) promoting migrated cells to semi-mature (safe) or mature (danger) status depending on their accumulated response, and 3) labeling observed patterns as safe or dangerous based on the composition of the sub-population of cells that respond to each pattern.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as Pseudocode, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What is the computational recipe for a technique?
% What are the data structures and representations used in a technique?
Algorithm~\ref{alg:dca} provides pseudocode for training a pool of cells in the Dendritic Cell Algorithm, specifically the Deterministic Dendritic Cell Algorithm. Mature migrated cells associate their collected input patterns with anomalies, whereas semi-mature migrated cells associate their collected input patterns as normal.
The resulting migrated cells can then be used to classify input patterns as normal or anomalous. This can be done through sampling the cells and using a voting mechanism, or more elaborate methods such as a `mature context antigen value' (MCAV) that uses $\frac{M}{Ag}$ (where $M$ is the number of mature cells with the antigen and $Ag$ is the sum of the exposures to the antigen by those mature cells), which gives a probability of a pattern being an anomaly.

\begin{algorithm}[ht]
	\SetLine

	% data
	\SetKwData{MaxIterations}{$iterations_{max}$}
	\SetKwData{NumCells}{$cells_{num}$}
	\SetKwData{MigrationThresholdBounds}{$MigrationThresh_{bounds}$}
	\SetKwData{InputPatterns}{InputPatterns}
	\SetKwData{Pattern}{$P_i$}
	\SetKwData{PatternDanger}{$Pi_{danger}$}
	\SetKwData{PatternSafe}{$Pi_{safe}$}
	\SetKwData{PatternAntigen}{$Pi_{antigen}$}
	\SetKwData{K}{$k_i$}
	\SetKwData{CSM}{$cms_i$}
	\SetKwData{Cell}{$Cell_i$}
	\SetKwData{CellLifespan}{$Celli_{lifespan}$}
	\SetKwData{CellMigrationThreshold}{$Celli_{thresh}$}
	\SetKwData{CellType}{$Celli_{type}$}
	\SetKwData{CellCSM}{$Celli_{csm}$}
	\SetKwData{CellK}{$Celli_{k}$}
	\SetKwData{ImmatureCells}{ImmatureCells}
	\SetKwData{MigratedCells}{MigratedCells}
	\SetKwData{Mature}{Mature}
	\SetKwData{Semimature}{Semimature}
	
	% functions
	\SetKwFunction{InitializeCells}{InitializeCells}
	\SetKwFunction{SelectInputPattern}{SelectInputPattern}
	\SetKwFunction{StoreAntigen}{StoreAntigen}
	\SetKwFunction{UpdateCellOutputSignals}{UpdateCellOutputSignals}
	\SetKwFunction{ReInitializeCell}{ReInitializeCell}
	\SetKwFunction{RemoveCell}{RemoveCell}
	\SetKwFunction{CreateNewCell}{CreateNewCell}
	
	% I/O
	\KwIn{\InputPatterns, \MaxIterations, \NumCells, \MigrationThresholdBounds}		
	\KwOut{\MigratedCells}
  
	% Algorithm
	\ImmatureCells $\leftarrow$ \InitializeCells{\NumCells, \MigrationThresholdBounds}\;
	\MigratedCells $\leftarrow$ $\emptyset$\;
	% loop
	\For{$i=1$ \KwTo \MaxIterations} {
		\Pattern $\leftarrow$ \SelectInputPattern{\InputPatterns}\;
		\K $\leftarrow$ (\PatternDanger $-$ 2 $\times$ \PatternSafe)\;
		\CSM $\leftarrow$ (\PatternDanger + \PatternSafe)\;
		\ForEach{\Cell $\in$ \ImmatureCells} {
			\UpdateCellOutputSignals{\Cell, \K, \CSM}\;
			\StoreAntigen{\Cell, \PatternAntigen}\;
			\uIf{\CellLifespan $\leq$ $0$} {
				\ReInitializeCell{\Cell}\;
			}\ElseIf{\CellCSM $\geq$ \CellMigrationThreshold}{
				\RemoveCell{\ImmatureCells, \Cell}\;
				\ImmatureCells $\leftarrow$ \CreateNewCell{\MigrationThresholdBounds}\;				
				\eIf{\CellK $<$ $0$} {
					\CellType $\leftarrow$ \Mature\;
				}{
					\CellType $\leftarrow$ \Semimature\;
				}
				\MigratedCells $\leftarrow$ \Cell\;
			}
		}
	}
	\Return{\MigratedCells}\;
	% end
	\caption{Pseudocode for the Dendritic Cell Algorithm.}
	\label{alg:dca}
\end{algorithm}

% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item The Dendritic Cell Algorithm is not specifically a classification algorithm, it may be considered a data filtering method for use in anomaly detection problems.
	\item The canonical algorithm is designed to operate on a single discrete, categorical or ordinal input and two probabilistic specific signals indicating the heuristic danger or safety of the input.
	\item The \texttt{danger} and \texttt{safe} signals are problem specific signals of the risk that the input pattern is an anomaly or is normal, both typically  $\in [0,100]$.
	\item The \texttt{danger} and \texttt{safe} signals do not have to be reciprocal, meaning they may provide conflicting information.
	\item The system was designed to be used in real-time anomaly detection problems, not just static problem.
	\item Each cells migration threshold is set separately, typically $\in [5,15]$
\end{itemize}

% Code Listing
% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{dca} provides an example of the Dendritic Cell Algorithm implemented in the Ruby Programming Language, specifically the Deterministic Dendritic Cell Algorithm (dDCA).
% problem
The problem is a contrived anomaly-detection problem with ordinal inputs $x\ \in\ [0,50)$ , where values that divide by 10 with no remainder are considered anomalies. Probabilistic safe and danger signal functions are provided, suggesting danger signals correctly with $P(danger)=0.70$, and safe signals correctly with $P(safe)=0.95$.

% algorithm
The algorithm is an implementation of the Deterministic Dendritic Cell Algorithm (dDCA) as described in \cite{Stibor2009, Greensmith2008}, with verification from \cite{Greensmith2006a}. The algorithm was designed to be executed as three asynchronous processes in a real-time or semi-real time environment. For demonstration purposes, the implementation separated out the three main processes and executed the sequentially as a training and cell promotion phase followed by a test (labeling phase).

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Deterministic Dendritic Cell Algorithm in Ruby, label=dca]{../src/algorithms/immune/dendritic_cell_algorithm.rb}

% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% seminal
The Dendritic Cell Algorithm was proposed by Greensmith, Aickelin and Cayzer describing the inspiring biological system and providing experimental results on a classification problem \cite{Greensmith2005}.
% early
This work was followed shortly by a second study into the algorithm by Greensmith, Twycross, and Aickelin, focusing on computer security instances of anomaly detection and classification problems \cite{Greensmith2006}.

% 
% Learn More
% 
\subsubsection{Learn More}
% reviews
The Dendritic Cell Algorithm was the focus of Greensmith's thesis, which provides a detailed discussion of the methods abstraction from the inspiring biological system, and a review of the technique's limitations \cite{Greensmith2007}. 
A formal presentation of the algorithm is provided by Greensmith et al.\ \cite{Greensmith2006a}.
Greensmith and Aickelin proposed the Deterministic Dendritic Cell Algorithm (dDCA) that seeks to remove some of the stochastic decisions from the method, and reduce the complexity and to make it more amenable to analysis \cite{Greensmith2008}.
Stibor et al.\ provide a theoretical analysis of the Deterministic Dendritic Cell Algorithm, considering the discrimination boundaries of single dendrite cells in the system \cite{Stibor2009}. 
% books
Greensmith and Aickelin provide a detailed overview of the Dendritic Cell Algorithm focusing on the information processing principles of the inspiring biological systems as a book chapter \cite{Greensmith2009}.


