% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Extremal Optimization} 
\label{sec:extremal_optimization}
\index{Extremal Optimization}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Extremal Optimization, EO.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
Extremal Optimization is a stochastic search technique that has the properties of being a local and global search method.
% What are the closely related approaches to a technique?
It is generally related to hill-climbing algorithms and provides the basis for extensions such as Generalized Extremal Optimization.

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
Extremal Optimization is inspired by the Bak-Sneppen self-organized criticality model of co-evolution from the field of statistical physics. 
% Which features of the motivating system are relevant to a technique?
The self-organized criticality model suggests that some dynamical systems have a critical point as an attractor, whereby the systems exhibit periods of slow movement or accumulation followed by short periods of avalanche or instability. Examples of such systems include land formation, earthquakes, and the dynamics of sand piles. The Bak-Sneppen model considers these dynamics in co-evolutionary systems and in the punctuated equilibrium model, which is described as long periods of status followed by short periods of extinction and large evolutionary change.

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
\subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
The dynamics of the system result in the steady improvement of a candidate solution with sudden and large crashes in the quality of the candidate solution. These dynamics allow two main phases of activity in the system: 1) to exploit higher quality solutions in a local search like manner, and 2) escape possible local optima with a population crash and explore the search space for a new area of high quality solutions.
% What are the functionalities inferred for a technique from the analogous inspiring system?

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The objective of the information processing strategy is to iteratively identify the worst performing components of a given solution and replace or swap them with other components.
% What is a techniques plan of action?
This is achieved through the allocation of cost to the components of the solution based on their contribution to the overall cost of the solution in the problem domain. Once components are assessed they can be ranked and the weaker components replaced or switched with a randomly selected component.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as Pseudocode, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What is the computational recipe for a technique?
% What are the data structures and representations used in a technique?
Algorithm~\ref{alg:eo} provides a pseudocode listing of the Extremal Optimization algorithm for minimizing a cost function. The deterministic selection of the worst component in the \texttt{Select\-Weak\-Component} function and replacement in the \texttt{Select\-Replacement\-Component} function is classical EO. If these decisions are probabilistic making use of $\tau$ parameter, this is referred to as $\tau$-Extremal Optimization.

\begin{algorithm}[ht]
	\SetLine  

	% data
	\SetKwData{ProblemSize}{ProblemSize}
	\SetKwData{MaxIterations}{$iterations_{max}$}
	\SetKwData{TauParam}{$\tau$}
	\SetKwData{Best}{$S_{best}$}
	\SetKwData{Current}{$S_{current}$}
	\SetKwData{Candidate}{$S_{candidate}$}	
	\SetKwData{CandidateComponents}{$Si_{components}$}
	\SetKwData{Component}{$Component_{i}$}	
	\SetKwData{OtherComponent}{$Component_{j}$}	
	\SetKwData{ComponentCost}{$Component_{i}^{cost}$}
	\SetKwData{RankedComponents}{RankedComponents}

	% functions
	\SetKwFunction{Cost}{Cost}
	\SetKwFunction{CreateInitialSolution}{CreateInitialSolution}
	\SetKwFunction{Rank}{Rank}
	\SetKwFunction{SelectWeakComponent}{SelectWeakComponent}
	\SetKwFunction{SelectReplacementComponent}{SelectReplacementComponent}
	\SetKwFunction{Replace}{Replace}
	
	% I/O
	\KwIn{\ProblemSize, \MaxIterations, \TauParam}		
	\KwOut{\Best}
  
	% Algorithm
	\Current $\leftarrow$ \CreateInitialSolution{\ProblemSize}\;
	\Best $\leftarrow$ \Current\;
	% loop
	\For{$i=1$ \KwTo \MaxIterations} {
		\ForEach{\Component $\in$ \Current}{
			\ComponentCost $\leftarrow$ \Cost{\Component, \Current}\;
		}
		\RankedComponents $\leftarrow$ \Rank{\CandidateComponents}
		
		\Component $\leftarrow$ \SelectWeakComponent{\RankedComponents, \Component, \TauParam}\;
		\OtherComponent $\leftarrow$ \SelectReplacementComponent{\RankedComponents, \TauParam}\;
		\Candidate $\leftarrow$ \Replace{\Current, \Component, \OtherComponent}\;
	
		\If{\Cost{\Candidate} $\leq$ \Cost{\Best}} {
			\Best $\leftarrow$ \Candidate\;
		}
	}
	\Return{\Best}\;
	% end
	\caption{Pseudocode for Extremal Optimization.}
	\label{alg:eo}
\end{algorithm}

% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item Extremal Optimization was designed for combinatorial optimization problems, although variations have been applied to continuous function optimization.
	\item The selection of the worst component and the replacement component each iteration can be deterministic or probabilistic, the latter of which is referred to as $\tau$-Extremal Optimization given the use of a $\tau$ parameter.
	\item The selection of an appropriate scoring function of the components of a solution is the most difficult part in the application of the technique.
	\item For $\tau$-Extremal Optimization, low $\tau$ values are used (such as $\tau \in [1.2,1.6]$) have been found to be effective for the TSP.
\end{itemize}

% Code Listing
% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{extremal_optimization} provides an example of the Extremal Optimization algorithm implemented in the Ruby Programming Language. 
% problem
The algorithm is applied to the Berlin52 instance of the Traveling Salesman Problem (TSP), taken from the TSPLIB. The problem seeks a permutation of the order to visit cities (called a tour) that minimizes the total distance traveled. The optimal tour distance for Berlin52 instance is 7542 units.

% algorithm
The algorithm implementation is based on the seminal work by Boettcher and Percus \cite{Boettcher1999}. A solution is comprised of a permutation of city components. Each city can potentially form a connection to any other city, and the connections to other cities ordered by distance may be considered its neighborhood. For a given candidate solution, the city components of a solution are scored based on the neighborhood rank of the cities to which they are connected: $fitness_k \leftarrow \frac{3}{r_i + r_j}$, where $r_i$ and $r_j$ are the neighborhood ranks of cities $i$ and $j$ against city $k$. A city is selected for modification probabilistically where the probability of selecting a given city is proportional to $n_i^{-\tau}$, where $n$ is the rank of city $i$. The longest connection is broken, and the city is connected with another neighboring city that is also probabilistically selected.

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Extremal Optimization in Ruby, label=extremal_optimization]{../src/algorithms/physical/extremal_optimization.rb}

% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% seminal
Extremal Optimization was proposed as an optimization heuristic by Boettcher and Percus applied to graph partitioning and the Traveling Salesman Problem \cite{Boettcher1999}. The approach was inspired by the Bak-Sneppen self-organized criticality model of co-evolution \cite{Bak1987, Bak1993}.

% 
% Learn More
% 
\subsubsection{Learn More}
% reviews
A number of detailed reviews of Extremal Optimization have been presented, including a review and studies by Boettcher and Percus \cite{Boettcher2000}, an accessible review by Boettcher \cite{Boettcher2000a}, and a focused study on the Spin Glass problem by Boettcher and Percus \cite{Boettcher2001}.
% books


