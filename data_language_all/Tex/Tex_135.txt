\documentclass[12pt]{article}
\usepackage[margin=1in]{geometry}
\usepackage{setspace}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{amsmath}
\usepackage{color}
\usepackage{hyperref}
\usepackage{multicol}
\usepackage{gensymb}
\usepackage{framed}
\usepackage[dvipsnames]{xcolor}
\usepackage{xcolor}
\usepackage{wrapfig}
\usepackage{float}
\usepackage{fancyhdr}
\usepackage{verbatim}
\pagestyle{fancy}
\lfoot{\textbf{Open Source Rover Software Install}}
\rfoot{Page \thepage}
\lhead{\textbf{\leftmark}}
\rhead{\textbf{\rightmark}}
\cfoot{}
\renewcommand{\footrulewidth}{1.8pt}
\renewcommand{\headrulewidth}{1.8pt}
\doublespacing
\setlength{\parindent}{1cm}

\begin{document}

\title{Open Source Rover: Software Instructions}
\author{Authors: Michael Cox, Eric Junkins, Olivia Lofaro}

\makeatletter         
\def\@maketitle{
\begin{center}	
	\makebox[\textwidth][c]{ \includegraphics[width=0.8\paperwidth]{"Pictures/software title".png}}
	{\Huge \bfseries \sffamily \@title }\\[3ex] 
	{\Large\sffamily \@author}\\[3ex] 
	\includegraphics[width=.85\linewidth]{"Pictures/JPL logo".png}
\end{center}}
\makeatother

\maketitle

\noindent {\footnotesize Reference herein to any specific commercial product, process, or service by trade name, trademark, manufacturer, or otherwise, does not constitute or imply its endorsement by the United States Government or the Jet Propulsion Laboratory, California Institute of Technology.  \textcopyright  2018 California Institute of Technology. Government sponsorship acknowledged.}

% Introduction
\newpage


\tableofcontents

\newpage


\section{Setting up the Raspberry Pi 3}
In this section, we'll go over setting up the Raspberry Pi and how to set up all the code that will run the rover. We will also set up the bluetooth pairing from the android device.
\subsection{Getting the Raspberry Pi online}

We recommend following the "Getting started with Raspberry Pi" tutorial at:

\begin{enumerate}
	\item[] \href{https://projects.raspberrypi.org/en/projects/raspberry-pi-getting-started}{https://projects.raspberrypi.org/en/projects/raspberry-pi-getting-started}
\end{enumerate}

Once you finish the above tutorial, you should be able to boot your Raspberry Pi and see a desktop.

\subsection{Downloading the Rover Code}
On the Raspberry Pi, open up a terminal \textbf{(ctl + alt + t)} and then type the following commands\footnote{In this document, terminal commands will be \colorbox{lightgray}{highlighted}.}:

\begin{itemize}
	\item[] \colorbox{lightgray}{cd /home/pi}
	\item[] \colorbox{lightgray}{git clone https://github.com/nasa-jpl/osr-rover-code osr}
\end{itemize}

\subsubsection{Installing packages}
Run each of the commands below to install the packages you will need to use Bluetooth communication on the Raspberry Pi. Open up a terminal on the Raspberry Pi  and type the following commands:
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo apt-get update}
	\item[] \colorbox{lightgray}{sudo apt-get upgrade}
	\item[] \colorbox{lightgray}{sudo apt-get install python-bluez}
	\item[] \colorbox{lightgray}{sudo apt-get install python-pip python-dev ipython}
	\item[] \colorbox{lightgray}{sudo apt-get install bluetooth libbluetooth-dev}
	\item[] \colorbox{lightgray}{sudo pip install pybluez}
	\item[] \colorbox{lightgray}{sudo systemctl start bluetooth}

\end{itemize}

\noindent Now you need modify a line of code in the Bluetooth service file. Start by typing:
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo nano /lib/systemd/system/bluetooth.service}
\end{itemize}
\noindent Add "-C" after 'bluetoothd' on line 9. The file should now look like the Figure \ref{bs}:

\begin{figure}[H]
 	\centering
	\includegraphics[width=1\textwidth]{"Pictures/bluetooth service".PNG}
	\caption{bluetooth.service File}
	\label{bs}
\end{figure}
	
\noindent Once you have made this change, exit and save (ctrl + x, y, enter), and then reboot the Pi:

\begin{itemize}
	\item[] \colorbox{lightgray}{sudo reboot}
\end{itemize}

\noindent Once the Pi has rebooted, open up a terminal and type:
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo sdptool add SP}
\end{itemize}


\section{Control Method}

The first thing to do is select which control method you want to use. There are two methods that are already built into the code to control the rover; one is a smartphone app run on Android devices, the other is using a wireless Xbox controller. 

\begin{figure}[H]
 	\centering
	\includegraphics[width=.7\textwidth]{"Pictures/control".PNG}
 	\caption{Control Methods}
	\label{controls}
\end{figure}

\noindent Any way that you can communicate to a Raspberry Pi is a way that you can control the rover, and we fully encourage you to find and develop other methods of remote control. For the methods above, if you decide to use an Android device you will need to follow some steps to get the app loaded on your phone. We provide the source code for the app so you can edit and change things on your own; the next section will walk you through getting the source code for the Android app.  If you wish to use the Xbox controller to control your rover, skip to step 2.2.

\subsection{Android App Control}
If you choose to control the rover from an Android App you'll need to setup Bluetooth communication between the Raspberry Pi and Android device. There are a few different methods of doing this; we'll be using a terminal interface.

\subsubsection{Naming the Bluetooth Device}

On the Raspberry Pi, create a file that will name the Bluetooth device your desired name\footnote{This device name must also be updated in the Android App so that the App finds the correct device. Make sure to keep track of this name}. You can do this by running the following in a terminal: 
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo nano /etc/machine-info} 
\end{itemize}
\noindent Name your device by replacing deviceName with whatever you want the name of your Raspberry Pi to be (we suggest something like "openSourceRover"):

\begin{figure}[H]
 	\centering
	\includegraphics[width=.5\textwidth]{"Pictures/devicename".PNG}
\end{figure}

\noindent Now edit the /etc/bluetooth/main.conf file: Uncomment the "Name=" line and add your deviceName: 
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo nano /etc/bluetooth/main.conf} 
\end{itemize}

\noindent The first few lines of this file should look like Figure \ref{conf}.

\begin{figure}[H]
 	\centering
	\includegraphics[width=1\textwidth]{"Pictures/mainconf".PNG}
	\caption{bluetooth main.conf File}
	\label{conf}
\end{figure}

\subsubsection{Pairing Bluetooth from Command Line}
We're now ready to pair the Raspberry Pi with your Android device\footnote{We followed the tutorial at \href{https://www.cnet.com/how-to/how-to-setup-bluetooth-on-a-raspberry-pi-3/}{https://www.cnet.com/how-to/how-to-setup-bluetooth-on-a-raspberry-pi-3/} to learn how to pair the Pi with an Android device.}.

Have your Android device discoverable and searching for Bluetooth\footnote{The process for making your phone or tablet discoverable and searching for bluetooth is different for different devices. Feel free to search the web for instructions on how to do this on your specific device.}. Begin by in a terminal starting bluetoothctl:
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo bluetoothctl}
\end{itemize}

\noindent You are now in the bluetoothctl interface. Run the following commands:

\begin{itemize}
	\item[] \colorbox{lightgray}{agent on}
	\item[] \colorbox{lightgray}{default-agent}
	\item[] \colorbox{lightgray}{scan on}
\end{itemize}

\noindent Once your find your Android device, you'll need to pair to it using its address:

\begin{itemize} 	
	\item[] \colorbox{lightgray}{pair XX:XX:XX:XX:XX:XX} 
	\item[] \colorbox{lightgray}{yes}
\end{itemize}
	
\noindent You'll be prompted on the Android device asking to accept the pairing. Select Okay. Now that your Android is paired with the Pi, exit bluetoothctl by running the following on the Pi:
\begin{itemize}
	\item[] \colorbox{lightgray}{quit} 
\end{itemize}

\subsubsection{Downloading the Android App}

To begin, you need to download Android Studio which will allow you to put the source code onto the Android device as an app.  You need to install Android Studio on a laptop or desktop computer, NOT the Raspberry Pi.  Download and install Android Studio from 

\begin{itemize}
	\item \href{https://developer.android.com/studio/index.html}{https://developer.android.com/studio/index.html}
\end{itemize}

Android Studio provides lots of support information and forums to help you install the software and then install apps on your Android. Consult the Android Studio documentation if you have any issues installing Android Studio or loading the app onto your Android device.

\noindent In order to allow your Android device to accept the source code as an app, you'll need to enable USB debugging on the Android. This process varies across different version of phones and tablets. The best way to figure out how to turn on USB debugging for your device is to search the web for "android USB debugging" for your specific device and follow the steps that you find.

\bigskip

\noindent To get the source code for the Android app, you can navigate to the following URL on your laptop/desktop:

\begin{itemize}
	\item[] \href{https://github.com/nasa-jpl/osr-android-app}{https://github.com/nasa-jpl/osr-android-app}
\end{itemize}

\noindent and under the Clone or Download button click Download ZIP and extract the files in that manner. 

If you wish, you can instead run the following command FROM YOUR LAPTOP/DESKTOP in a terminal from the location on your laptop/desktop where you want to have the source code:

\begin{itemize}
	\item[] \colorbox{lightgray}{git clone https://github.com/nasa-jpl/osr-android-app}
\end{itemize}

\bigskip

\noindent Now, open up the source code that you just downloaded in Android Studio. In order for the App to communicate to the Raspberry Pi, you'll need to make sure it selects the correct Bluetooth device. On line 198 in the MainActivity.java file, change the variable \textit{connection\_name} to match whatever you named the Raspberry Pi in the previous section. Now hit run in the upper panel, and the Android app should build and load onto your Android device!

\begin{figure}[H]
 	\centering
	\includegraphics[width=.7\textwidth]{"Pictures/autorun".PNG}
 	\caption{}
	\label{}
\end{figure}


\subsection{Init Script}
We want the rover's code to automatically run whenever the pi boots up. We'll accomplish this by adding it to an init script, /etc/rc.local which is automatically run every time the Pi boots. In a terminal (now back on your Raspberry Pi), run:
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo nano /etc/rc.local}
\end{itemize}
\noindent The lines we need to add will be added after the "if" block, as shown in Figure \ref{init}. This example is to run with the LED screen and be controlled from the Android app:

\begin{verbatim}
sudo python /home/pi/osr/led/screen.py &
sleep 10
sudo python /home/pi/osr/rover/main.py -s -b &
\end{verbatim}

\begin{figure}[H]
 	\centering
	\includegraphics[width=1\textwidth]{"Pictures/init".PNG}
 	\caption{/etc/rc.local script.  Note that in this image, we set the \colorbox{yellow}{-b} flag as an example of how to control the rover with the android app}
	\label{init}
\end{figure}

The command line arguments that the main.py script accepts are the following:

\begin{itemize}
	\item[] \textbf{-s} : Attempts to connect to the Unix Socket running in the LED screen script to send commands between the two processes
	\item[] \textbf{-b} : Initialized a bluetooth socket server to accept a connection for the Android app
	\item[] \textbf{-x} : Attempts to pull joystick data from an xbox controller connected via USB wireless receiver
\end{itemize}

If you wish to run your rover without the LED screen, delete line 20 and 21 from /etc/rc.local (those lines start the screen.py script) and remove the -s flag from the line that starts the main.py script.

\subsection{Setting up serial communication}	

In this project we will be using serial communication to talk to the motor controllers. Serial communication is a communication protocol that describes how bits of information are transferred between one device and another. You can find more information on serial communication at:
\begin{itemize}
	\item \href{https://learn.sparkfun.com/tutorials/serial-communication}{https://learn.sparkfun.com/tutorials/serial-communication}
\end{itemize}

\noindent Run the following commands on the Pi to setup/enable the serial communication for the RoboClaws:
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo raspi-config}
\end{itemize}

\noindent In the raspi-config menu, set the following options:
\begin{itemize}
	\item[-]  Interface Options $-> $ Serial 
	\item[-] Would you like a login shell to be accessible over serial? $->$ No
	\item[-] Would you like the serial port hardware to be enabled? $->$ Yes
	\item[-] Would you like to reboot now? $->$ Yes
\end{itemize} 
\noindent Once the Pi reboots, open up a terminal again and look at the serial devices:
\begin{itemize}
	\item[] \colorbox{lightgray}{ls -l /dev/serial*}
\end{itemize}
Make sure that this shows serial0 -$>$ ttyS0 . If it does not, ensure that you have followed every step in this tutorial in order. Next, edit the /boot/cmdline.txt file:
\begin{itemize}
	\item [] \colorbox{lightgray}{sudo nano /boot/cmdline.txt}
\end{itemize}

\noindent Change \textbf{ONLY} the part with "console = ...." to read "console=tty1" and remove any other instance where it references console. The first bit of that line should look similar to the Figure \ref{console}: \footnote{It is okay if it does not exactly match what we show here; the important part is that the "console=tty1" flag matches.}

\begin{figure}[H]
 	\centering
	\includegraphics[width=1\textwidth]{"Pictures/console".PNG}
 	\caption{boot/cmdline.txt File}
	\label{console}
\end{figure}

\noindent Below is a link to help with the above steps if you need additional help:
\begin{itemize}
	\item \href{https://spellfoundry.com/2016/05/29/configuring-gpio-serial-port-raspbian-jessie-including-pi-3/}{https://spellfoundry.com/2016/05/29/configuring-gpio-serial-port-raspbian-jessie-including-pi-3/}. 
\end{itemize}
\noindent Once you've completed the above steps, reboot the Pi.
\begin{itemize}
	\item[] \colorbox{lightgray}{sudo reboot}
\end{itemize}


\section{Test files}
There are a few files that will help you test the robot before trying to fully drive it. Having all these tests working does not fully guarantee everything on the rover will work, but they should help with the testing and debugging process.

\subsection{Serial Test}

Under the 'rover' folder there is a script called \textit{serialTest.py}. This will help you test the serial communication of the Raspberry Pi. To begin, use a jumper wire to connect the GPIO14 and GPIO15 pins. 

\begin{figure}[H]
 	\centering
	\includegraphics[width=.7\textwidth]{"Pictures/rpi pins".PNG}
 	\caption{Raspberry Pi pinout}
	\label{rpi pin}
\end{figure}


Then, run the script from a terminal:
\begin{itemize}
	\item[] \colorbox{lightgray}{python /home/pi/osr/rover/serialTest.py}
\end{itemize}

If the serial communication is working properly, this script will let you know that it successfully read data over the serial pins. If it does not, verify that you have followed all the steps in this document to get serial communication working, and that you are connecting GPIO pins 14 and 15 together. 
\end{document}