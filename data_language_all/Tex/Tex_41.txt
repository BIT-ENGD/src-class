

\section{Data IO (Python functions) }\label{data-io-python-functions}

\subsection{Contents}\label{contents}

\subsubsection{\texorpdfstring{\protect\hyperlink{AUTOGENERATED-data-io--python-functions-}{Data
IO (Python
functions)}}{Data IO (Python functions)}}\label{data-io-python-functions-1}

\begin{itemize}
\tightlist
\item
  \protect\hyperlink{AUTOGENERATED-data-io--python-functions-}{Data IO
  (Python Functions)}
\item
  \protect\hyperlink{TFRecordWriter}{\texttt{class\ tf.python\_io.TFRecordWriter}}
\item
  \protect\hyperlink{tfux5frecordux5fiterator}{\texttt{tf.python\_io.tf\_record\_iterator(path)}}
\item
  \protect\hyperlink{AUTOGENERATED-tfrecords-format-details}{TFRecords
  Format Details}
\end{itemize}

\subsection{Data IO (Python Functions)
}\label{data-io-python-functions-2}

A TFRecords file represents a sequence of (binary) strings. The format
is not random access, so it is suitable for streaming large amounts of
data but not suitable if fast sharding or other non-sequential access is
desired.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.python\_io.TFRecordWriter}
}{class tf.python\_io.TFRecordWriter }}\label{class-tf.pythonux5fio.tfrecordwriter}

A class to write records to a TFRecords file.

This class implements \texttt{\_\_enter\_\_} and \texttt{\_\_exit\_\_},
and can be used in \texttt{with} blocks like a normal file.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.python\_io.TFRecordWriter.\_\_init\_\_(path)}
}{tf.python\_io.TFRecordWriter.\_\_init\_\_(path) }}\label{tf.pythonux5fio.tfrecordwriter.ux5fux5finitux5fux5fpath}

Opens file \texttt{path} and creates a \texttt{TFRecordWriter} writing
to it.

\subparagraph{Args: }\label{args}

\begin{itemize}
\tightlist
\item
  \texttt{path}: The path to the TFRecords file.
\end{itemize}

\subparagraph{Raises: }\label{raises}

\begin{itemize}
\tightlist
\item
  \texttt{IOError}: If \texttt{path} cannot be opened for writing.
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.python\_io.TFRecordWriter.write(record)}
}{tf.python\_io.TFRecordWriter.write(record) }}\label{tf.pythonux5fio.tfrecordwriter.writerecord}

Write a string record to the file.

\subparagraph{Args: }\label{args-1}

\begin{itemize}
\tightlist
\item
  \texttt{record}: str
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.python\_io.TFRecordWriter.close()}
}{tf.python\_io.TFRecordWriter.close() }}\label{tf.pythonux5fio.tfrecordwriter.close}

Close the file.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{tf.python\_io.tf\_record\_iterator(path)}
}{tf.python\_io.tf\_record\_iterator(path) }}\label{tf.pythonux5fio.tfux5frecordux5fiteratorpath}

An iterator that read the records from a TFRecords file.

\subparagraph{Args: }\label{args-2}

\begin{itemize}
\tightlist
\item
  \texttt{path}: The path to the TFRecords file.
\end{itemize}

\subparagraph{Yields: }\label{yields}

Strings.

\subparagraph{Raises: }\label{raises-1}

\begin{itemize}
\tightlist
\item
  \texttt{IOError}: If \texttt{path} cannot be opened for reading.
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{TFRecords Format Details
}\label{tfrecords-format-details}

A TFRecords file contains a sequence of strings with CRC hashes. Each
record has the format

\begin{verbatim}
uint64 length
uint32 masked_crc32_of_length
byte   data[length]
uint32 masked_crc32_of_data
\end{verbatim}

and the records are concatenated together to produce the file. The
CRC32s are
\href{https://en.wikipedia.org/wiki/Cyclic_redundancy_check}{described
here}, and the mask of a CRC is

\begin{verbatim}
masked_crc = ((crc >> 15) | (crc << 17)) + 0xa282ead8ul
\end{verbatim}

