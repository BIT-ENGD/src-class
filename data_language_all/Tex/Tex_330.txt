% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Gene Expression Programming} 
\label{sec:gene_expression_programming}
\index{Gene Expression Programming}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Gene Expression Programming, GEP.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
Gene Expression Programming is a Global Optimization algorithm and an Automatic Programming technique, and it is an instance of an Evolutionary Algorithm from the field of Evolutionary Computation.
% What are the closely related approaches to a technique?
It is a sibling of other Evolutionary Algorithms such as a the Genetic Algorithm (Section~\ref{sec:genetic_algorithm}) as well as other Evolutionary Automatic Programming techniques such as Genetic Programming (Section~\ref{sec:genetic_programming}) and Grammatical Evolution (Section~\ref{sec:grammatical_evolution}).

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
Gene Expression Programming is inspired by the replication and expression of the DNA molecule, specifically at the gene level. 
% expression
The expression of a gene involves the transcription of its DNA to RNA which in turn forms amino acids that make up proteins in the phenotype of an organism. 
% replication
The DNA building blocks are subjected to mechanisms of variation (mutations such as coping errors) as well as recombination during sexual reproduction.

% Which features of the motivating system are relevant to a technique?

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
\subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
% What are the functionalities inferred for a technique from the analogous inspiring system?
Gene Expression Programming uses a linear genome as the basis for genetic operators such as mutation, recombination, inversion, and transposition. The genome is comprised of chromosomes and each chromosome is comprised of genes that are translated into an expression tree to solve a given problem. The robust gene definition means that genetic operators can be applied to the sub-symbolic representation without concern for the structure of the resultant gene expression, providing separation of genotype and phenotype.

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The objective of the Gene Expression Programming algorithm is to improve the adaptive fit of an expressed program in the context of a problem specific cost function.
% What is a techniques plan of action?
This is achieved through the use of an evolutionary process that operates on a sub-symbolic representation of candidate solutions using surrogates for the processes (descent with modification) and mechanisms (genetic recombination, mutation, inversion, transposition, and gene expression) of evolution.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as pseudo code, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What are the data structures and representations used in a technique?
A candidate solution is represented as a linear string of symbols called Karva notation or a K-expression, where each symbol maps to a function or terminal node. The linear representation is mapped to an expression tree in a breadth-first manner. 
A K-expression has fixed length and is comprised of one or more sub-expressions (genes), which are also defined with a fixed length. A gene is comprised of two sections, a head which may contain any function or terminal symbols, and a tail section that may only contain terminal symbols. Each gene will always translate to a syntactically correct expression tree, where the tail portion of the gene provides a genetic buffer which ensures closure of the expression.

% What is the computational recipe for a technique?
Algorithm~\ref{alg:gene_expression_programming} provides a pseudocode listing of the Gene Expression Programming algorithm for minimizing a cost function. 

\begin{algorithm}[htp]
	\SetLine  

	% data
	\SetKwData{Best}{$S_{best}$}
	\SetKwData{ProbabilityMutate}{$P_{mutation}$}
	\SetKwData{ProbabilityCrossover}{$P_{crossover}$}
	\SetKwData{Parents}{Parents}
	\SetKwData{Children}{Children}
	\SetKwData{Population}{Population}
	\SetKwData{PopulationSize}{$Population_{size}$}
	\SetKwData{ParentOne}{$Parent_{1}$}
	\SetKwData{ParentTwo}{$Parent_{2}$}
	\SetKwData{Solution}{$S_{i}$}
	\SetKwData{SolutionGenome}{$Si_{genome}$}
	\SetKwData{SolutionProgram}{$Si_{program}$}
	\SetKwData{SolutionCost}{$Si_{cost}$}	
	\SetKwData{Grammar}{Grammar}
	\SetKwData{HeadLength}{$Head_{length}$}
	\SetKwData{TailLength}{$Tail_{length}$}
	
	% functions
	\SetKwFunction{InitializePopulation}{InitializePopulation}  
	\SetKwFunction{EvaluatePopulation}{EvaluatePopulation} 
	\SetKwFunction{GetBestSolution}{GetBestSolution} 
	\SetKwFunction{SelectParents}{SelectParents}
	\SetKwFunction{Replace}{Replace}
	\SetKwFunction{StopCondition}{StopCondition}
	\SetKwFunction{Crossover}{Crossover}
	\SetKwFunction{Mutate}{Mutate}
	\SetKwFunction{Map}{DecodeBreadthFirst}
	\SetKwFunction{Execute}{Execute}
  
	% I/O
	\KwIn{\Grammar, \PopulationSize, \HeadLength, \TailLength, \ProbabilityCrossover, \ProbabilityMutate}		
	\KwOut{\Best}
  	% Algorithm
	% initialize	
	\Population $\leftarrow$ \InitializePopulation{\PopulationSize, \Grammar, \HeadLength, \TailLength}\;
	% evaluate
	\ForEach{\Solution $\in$ \Population}{
		\SolutionProgram $\leftarrow$ \Map{\SolutionGenome, \Grammar}\;
		\SolutionCost $\leftarrow$ \Execute{\SolutionProgram}\;
	}
	% best
	\Best $\leftarrow$ \GetBestSolution{\Population}\;
	% loop
	\While{$\neg$\StopCondition{}} {
		% select
		\Parents $\leftarrow$ \SelectParents{\Population, \PopulationSize}\;
		% recombine
		\Children $\leftarrow \emptyset$\;
		\ForEach{\ParentOne, \ParentTwo $\in$ \Parents}{
			% crossover
			\SolutionGenome $\leftarrow$ \Crossover{\ParentOne, \ParentTwo, \ProbabilityCrossover}\;
			% mutation
			\SolutionGenome $\leftarrow$ \Mutate{\SolutionGenome, \ProbabilityMutate}\;
			% add
			\Children $\leftarrow$ \Solution\;
		}
		% evaluate
		\ForEach{\Solution $\in$ \Children}{
			\SolutionProgram $\leftarrow$ \Map{\SolutionGenome, \Grammar}\;
			\SolutionCost $\leftarrow$ \Execute{\SolutionProgram}\;
		}
		% replace
		\Population $\leftarrow$ \Replace{\Population, \Children}\;
		% best
		\Best $\leftarrow$ \GetBestSolution{\Children}\;
	}
	\Return{\Best}\;
	% end
	\caption{Pseudocode for GEP.}
	\label{alg:gene_expression_programming}
\end{algorithm}


% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item The length of a chromosome is defined by the number of genes, where a gene length is defined by $h + t$. The $h$ is a user defined parameter (such as 10), and $t$ is defined as $t = h (n-1) + 1$, where the $n$ represents the maximum arity of functional nodes in the expression (such as 2 if the arithmetic functions $\times, \div, -, +$ are used).
	\item The mutation operator substitutes expressions along the genome, although must respect the gene rules such that function and terminal nodes are mutated in the head of genes, whereas only terminal nodes are substituted in the tail of genes.
	\item Crossover occurs between two selected parents from the population and can occur based on a one-point cross, two point cross, or a gene-based approach where genes are selected from the parents with uniform probability.
	\item An inversion operator may be used with a low probability that reverses a small sequence of symbols (1-3) within a section of a gene (tail or head). 
	\item A transposition operator may be used that has a number of different modes, including: duplicate a small sequences (1-3) from somewhere on a gene to the head, small sequences on a gene to the root of the gene, and moving of entire genes in the chromosome. In the case of intra-gene transpositions, the sequence in the head of the gene is moved down to accommodate the copied sequence and the length of the head is truncated to maintain consistent gene sizes.
	\item A `?' may be included in the terminal set that represents a numeric constant from an array that is evolved on the end of the genome. The constants are read from the end of the genome and are substituted for `?' as the expression tree is created (in breadth first order). Finally the numeric constants are used as array indices in yet another chromosome of numerical values which are substituted into the expression tree.
	\item Mutation is low (such as $\frac{1}{L}$), selection can be any of the classical approaches (such as roulette wheel or tournament), and crossover rates are typically high (0.7 of offspring)
	\item Use multiple sub-expressions linked together on hard problems when one gene is not sufficient to address the problem. The sub-expressions are linked using link expressions which are function nodes that are either statically defined (such as a conjunction) or evolved on the genome with the genes.
\end{itemize}

% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{gene_expression_programming} provides an example of the Gene Expression Programming algorithm implemented in the Ruby Programming Language based on the seminal version proposed by Ferreira \cite{Ferreira2001}.
% problem
The demonstration problem is an instance of symbolic regression $f(x)=x^4+x^3+x^2+x$, where $x\in[1,10]$. The grammar used in this problem is: Functions: $F=\{+,-,\div,\times,\}$ and Terminals: $T=\{x\}$.

% algorithm
The algorithm uses binary tournament selection, uniform crossover and point mutations. The K-expression is decoded to an expression tree in a breadth-first manner, which is then parsed depth first as a Ruby expression string for display and direct evaluation.
Solutions are evaluated by generating a number of random samples from the domain and calculating the mean error of the program to the expected outcome. Programs that contain a single term or those that return an invalid (NaN) or infinite result are penalized with an enormous error value.

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Gene Expression Programming in Ruby, label=gene_expression_programming]{../src/algorithms/evolutionary/gene_expression_programming.rb}


% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% seminal
The Gene Expression Programming algorithm was proposed by Ferreira in a paper that detailed the approach, provided a careful walkthrough of the process and operators, and demonstrated the the algorithm on a number of benchmark problem instances including symbolic regression \cite{Ferreira2001}.

% 
% Learn More
% 
\subsubsection{Learn More}
% reviews
Ferreira provided an early and detailed introduction and overview of the approach as book chapter, providing a step-by-step walkthrough of the procedure and sample applications \cite{Ferreira2002}. A more contemporary and detailed introduction is provided in a later book chapter \cite{Ferreira2005}.
% books
Ferreira published a book on the approach in 2002 covering background, the algorithm, and demonstration applications which is now in its second edition \cite{Ferreira2006}.


