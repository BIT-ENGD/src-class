% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Negative Selection Algorithm} 
\label{sec:negative_selection_algorithm}
\index{Negative Selection Algorithm}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Negative Selection Algorithm, NSA.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
The Negative Selection Algorithm belongs to the field of Artificial Immune Systems.
% What are the closely related approaches to a technique?
The algorithm is related to other Artificial Immune Systems such as the Clonal Selection Algorithm (Section~\ref{sec:clonal_selection_algorithm}), and the Immune Network Algorithm (Section~\ref{sec:immune_network_algorithm}).

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
The Negative Selection algorithm is inspired by the self-nonself discrimination behavior observed in the mammalian acquired immune system.
% Which features of the motivating system are relevant to a technique?
The clonal selection theory of acquired immunity accounts for the adaptive behavior of the immune system including the ongoing selection and proliferation of cells that select-for potentially harmful (and typically foreign) material in the body.
An interesting aspect of this process is that it is responsible for managing a population of immune cells that do not select-for the tissues of the body, specifically it does not create self-reactive immune cells known as auto-immunity. 
This problem is known as `self-nonself discrimination' and it involves the preparation and on going maintenance of a repertoire of immune cells such that none are auto-immune. This is achieved by a negative selection process that selects-for and removes those cells that are self-reactive during cell creation and cell proliferation. This process has been observed in the preparation of T-lymphocytes, na\"ive versions of which are matured using both a positive and negative selection process in the thymus.

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
\subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
% What are the functionalities inferred for a technique from the analogous inspiring system?
The self-nonself discrimination principle suggests that the anticipatory guesses made in clonal selection are filtered by regions of infeasibility (protein conformations that bind to self-tissues). Further, the self-nonself immunological paradigm proposes the modeling of the unknown domain (encountered pathogen) by modeling the complement of what is known. This is unintuitive as the natural inclination is to categorize unknown information by what is different from that which is known, rather than guessing at the unknown information and filtering those guesses by what is known. 

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The information processing principles of the self-nonself discrimination process via negative selection are that of a anomaly and change detection systems that model the anticipation of variation from what is known.
% What is a techniques plan of action?
The principle is achieved by building a model of changes, anomalies, or unknown (non-normal or non-self) data by generating patterns that do not match an existing corpus of available (self or normal) patterns. The prepared non-normal model is then used to either monitor the existing normal data or streams of new data by seeking matches to the non-normal patterns.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as Pseudocode, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What is the computational recipe for a technique?
% What are the data structures and representations used in a technique?
Algorithm~\ref{alg:detector_gen} provides a pseudocode listing of the detector generation procedure for the Negative Selection Algorithm. Algorithm~\ref{alg:detector_app} provides a pseudocode listing of the detector application procedure for the Negative Selection Algorithm.

\begin{algorithm}[ht]
	\SetLine  
  % data
  \SetKwData{Repertoire}{Repertoire}
  \SetKwData{SelfData}{SelfData}
	\SetKwData{Detectors}{Detectors}
	\SetKwData{CurrentDetector}{$Detector_{i}$}
	 % functions
  \SetKwFunction{StopCondition}{StopCondition}
	\SetKwFunction{GenerateRandomDetectors}{GenerateRandomDetectors}
	\SetKwFunction{Matches}{Matches}
	% i/o
  \KwIn{\SelfData}
  \KwOut{\Repertoire}
	% algorithm
	\Repertoire $\leftarrow \emptyset$\;
	\While{$\neg$\StopCondition{}}{
		\Detectors $\leftarrow$ \GenerateRandomDetectors{}\;
		\ForEach{\CurrentDetector $\in$ \Repertoire}{
			\If{$\neg$\Matches{\CurrentDetector, \SelfData}}{
				\Repertoire $\leftarrow$ \CurrentDetector\;
			}
		}
	}
	\Return{\Repertoire}\;	
	\caption{Pseudocode for detector generation.}
	\label{alg:detector_gen}
\end{algorithm}

\begin{algorithm}[ht]
	\SetLine  
  % data
  \SetKwData{Repertoire}{Repertoire}
  \SetKwData{InputSamples}{InputSamples}
	\SetKwData{Detectors}{Detectors}
	\SetKwData{CurrentDetector}{$Detector_{i}$}
	\SetKwData{CurrentInputSample}{$Input_{i}$}
	\SetKwData{InputSampleClassification}{$Inputi_{class}$}
	 % functions
  \SetKwFunction{StopCondition}{StopCondition}
	\SetKwFunction{GenerateRandomDetectors}{GenerateRandomDetectors}
	\SetKwFunction{Matches}{Matches}
	\SetKwFunction{Break}{Break}
	% i/o
  \KwIn{\InputSamples, \Repertoire}
	% algorithm
	\For{\CurrentInputSample $\in$ \InputSamples}{
		\InputSampleClassification $\leftarrow$ ``non-self''\;
		\ForEach{\CurrentDetector $\in$ \Repertoire}{
			\If{\Matches{\CurrentInputSample, \CurrentDetector}}{
				\InputSampleClassification $\leftarrow$ ``self''\;
				\Break\;
			}
		}
	}	
	\caption{Pseudocode for detector application.}
	\label{alg:detector_app}
\end{algorithm}

% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item The Negative Selection Algorithm was designed for change detection, novelty detection, intrusion detection and similar pattern recognition and two-class classification problem domains.
	\item Traditional negative selection algorithms used binary representations and binary matching rules such as Hamming distance, and $r$-contiguous bits.
	\item A data representation should be selected that is most suitable for a given problem domain, and a matching rule is in turn selected or tailored to the data representation.
	\item Detectors can be prepared with no prior knowledge of the problem domain other than the known (normal or self) dataset. 
	\item The algorithm can be configured to balance between detector convergence (quality of the matches) and the space complexity (number of detectors).
	\item The lack of dependence between detectors means that detector preparation and application is inherently parallel and suited for a distributed and parallel implementation, respectively.
\end{itemize}

% Code Listing
% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{negative_selection_algorithm} provides an example of the Negative Selection Algorithm implemented in the Ruby Programming Language.
% problem
The demonstration problem is a two-class classification problem where samples are drawn from a two-dimensional domain, where $x_i \in [0,1]$. Those samples in $1.0>x_i>0.5$ are classified as self and the rest of the space belongs to the non-self class. Samples are drawn from the self class and presented to the algorithm for the preparation of pattern detectors for classifying unobserved samples from the non-self class.
% algorithm
The algorithm creates a set of detectors that do not match the self data, and are then applied to a set of randomly generated samples from the domain. The algorithm uses a real-valued representation. The Euclidean distance function is used during matching and a minimum distance value is specified as a user parameter for approximate matches between patterns. The algorithm includes the additional computationally expensive check for duplicates in the preparation of the self dataset and the detector set.

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Negative Selection Algorithm in Ruby, label=negative_selection_algorithm]{../src/algorithms/immune/negative_selection_algorithm.rb}

% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
The seminal negative selection algorithm was proposed by Forrest, et~al. \cite{Forrest1994} in which a population of detectors are prepared in the presence of known information, where those randomly generated detectors that match against known data are discarded. The population of pattern guesses in the unknown space then monitors the corpus of known information for changes. The algorithm was applied to the monitoring of files for changes (corruptions and infections by computer viruses), and later formalized as a change detection algorithm \cite{Dhaeseleer1996a, Dhaeseleer1996}.

% 
% Learn More
% 
\subsubsection{Learn More}
The Negative Selection algorithm has been applied to the monitoring of changes in the execution behavior of Unix processes \cite{Forrest1996, Hofmeyr1998}, and to monitor changes in remote connections of a network computer (intrusion detection) \cite{Hofmeyr1999, Hofmeyr1999a}. The application of the algorithm has been predominantly to virus host intrusion detection and their abstracted problems of classification (two-class) and anomaly detection.
% esponda
Esponda provides some interesting work showing some compression and privacy benefits provided by maintaining a negative model (non-self) \cite{Darlington2005}
% others
Ji and Dasgupta provide a contemporary and detailed review of Negative Selection Algorithms covering topics such as data representations, matching rules, detector generation procedures, computational complexity, hybridization, and theoretical frameworks \cite{Ji2007}.
% validity
Recently, the validity of the application of negative selection algorithms in high-dimensional spaces has been questioned, specifically given the scalability of the approach in the face of the exponential increase in volume within the problem space \cite{Stibor2006}.

