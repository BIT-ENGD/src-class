% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Evolution Strategies} 
\label{sec:evolution_strategies}
\index{Evolution Strategies}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Evolution Strategies, Evolution Strategy, Evolutionary Strategies, ES.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
Evolution Strategies is a global optimization algorithm and is an instance of an Evolutionary Algorithm from the field of Evolutionary Computation.
% What are the closely related approaches to a technique?
Evolution Strategies is a sibling technique to other Evolutionary Algorithms such as Genetic Algorithms (Section~\ref{sec:genetic_algorithm}), Genetic Programming (Section~\ref{sec:genetic_programming}), Learning Classifier Systems (Section~\ref{sec:learning_classifier_system}), and Evolutionary Programming (Section~\ref{sec:evolutionary_programming}). A popular descendant of the Evolution Strategies algorithm is the Covariance Matrix Adaptation Evolution Strategies (CMA-ES).

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
Evolution Strategies is inspired by the theory of evolution by means of natural selection.
% Which features of the motivating system are relevant to a technique?
Specifically, the technique is inspired by macro-level or the species-level process of evolution (phenotype, hereditary, variation) and is not concerned with the genetic mechanisms of evolution (genome, chromosomes, genes, alleles).

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
% \subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
% What are the functionalities inferred for a technique from the analogous inspiring system?
% Evolution Strategies only briefly flirted with explanation via metaphor, and is less preferred to grounded probabilistic explanations.

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The objective of the Evolution Strategies algorithm is to maximize the suitability of collection of candidate solutions in the context of an objective function from a domain.
% What is a techniques plan of action?
The objective was classically achieved through the adoption of dynamic variation, a surrogate for descent with modification, where the amount of variation was adapted dynamically with performance-based heuristics. Contemporary approaches co-adapt parameters that control the amount and bias of variation with the candidate solutions.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as pseudo code, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What is the computational recipe for a technique?
% What are the data structures and representations used in a technique?
% terminology
Instances of Evolution Strategies algorithms may be concisely described with a custom terminology in the form $(\mu,\lambda)-ES$, where $\mu$ is number of candidate solutions in the parent generation, and $\lambda$ is the number of candidate solutions generated from the parent generation. In this configuration, the best $\mu$ are kept if $\lambda > \mu$, where $\lambda$ must be great or equal to $\mu$. In addition to the so-called comma-selection Evolution Strategies algorithm, a plus-selection variation may be defined $(\mu + \lambda)-ES$, where the best members of the union of the $\mu$ and $\lambda$ generations compete based on objective fitness for a position in the next generation. The simplest configuration is the $(1+1)-ES$, which is a type of greedy hill climbing algorithm.
% algo
Algorithm~\ref{alg:evolution_strategies} provides a pseudocode listing of the $(\mu,\lambda)-ES$ algorithm for minimizing a cost function. The algorithm shows the adaptation of candidate solutions that co-adapt their own strategy parameters that influence the amount of mutation applied to a candidate solutions descendants. 

\begin{algorithm}[htp]
	\SetLine  
	% data
	\SetKwData{Best}{$S_{best}$}
	\SetKwData{Children}{Children}
	\SetKwData{ProblemSize}{ProblemSize}
	\SetKwData{Population}{Population}
	\SetKwData{PopulationSize}{$\mu$}
	\SetKwData{ChildPopulationSize}{$\lambda$}
	\SetKwData{Parent}{$Parent_{i}$}
	\SetKwData{Candidate}{$S_{i}$}
	\SetKwData{CandidateObjective}{$Si_{problem}$}
	\SetKwData{CandidateStrategy}{$Si_{strategy}$}
	\SetKwData{ParentObjective}{$Pi_{problem}$}
	\SetKwData{ParentStrategy}{$Pi_{strategy}$}
	% functions
	\SetKwFunction{InitializePopulation}{InitializePopulation}  
	\SetKwFunction{EvaluatePopulation}{EvaluatePopulation} 
	\SetKwFunction{SelectBest}{SelectBest} 
	\SetKwFunction{GetBest}{GetBest}
	\SetKwFunction{StopCondition}{StopCondition}
	\SetKwFunction{Mutate}{Mutate}
  \SetKwFunction{RandomSelection}{RandomSelection}
	\SetKwFunction{Cost}{Cost}
	\SetKwFunction{Size}{Size}
	\SetKwFunction{GetParent}{GetParent}
	% I/O
	\KwIn{\PopulationSize, \ChildPopulationSize, \ProblemSize}		
	\KwOut{\Best}
  	% Algorithm
	% initialize	
	\Population $\leftarrow$ \InitializePopulation{\PopulationSize, \ProblemSize}\;
	% evaluate
	\EvaluatePopulation{\Population}\;
	% best
	\Best $\leftarrow$ \GetBest{\Population, 1}\;
	% loop
	\While{$\neg$\StopCondition{}} {
		% mutate
		\Children $\leftarrow \emptyset$\;
		\For{$i=0$ \KwTo \ChildPopulationSize} {
			\Parent $\leftarrow$ \GetParent{\Population, $i$}\;	
			\Candidate $\leftarrow \emptyset$\;			
			\CandidateObjective $\leftarrow$ \Mutate{\ParentObjective, \ParentStrategy}\;
			\CandidateStrategy $\leftarrow$ \Mutate{\ParentStrategy}\;
			\Children $\leftarrow$ \Candidate\;
		}
		\EvaluatePopulation{\Children}\;
		% best
		\Best $\leftarrow$ \GetBest{\Children $+$ \Best, 1}\;
		% replace
		\Population $\leftarrow$ \SelectBest{\Population, \Children, \PopulationSize}\;
	}
	\Return{\Best}\;
	% end
	\caption{Pseudocode for $(\mu,\lambda)$ Evolution Strategies.}
	\label{alg:evolution_strategies}
\end{algorithm}

% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item Evolution Strategies uses problem specific representations, such as real values for continuous function optimization.
	\item The algorithm is commonly configured such that $1 \leq \mu \leq \lambda$.
	\item The ratio of $\mu$ to $\lambda$ influences the amount of selection pressure (greediness) exerted by the algorithm.
	\item A contemporary update to the algorithms notation includes a $\rho$ as $(\mu/\rho,\lambda)-ES$ that specifies the number of parents that will contribute to each new candidate solution using a recombination operator. 
	\item A classical rule used to govern the amount of mutation (standard deviation used in mutation for continuous function optimization) was the $\frac{1}{5}$-rule, where the ratio of successful mutations should be $\frac{1}{5}$ of all mutations. If it is greater the variance is increased, otherwise if the ratio is is less, the variance is decreased.
	\item The comma-selection variation of the algorithm can be good for dynamic problem instances given its capability for continued exploration of the search space, whereas the plus-selection variation can be good for refinement and convergence.
\end{itemize}

% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{evolution_strategies} provides an example of the Evolution Strategies algorithm implemented in the Ruby Programming Language.
% problem
The demonstration problem is an instance of a continuous function optimization that seeks $\min f(x)$ where $f=\sum_{i=1}^n x_{i}^2$, $-5.0\leq x_i \leq 5.0$ and $n=2$. The optimal solution for this basin function is $(v_0,\ldots,v_{n-1})=0.0$.
% algorithm
The algorithm is a implementation of Evolution Strategies based on simple version described by B\"ack and Schwefel \cite{Back1993b}, which was also used as the basis of a detailed empirical study \cite{Yao1997}.
%  cfg
The algorithm is an $(30+20)-ES$ that adapts both the problem and strategy (standard deviations) variables. 
% a good guide
More contemporary implementations may modify the strategy variables differently, and include an additional set of adapted strategy parameters to influence the direction of mutation (see \cite{Rudolph2000} for a concise description).

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Evolution Strategies in Ruby, label=evolution_strategies]{../src/algorithms/evolutionary/evolution_strategies.rb}


% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% background
Evolution Strategies was developed by three students (Bienert, Rechenberg, Schwefel) at the Technical University in Berlin in 1964 in an effort to robotically optimize an aerodynamics design problem.
% seminal
The seminal work in Evolution Strategies was Rechenberg's PhD thesis \cite{Rechenberg1971} that was later published as a book \cite{Rechenberg1973}, both in German.
% papers
Many technical reports and papers were published by Schwefel and Rechenberg, although the seminal paper published in English was by Klockgether and Schwefel on the two--phase nozzle design problem \cite{Klockgether1970}.

% Learn More
% 
\subsubsection{Learn More}
% Schwefel
Schwefel published his PhD dissertation \cite{Schwefel1975} not long after Rechenberg, which was also published as a book \cite{Schwefel1977}, both in German. Schwefel's book was later translated into English and represents a classical reference for the technique \cite{Schwefel1981}. 
% Back
B\"ack et al.\ provide a classical introduction to the technique, covering the history, development of the algorithm, and the steps that lead it to where it was in 1991 \cite{Back1991}.
% Beyer and Schwefel
Beyer and Schwefel provide a contemporary introduction to the field that includes a detailed history of the approach, the developments and improvements since its inception, and an overview of the theoretical findings that have been made \cite{Beyer2002}.
