% The Clever Algorithms Project: http://www.CleverAlgorithms.com
% (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. 
% This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.

% This is an algorithm description, see:
% Jason Brownlee. A Template for Standardized Algorithm Descriptions. Technical Report CA-TR-20100107-1, The Clever Algorithms Project http://www.CleverAlgorithms.com, January 2010.

% Name
% The algorithm name defines the canonical name used to refer to the technique, in addition to common aliases, abbreviations, and acronyms. The name is used in terms of the heading and sub-headings of an algorithm description.
\section{Genetic Programming} 
\label{sec:genetic_programming}
\index{Genetic Programming}

% other names
% What is the canonical name and common aliases for a technique?
% What are the common abbreviations and acronyms for a technique?
\emph{Genetic Programming, GP.}

% Taxonomy: Lineage and locality
% The algorithm taxonomy defines where a techniques fits into the field, both the specific subfields of Computational Intelligence and Biologically Inspired Computation as well as the broader field of Artificial Intelligence. The taxonomy also provides a context for determining the relation- ships between algorithms. The taxonomy may be described in terms of a series of relationship statements or pictorially as a venn diagram or a graph with hierarchical structure.
\subsection{Taxonomy}
% To what fields of study does a technique belong?
The Genetic Programming algorithm is an example of an Evolutionary Algorithm and belongs to the field of Evolutionary Computation and more broadly Computational Intelligence and Biologically Inspired Computation. 
% What are the closely related approaches to a technique?
The Genetic Programming algorithm is a sibling to other Evolutionary Algorithms such as the Genetic Algorithm (Section~\ref{sec:genetic_algorithm}), Evolution Strategies (Section~\ref{sec:evolution_strategies}), Evolutionary Programming (Section~\ref{sec:evolutionary_programming}), and Learning Classifier Systems (Section~\ref{sec:learning_classifier_system}). Technically, the Genetic Programming algorithm is an extension of the Genetic Algorithm. The Genetic Algorithm is a parent to a host of variations and extensions.

% Inspiration: Motivating system
% The inspiration describes the specific system or process that provoked the inception of the algorithm. The inspiring system may non-exclusively be natural, biological, physical, or social. The description of the inspiring system may include relevant domain specific theory, observation, nomenclature, and most important must include those salient attributes of the system that are somehow abstractly or conceptually manifest in the technique. The inspiration is described textually with citations and may include diagrams to highlight features and relationships within the inspiring system.
% Optional
\subsection{Inspiration}
% What is the system or process that motivated the development of a technique?
% Which features of the motivating system are relevant to a technique?
The Genetic Programming algorithm is inspired by population genetics (including heredity and gene frequencies), and evolution at the population level, as well as the Mendelian understanding of the structure (such as chromosomes, genes, alleles) and mechanisms (such as recombination and mutation). This is the so-called new or modern synthesis of evolutionary biology. 

% Metaphor: Explanation via analogy
% The metaphor is a description of the technique in the context of the inspiring system or a different suitable system. The features of the technique are made apparent through an analogous description of the features of the inspiring system. The explanation through analogy is not expected to be literal scientific truth, rather the method is used as an allegorical communication tool. The inspiring system is not explicitly described, this is the role of the ‘inspiration’ element, which represents a loose dependency for this element. The explanation is textual and uses the nomenclature of the metaphorical system.
% Optional
\subsection{Metaphor}
% What is the explanation of a technique in the context of the inspiring system?
% What are the functionalities inferred for a technique from the analogous inspiring system?
Individuals of a population contribute their genetic material (called the genotype) proportional to their suitability of their expressed genome (called their phenotype) to their environment. The next generation is created through a process of mating that involves genetic operators such as recombination of two individuals genomes in the population and the introduction of random copying errors (called mutation). This iterative process may result in an improved adaptive-fit between the phenotypes of individuals in a population and the environment.

% advanced
Programs may be evolved and used in a secondary adaptive process, where an assessment of candidates at the end of that secondary adaptive process is used for differential reproductive success in the first evolutionary process. This system may be understood as the inter-dependencies experienced in evolutionary development where evolution operates upon an embryo that in turn develops into an individual in an environment that eventually may reproduce.

% Strategy: Problem solving plan
% The strategy is an abstract description of the computational model. The strategy describes the information processing actions a technique shall take in order to achieve an objective. The strategy provides a logical separation between a computational realization (procedure) and a analogous system (metaphor). A given problem solving strategy may be realized as one of a number specific algorithms or problem solving systems. The strategy description is textual using information processing and algorithmic terminology.
\subsection{Strategy}
% What is the information processing objective of a technique?
The objective of the Genetic Programming algorithm is to use induction to devise a computer program. 
% What is a techniques plan of action?
This is achieved by using evolutionary operators on candidate programs with a tree structure to improve the adaptive fit between the population of candidate programs and an objective function. An assessment of a candidate solution involves its execution.

% Procedure: Abstract computation
% The algorithmic procedure summarizes the specifics of realizing a strategy as a systemized and parameterized computation. It outlines how the algorithm is organized in terms of the data structures and representations. The procedure may be described in terms of software engineering and computer science artifacts such as Pseudocode, design diagrams, and relevant mathematical equations.
\subsection{Procedure}
% What is the computational recipe for a technique?
% What are the data structures and representations used in a technique?
Algorithm~\ref{alg:genetic_programming} provides a pseudocode listing of the Genetic Programming algorithm for minimizing a cost function, based on Koza and Poli's tutorial \cite{Koza2005}. 

% more
The Genetic Program uses LISP-like symbolic expressions called S-expressions that represent the graph of a program with function nodes and terminal nodes. While the algorithm is running, the programs are treated like data, and when they are evaluated they are executed. The traversal of a program graph is always depth first, and functions must always return a value.

\begin{algorithm}[htp]
	\SetLine  

	% data
	\SetKwData{Best}{$S_{best}$}
	\SetKwData{ProbabilityMutate}{$P_{mutation}$}
	\SetKwData{ProbabilityCrossover}{$P_{crossover}$}
	\SetKwData{ProbabilityReproduction}{$P_{reproduction}$}
	\SetKwData{ProbabilityAlteration}{$P_{alteration}$}
	\SetKwData{Parents}{Parents}
	\SetKwData{Children}{Children}
	\SetKwData{FunctionNodes}{$nodes_{func}$}
	\SetKwData{TerminalNodes}{$nodes_{term}$}
	\SetKwData{Population}{Population}
	\SetKwData{PopulationSize}{$Population_{size}$}
	\SetKwData{ParentOne}{$Parent_{1}$}
	\SetKwData{ParentTwo}{$Parent_{2}$}
	\SetKwData{ChildOne}{$Child_{1}$}
	\SetKwData{ChildTwo}{$Child_{2}$}
	\SetKwData{Operator}{Operator}	
	\SetKwData{CrossoverOperator}{CrossoverOperator}
	\SetKwData{MutationOperator}{MutationOperator}
	\SetKwData{ReproductionOperator}{ReproductionOperator}
	\SetKwData{AlterationOperator}{AlterationOperator}
	% functions
	\SetKwFunction{InitializePopulation}{InitializePopulation}  
	\SetKwFunction{EvaluatePopulation}{EvaluatePopulation} 
	\SetKwFunction{GetBestSolution}{GetBestSolution} 
	\SetKwFunction{SelectParents}{SelectParents}
	\SetKwFunction{Replace}{Replace}
	\SetKwFunction{StopCondition}{StopCondition}
	\SetKwFunction{Crossover}{Crossover}
	\SetKwFunction{Mutate}{Mutate}
	\SetKwFunction{Size}{Size}
	\SetKwFunction{SelectGeneticOperator}{SelectGeneticOperator}
  	\SetKwFunction{Reproduce}{Reproduce}
	\SetKwFunction{AlterArchitecture}{AlterArchitecture}

	% I/O
	\KwIn{\PopulationSize, \FunctionNodes, \TerminalNodes, \ProbabilityCrossover, \ProbabilityMutate, \ProbabilityReproduction, \ProbabilityAlteration}		
	\KwOut{\Best}
  	% Algorithm
	% initialize	
	\Population $\leftarrow$ \InitializePopulation{\PopulationSize, \FunctionNodes, \TerminalNodes}\;
	% evaluate
	\EvaluatePopulation{\Population}\;
	% best
	\Best $\leftarrow$ \GetBestSolution{\Population}\;
	% loop
	\While{$\neg$\StopCondition{}} {
		% build up child generation
		\Children $\leftarrow \emptyset$\;
		\While{\Size{\Children} $<$ \PopulationSize} {
			\Operator $\leftarrow$ \SelectGeneticOperator{\ProbabilityCrossover, \ProbabilityMutate, \ProbabilityReproduction, \ProbabilityAlteration}\;
		
			\uIf{\Operator $\equiv$ \CrossoverOperator}{
				\ParentOne, \ParentTwo $\leftarrow$ \SelectParents{\Population, \PopulationSize}\;
				\ChildOne, \ChildTwo $\leftarrow$ \Crossover{\ParentOne, \ParentTwo}\;
				\Children $\leftarrow$ \ChildOne\;
				\Children $\leftarrow$ \ChildTwo\;
			}\uElseIf{\Operator $\equiv$ \MutationOperator}{
				\ParentOne $\leftarrow$ \SelectParents{\Population, \PopulationSize}\;
				\ChildOne $\leftarrow$ \Mutate{\ParentOne}\;
				\Children $\leftarrow$ \ChildOne\;
			}\uElseIf{\Operator $\equiv$ \ReproductionOperator}{
				\ParentOne $\leftarrow$ \SelectParents{\Population, \PopulationSize}\;
				\ChildOne $\leftarrow$ \Reproduce{\ParentOne}\;
				\Children $\leftarrow$ \ChildOne\;
			}\ElseIf{\Operator $\equiv$ \AlterationOperator}{
				\ParentOne $\leftarrow$ \SelectParents{\Population, \PopulationSize}\;
				\ChildOne $\leftarrow$ \AlterArchitecture{\ParentOne}\;
				\Children $\leftarrow$ \ChildOne\;
			}
		}
		% evaluate
		\EvaluatePopulation{\Children}\;
		% best
		\Best $\leftarrow$ \GetBestSolution{\Children, \Best}\;
		% replace
		\Population $\leftarrow$ \Children\;
	}
	\Return{\Best}\;
	% end
	\caption{Pseudocode for Genetic Programming.}
	\label{alg:genetic_programming}
\end{algorithm}


% Heuristics: Usage guidelines
% The heuristics element describe the commonsense, best practice, and demonstrated rules for applying and configuring a parameterized algorithm. The heuristics relate to the technical details of the techniques procedure and data structures for general classes of application (neither specific implementations not specific problem instances). The heuristics are described textually, such as a series of guidelines in a bullet-point structure.
\subsection{Heuristics}
% What are the suggested configurations for a technique?
% What are the guidelines for the application of a technique to a problem instance?
\begin{itemize}
	\item The Genetic Programming algorithm was designed for inductive automatic programming and is well suited to symbolic regression, controller design, and machine learning tasks under the broader name of function approximation.
	\item Traditionally Lisp symbolic expressions are evolved and evaluated in a virtual machine, although the approach has been applied with compiled programming languages.
	\item The evaluation (fitness assignment) of a candidate solution typically takes the structure of the program into account, rewarding parsimony.
	\item The selection process should be balanced between random selection and greedy selection to bias the search towards fitter candidate solutions (exploitation), whilst promoting useful diversity into the population (exploration).
	\item A program may respond to zero or more input values and may produce one or more outputs.
	\item All functions used in the function node set must return a usable result. For example, the division function must return a sensible value (such as zero or one) when a division by zero occurs.
	\item All genetic operations ensure (or should ensure) that syntactically valid and executable programs are produced as a result of their application.
	\item The Genetic Programming algorithm is commonly configured with a high-probability of crossover ($\geq 90\%$) and a low-probability of mutation ($\leq 1\%$). Other operators such as reproduction and architecture alterations are used with moderate-level probabilities and fill in the probabilistic gap.
	\item Architecture altering operations are not limited to the duplication and deletion of sub-structures of a given program. 
	\item The crossover genetic operator in the algorithm is commonly configured to select a function as a the cross-point with a high-probability ($\geq 90\%$) and low-probability of selecting a terminal as a cross-point ($\leq 10\%$).
	\item The function set may also include control structures such as conditional statements and loop constructs.
	\item The Genetic Programing algorithm can be realized as a stack-based virtual machine as opposed to a call graph \cite{Perkis1994}.
	\item The Genetic Programming algorithm can make use of Automatically Defined Functions (ADFs) that are sub-graphs and are promoted to the status of functions for reuse and are co-evolved with the programs. 
	 \item The genetic operators employed during reproduction in the algorithm may be considered transformation programs for candidate solutions and may themselves be co-evolved in the algorithm \cite{Angeline1996}.
\end{itemize}

% The code description provides a minimal but functional version of the technique implemented with a programming language. The code description must be able to be typed into an appropriate computer, compiled or interpreted as need be, and provide a working execution of the technique. The technique implementation also includes a minimal problem instance to which it is applied, and both the problem and algorithm implementations are complete enough to demonstrate the techniques procedure. The description is presented as a programming source code listing.
\subsection{Code Listing}
% How is a technique implemented as an executable program?
% How is a technique applied to a concrete problem instance?
Listing~\ref{genetic_programming} provides an example of the Genetic Programming algorithm implemented in the Ruby Programming Language based on Koza and Poli's tutorial \cite{Koza2005}.
 
% problem
The demonstration problem is an instance of a symbolic regression, where a function must be devised to match a set of observations. In this case the target function is a quadratic polynomial $x^2+x+1$ where $x \in [-1,1]$. The observations are generated directly from the target function without noise for the purposes of this example. In practical problems, if one knew and had access to the target function then the genetic program would not be required.

% algorithm
The algorithm is configured to search for a program with the function set $\{ +, -, \times, \div \}$ and the terminal set $\{ X, R \}$, where $X$ is the input value, and $R$ is a static random variable generated for a program $X \in [-5,5]$. A division by zero returns a value of one. 
% fitness
The fitness of a candidate solution is calculated by evaluating the program on range of random input values and calculating the Root Mean Squared Error (RMSE).
% config
The algorithm is configured with a 90\% probability of crossover, 8\% probability of reproduction (copying), and a 2\% probability of mutation.
% missing
For brevity, the algorithm does not implement the architecture altering genetic operation and does not bias crossover points towards functions over terminals.

% the listing
\lstinputlisting[firstline=7,language=ruby,caption=Genetic Programming in Ruby, label=genetic_programming]{../src/algorithms/evolutionary/genetic_programming.rb}

% References: Deeper understanding
% The references element description includes a listing of both primary sources of information about the technique as well as useful introductory sources for novices to gain a deeper understanding of the theory and application of the technique. The description consists of hand-selected reference material including books, peer reviewed conference papers, journal articles, and potentially websites. A bullet-pointed structure is suggested.
\subsection{References}
% What are the primary sources for a technique?
% What are the suggested reference sources for learning more about a technique?

% 
% Primary Sources
% 
\subsubsection{Primary Sources}
% early work
An early work by Cramer involved the study of a Genetic Algorithm using an expression tree structure for representing computer programs for primitive mathematical operations \cite{Cramer1985}.
% koza
Koza is credited with the development of the field of Genetic Programming.
% early koza
An early paper by Koza referred to his hierarchical genetic algorithms as an extension to the simple genetic algorithm that use symbolic expressions (S-expressions) as a representation and were applied to a range of induction-style problems \cite{Koza1989}.
% seminal
The seminal reference for the field is Koza's 1992 book on Genetic Programming \cite{Koza1992}.


% 
% Learn More
% 
\subsubsection{Learn More}
% scope
The field of Genetic Programming is vast, including many books, dedicated conferences and thousands of publications.
% koza
Koza is generally credited with the development and popularizing of the field, publishing a large number of books and papers himself. 
% intro papers 
Koza provides a practical introduction to the field as a tutorial and provides recent overview of the broader field and usage of the technique \cite{Koza2005}.

% books
In addition his the seminal 1992 book, Koza has released three more volumes in the series including volume II on Automatically Defined Functions (ADFs) \cite{Koza1994}, volume III that considered the Genetic Programming Problem Solver (GPPS) for automatically defining the function set and program structure for a given problem \cite{Koza1999}, and volume IV that focuses on the human competitive results the technique is able to achieve in a routine manner \cite{Koza2003}. All books are rich with targeted and practical demonstration problem instances.

% additional books
Some additional excellent books include a text by Banzhaf et al.\ that provides an introduction to the field \cite{Banzhaf1998}, Langdon and Poli's detailed look at the technique \cite{Langdon2002}, and Poli, Langdon, and McPhee's contemporary and practical field guide to Genetic Programming \cite{Poli2008}.


