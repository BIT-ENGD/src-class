

\section{Running Graphs }\label{running-graphs}

\subsection{Contents}\label{contents}

\subsubsection{\texorpdfstring{\protect\hyperlink{AUTOGENERATED-running-graphs}{Running
Graphs}}{Running Graphs}}\label{running-graphs-1}

\begin{itemize}
\tightlist
\item
  \protect\hyperlink{AUTOGENERATED-session-management}{Session
  management}
\item
  \protect\hyperlink{Session}{\texttt{class\ tf.Session}}
\item
  \protect\hyperlink{InteractiveSession}{\texttt{class\ tf.InteractiveSession}}
\item
  \protect\hyperlink{getux5fdefaultux5fsession}{\texttt{tf.get\_default\_session()}}
\item
  \protect\hyperlink{AUTOGENERATED-error-classes}{Error classes}
\item
  \protect\hyperlink{OpError}{\texttt{class\ tf.OpError}}
\item
  \protect\hyperlink{CancelledError}{\texttt{class\ tf.errors.CancelledError}}
\item
  \protect\hyperlink{UnknownError}{\texttt{class\ tf.errors.UnknownError}}
\item
  \protect\hyperlink{InvalidArgumentError}{\texttt{class\ tf.errors.InvalidArgumentError}}
\item
  \protect\hyperlink{DeadlineExceededError}{\texttt{class\ tf.errors.DeadlineExceededError}}
\item
  \protect\hyperlink{NotFoundError}{\texttt{class\ tf.errors.NotFoundError}}
\item
  \protect\hyperlink{AlreadyExistsError}{\texttt{class\ tf.errors.AlreadyExistsError}}
\item
  \protect\hyperlink{PermissionDeniedError}{\texttt{class\ tf.errors.PermissionDeniedError}}
\item
  \protect\hyperlink{UnauthenticatedError}{\texttt{class\ tf.errors.UnauthenticatedError}}
\item
  \protect\hyperlink{ResourceExhaustedError}{\texttt{class\ tf.errors.ResourceExhaustedError}}
\item
  \protect\hyperlink{FailedPreconditionError}{\texttt{class\ tf.errors.FailedPreconditionError}}
\item
  \protect\hyperlink{AbortedError}{\texttt{class\ tf.errors.AbortedError}}
\item
  \protect\hyperlink{OutOfRangeError}{\texttt{class\ tf.errors.OutOfRangeError}}
\item
  \protect\hyperlink{UnimplementedError}{\texttt{class\ tf.errors.UnimplementedError}}
\item
  \protect\hyperlink{InternalError}{\texttt{class\ tf.errors.InternalError}}
\item
  \protect\hyperlink{UnavailableError}{\texttt{class\ tf.errors.UnavailableError}}
\item
  \protect\hyperlink{DataLossError}{\texttt{class\ tf.errors.DataLossError}}
\end{itemize}

This library contains classes for launching graphs and executing
operations.

The \href{../../get_started/introduction.md\#basic-usage}{basic usage}
guide has examples of how a graph is launched in a
\protect\hyperlink{Session}{\texttt{tf.Session}}.

\subsection{Session management }\label{session-management}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{class \lstinline{tf.Session}} \label{class-tf.session}

A class for running TensorFlow operations.

A \texttt{Session} object encapsulates the environment in which
\texttt{Operation} objects are executed, and \texttt{Tensor} objects are
evaluated. For example:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{# Build a graph.}
\NormalTok{a }\OperatorTok{=} \NormalTok{tf.constant(}\FloatTok{5.0}\NormalTok{)}
\NormalTok{b }\OperatorTok{=} \NormalTok{tf.constant(}\FloatTok{6.0}\NormalTok{)}
\NormalTok{c }\OperatorTok{=} \NormalTok{a }\OperatorTok{*} \NormalTok{b}

\CommentTok{# Launch the graph in a session.}
\NormalTok{sess }\OperatorTok{=} \NormalTok{tf.Session()}

\CommentTok{# Evaluate the tensor `c`.}
\BuiltInTok{print} \NormalTok{sess.run(c)}
\end{Highlighting}
\end{Shaded}

A session may own resources, such as
\href{../../api_docs/python/state_ops.md\#Variable}{variables},
\href{../../api_docs/python/io_ops.md\#QueueBase}{queues}, and
\href{../../api_docs/python/io_ops.md\#ReaderBase}{readers}. It is
important to release these resources when they are no longer required.
To do this, either invoke the
\protect\hyperlink{Session.close}{\texttt{close()}} method on the
session, or use the session as a context manager. The following two
examples are equivalent:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{# Using the `close()` method.}
\NormalTok{sess }\OperatorTok{=} \NormalTok{tf.Session()}
\NormalTok{sess.run(...)}
\NormalTok{sess.close()}

\CommentTok{# Using the context manager.}
\ControlFlowTok{with} \NormalTok{tf.Session() }\ImportTok{as} \NormalTok{sess:}
  \NormalTok{sess.run(...)}
\end{Highlighting}
\end{Shaded}

The {[}\texttt{ConfigProto}{]}
(https://tensorflow.googlesource.com/tensorflow/+/master/tensorflow/core/framework/config.proto)
protocol buffer exposes various configuration options for a session. For
example, to create a session that uses soft constraints for device
placement, and log the resulting placement decisions, create a session
as follows:

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{# Launch the graph in a session that allows soft device placement and}
\CommentTok{# logs the placement decisions.}
\NormalTok{sess }\OperatorTok{=} \NormalTok{tf.Session(config}\OperatorTok{=}\NormalTok{tf.ConfigProto(allow_soft_placement}\OperatorTok{=}\VariableTok{True}\NormalTok{,}
                                        \NormalTok{log_device_placement}\OperatorTok{=}\VariableTok{True}\NormalTok{))}
\end{Highlighting}
\end{Shaded}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.Session.\_\_init\_\_(target=\textquotesingle{}\textquotesingle{},\ graph=None,\ config=None)}
}{tf.Session.\_\_init\_\_(target='', graph=None, config=None) }}\label{tf.session.ux5fux5finitux5fux5ftarget-graphnone-confignone}

Creates a new TensorFlow session.

If no \texttt{graph} argument is specified when constructing the
session, the default graph will be launched in the session. If you are
using more than one graph (created with \texttt{tf.Graph()} in the same
process, you will have to use different sessions for each graph, but
each graph can be used in multiple sessions. In this case, it is often
clearer to pass the graph to be launched explicitly to the session
constructor.

\subparagraph{Args: }\label{args}

\begin{itemize}
\tightlist
\item
  \texttt{target}: (Optional.) The execution engine to connect to.
  Defaults to using an in-process engine. At present, no value other
  than the empty string is supported.
\item
  \texttt{graph}: (Optional.) The \texttt{Graph} to be launched
  (described above).
\item
  \texttt{config}: (Optional.) A
  \href{https://tensorflow.googlesource.com/tensorflow/+/master/tensorflow/core/framework/config.proto}{\texttt{ConfigProto}}
  protocol buffer with configuration options for the session.
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.Session.run(fetches,\ feed\_dict=None)}
}{tf.Session.run(fetches, feed\_dict=None) }}\label{tf.session.run}

Runs the operations and evaluates the tensors in \texttt{fetches}.

This method runs one ``step'' of TensorFlow computation, by running the
necessary graph fragment to execute every \texttt{Operation} and
evaluate every \texttt{Tensor} in \texttt{fetches}, substituting the
values in \texttt{feed\_dict} for the corresponding input values.

The \texttt{fetches} argument may be a list of graph elements or a
single graph element, and these determine the return value of this
method. A graph element can be one of the following types:

\begin{itemize}
\tightlist
\item
  If the \emph{i}th element of \texttt{fetches} is an
  \href{../../api_docs/python/framework.md\#Operation}{\texttt{Operation}},
  the \emph{i}th return value will be \texttt{None}.
\item
  If the \emph{i}th element of \texttt{fetches} is a
  \href{../../api_docs/python/framework.md\#Tensor}{\texttt{Tensor}},
  the \emph{i}th return value will be a numpy ndarray containing the
  value of that tensor.
\item
  If the \emph{i}th element of \texttt{fetches} is a
  \href{../../api_docs/python/sparse_ops.md\#SparseTensor}{\texttt{SparseTensor}},
  the \emph{i}th return value will be a
  \href{../../api_docs/python/sparse_ops.md\#SparseTensorValue}{\texttt{SparseTensorValue}}
  containing the value of that sparse tensor.
\end{itemize}

The optional \texttt{feed\_dict} argument allows the caller to override
the value of tensors in the graph. Each key in \texttt{feed\_dict} can
be one of the following types:

\begin{itemize}
\tightlist
\item
  If the key is a
  \href{../../api_docs/python/framework.md\#Tensor}{\texttt{Tensor}},
  the value may be a Python scalar, string, list, or numpy ndarray that
  can be converted to the same \texttt{dtype} as that tensor.
  Additionally, if the key is a
  \href{../../api_docs/python/io_ops.md\#placeholder}{placeholder}, the
  shape of the value will be checked for compatibility with the
  placeholder.
\item
  If the key is a
  \href{../../api_docs/python/sparse_ops.md\#SparseTensor}{\texttt{SparseTensor}},
  the value should be a
  \href{../../api_docs/python/sparse_ops.md\#SparseTensorValue}{\texttt{SparseTensorValue}}.
\end{itemize}

\subparagraph{Args: }\label{args-1}

\begin{itemize}
\tightlist
\item
  \texttt{fetches}: A single graph element, or a list of graph elements
  (described above).
\item
  \texttt{feed\_dict}: A dictionary that maps graph elements to values
  (described above).
\end{itemize}

\subparagraph{Returns: }\label{returns}

Either a single value if \texttt{fetches} is a single graph element, or
a list of values if \texttt{fetches} is a list (described above).

\subparagraph{Raises: }\label{raises}

\begin{itemize}
\tightlist
\item
  \texttt{RuntimeError}: If this \texttt{Session} is in an invalid state
  (e.g.~has been closed).
\item
  \texttt{TypeError}: If \texttt{fetches} or \texttt{feed\_dict} keys
  are of an inappropriate type.
\item
  \texttt{ValueError}: If \texttt{fetches} or \texttt{feed\_dict} keys
  are invalid or refer to a \texttt{Tensor} that doesn't exist.
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.Session.close()}
}{tf.Session.close() }}\label{tf.session.close}

Closes this session.

Calling this method frees all resources associated with the session.

\subparagraph{Raises: }\label{raises-1}

\begin{itemize}
\tightlist
\item
  \texttt{RuntimeError}: If an error occurs while closing the session.
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.Session.graph}
}{tf.Session.graph }}\label{tf.session.graph}

The graph that was launched in this session.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.Session.as\_default()}
}{tf.Session.as\_default() }}\label{tf.session.asux5fdefault}

Returns a context manager that makes this object the default session.

Use with the \texttt{with} keyword to specify that calls to
\href{../../api_docs/python/framework.md\#Operation.run}{\texttt{Operation.run()}}
or
\href{../../api_docs/python/framework.md\#Tensor.run}{\texttt{Tensor.run()}}
should be executed in this session.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{c }\OperatorTok{=} \NormalTok{tf.constant(..)}
\NormalTok{sess }\OperatorTok{=} \NormalTok{tf.Session()}

\ControlFlowTok{with} \NormalTok{sess.as_default():}
  \ControlFlowTok{assert} \NormalTok{tf.get_default_session() }\OperatorTok{is} \NormalTok{sess}
  \BuiltInTok{print} \NormalTok{c.}\BuiltInTok{eval}\NormalTok{()}
\end{Highlighting}
\end{Shaded}

To get the current default session, use
\protect\hyperlink{getux5fdefaultux5fsession}{\texttt{tf.get\_default\_session()}}.

\emph{N.B.} The \texttt{as\_default} context manager \emph{does not}
close the session when you exit the context, and you must close the
session explicitly.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{c }\OperatorTok{=} \NormalTok{tf.constant(...)}
\NormalTok{sess }\OperatorTok{=} \NormalTok{tf.Session()}
\ControlFlowTok{with} \NormalTok{sess.as_default():}
  \BuiltInTok{print} \NormalTok{c.}\BuiltInTok{eval}\NormalTok{()}
\CommentTok{# ...}
\ControlFlowTok{with} \NormalTok{sess.as_default():}
  \BuiltInTok{print} \NormalTok{c.}\BuiltInTok{eval}\NormalTok{()}

\NormalTok{sess.close()}
\end{Highlighting}
\end{Shaded}

Alternatively, you can use \texttt{with\ tf.Session():} to create a
session that is automatically closed on exiting the context, including
when an uncaught exception is raised.

\emph{N.B.} The default graph is a property of the current thread. If
you create a new thread, and wish to use the default session in that
thread, you must explicitly add a \texttt{with\ sess.as\_default():} in
that thread's function.

\subparagraph{Returns: }\label{returns-1}

A context manager using this session as the default session.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.InteractiveSession}
}{class tf.InteractiveSession }}\label{class-tf.interactivesession}

A TensorFlow \texttt{Session} for use in interactive contexts, such as a
shell.

The only difference with a regular \texttt{Session} is that an
\texttt{InteractiveSession} installs itself as the default session on
construction. The methods
\href{../../api_docs/python/framework.md\#Tensor.eval}{\texttt{Tensor.eval()}}
and
\href{../../api_docs/python/framework.md\#Operation.run}{\texttt{Operation.run()}}
will use that session to run ops.

This is convenient in interactive shells and
\href{http://ipython.org}{IPython notebooks}, as it avoids having to
pass an explicit \texttt{Session} object to run ops.

For example:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{sess }\OperatorTok{=} \NormalTok{tf.InteractiveSession()}
\NormalTok{a }\OperatorTok{=} \NormalTok{tf.constant(}\FloatTok{5.0}\NormalTok{)}
\NormalTok{b }\OperatorTok{=} \NormalTok{tf.constant(}\FloatTok{6.0}\NormalTok{)}
\NormalTok{c }\OperatorTok{=} \NormalTok{a }\OperatorTok{*} \NormalTok{b}
\CommentTok{# We can just use 'c.eval()' without passing 'sess'}
\BuiltInTok{print} \NormalTok{c.}\BuiltInTok{eval}\NormalTok{()}
\NormalTok{sess.close()}
\end{Highlighting}
\end{Shaded}

Note that a regular session installs itself as the default session when
it is created in a \texttt{with} statement. The common usage in
non-interactive programs is to follow that pattern:

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{a }\OperatorTok{=} \NormalTok{tf.constant(}\FloatTok{5.0}\NormalTok{)}
\NormalTok{b }\OperatorTok{=} \NormalTok{tf.constant(}\FloatTok{6.0}\NormalTok{)}
\NormalTok{c }\OperatorTok{=} \NormalTok{a }\OperatorTok{*} \NormalTok{b}
\ControlFlowTok{with} \NormalTok{tf.Session():}
  \CommentTok{# We can also use 'c.eval()' here.}
  \BuiltInTok{print} \NormalTok{c.}\BuiltInTok{eval}\NormalTok{()}
\end{Highlighting}
\end{Shaded}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.InteractiveSession.\_\_init\_\_(target=\textquotesingle{}\textquotesingle{},\ graph=None)}
}{tf.InteractiveSession.\_\_init\_\_(target='', graph=None) }}\label{tf.interactivesession.ux5fux5finitux5fux5ftarget-graphnone}

Creates a new interactive TensorFlow session.

If no \texttt{graph} argument is specified when constructing the
session, the default graph will be launched in the session. If you are
using more than one graph (created with \texttt{tf.Graph()} in the same
process, you will have to use different sessions for each graph, but
each graph can be used in multiple sessions. In this case, it is often
clearer to pass the graph to be launched explicitly to the session
constructor.

\subparagraph{Args: }\label{args-2}

\begin{itemize}
\tightlist
\item
  \texttt{target}: (Optional.) The execution engine to connect to.
  Defaults to using an in-process engine. At present, no value other
  than the empty string is supported.
\item
  \texttt{graph}: (Optional.) The \texttt{Graph} to be launched
  (described above).
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.InteractiveSession.close()}
}{tf.InteractiveSession.close() }}\label{tf.interactivesession.close}

Closes an \texttt{InteractiveSession}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{tf.get\_default\_session()}
}{tf.get\_default\_session() }}\label{tf.getux5fdefaultux5fsession}

Returns the default session for the current thread.

The returned \texttt{Session} will be the innermost session on which a
\texttt{Session} or \texttt{Session.as\_default()} context has been
entered.

\emph{N.B.} The default session is a property of the current thread. If
you create a new thread, and wish to use the default session in that
thread, you must explicitly add a \texttt{with\ sess.as\_default():} in
that thread's function.

\subparagraph{Returns: }\label{returns-2}

The default \texttt{Session} being used in the current thread.

\subsection{Error classes }\label{error-classes}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.OpError}
}{class tf.OpError }}\label{class-tf.operror}

A generic error that is raised when TensorFlow execution fails.

Whenever possible, the session will raise a more specific subclass of
\texttt{OpError} from the \texttt{tf.errors} module.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.OpError.op}
}{tf.OpError.op }}\label{tf.operror.op}

The operation that failed, if known.

\emph{N.B.} If the failed op was synthesized at runtime, e.g.~a
\texttt{Send} or \texttt{Recv} op, there will be no corresponding
\href{../../api_docs/python/framework.md\#Operation}{\texttt{Operation}}
object. In that case, this will return \texttt{None}, and you should
instead use the
\protect\hyperlink{OpError.nodeux5fdef}{\texttt{OpError.node\_def}} to
discover information about the op.

\subparagraph{Returns: }\label{returns-3}

The \texttt{Operation} that failed, or None.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.OpError.node\_def}
}{tf.OpError.node\_def }}\label{tf.operror.nodeux5fdef}

The \texttt{NodeDef} proto representing the op that failed.

\paragraph{Other Methods }\label{other-methods}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.OpError.\_\_init\_\_(node\_def,\ op,\ message,\ error\_code)}
}{tf.OpError.\_\_init\_\_(node\_def, op, message, error\_code) }}\label{tf.operror.ux5fux5finitux5fux5fnodeux5fdef-op-message-errorux5fcode}

Creates a new OpError indicating that a particular op failed.

\subparagraph{Args: }\label{args-3}

\begin{itemize}
\tightlist
\item
  \texttt{node\_def}: The graph\_pb2.NodeDef proto representing the op
  that failed.
\item
  \texttt{op}: The ops.Operation that failed, if known; otherwise None.
\item
  \texttt{message}: The message string describing the failure.
\item
  \texttt{error\_code}: The error\_codes\_pb2.Code describing the error.
\end{itemize}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.OpError.error\_code}
}{tf.OpError.error\_code }}\label{tf.operror.errorux5fcode}

The integer error code that describes the error.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.OpError.message}
}{tf.OpError.message }}\label{tf.operror.message}

The error message that describes the error.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.CancelledError}
}{class tf.errors.CancelledError }}\label{class-tf.errors.cancellederror}

Raised when an operation or step is cancelled.

For example, a long-running operation (e.g.
\href{../../api_docs/python/io_ops.md\#QueueBase.enqueue}{\texttt{queue.enqueue()}}
may be cancelled by running another operation (e.g.
\href{../../api_docs/python/io_ops.md\#QueueBase.close}{\texttt{queue.close(cancel\_pending\_enqueues=True)}},
or by \href{../../api_docs/python/client.md\#Session.close}{closing the
session}. A step that is running such a long-running operation will fail
by raising \texttt{CancelledError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.CancelledError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.CancelledError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.cancellederror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates a \texttt{CancelledError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.UnknownError}
}{class tf.errors.UnknownError }}\label{class-tf.errors.unknownerror}

Unknown error.

An example of where this error may be returned is if a Status value
received from another address space belongs to an error-space that is
not known to this address space. Also errors raised by APIs that do not
return enough error information may be converted to this error.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.UnknownError.\_\_init\_\_(node\_def,\ op,\ message,\ error\_code=2)}
}{tf.errors.UnknownError.\_\_init\_\_(node\_def, op, message, error\_code=2) }}\label{tf.errors.unknownerror.ux5fux5finitux5fux5fnodeux5fdef-op-message-errorux5fcode2}

Creates an \texttt{UnknownError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.InvalidArgumentError}
}{class tf.errors.InvalidArgumentError }}\label{class-tf.errors.invalidargumenterror}

Raised when an operation receives an invalid argument.

This may occur, for example, if an operation is receives an input tensor
that has an invalid value or shape. For example, the
\href{../../api_docs/python/math_ops.md\#matmul}{\texttt{tf.matmul()}}
op will raise this error if it receives an input that is not a matrix,
and the
\href{../../api_docs/python/array_ops.md\#reshape}{\texttt{tf.reshape()}}
op will raise this error if the new shape does not match the number of
elements in the input tensor.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.InvalidArgumentError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.InvalidArgumentError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.invalidargumenterror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{InvalidArgumentError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.DeadlineExceededError}
}{class tf.errors.DeadlineExceededError }}\label{class-tf.errors.deadlineexceedederror}

Raised when a deadline expires before an operation could complete.

This exception is not currently used.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.DeadlineExceededError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.DeadlineExceededError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.deadlineexceedederror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates a \texttt{DeadlineExceededError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.NotFoundError}
}{class tf.errors.NotFoundError }}\label{class-tf.errors.notfounderror}

Raised when a requested entity (e.g., a file or directory) was not
found.

For example, running the
\href{../../api_docs/python/io_ops.md\#WholeFileReader}{\texttt{tf.WholeFileReader.read()}}
operation could raise \texttt{NotFoundError} if it receives the name of
a file that does not exist.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.NotFoundError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.NotFoundError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.notfounderror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates a \texttt{NotFoundError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.AlreadyExistsError}
}{class tf.errors.AlreadyExistsError }}\label{class-tf.errors.alreadyexistserror}

Raised when an entity that we attempted to create already exists.

For example, running an operation that saves a file (e.g.
\href{../../api_docs/python/train.md\#Saver.save}{\texttt{tf.train.Saver.save()}})
could potentially raise this exception if an explicit filename for an
existing file was passed.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.AlreadyExistsError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.AlreadyExistsError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.alreadyexistserror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{AlreadyExistsError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.PermissionDeniedError}
}{class tf.errors.PermissionDeniedError }}\label{class-tf.errors.permissiondeniederror}

Raised when the caller does not have permission to run an operation.

For example, running the
\href{../../api_docs/python/io_ops.md\#WholeFileReader}{\texttt{tf.WholeFileReader.read()}}
operation could raise \texttt{PermissionDeniedError} if it receives the
name of a file for which the user does not have the read file
permission.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.PermissionDeniedError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.PermissionDeniedError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.permissiondeniederror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates a \texttt{PermissionDeniedError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.UnauthenticatedError}
}{class tf.errors.UnauthenticatedError }}\label{class-tf.errors.unauthenticatederror}

The request does not have valid authentication credentials.

This exception is not currently used.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.UnauthenticatedError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.UnauthenticatedError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.unauthenticatederror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{UnauthenticatedError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.ResourceExhaustedError}
}{class tf.errors.ResourceExhaustedError }}\label{class-tf.errors.resourceexhaustederror}

Some resource has been exhausted.

For example, this error might be raised if a per-user quota is
exhausted, or perhaps the entire file system is out of space.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.ResourceExhaustedError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.ResourceExhaustedError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.resourceexhaustederror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates a \texttt{ResourceExhaustedError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.FailedPreconditionError}
}{class tf.errors.FailedPreconditionError }}\label{class-tf.errors.failedpreconditionerror}

Operation was rejected because the system is not in a state to execute
it.

This exception is most commonly raised when running an operation that
reads a
\href{../../api_docs/python/state_ops.md\#Variable}{\texttt{tf.Variable}}
before it has been initialized.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.FailedPreconditionError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.FailedPreconditionError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.failedpreconditionerror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates a \texttt{FailedPreconditionError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.AbortedError}
}{class tf.errors.AbortedError }}\label{class-tf.errors.abortederror}

The operation was aborted, typically due to a concurrent action.

For example, running a
\href{../../api_docs/python/io_ops.md\#QueueBase.enqueue}{\texttt{queue.enqueue()}}
operation may raise \texttt{AbortedError} if a
\href{../../api_docs/python/io_ops.md\#QueueBase.close}{\texttt{queue.close()}}
operation previously ran.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.AbortedError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.AbortedError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.abortederror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{AbortedError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.OutOfRangeError}
}{class tf.errors.OutOfRangeError }}\label{class-tf.errors.outofrangeerror}

Raised when an operation executed past the valid range.

This exception is raised in ``end-of-file'' conditions, such as when a
\href{../../api_docs/python/io_ops.md\#QueueBase.dequeue}{\texttt{queue.dequeue()}}
operation is blocked on an empty queue, and a
\href{../../api_docs/python/io_ops.md\#QueueBase.close}{\texttt{queue.close()}}
operation executes.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.OutOfRangeError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.OutOfRangeError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.outofrangeerror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{OutOfRangeError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.UnimplementedError}
}{class tf.errors.UnimplementedError }}\label{class-tf.errors.unimplementederror}

Raised when an operation has not been implemented.

Some operations may raise this error when passed otherwise-valid
arguments that it does not currently support. For example, running the
\href{../../api_docs/python/nn.md\#max_pool}{\texttt{tf.nn.max\_pool()}}
operation would raise this error if pooling was requested on the batch
dimension, because this is not yet supported.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.UnimplementedError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.UnimplementedError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.unimplementederror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{UnimplementedError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.InternalError}
}{class tf.errors.InternalError }}\label{class-tf.errors.internalerror}

Raised when the system experiences an internal error.

This exception is raised when some invariant expected by the runtime has
been broken. Catching this exception is not recommended.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.InternalError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.InternalError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.internalerror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{InternalError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.UnavailableError}
}{class tf.errors.UnavailableError }}\label{class-tf.errors.unavailableerror}

Raised when the runtime is currently unavailable.

This exception is not currently used.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.UnavailableError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.UnavailableError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.unavailableerror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates an \texttt{UnavailableError}.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\subsubsection{\texorpdfstring{\texttt{class\ tf.errors.DataLossError}
}{class tf.errors.DataLossError }}\label{class-tf.errors.datalosserror}

Raised when unrecoverable data loss or corruption is encountered.

For example, this may be raised by running a
\href{../../api_docs/python/io_ops.md\#WholeFileReader}{\texttt{tf.WholeFileReader.read()}}
operation, if the file is truncated while it is being read.

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\paragraph{\texorpdfstring{\texttt{tf.errors.DataLossError.\_\_init\_\_(node\_def,\ op,\ message)}
}{tf.errors.DataLossError.\_\_init\_\_(node\_def, op, message) }}\label{tf.errors.datalosserror.ux5fux5finitux5fux5fnodeux5fdef-op-message}

Creates a \texttt{DataLossError}.