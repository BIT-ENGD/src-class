{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-cse #-}

module Main where

import System.Console.CmdArgs
import Text.Parsec ((<|>))
import qualified Text.Parsec as Parsec
import Data.Char (toLower, isUpper)
import Util
import Types
import Obj

data Args = Args { sourcePath :: String
                 , prefixToRemove :: String
                 , kebabCase :: Bool
                 } deriving (Show, Data, Typeable)

main = do parsedArgs <- cmdArgs (Args { sourcePath = def &= argPos 0
                                      , prefixToRemove = def
                                      , kebabCase = False
                                      }
                                 &= summary "Carp Header Parse 0.0.1")
          let path = sourcePath parsedArgs
          if path /= ""
            then do source <- readFile path
                    putStrLn (joinWith "\n" (map pretty (parseHeaderFile path source
                                                         (prefixToRemove parsedArgs)
                                                         (kebabCase parsedArgs))))
            else print parsedArgs

parseHeaderFile :: FilePath -> String -> String -> Bool -> [XObj]
parseHeaderFile path src prefix kebab =
  case Parsec.runParser cSyntax () path src of
    Left err -> error (show err)
    Right ok -> concat ok
  where
        cSyntax :: Parsec.Parsec String () [[XObj]]
        cSyntax = Parsec.sepBy line (Parsec.char '\n')

        line :: Parsec.Parsec String () [XObj]
        line = Parsec.try prefixedFunctionPrototype <|>
               Parsec.try functionPrototype <|>
               Parsec.try define <|>
               discarded

        define :: Parsec.Parsec String () [XObj]
        define = do Parsec.many spaceOrTab
                    Parsec.string "#define"
                    Parsec.many spaceOrTab
                    name <- Parsec.many1 identifierChar
                    argList <- Parsec.optionMaybe argList
                    Parsec.many spaceOrTab
                    _ <- defineBody
                    Parsec.many spaceOrTab
                    -- OBS! Never kebab
                    case argList of
                      Nothing ->
                        let tyXObj =
                              XObj (Sym (SymPath [] "a") Symbol) Nothing Nothing
                        in return (createRegisterForm name tyXObj prefix False)
                      Just args ->
                        let argsTy = genTypes (length args)
                            tyXObj = toFnTypeXObj argsTy ("a", 0)
                        in return (createRegisterForm name tyXObj prefix False)
            where argList = do
                    _ <- Parsec.char '('
                    args <- Parsec.sepBy
                              (Parsec.many spaceOrTab >>
                               Parsec.many1 identifierChar)
                              (Parsec.char ',')
                    _ <- Parsec.char ')'
                    return args
                  genTypes 0 = []
                  genTypes n = (("a" ++ show n), 0) : genTypes (n - 1)

        defineBody :: Parsec.Parsec String () ()
        defineBody = do s <- Parsec.many (Parsec.noneOf "\\\n")
                        ending <- Parsec.optionMaybe (Parsec.string "\\\\\n")
                        case ending of
                          Nothing ->
                            do c <- Parsec.optionMaybe (Parsec.noneOf "\n")
                               case c of
                                 Just _  -> defineBody
                                 Nothing -> return ()
                          Just _ -> defineBody

        prefixedFunctionPrototype :: Parsec.Parsec String () [XObj]
        prefixedFunctionPrototype = do Parsec.many spaceOrTab
                                       _ <- Parsec.many1 identifierChar
                                       functionPrototype

        functionPrototype :: Parsec.Parsec String () [XObj]
        functionPrototype = do Parsec.many spaceOrTab
                               returnTypeString <- Parsec.many1 identifierChar
                               stars1 <- stars
                               Parsec.many1 spaceOrTab
                               stars2 <- stars
                               name <- Parsec.many1 identifierChar
                               Parsec.many spaceOrTab
                               argTypeStrings <- Parsec.try voidArg <|>
                                                 argList
                               Parsec.many spaceOrTab
                               Parsec.char ';'
                               Parsec.many spaceOrTab
                               let tyXObj = toFnTypeXObj argTypeStrings (returnTypeString, length stars1 + length stars2)
                               return (createRegisterForm name tyXObj prefix kebab)

        voidArg :: Parsec.Parsec String () [(String, Int)]
        voidArg = do _ <- Parsec.string "(void)"
                     return []

        argList :: Parsec.Parsec String () [(String, Int)]
        argList = do Parsec.char '('
                     args <- Parsec.sepBy arg (Parsec.char ',')
                     Parsec.char ')'
                     return args

        arg :: Parsec.Parsec String () (String, Int)
        arg = do Parsec.many spaceOrTab
                 _ <- Parsec.option "" $ do Parsec.string "const"
                                            Parsec.many spaceOrTab
                 argTypeAsString <- Parsec.many1 identifierChar
                 stars1 <- stars
                 Parsec.many1 spaceOrTab
                 stars2 <- stars
                 _ <- Parsec.many1 identifierChar
                 Parsec.many spaceOrTab
                 return (argTypeAsString, length stars1 + length stars2)

        stars :: Parsec.Parsec String () String
        stars = Parsec.many (Parsec.char '*')

        spaceOrTab :: Parsec.Parsec String () Char
        spaceOrTab = Parsec.choice [Parsec.char ' ', Parsec.char '\t']

        discarded :: Parsec.Parsec String () [XObj]
        discarded = do discardedLine <- Parsec.many (Parsec.noneOf "\n")
                       return []
                       --return [(XObj (Str ("DISCARDED: " ++ discardedLine)) Nothing Nothing)]

createRegisterForm :: String -> XObj -> String -> Bool -> [XObj]
createRegisterForm name tyXObj prefix kebab =
  let carpName = (if kebab then (toKebab . lowerFirst) else id)
                   (if prefix == "" then name else removePrefix prefix name)
      emitName = name
  in [XObj (Lst ([ (XObj (Sym (SymPath [] "register") Symbol) Nothing Nothing)
                 , (XObj (Sym (SymPath [] carpName) Symbol) Nothing Nothing)
                 , tyXObj
                 ] ++
                  if prefix == ""
                  then []
                  else [(XObj (Str emitName) Nothing Nothing)]
                )) Nothing Nothing]

toFnTypeXObj :: [(String, Int)] -> (String, Int) -> XObj
toFnTypeXObj argTypeStrings returnTypeString =
  (XObj (Lst [ (XObj (Sym (SymPath [] "Î»") Symbol) Nothing Nothing)
             , (XObj (Arr (map (tyToXObj . cTypeToCarpType) argTypeStrings)) Nothing Nothing)
             , (XObj (Sym (SymPath [] (show (cTypeToCarpType returnTypeString))) Symbol) Nothing Nothing)
             ]) Nothing Nothing)

toTypeXObj :: (String, Int) -> XObj
toTypeXObj typeString =
  (XObj (Sym (SymPath [] (show (cTypeToCarpType typeString))) Symbol) Nothing Nothing)

cTypeToCarpType :: (String, Int) -> Ty
cTypeToCarpType ("char", 0) = CharTy
cTypeToCarpType ("int", 0) = IntTy
cTypeToCarpType ("bool", 0) = BoolTy
cTypeToCarpType ("long", 0) = LongTy
cTypeToCarpType ("double", 0) = DoubleTy
cTypeToCarpType ("float", 0) = FloatTy
cTypeToCarpType ("void", 0) = UnitTy
cTypeToCarpType (s, 0) = (StructTy s [])
cTypeToCarpType (x, stars) = (PointerTy (cTypeToCarpType (x, stars - 1)))

identifierChar :: Parsec.Parsec String () Char
identifierChar = Parsec.choice [Parsec.letter, Parsec.digit, Parsec.char '_']

removePrefix :: String -> String -> String
removePrefix prefix s =
  case Parsec.runParser match () "" s of
    Left err -> s
    Right ok -> ok
  where match =
          do _ <- Parsec.string prefix
             Parsec.many1 identifierChar

lowerFirst :: String -> String
lowerFirst (c : cs) = toLower c : cs

toKebab :: String -> String
toKebab [] = []
toKebab (c : cs) = (if isUpper c then ['-', toLower c] else [c]) ++ toKebab cs
module Scoring (scoreTypeBinder, scoreValueBinder) where

import Debug.Trace
import qualified Data.Set as Set

import Types
import Obj
import Lookup

-- | Scoring of types.
-- | The score is used for sorting the bindings before emitting them.
-- | A lower score means appearing earlier in the emitted file.
scoreTypeBinder :: TypeEnv -> Binder -> (Int, Binder)
scoreTypeBinder typeEnv b@(Binder _ (XObj (Lst (XObj x _ _ : XObj (Sym _ _) _ _ : _)) _ _)) =
  case x of
    Defalias aliasedType ->
      let selfName = ""
      -- we add 1 here because deftypes generate aliases that
      -- will at least have the same score as the type, but
      -- need to come after. the increment represents this dependency
      in  (depthOfType typeEnv selfName aliasedType + 1, b)
    Typ (StructTy structName varTys) ->
      case lookupInEnv (SymPath [] structName) (getTypeEnv typeEnv) of
        Just (_, Binder _ typedef) -> let depth = ((depthOfDeftype typeEnv typedef varTys), b)
                                    in  --trace ("depth of " ++ structName ++ ": " ++ show depth)
                                        depth
        Nothing -> error ("Can't find user defined type '" ++ structName ++ "' in type env.")
    _ ->
      (500, b)
scoreTypeBinder _ b@(Binder _ (XObj (Mod _) _ _)) =
  (1000, b)
scoreTypeBinder _ x = error ("Can't score: " ++ show x)

depthOfDeftype :: TypeEnv -> XObj -> [Ty] -> Int
depthOfDeftype typeEnv (XObj (Lst (_ : XObj (Sym (SymPath _ selfName) _) _ _ : rest)) _ _) varTys =
  case concatMap expandCase rest of
    [] -> 100
    xs -> (maximum xs) + 1
  where
    expandCase :: XObj -> [Int]
    expandCase (XObj (Arr arr) _ _) =
      let members = memberXObjsToPairs arr
          depthsFromMembers = map (depthOfType typeEnv selfName . snd) members
          depthsFromVarTys = map (depthOfType typeEnv selfName) varTys
      in depthsFromMembers ++ depthsFromVarTys
    expandCase _ = error "Malformed case in typedef."
depthOfDeftype _ xobj _ =
  error ("Can't get dependency depth from " ++ show xobj)

depthOfType :: TypeEnv -> String -> Ty -> Int
depthOfType typeEnv selfName = visitType
  where
    visitType :: Ty -> Int
    visitType t@(StructTy name varTys) = depthOfStructType (tyToC t) varTys
    visitType (FuncTy argTys retTy) =
      -- trace ("Depth of args of " ++ show argTys ++ ": " ++ show (map (visitType . Just) argTys))
      maximum (visitType retTy : fmap visitType argTys) + 1
    visitType (PointerTy p) = visitType p
    visitType (RefTy r) = visitType r
    visitType _ = 100

    depthOfStructType :: String -> [Ty] -> Int
    depthOfStructType name varTys =
      case name of
        "Array" -> depthOfVarTys
        _ | name == selfName -> 30
          | otherwise ->
              case lookupInEnv (SymPath [] name) (getTypeEnv typeEnv) of
                Just (_, Binder _ typedef) -> (depthOfDeftype typeEnv typedef varTys) + 1
                Nothing -> --trace ("Unknown type: " ++ name) $
                           depthOfVarTys -- The problem here is that generic types don't generate
                                         -- their definition in time so we get nothing for those.
                                         -- Instead, let's try the type vars.
      where depthOfVarTys =
              case fmap (depthOfType typeEnv name) varTys of
                [] -> 50
                xs -> (maximum xs) + 1



-- | Scoring of value bindings ('def' and 'defn')
-- | The score is used for sorting the bindings before emitting them.
-- | A lower score means appearing earlier in the emitted file.
scoreValueBinder :: Env -> Set.Set SymPath -> Binder -> (Int, Binder)
scoreValueBinder globalEnv _ binder@(Binder _ (XObj (Lst ((XObj (External _) _ _) : _)) _ _)) =
  (0, binder)
scoreValueBinder globalEnv visited binder@(Binder _ (XObj (Lst [(XObj Def  _ _), XObj (Sym path Symbol) _ _, body]) _ _)) =
  (scoreBody globalEnv visited body, binder)
scoreValueBinder globalEnv visited binder@(Binder _ (XObj (Lst [(XObj Defn _ _), XObj (Sym path Symbol) _ _, _, body]) _ _)) =
  (scoreBody globalEnv visited body, binder)
scoreValueBinder _ _ binder =
  (0, binder)

scoreBody :: Env -> Set.Set SymPath -> XObj -> Int
scoreBody globalEnv visited root = visit root
  where
    visit xobj =
      case obj xobj of
        (Lst _) ->
          visitList xobj
        (Arr _) ->
          visitArray xobj
        (Sym path (LookupGlobal _ _)) ->
          if Set.member path visited
          then 0
          else case lookupInEnv path globalEnv of
                 Just (_, foundBinder) ->
                   let (score, _) = scoreValueBinder globalEnv (Set.insert path visited) foundBinder
                   in  score + 1
                 Nothing ->
                   error ("Failed to lookup '" ++ show path ++ "'.")
        _ -> 0
    visitList (XObj (Lst []) _ _) =
      0
    visitList (XObj (Lst xobjs) _ _) =
      maximum (fmap visit xobjs)
    visitArray (XObj (Arr []) _ _) =
      0
    visitArray (XObj (Arr xobjs) _ _) =
      maximum (fmap visit xobjs)
