{-# LANGUAGE CPP #-}
import Control.Concurrent
import Control.Exception
import Foreign

import System.IO (hFlush,stdout)

#if __GLASGOW_HASKELL__ < 705
import Prelude hiding (catch)
#endif

-- !!! Try to get two threads into a knot depending on each other.

-- This should result in the main thread being sent a NonTermination
-- exception (in GHC 5.02, the program is terminated with "no threads
-- to run" instead).

main = do
  Foreign.newStablePtr stdout
	-- HACK, because when these two threads get blocked on each other,
	-- there's nothing keeping stdout alive so it will get finalized.
	-- SDM 12/3/2004
  let a = last ([1..10000] ++ [b])
      b = last ([2..10000] ++ [a])
	-- we have to be careful to ensure that the strictness analyser
	-- can't see that a and b are both bottom, otherwise the
	-- simplifier will go to town here, resulting in something like
	-- a = a and b = a.
  forkIO (print a `catch` \NonTermination -> return ())
	-- we need to catch in the child thread too, because it might 
	-- get sent the NonTermination exception first.
  r <- Control.Exception.try (print b)
  print (r :: Either NonTermination ())

module Main where

import Control.Concurrent
import qualified Control.Exception as E

trapHandler :: MVar Int -> MVar () -> IO ()
trapHandler inVar caughtVar =
  (do E.mask_ $ do
          trapMsg <- takeMVar inVar
          putStrLn ("Handler got: " ++ show trapMsg)
      trapHandler inVar caughtVar
  )
  `E.catch`
  (trapExc inVar caughtVar)

trapExc :: MVar Int -> MVar () -> E.SomeException -> IO ()
-- If we have been killed then we are done
trapExc inVar caughtVar  e
  | Just E.ThreadKilled <- E.fromException e  = return ()
-- Otherwise...
trapExc inVar caughtVar e =
  do putStrLn ("Exception: " ++ show e)
     putMVar caughtVar ()
     trapHandler inVar caughtVar

main :: IO ()
main = do
  inVar <- newEmptyMVar
  caughtVar <- newEmptyMVar
  tid <- forkIO (trapHandler inVar caughtVar)
  yield
  putMVar inVar 1
  threadDelay 1000
  throwTo tid (E.ErrorCall "1st")
  takeMVar caughtVar
  putMVar inVar 2
  threadDelay 1000
  throwTo tid (E.ErrorCall "2nd")
	-- the second time around, exceptions will be blocked, because
	-- the trapHandler is effectively "still in the handler" from the
	-- first exception.  I'm not sure if this is by design or by
	-- accident.  Anyway, the trapHandler will at some point block
	-- in takeMVar, and thereby become interruptible, at which point
	-- it will receive the second exception.
  takeMVar caughtVar
  -- Running the GHCi way complains that tid is blocked indefinitely if
  -- it still exists, so kill it.
  killThread tid
  putStrLn "All done"
