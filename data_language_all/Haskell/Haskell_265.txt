module Luna.Test.Bench.Test where

import Prologue

-- import Data.AutoVector.Mutable.Storable as Vector



main :: IO ()
main = do
    -- print "vvvvvv"
    -- (v :: Vector Int) <- Vector.new 10
    -- print "---"
    -- print =<< Vector.unsafeRead v 0
    -- print =<< Vector.unsafeRead v 1
    -- print =<< Vector.unsafeRead v 2
    -- print =<< Vector.unsafeRead v 3
    -- Vector.pushBack v 1
    -- Vector.pushBack v 2
    -- Vector.pushBack v 3
    -- print "---"
    -- print =<< Vector.unsafeRead v 0
    -- print =<< Vector.unsafeRead v 1
    -- print =<< Vector.unsafeRead v 2
    -- print =<< Vector.unsafeRead v 3
    -- Vector.grow v
    -- Vector.insert v 4 7
    -- print "---"
    -- print =<< Vector.unsafeRead v 0
    -- print =<< Vector.unsafeRead v 1
    -- print =<< Vector.unsafeRead v 2
    -- print =<< Vector.unsafeRead v 3
    -- Vector.free v
    -- print "^^^^^^"
    return ()
module Main where

import Prelude
import Test.Hspec.Formatters
import Test.Hspec.Runner

import qualified Spec

main :: IO ()
main = hspecWith defaultConfig {configFormatter = Just progress} Spec.spec

