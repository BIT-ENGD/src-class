/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.cache;

import java.util.ArrayList;
import java.util.List;

import org.springframework.cache.concurrent.ConcurrentMapCache;
import org.springframework.cache.support.SimpleCacheManager;

import static org.junit.Assert.*;

/**
 * General cache-related test utilities.
 *
 * @author Stephane Nicoll
 */
public class CacheTestUtils {

	/**
	 * Create a {@link SimpleCacheManager} with the specified cache(s).
	 * @param cacheNames the names of the caches to create
	 */
	public static CacheManager createSimpleCacheManager(String... cacheNames) {
		SimpleCacheManager result = new SimpleCacheManager();
		List<Cache> caches = new ArrayList<>();
		for (String cacheName : cacheNames) {
			caches.add(new ConcurrentMapCache(cacheName));
		}
		result.setCaches(caches);
		result.afterPropertiesSet();
		return result;
	}


	/**
	 * Assert the following key is not held within the specified cache(s).
	 */
	public static void assertCacheMiss(Object key, Cache... caches) {
		for (Cache cache : caches) {
			assertNull("No entry in " + cache + " should have been found with key " + key, cache.get(key));
		}
	}

	/**
	 * Assert the following key has a matching value within the specified cache(s).
	 */
	public static void assertCacheHit(Object key, Object value, Cache... caches) {
		for (Cache cache : caches) {
			Cache.ValueWrapper wrapper = cache.get(key);
			assertNotNull("An entry in " + cache + " should have been found with key " + key, wrapper);
			assertEquals("Wrong value in " + cache + " for entry with key " + key, value, wrapper.get());
		}
	}

}
package com.bumptech.glide.annotation.compiler;

import static com.google.testing.compile.CompilationSubject.assertThat;
import static com.google.testing.compile.Compiler.javac;
import static org.junit.Assert.assertThrows;

import com.google.testing.compile.Compilation;
import com.google.testing.compile.JavaFileObjects;
import org.junit.Test;
import org.junit.function.ThrowingRunnable;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/**
 * Tests AppGlideModules with invalid usages of the @Excludes annotation.
 */
// Ignore warnings since most methods use assertThrows
@SuppressWarnings("ResultOfMethodCallIgnored")
@RunWith(JUnit4.class)
public class InvalidAppGlideModuleWithExcludesTest {
  @Test
  public void compilation_withMissingExcludedModuleClass_throws() {
    assertThrows(
        RuntimeException.class,
        new ThrowingRunnable() {
          @Override
          public void run() throws Throwable {
            javac()
                .withProcessors(new GlideAnnotationProcessor())
                .compile(
                    JavaFileObjects.forSourceLines(
                        "AppModuleWithExcludes",
                        "package com.bumptech.glide.test;",
                        "import com.bumptech.glide.annotation.Excludes;",
                        "import com.bumptech.glide.annotation.GlideModule;",
                        "import com.bumptech.glide.module.AppGlideModule;",
                        "import com.bumptech.glide.test.EmptyLibraryModule;",
                        "@GlideModule",
                        "@Excludes(EmptyLibraryModule.class)",
                        "public final class AppModuleWithExcludes extends AppGlideModule {}"));
          }
        });
  }

  @Test
  public void compilation_withEmptyExcludes_fails() {
    Compilation compilation =
        javac()
            .withProcessors(new GlideAnnotationProcessor())
            .compile(
                JavaFileObjects.forSourceLines(
                    "AppModuleWithExcludes",
                    "package com.bumptech.glide.test;",
                    "import com.bumptech.glide.annotation.Excludes;",
                    "import com.bumptech.glide.annotation.GlideModule;",
                    "import com.bumptech.glide.module.AppGlideModule;",
                    "import com.bumptech.glide.test.EmptyLibraryModule;",
                    "@GlideModule",
                    "@Excludes",
                    "public final class AppModuleWithExcludes extends AppGlideModule {}"));
    assertThat(compilation).failed();
  }

  @Test
  public void compilation_withNonGlideModule_throws() {
     Compilation compilation =
        javac()
            .withProcessors(new GlideAnnotationProcessor())
            .compile(
                JavaFileObjects.forSourceLines(
                    "AppModuleWithExcludes",
                    "package com.bumptech.glide.test;",
                    "import com.bumptech.glide.annotation.Excludes;",
                    "import com.bumptech.glide.annotation.GlideModule;",
                    "import com.bumptech.glide.module.AppGlideModule;",
                    "import com.bumptech.glide.test.EmptyLibraryModule;",
                    "@GlideModule",
                    "@Excludes(Object.class)",
                    "public final class AppModuleWithExcludes extends AppGlideModule {}"));
    assertThat(compilation).failed();
  }
}
