%%
%% src/leo_nfs_proto3_xdr was generated by erpcgen (do not edit)
%%
-module(leo_nfs_proto3_xdr).
-export([enc_uint64/1, dec_uint64/2]).
-export([enc_int64/1, dec_int64/2]).
-export([enc_uint32/1, dec_uint32/2]).
-export([enc_int32/1, dec_int32/2]).
-export([enc_filename3/1, dec_filename3/2]).
-export([enc_nfspath3/1, dec_nfspath3/2]).
-export([enc_fileid3/1, dec_fileid3/2]).
-export([enc_cookie3/1, dec_cookie3/2]).
-export([enc_cookieverf3/1, dec_cookieverf3/2]).
-export([enc_createverf3/1, dec_createverf3/2]).
-export([enc_writeverf3/1, dec_writeverf3/2]).
-export([enc_uid3/1, dec_uid3/2]).
-export([enc_gid3/1, dec_gid3/2]).
-export([enc_size3/1, dec_size3/2]).
-export([enc_offset3/1, dec_offset3/2]).
-export([enc_mode3/1, dec_mode3/2]).
-export([enc_count3/1, dec_count3/2]).
-export([enc_nfsstat3/1, dec_nfsstat3/2, dec_nfsstat3_i2a/1]).
-export([enc_ftype3/1, dec_ftype3/2, dec_ftype3_i2a/1]).
-export([enc_specdata3/1, dec_specdata3/2]).
-export([enc_nfs_fh3/1, dec_nfs_fh3/2]).
-export([enc_nfstime3/1, dec_nfstime3/2]).
-export([enc_fattr3/1, dec_fattr3/2]).
-export([enc_post_op_attr/1, dec_post_op_attr/2]).
-export([enc_wcc_attr/1, dec_wcc_attr/2]).
-export([enc_pre_op_attr/1, dec_pre_op_attr/2]).
-export([enc_wcc_data/1, dec_wcc_data/2]).
-export([enc_post_op_fh3/1, dec_post_op_fh3/2]).
-export([enc_time_how/1, dec_time_how/2, dec_time_how_i2a/1]).
-export([enc_set_mode3/1, dec_set_mode3/2]).
-export([enc_set_uid3/1, dec_set_uid3/2]).
-export([enc_set_gid3/1, dec_set_gid3/2]).
-export([enc_set_size3/1, dec_set_size3/2]).
-export([enc_set_atime/1, dec_set_atime/2]).
-export([enc_set_mtime/1, dec_set_mtime/2]).
-export([enc_sattr3/1, dec_sattr3/2]).
-export([enc_diropargs3/1, dec_diropargs3/2]).
-export([enc_getattr3args/1, dec_getattr3args/2]).
-export([enc_getattr3resok/1, dec_getattr3resok/2]).
-export([enc_getattr3res/1, dec_getattr3res/2]).
-export([enc_sattrguard3/1, dec_sattrguard3/2]).
-export([enc_setattr3args/1, dec_setattr3args/2]).
-export([enc_setattr3resok/1, dec_setattr3resok/2]).
-export([enc_setattr3resfail/1, dec_setattr3resfail/2]).
-export([enc_setattr3res/1, dec_setattr3res/2]).
-export([enc_lookup3args/1, dec_lookup3args/2]).
-export([enc_lookup3resok/1, dec_lookup3resok/2]).
-export([enc_lookup3resfail/1, dec_lookup3resfail/2]).
-export([enc_lookup3res/1, dec_lookup3res/2]).
-export([enc_access3args/1, dec_access3args/2]).
-export([enc_access3resok/1, dec_access3resok/2]).
-export([enc_access3resfail/1, dec_access3resfail/2]).
-export([enc_access3res/1, dec_access3res/2]).
-export([enc_readlink3args/1, dec_readlink3args/2]).
-export([enc_readlink3resok/1, dec_readlink3resok/2]).
-export([enc_readlink3resfail/1, dec_readlink3resfail/2]).
-export([enc_readlink3res/1, dec_readlink3res/2]).
-export([enc_read3args/1, dec_read3args/2]).
-export([enc_read3resok/1, dec_read3resok/2]).
-export([enc_read3resfail/1, dec_read3resfail/2]).
-export([enc_read3res/1, dec_read3res/2]).
-export([enc_stable_how/1, dec_stable_how/2, dec_stable_how_i2a/1]).
-export([enc_write3args/1, dec_write3args/2]).
-export([enc_write3resok/1, dec_write3resok/2]).
-export([enc_write3resfail/1, dec_write3resfail/2]).
-export([enc_write3res/1, dec_write3res/2]).
-export([enc_createmode3/1, dec_createmode3/2, dec_createmode3_i2a/1]).
-export([enc_createhow3/1, dec_createhow3/2]).
-export([enc_create3args/1, dec_create3args/2]).
-export([enc_create3resok/1, dec_create3resok/2]).
-export([enc_create3resfail/1, dec_create3resfail/2]).
-export([enc_create3res/1, dec_create3res/2]).
-export([enc_mkdir3args/1, dec_mkdir3args/2]).
-export([enc_mkdir3resok/1, dec_mkdir3resok/2]).
-export([enc_mkdir3resfail/1, dec_mkdir3resfail/2]).
-export([enc_mkdir3res/1, dec_mkdir3res/2]).
-export([enc_symlinkdata3/1, dec_symlinkdata3/2]).
-export([enc_symlink3args/1, dec_symlink3args/2]).
-export([enc_symlink3resok/1, dec_symlink3resok/2]).
-export([enc_symlink3resfail/1, dec_symlink3resfail/2]).
-export([enc_symlink3res/1, dec_symlink3res/2]).
-export([enc_devicedata3/1, dec_devicedata3/2]).
-export([enc_mknoddata3/1, dec_mknoddata3/2]).
-export([enc_mknod3args/1, dec_mknod3args/2]).
-export([enc_mknod3resok/1, dec_mknod3resok/2]).
-export([enc_mknod3resfail/1, dec_mknod3resfail/2]).
-export([enc_mknod3res/1, dec_mknod3res/2]).
-export([enc_remove3args/1, dec_remove3args/2]).
-export([enc_remove3resok/1, dec_remove3resok/2]).
-export([enc_remove3resfail/1, dec_remove3resfail/2]).
-export([enc_remove3res/1, dec_remove3res/2]).
-export([enc_rmdir3args/1, dec_rmdir3args/2]).
-export([enc_rmdir3resok/1, dec_rmdir3resok/2]).
-export([enc_rmdir3resfail/1, dec_rmdir3resfail/2]).
-export([enc_rmdir3res/1, dec_rmdir3res/2]).
-export([enc_rename3args/1, dec_rename3args/2]).
-export([enc_rename3resok/1, dec_rename3resok/2]).
-export([enc_rename3resfail/1, dec_rename3resfail/2]).
-export([enc_rename3res/1, dec_rename3res/2]).
-export([enc_link3args/1, dec_link3args/2]).
-export([enc_link3resok/1, dec_link3resok/2]).
-export([enc_link3resfail/1, dec_link3resfail/2]).
-export([enc_link3res/1, dec_link3res/2]).
-export([enc_readdir3args/1, dec_readdir3args/2]).
-export([enc_entry3/1, dec_entry3/2]).
-export([enc_dirlist3/1, dec_dirlist3/2]).
-export([enc_readdir3resok/1, dec_readdir3resok/2]).
-export([enc_readdir3resfail/1, dec_readdir3resfail/2]).
-export([enc_readdir3res/1, dec_readdir3res/2]).
-export([enc_readdirplus3args/1, dec_readdirplus3args/2]).
-export([enc_entryplus3/1, dec_entryplus3/2]).
-export([enc_dirlistplus3/1, dec_dirlistplus3/2]).
-export([enc_readdirplus3resok/1, dec_readdirplus3resok/2]).
-export([enc_readdirplus3resfail/1, dec_readdirplus3resfail/2]).
-export([enc_readdirplus3res/1, dec_readdirplus3res/2]).
-export([enc_fsstat3args/1, dec_fsstat3args/2]).
-export([enc_fsstat3resok/1, dec_fsstat3resok/2]).
-export([enc_fsstat3resfail/1, dec_fsstat3resfail/2]).
-export([enc_fsstat3res/1, dec_fsstat3res/2]).
-export([enc_fsinfo3args/1, dec_fsinfo3args/2]).
-export([enc_fsinfo3resok/1, dec_fsinfo3resok/2]).
-export([enc_fsinfo3resfail/1, dec_fsinfo3resfail/2]).
-export([enc_fsinfo3res/1, dec_fsinfo3res/2]).
-export([enc_pathconf3args/1, dec_pathconf3args/2]).
-export([enc_pathconf3resok/1, dec_pathconf3resok/2]).
-export([enc_pathconf3resfail/1, dec_pathconf3resfail/2]).
-export([enc_pathconf3res/1, dec_pathconf3res/2]).
-export([enc_commit3args/1, dec_commit3args/2]).
-export([enc_commit3resok/1, dec_commit3resok/2]).
-export([enc_commit3resfail/1, dec_commit3resfail/2]).
-export([enc_commit3res/1, dec_commit3res/2]).

enc_uint64(_1) ->
    <<_1:64>>.

dec_uint64(_1, _2) ->
    begin
        <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
        {_3,_2 + 8}
    end.

enc_int64(_1) ->
    <<_1:64>>.

dec_int64(_1, _2) ->
    begin
        <<_:_2/binary,_3:64/signed,_/binary>> = _1,
        {_3,_2 + 8}
    end.

enc_uint32(_1) ->
    <<_1:32>>.

dec_uint32(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        {_3,_2 + 4}
    end.

enc_int32(_1) ->
    <<_1:32>>.

dec_int32(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        {_3,_2 + 4}
    end.

enc_filename3(_1) ->
    begin
        _2 = io_list_len(_1),
        [<<_2:32/unsigned>>,_1,enc_align(_2)]
    end.

dec_filename3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        <<_:_4/binary,_5:_3/binary,_/binary>> = _1,
        {_5,_4 + align(_3)}
    end.

enc_nfspath3(_1) ->
    begin
        _2 = io_list_len(_1),
        [<<_2:32/unsigned>>,_1,enc_align(_2)]
    end.

dec_nfspath3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        _4 = _2 + 4,
        <<_:_4/binary,_5:_3/binary,_/binary>> = _1,
        {_5,_4 + align(_3)}
    end.

enc_fileid3(_1) ->
    enc_uint64(_1).

dec_fileid3(_1, _2) ->
    dec_uint64(_1, _2).

enc_cookie3(_1) ->
    enc_uint64(_1).

dec_cookie3(_1, _2) ->
    dec_uint64(_1, _2).

enc_cookieverf3(_1) ->
    case io_list_len(_1) of
        8 ->
            _1;
        _ ->
            exit({xdr,limit})
    end.

dec_cookieverf3(_1, _2) ->
    begin
        <<_:_2/binary,_3:8/binary,_/binary>> = _1,
        {_3,_2 + 8}
    end.

enc_createverf3(_1) ->
    case io_list_len(_1) of
        8 ->
            _1;
        _ ->
            exit({xdr,limit})
    end.

dec_createverf3(_1, _2) ->
    begin
        <<_:_2/binary,_3:8/binary,_/binary>> = _1,
        {_3,_2 + 8}
    end.

enc_writeverf3(_1) ->
    case io_list_len(_1) of
        8 ->
            _1;
        _ ->
            exit({xdr,limit})
    end.

dec_writeverf3(_1, _2) ->
    begin
        <<_:_2/binary,_3:8/binary,_/binary>> = _1,
        {_3,_2 + 8}
    end.

enc_uid3(_1) ->
    enc_uint32(_1).

dec_uid3(_1, _2) ->
    dec_uint32(_1, _2).

enc_gid3(_1) ->
    enc_uint32(_1).

dec_gid3(_1, _2) ->
    dec_uint32(_1, _2).

enc_size3(_1) ->
    enc_uint64(_1).

dec_size3(_1, _2) ->
    dec_uint64(_1, _2).

enc_offset3(_1) ->
    enc_uint64(_1).

dec_offset3(_1, _2) ->
    dec_uint64(_1, _2).

enc_mode3(_1) ->
    enc_uint32(_1).

dec_mode3(_1, _2) ->
    dec_uint32(_1, _2).

enc_count3(_1) ->
    enc_uint32(_1).

dec_count3(_1, _2) ->
    dec_uint32(_1, _2).

enc_nfsstat3(_1) ->
    case _1 of
        'NFS3_OK' ->
            <<0:32>>;
        'NFS3ERR_PERM' ->
            <<1:32>>;
        'NFS3ERR_NOENT' ->
            <<2:32>>;
        'NFS3ERR_IO' ->
            <<5:32>>;
        'NFS3ERR_NXIO' ->
            <<6:32>>;
        'NFS3ERR_ACCES' ->
            <<13:32>>;
        'NFS3ERR_EXIST' ->
            <<17:32>>;
        'NFS3ERR_XDEV' ->
            <<18:32>>;
        'NFS3ERR_NODEV' ->
            <<19:32>>;
        'NFS3ERR_NOTDIR' ->
            <<20:32>>;
        'NFS3ERR_ISDIR' ->
            <<21:32>>;
        'NFS3ERR_INVAL' ->
            <<22:32>>;
        'NFS3ERR_FBIG' ->
            <<27:32>>;
        'NFS3ERR_NOSPC' ->
            <<28:32>>;
        'NFS3ERR_ROFS' ->
            <<30:32>>;
        'NFS3ERR_MLINK' ->
            <<31:32>>;
        'NFS3ERR_NAMETOOLONG' ->
            <<63:32>>;
        'NFS3ERR_NOTEMPTY' ->
            <<66:32>>;
        'NFS3ERR_DQUOT' ->
            <<69:32>>;
        'NFS3ERR_STALE' ->
            <<70:32>>;
        'NFS3ERR_REMOTE' ->
            <<71:32>>;
        'NFS3ERR_BADHANDLE' ->
            <<10001:32>>;
        'NFS3ERR_NOT_SYNC' ->
            <<10002:32>>;
        'NFS3ERR_BAD_COOKIE' ->
            <<10003:32>>;
        'NFS3ERR_NOTSUPP' ->
            <<10004:32>>;
        'NFS3ERR_TOOSMALL' ->
            <<10005:32>>;
        'NFS3ERR_SERVERFAULT' ->
            <<10006:32>>;
        'NFS3ERR_BADTYPE' ->
            <<10007:32>>;
        'NFS3ERR_JUKEBOX' ->
            <<10008:32>>
    end.

dec_nfsstat3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {'NFS3_OK',_2 + 4};
            1 ->
                {'NFS3ERR_PERM',_2 + 4};
            2 ->
                {'NFS3ERR_NOENT',_2 + 4};
            5 ->
                {'NFS3ERR_IO',_2 + 4};
            6 ->
                {'NFS3ERR_NXIO',_2 + 4};
            13 ->
                {'NFS3ERR_ACCES',_2 + 4};
            17 ->
                {'NFS3ERR_EXIST',_2 + 4};
            18 ->
                {'NFS3ERR_XDEV',_2 + 4};
            19 ->
                {'NFS3ERR_NODEV',_2 + 4};
            20 ->
                {'NFS3ERR_NOTDIR',_2 + 4};
            21 ->
                {'NFS3ERR_ISDIR',_2 + 4};
            22 ->
                {'NFS3ERR_INVAL',_2 + 4};
            27 ->
                {'NFS3ERR_FBIG',_2 + 4};
            28 ->
                {'NFS3ERR_NOSPC',_2 + 4};
            30 ->
                {'NFS3ERR_ROFS',_2 + 4};
            31 ->
                {'NFS3ERR_MLINK',_2 + 4};
            63 ->
                {'NFS3ERR_NAMETOOLONG',_2 + 4};
            66 ->
                {'NFS3ERR_NOTEMPTY',_2 + 4};
            69 ->
                {'NFS3ERR_DQUOT',_2 + 4};
            70 ->
                {'NFS3ERR_STALE',_2 + 4};
            71 ->
                {'NFS3ERR_REMOTE',_2 + 4};
            10001 ->
                {'NFS3ERR_BADHANDLE',_2 + 4};
            10002 ->
                {'NFS3ERR_NOT_SYNC',_2 + 4};
            10003 ->
                {'NFS3ERR_BAD_COOKIE',_2 + 4};
            10004 ->
                {'NFS3ERR_NOTSUPP',_2 + 4};
            10005 ->
                {'NFS3ERR_TOOSMALL',_2 + 4};
            10006 ->
                {'NFS3ERR_SERVERFAULT',_2 + 4};
            10007 ->
                {'NFS3ERR_BADTYPE',_2 + 4};
            10008 ->
                {'NFS3ERR_JUKEBOX',_2 + 4}
        end
    end.

dec_nfsstat3_i2a(_4) ->
    case _4 of
        0 ->
            'NFS3_OK';
        1 ->
            'NFS3ERR_PERM';
        2 ->
            'NFS3ERR_NOENT';
        5 ->
            'NFS3ERR_IO';
        6 ->
            'NFS3ERR_NXIO';
        13 ->
            'NFS3ERR_ACCES';
        17 ->
            'NFS3ERR_EXIST';
        18 ->
            'NFS3ERR_XDEV';
        19 ->
            'NFS3ERR_NODEV';
        20 ->
            'NFS3ERR_NOTDIR';
        21 ->
            'NFS3ERR_ISDIR';
        22 ->
            'NFS3ERR_INVAL';
        27 ->
            'NFS3ERR_FBIG';
        28 ->
            'NFS3ERR_NOSPC';
        30 ->
            'NFS3ERR_ROFS';
        31 ->
            'NFS3ERR_MLINK';
        63 ->
            'NFS3ERR_NAMETOOLONG';
        66 ->
            'NFS3ERR_NOTEMPTY';
        69 ->
            'NFS3ERR_DQUOT';
        70 ->
            'NFS3ERR_STALE';
        71 ->
            'NFS3ERR_REMOTE';
        10001 ->
            'NFS3ERR_BADHANDLE';
        10002 ->
            'NFS3ERR_NOT_SYNC';
        10003 ->
            'NFS3ERR_BAD_COOKIE';
        10004 ->
            'NFS3ERR_NOTSUPP';
        10005 ->
            'NFS3ERR_TOOSMALL';
        10006 ->
            'NFS3ERR_SERVERFAULT';
        10007 ->
            'NFS3ERR_BADTYPE';
        10008 ->
            'NFS3ERR_JUKEBOX'
    end.

enc_ftype3(_1) ->
    case _1 of
        'NF3REG' ->
            <<1:32>>;
        'NF3DIR' ->
            <<2:32>>;
        'NF3BLK' ->
            <<3:32>>;
        'NF3CHR' ->
            <<4:32>>;
        'NF3LNK' ->
            <<5:32>>;
        'NF3SOCK' ->
            <<6:32>>;
        'NF3FIFO' ->
            <<7:32>>
    end.

dec_ftype3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            1 ->
                {'NF3REG',_2 + 4};
            2 ->
                {'NF3DIR',_2 + 4};
            3 ->
                {'NF3BLK',_2 + 4};
            4 ->
                {'NF3CHR',_2 + 4};
            5 ->
                {'NF3LNK',_2 + 4};
            6 ->
                {'NF3SOCK',_2 + 4};
            7 ->
                {'NF3FIFO',_2 + 4}
        end
    end.

dec_ftype3_i2a(_4) ->
    case _4 of
        1 ->
            'NF3REG';
        2 ->
            'NF3DIR';
        3 ->
            'NF3BLK';
        4 ->
            'NF3CHR';
        5 ->
            'NF3LNK';
        6 ->
            'NF3SOCK';
        7 ->
            'NF3FIFO'
    end.

enc_specdata3(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_uint32(_3),enc_uint32(_2)]
    end.

dec_specdata3(_1, _2) ->
    begin
        {_3,_4} = dec_uint32(_1, _2),
        {_5,_6} = dec_uint32(_1, _4),
        {{_3,_5},_6}
    end.

enc_nfs_fh3(_1) ->
    case _1 of
        {_2} ->
            [begin
                 _3 = io_list_len(_2),
                 if
                     _3 =< 64 ->
                         [<<_3:32/unsigned>>,_2,enc_align(_3)];
                     true ->
                         exit({xdr,limit})
                 end
             end]
    end.

dec_nfs_fh3(_1, _2) ->
    begin
        {_3,_4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 64 ->
                        exit({xdr,limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7,_6 + align(_5)}
                end
            end,
        {{_3},_4}
    end.

enc_nfstime3(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_uint32(_3),enc_uint32(_2)]
    end.

dec_nfstime3(_1, _2) ->
    begin
        {_3,_4} = dec_uint32(_1, _2),
        {_5,_6} = dec_uint32(_1, _4),
        {{_3,_5},_6}
    end.

enc_fattr3(_1) ->
    case _1 of
        {_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2} ->
            [enc_ftype3(_14),
             enc_mode3(_13),
             enc_uint32(_12),
             enc_uid3(_11),
             enc_gid3(_10),
             enc_size3(_9),
             enc_size3(_8),
             enc_specdata3(_7),
             enc_uint64(_6),
             enc_fileid3(_5),
             enc_nfstime3(_4),
             enc_nfstime3(_3),
             enc_nfstime3(_2)]
    end.

dec_fattr3(_1, _2) ->
    begin
        {_3,_4} = dec_ftype3(_1, _2),
        {_5,_6} = dec_mode3(_1, _4),
        {_7,_8} = dec_uint32(_1, _6),
        {_9,_10} = dec_uid3(_1, _8),
        {_11,_12} = dec_gid3(_1, _10),
        {_13,_14} = dec_size3(_1, _12),
        {_15,_16} = dec_size3(_1, _14),
        {_17,_18} = dec_specdata3(_1, _16),
        {_19,_20} = dec_uint64(_1, _18),
        {_21,_22} = dec_fileid3(_1, _20),
        {_23,_24} = dec_nfstime3(_1, _22),
        {_25,_26} = dec_nfstime3(_1, _24),
        {_27,_28} = dec_nfstime3(_1, _26),
        {{_3,_5,_7,_9,_11,_13,_15,_17,_19,_21,_23,_25,_27},_28}
    end.

enc_post_op_attr(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_fattr3(_3);
                 false ->
                     []
             end]
    end.

dec_post_op_attr(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_fattr3(_1, _6),
                {{true,_4},_5};
            0 ->
                {_4,_5} = {void,_6},
                {{false,_4},_5}
        end
    end.

enc_wcc_attr(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_size3(_4),enc_nfstime3(_3),enc_nfstime3(_2)]
    end.

dec_wcc_attr(_1, _2) ->
    begin
        {_3,_4} = dec_size3(_1, _2),
        {_5,_6} = dec_nfstime3(_1, _4),
        {_7,_8} = dec_nfstime3(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_pre_op_attr(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_wcc_attr(_3);
                 false ->
                     []
             end]
    end.

dec_pre_op_attr(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_wcc_attr(_1, _6),
                {{true,_4},_5};
            0 ->
                {_4,_5} = {void,_6},
                {{false,_4},_5}
        end
    end.

enc_wcc_data(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_pre_op_attr(_3),enc_post_op_attr(_2)]
    end.

dec_wcc_data(_1, _2) ->
    begin
        {_3,_4} = dec_pre_op_attr(_1, _2),
        {_5,_6} = dec_post_op_attr(_1, _4),
        {{_3,_5},_6}
    end.

enc_post_op_fh3(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_nfs_fh3(_3);
                 false ->
                     []
             end]
    end.

dec_post_op_fh3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_nfs_fh3(_1, _6),
                {{true,_4},_5};
            0 ->
                {_4,_5} = {void,_6},
                {{false,_4},_5}
        end
    end.

enc_time_how(_1) ->
    case _1 of
        'DONT_CHANGE' ->
            <<0:32>>;
        'SET_TO_SERVER_TIME' ->
            <<1:32>>;
        'SET_TO_CLIENT_TIME' ->
            <<2:32>>
    end.

dec_time_how(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {'DONT_CHANGE',_2 + 4};
            1 ->
                {'SET_TO_SERVER_TIME',_2 + 4};
            2 ->
                {'SET_TO_CLIENT_TIME',_2 + 4}
        end
    end.

dec_time_how_i2a(_4) ->
    case _4 of
        0 ->
            'DONT_CHANGE';
        1 ->
            'SET_TO_SERVER_TIME';
        2 ->
            'SET_TO_CLIENT_TIME'
    end.

enc_set_mode3(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_mode3(_3);
                 _ ->
                     []
             end]
    end.

dec_set_mode3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_mode3(_1, _6),
                {{true,_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                {{_3,_4},_5}
        end
    end.

enc_set_uid3(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_uid3(_3);
                 _ ->
                     []
             end]
    end.

dec_set_uid3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_uid3(_1, _6),
                {{true,_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                {{_3,_4},_5}
        end
    end.

enc_set_gid3(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_gid3(_3);
                 _ ->
                     []
             end]
    end.

dec_set_gid3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_gid3(_1, _6),
                {{true,_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                {{_3,_4},_5}
        end
    end.

enc_set_size3(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_size3(_3);
                 _ ->
                     []
             end]
    end.

dec_set_size3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_size3(_1, _6),
                {{true,_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                {{_3,_4},_5}
        end
    end.

enc_set_atime(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_time_how(_2),
             case _2 of
                 'SET_TO_CLIENT_TIME' ->
                     enc_nfstime3(_3);
                 _ ->
                     []
             end]
    end.

dec_set_atime(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            2 ->
                {_4,_5} = dec_nfstime3(_1, _6),
                {{'SET_TO_CLIENT_TIME',_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                _7 = dec_time_how_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_set_mtime(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_time_how(_2),
             case _2 of
                 'SET_TO_CLIENT_TIME' ->
                     enc_nfstime3(_3);
                 _ ->
                     []
             end]
    end.

dec_set_mtime(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            2 ->
                {_4,_5} = dec_nfstime3(_1, _6),
                {{'SET_TO_CLIENT_TIME',_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                _7 = dec_time_how_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_sattr3(_1) ->
    case _1 of
        {_7,_6,_5,_4,_3,_2} ->
            [enc_set_mode3(_7),
             enc_set_uid3(_6),
             enc_set_gid3(_5),
             enc_set_size3(_4),
             enc_set_atime(_3),
             enc_set_mtime(_2)]
    end.

dec_sattr3(_1, _2) ->
    begin
        {_3,_4} = dec_set_mode3(_1, _2),
        {_5,_6} = dec_set_uid3(_1, _4),
        {_7,_8} = dec_set_gid3(_1, _6),
        {_9,_10} = dec_set_size3(_1, _8),
        {_11,_12} = dec_set_atime(_1, _10),
        {_13,_14} = dec_set_mtime(_1, _12),
        {{_3,_5,_7,_9,_11,_13},_14}
    end.

enc_diropargs3(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_nfs_fh3(_3),enc_filename3(_2)]
    end.

dec_diropargs3(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_filename3(_1, _4),
        {{_3,_5},_6}
    end.

enc_getattr3args(_1) ->
    case _1 of
        {_2} ->
            [enc_nfs_fh3(_2)]
    end.

dec_getattr3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {{_3},_4}
    end.

enc_getattr3resok(_1) ->
    case _1 of
        {_2} ->
            [enc_fattr3(_2)]
    end.

dec_getattr3resok(_1, _2) ->
    begin
        {_3,_4} = dec_fattr3(_1, _2),
        {{_3},_4}
    end.

enc_getattr3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_getattr3resok(_3);
                 _ ->
                     []
             end]
    end.

dec_getattr3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_getattr3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_sattrguard3(_1) ->
    case _1 of
        {_2,_3} ->
            [if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end,
             case _2 of
                 true ->
                     enc_nfstime3(_3);
                 false ->
                     []
             end]
    end.

dec_sattrguard3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_nfstime3(_1, _6),
                {{true,_4},_5};
            0 ->
                {_4,_5} = {void,_6},
                {{false,_4},_5}
        end
    end.

enc_setattr3args(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_nfs_fh3(_4),enc_sattr3(_3),enc_sattrguard3(_2)]
    end.

dec_setattr3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_sattr3(_1, _4),
        {_7,_8} = dec_sattrguard3(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_setattr3resok(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_setattr3resok(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_setattr3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_setattr3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_setattr3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_setattr3resok(_3);
                 _ ->
                     enc_setattr3resfail(_3)
             end]
    end.

dec_setattr3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_setattr3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_setattr3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_lookup3args(_1) ->
    case _1 of
        {_2} ->
            [enc_diropargs3(_2)]
    end.

dec_lookup3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {{_3},_4}
    end.

enc_lookup3resok(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_nfs_fh3(_4),enc_post_op_attr(_3),enc_post_op_attr(_2)]
    end.

dec_lookup3resok(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_post_op_attr(_1, _4),
        {_7,_8} = dec_post_op_attr(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_lookup3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_lookup3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_lookup3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_lookup3resok(_3);
                 _ ->
                     enc_lookup3resfail(_3)
             end]
    end.

dec_lookup3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_lookup3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_lookup3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_access3args(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_nfs_fh3(_3),enc_uint32(_2)]
    end.

dec_access3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_uint32(_1, _4),
        {{_3,_5},_6}
    end.

enc_access3resok(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_post_op_attr(_3),enc_uint32(_2)]
    end.

dec_access3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_uint32(_1, _4),
        {{_3,_5},_6}
    end.

enc_access3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_access3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_access3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_access3resok(_3);
                 _ ->
                     enc_access3resfail(_3)
             end]
    end.

dec_access3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_access3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_access3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_readlink3args(_1) ->
    case _1 of
        {_2} ->
            [enc_nfs_fh3(_2)]
    end.

dec_readlink3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {{_3},_4}
    end.

enc_readlink3resok(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_post_op_attr(_3),enc_nfspath3(_2)]
    end.

dec_readlink3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_nfspath3(_1, _4),
        {{_3,_5},_6}
    end.

enc_readlink3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_readlink3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_readlink3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_readlink3resok(_3);
                 _ ->
                     enc_readlink3resfail(_3)
             end]
    end.

dec_readlink3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_readlink3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_readlink3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_read3args(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_nfs_fh3(_4),enc_offset3(_3),enc_count3(_2)]
    end.

dec_read3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_offset3(_1, _4),
        {_7,_8} = dec_count3(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_read3resok(_1) ->
    case _1 of
        {_6,_5,_4,_2} ->
            [enc_post_op_attr(_6),
             enc_count3(_5),
             if
                 _4 == true ->
                     <<1:32>>;
                 _4 == false ->
                     <<0:32>>
             end,
             begin
                 _3 = io_list_len(_2),
                 [<<_3:32/unsigned>>,_2,enc_align(_3)]
             end]
    end.

dec_read3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_count3(_1, _4),
        begin
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                _7 =
                    if
                        _9 == 0 ->
                            false;
                        _9 == 1 ->
                            true
                    end
            end,
            _8 = _6 + 4
        end,
        {_10,_11} =
            begin
                <<_:_8/binary,_12:32/unsigned,_/binary>> = _1,
                _13 = _8 + 4,
                <<_:_13/binary,_14:_12/binary,_/binary>> = _1,
                {_14,_13 + align(_12)}
            end,
        {{_3,_5,_7,_10},_11}
    end.

enc_read3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_read3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_read3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_read3resok(_3);
                 _ ->
                     enc_read3resfail(_3)
             end]
    end.

dec_read3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_read3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_read3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_stable_how(_1) ->
    case _1 of
        'UNSTABLE' ->
            <<0:32>>;
        'DATA_SYNC' ->
            <<1:32>>;
        'FILE_SYNC' ->
            <<2:32>>
    end.

dec_stable_how(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {'UNSTABLE',_2 + 4};
            1 ->
                {'DATA_SYNC',_2 + 4};
            2 ->
                {'FILE_SYNC',_2 + 4}
        end
    end.

dec_stable_how_i2a(_4) ->
    case _4 of
        0 ->
            'UNSTABLE';
        1 ->
            'DATA_SYNC';
        2 ->
            'FILE_SYNC'
    end.

enc_write3args(_1) ->
    case _1 of
        {_7,_6,_5,_4,_2} ->
            [enc_nfs_fh3(_7),
             enc_offset3(_6),
             enc_count3(_5),
             enc_stable_how(_4),
             begin
                 _3 = io_list_len(_2),
                 [<<_3:32/unsigned>>,_2,enc_align(_3)]
             end]
    end.

dec_write3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_offset3(_1, _4),
        {_7,_8} = dec_count3(_1, _6),
        {_9,_10} = dec_stable_how(_1, _8),
        {_11,_12} =
            begin
                <<_:_10/binary,_13:32/unsigned,_/binary>> = _1,
                _14 = _10 + 4,
                <<_:_14/binary,_15:_13/binary,_/binary>> = _1,
                {_15,_14 + align(_13)}
            end,
        {{_3,_5,_7,_9,_11},_12}
    end.

enc_write3resok(_1) ->
    case _1 of
        {_5,_4,_3,_2} ->
            [enc_wcc_data(_5),
             enc_count3(_4),
             enc_stable_how(_3),
             enc_writeverf3(_2)]
    end.

dec_write3resok(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {_5,_6} = dec_count3(_1, _4),
        {_7,_8} = dec_stable_how(_1, _6),
        {_9,_10} = dec_writeverf3(_1, _8),
        {{_3,_5,_7,_9},_10}
    end.

enc_write3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_write3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_write3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_write3resok(_3);
                 _ ->
                     enc_write3resfail(_3)
             end]
    end.

dec_write3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_write3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_write3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_createmode3(_1) ->
    case _1 of
        'UNCHECKED' ->
            <<0:32>>;
        'GUARDED' ->
            <<1:32>>;
        'EXCLUSIVE' ->
            <<2:32>>
    end.

dec_createmode3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {'UNCHECKED',_2 + 4};
            1 ->
                {'GUARDED',_2 + 4};
            2 ->
                {'EXCLUSIVE',_2 + 4}
        end
    end.

dec_createmode3_i2a(_4) ->
    case _4 of
        0 ->
            'UNCHECKED';
        1 ->
            'GUARDED';
        2 ->
            'EXCLUSIVE'
    end.

enc_createhow3(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_createmode3(_2),
             case _2 of
                 'UNCHECKED' ->
                     enc_sattr3(_3);
                 'GUARDED' ->
                     enc_sattr3(_3);
                 'EXCLUSIVE' ->
                     enc_createverf3(_3)
             end]
    end.

dec_createhow3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_sattr3(_1, _6),
                {{'UNCHECKED',_4},_5};
            1 ->
                {_4,_5} = dec_sattr3(_1, _6),
                {{'GUARDED',_4},_5};
            2 ->
                {_4,_5} = dec_createverf3(_1, _6),
                {{'EXCLUSIVE',_4},_5}
        end
    end.

enc_create3args(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_diropargs3(_3),enc_createhow3(_2)]
    end.

dec_create3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {_5,_6} = dec_createhow3(_1, _4),
        {{_3,_5},_6}
    end.

enc_create3resok(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_post_op_fh3(_4),enc_post_op_attr(_3),enc_wcc_data(_2)]
    end.

dec_create3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_fh3(_1, _2),
        {_5,_6} = dec_post_op_attr(_1, _4),
        {_7,_8} = dec_wcc_data(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_create3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_create3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_create3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_create3resok(_3);
                 _ ->
                     enc_create3resfail(_3)
             end]
    end.

dec_create3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_create3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_create3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_mkdir3args(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_diropargs3(_3),enc_sattr3(_2)]
    end.

dec_mkdir3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {_5,_6} = dec_sattr3(_1, _4),
        {{_3,_5},_6}
    end.

enc_mkdir3resok(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_post_op_fh3(_4),enc_post_op_attr(_3),enc_wcc_data(_2)]
    end.

dec_mkdir3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_fh3(_1, _2),
        {_5,_6} = dec_post_op_attr(_1, _4),
        {_7,_8} = dec_wcc_data(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_mkdir3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_mkdir3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_mkdir3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_mkdir3resok(_3);
                 _ ->
                     enc_mkdir3resfail(_3)
             end]
    end.

dec_mkdir3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_mkdir3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_mkdir3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_symlinkdata3(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_sattr3(_3),enc_nfspath3(_2)]
    end.

dec_symlinkdata3(_1, _2) ->
    begin
        {_3,_4} = dec_sattr3(_1, _2),
        {_5,_6} = dec_nfspath3(_1, _4),
        {{_3,_5},_6}
    end.

enc_symlink3args(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_diropargs3(_3),enc_symlinkdata3(_2)]
    end.

dec_symlink3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {_5,_6} = dec_symlinkdata3(_1, _4),
        {{_3,_5},_6}
    end.

enc_symlink3resok(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_post_op_fh3(_4),enc_post_op_attr(_3),enc_wcc_data(_2)]
    end.

dec_symlink3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_fh3(_1, _2),
        {_5,_6} = dec_post_op_attr(_1, _4),
        {_7,_8} = dec_wcc_data(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_symlink3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_symlink3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_symlink3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_symlink3resok(_3);
                 _ ->
                     enc_symlink3resfail(_3)
             end]
    end.

dec_symlink3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_symlink3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_symlink3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_devicedata3(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_sattr3(_3),enc_specdata3(_2)]
    end.

dec_devicedata3(_1, _2) ->
    begin
        {_3,_4} = dec_sattr3(_1, _2),
        {_5,_6} = dec_specdata3(_1, _4),
        {{_3,_5},_6}
    end.

enc_mknoddata3(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_ftype3(_2),
             case _2 of
                 'NF3CHR' ->
                     enc_devicedata3(_3);
                 'NF3BLK' ->
                     enc_devicedata3(_3);
                 'NF3SOCK' ->
                     enc_sattr3(_3);
                 'NF3FIFO' ->
                     enc_sattr3(_3);
                 _ ->
                     []
             end]
    end.

dec_mknoddata3(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            4 ->
                {_4,_5} = dec_devicedata3(_1, _6),
                {{'NF3CHR',_4},_5};
            3 ->
                {_4,_5} = dec_devicedata3(_1, _6),
                {{'NF3BLK',_4},_5};
            6 ->
                {_4,_5} = dec_sattr3(_1, _6),
                {{'NF3SOCK',_4},_5};
            7 ->
                {_4,_5} = dec_sattr3(_1, _6),
                {{'NF3FIFO',_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                _7 = dec_ftype3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_mknod3args(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_diropargs3(_3),enc_mknoddata3(_2)]
    end.

dec_mknod3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {_5,_6} = dec_mknoddata3(_1, _4),
        {{_3,_5},_6}
    end.

enc_mknod3resok(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_post_op_fh3(_4),enc_post_op_attr(_3),enc_wcc_data(_2)]
    end.

dec_mknod3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_fh3(_1, _2),
        {_5,_6} = dec_post_op_attr(_1, _4),
        {_7,_8} = dec_wcc_data(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_mknod3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_mknod3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_mknod3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_mknod3resok(_3);
                 _ ->
                     enc_mknod3resfail(_3)
             end]
    end.

dec_mknod3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_mknod3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_mknod3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_remove3args(_1) ->
    case _1 of
        {_2} ->
            [enc_diropargs3(_2)]
    end.

dec_remove3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {{_3},_4}
    end.

enc_remove3resok(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_remove3resok(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_remove3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_remove3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_remove3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_remove3resok(_3);
                 _ ->
                     enc_remove3resfail(_3)
             end]
    end.

dec_remove3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_remove3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_remove3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_rmdir3args(_1) ->
    case _1 of
        {_2} ->
            [enc_diropargs3(_2)]
    end.

dec_rmdir3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {{_3},_4}
    end.

enc_rmdir3resok(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_rmdir3resok(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_rmdir3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_rmdir3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_rmdir3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_rmdir3resok(_3);
                 _ ->
                     enc_rmdir3resfail(_3)
             end]
    end.

dec_rmdir3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_rmdir3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_rmdir3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_rename3args(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_diropargs3(_3),enc_diropargs3(_2)]
    end.

dec_rename3args(_1, _2) ->
    begin
        {_3,_4} = dec_diropargs3(_1, _2),
        {_5,_6} = dec_diropargs3(_1, _4),
        {{_3,_5},_6}
    end.

enc_rename3resok(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_wcc_data(_3),enc_wcc_data(_2)]
    end.

dec_rename3resok(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {_5,_6} = dec_wcc_data(_1, _4),
        {{_3,_5},_6}
    end.

enc_rename3resfail(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_wcc_data(_3),enc_wcc_data(_2)]
    end.

dec_rename3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {_5,_6} = dec_wcc_data(_1, _4),
        {{_3,_5},_6}
    end.

enc_rename3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_rename3resok(_3);
                 _ ->
                     enc_rename3resfail(_3)
             end]
    end.

dec_rename3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_rename3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_rename3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_link3args(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_nfs_fh3(_3),enc_diropargs3(_2)]
    end.

dec_link3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_diropargs3(_1, _4),
        {{_3,_5},_6}
    end.

enc_link3resok(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_post_op_attr(_3),enc_wcc_data(_2)]
    end.

dec_link3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_wcc_data(_1, _4),
        {{_3,_5},_6}
    end.

enc_link3resfail(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_post_op_attr(_3),enc_wcc_data(_2)]
    end.

dec_link3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_wcc_data(_1, _4),
        {{_3,_5},_6}
    end.

enc_link3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_link3resok(_3);
                 _ ->
                     enc_link3resfail(_3)
             end]
    end.

dec_link3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_link3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_link3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_readdir3args(_1) ->
    case _1 of
        {_5,_4,_3,_2} ->
            [enc_nfs_fh3(_5),
             enc_cookie3(_4),
             enc_cookieverf3(_3),
             enc_count3(_2)]
    end.

dec_readdir3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_cookie3(_1, _4),
        {_7,_8} = dec_cookieverf3(_1, _6),
        {_9,_10} = dec_count3(_1, _8),
        {{_3,_5,_7,_9},_10}
    end.

enc_entry3(_1) ->
    case _1 of
        {_5,_4,_3,_2} ->
            [enc_fileid3(_5),
             enc_filename3(_4),
             enc_cookie3(_3),
             case _2 of
                 void ->
                     <<0:32>>;
                 _ ->
                     [<<1:32>>,enc_entry3(_2)]
             end]
    end.

dec_entry3(_1, _2) ->
    begin
        {_3,_4} = dec_fileid3(_1, _2),
        {_5,_6} = dec_filename3(_1, _4),
        {_7,_8} = dec_cookie3(_1, _6),
        {_9,_10} =
            begin
                <<_:_8/binary,_11:32/unsigned,_/binary>> = _1,
                _12 = _8 + 4,
                if
                    _11 == 0 ->
                        {void,_12};
                    _11 == 1 ->
                        dec_entry3(_1, _12)
                end
            end,
        {{_3,_5,_7,_9},_10}
    end.

enc_dirlist3(_1) ->
    case _1 of
        {_3,_2} ->
            [case _3 of
                 void ->
                     <<0:32>>;
                 _ ->
                     [<<1:32>>,enc_entry3(_3)]
             end,
             if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end]
    end.

dec_dirlist3(_1, _2) ->
    begin
        {_3,_4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                _6 = _2 + 4,
                if
                    _5 == 0 ->
                        {void,_6};
                    _5 == 1 ->
                        dec_entry3(_1, _6)
                end
            end,
        begin
            begin
                <<_:_4/binary,_9:32/unsigned,_/binary>> = _1,
                _7 =
                    if
                        _9 == 0 ->
                            false;
                        _9 == 1 ->
                            true
                    end
            end,
            _8 = _4 + 4
        end,
        {{_3,_7},_8}
    end.

enc_readdir3resok(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_post_op_attr(_4),enc_cookieverf3(_3),enc_dirlist3(_2)]
    end.

dec_readdir3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_cookieverf3(_1, _4),
        {_7,_8} = dec_dirlist3(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_readdir3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_readdir3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_readdir3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_readdir3resok(_3);
                 _ ->
                     enc_readdir3resfail(_3)
             end]
    end.

dec_readdir3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_readdir3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_readdir3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_readdirplus3args(_1) ->
    case _1 of
        {_6,_5,_4,_3,_2} ->
            [enc_nfs_fh3(_6),
             enc_cookie3(_5),
             enc_cookieverf3(_4),
             enc_count3(_3),
             enc_count3(_2)]
    end.

dec_readdirplus3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_cookie3(_1, _4),
        {_7,_8} = dec_cookieverf3(_1, _6),
        {_9,_10} = dec_count3(_1, _8),
        {_11,_12} = dec_count3(_1, _10),
        {{_3,_5,_7,_9,_11},_12}
    end.

enc_entryplus3(_1) ->
    case _1 of
        {_7,_6,_5,_4,_3,_2} ->
            [enc_fileid3(_7),
             enc_filename3(_6),
             enc_cookie3(_5),
             enc_post_op_attr(_4),
             enc_post_op_fh3(_3),
             case _2 of
                 void ->
                     <<0:32>>;
                 _ ->
                     [<<1:32>>,enc_entryplus3(_2)]
             end]
    end.

dec_entryplus3(_1, _2) ->
    begin
        {_3,_4} = dec_fileid3(_1, _2),
        {_5,_6} = dec_filename3(_1, _4),
        {_7,_8} = dec_cookie3(_1, _6),
        {_9,_10} = dec_post_op_attr(_1, _8),
        {_11,_12} = dec_post_op_fh3(_1, _10),
        {_13,_14} =
            begin
                <<_:_12/binary,_15:32/unsigned,_/binary>> = _1,
                _16 = _12 + 4,
                if
                    _15 == 0 ->
                        {void,_16};
                    _15 == 1 ->
                        dec_entryplus3(_1, _16)
                end
            end,
        {{_3,_5,_7,_9,_11,_13},_14}
    end.

enc_dirlistplus3(_1) ->
    case _1 of
        {_3,_2} ->
            [case _3 of
                 void ->
                     <<0:32>>;
                 _ ->
                     [<<1:32>>,enc_entryplus3(_3)]
             end,
             if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end]
    end.

dec_dirlistplus3(_1, _2) ->
    begin
        {_3,_4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                _6 = _2 + 4,
                if
                    _5 == 0 ->
                        {void,_6};
                    _5 == 1 ->
                        dec_entryplus3(_1, _6)
                end
            end,
        begin
            begin
                <<_:_4/binary,_9:32/unsigned,_/binary>> = _1,
                _7 =
                    if
                        _9 == 0 ->
                            false;
                        _9 == 1 ->
                            true
                    end
            end,
            _8 = _4 + 4
        end,
        {{_3,_7},_8}
    end.

enc_readdirplus3resok(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_post_op_attr(_4),
             enc_cookieverf3(_3),
             enc_dirlistplus3(_2)]
    end.

dec_readdirplus3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_cookieverf3(_1, _4),
        {_7,_8} = dec_dirlistplus3(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_readdirplus3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_readdirplus3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_readdirplus3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_readdirplus3resok(_3);
                 _ ->
                     enc_readdirplus3resfail(_3)
             end]
    end.

dec_readdirplus3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_readdirplus3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_readdirplus3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_fsstat3args(_1) ->
    case _1 of
        {_2} ->
            [enc_nfs_fh3(_2)]
    end.

dec_fsstat3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {{_3},_4}
    end.

enc_fsstat3resok(_1) ->
    case _1 of
        {_9,_8,_7,_6,_5,_4,_3,_2} ->
            [enc_post_op_attr(_9),
             enc_size3(_8),
             enc_size3(_7),
             enc_size3(_6),
             enc_size3(_5),
             enc_size3(_4),
             enc_size3(_3),
             enc_uint32(_2)]
    end.

dec_fsstat3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_size3(_1, _4),
        {_7,_8} = dec_size3(_1, _6),
        {_9,_10} = dec_size3(_1, _8),
        {_11,_12} = dec_size3(_1, _10),
        {_13,_14} = dec_size3(_1, _12),
        {_15,_16} = dec_size3(_1, _14),
        {_17,_18} = dec_uint32(_1, _16),
        {{_3,_5,_7,_9,_11,_13,_15,_17},_18}
    end.

enc_fsstat3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_fsstat3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_fsstat3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_fsstat3resok(_3);
                 _ ->
                     enc_fsstat3resfail(_3)
             end]
    end.

dec_fsstat3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_fsstat3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_fsstat3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_fsinfo3args(_1) ->
    case _1 of
        {_2} ->
            [enc_nfs_fh3(_2)]
    end.

dec_fsinfo3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {{_3},_4}
    end.

enc_fsinfo3resok(_1) ->
    case _1 of
        {_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2} ->
            [enc_post_op_attr(_12),
             enc_uint32(_11),
             enc_uint32(_10),
             enc_uint32(_9),
             enc_uint32(_8),
             enc_uint32(_7),
             enc_uint32(_6),
             enc_uint32(_5),
             enc_size3(_4),
             enc_nfstime3(_3),
             enc_uint32(_2)]
    end.

dec_fsinfo3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_uint32(_1, _4),
        {_7,_8} = dec_uint32(_1, _6),
        {_9,_10} = dec_uint32(_1, _8),
        {_11,_12} = dec_uint32(_1, _10),
        {_13,_14} = dec_uint32(_1, _12),
        {_15,_16} = dec_uint32(_1, _14),
        {_17,_18} = dec_uint32(_1, _16),
        {_19,_20} = dec_size3(_1, _18),
        {_21,_22} = dec_nfstime3(_1, _20),
        {_23,_24} = dec_uint32(_1, _22),
        {{_3,_5,_7,_9,_11,_13,_15,_17,_19,_21,_23},_24}
    end.

enc_fsinfo3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_fsinfo3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_fsinfo3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_fsinfo3resok(_3);
                 _ ->
                     enc_fsinfo3resfail(_3)
             end]
    end.

dec_fsinfo3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_fsinfo3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_fsinfo3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_pathconf3args(_1) ->
    case _1 of
        {_2} ->
            [enc_nfs_fh3(_2)]
    end.

dec_pathconf3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {{_3},_4}
    end.

enc_pathconf3resok(_1) ->
    case _1 of
        {_8,_7,_6,_5,_4,_3,_2} ->
            [enc_post_op_attr(_8),
             enc_uint32(_7),
             enc_uint32(_6),
             if
                 _5 == true ->
                     <<1:32>>;
                 _5 == false ->
                     <<0:32>>
             end,
             if
                 _4 == true ->
                     <<1:32>>;
                 _4 == false ->
                     <<0:32>>
             end,
             if
                 _3 == true ->
                     <<1:32>>;
                 _3 == false ->
                     <<0:32>>
             end,
             if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end]
    end.

dec_pathconf3resok(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {_5,_6} = dec_uint32(_1, _4),
        {_7,_8} = dec_uint32(_1, _6),
        begin
            begin
                <<_:_8/binary,_11:32/unsigned,_/binary>> = _1,
                _9 =
                    if
                        _11 == 0 ->
                            false;
                        _11 == 1 ->
                            true
                    end
            end,
            _10 = _8 + 4
        end,
        begin
            begin
                <<_:_10/binary,_14:32/unsigned,_/binary>> = _1,
                _12 =
                    if
                        _14 == 0 ->
                            false;
                        _14 == 1 ->
                            true
                    end
            end,
            _13 = _10 + 4
        end,
        begin
            begin
                <<_:_13/binary,_17:32/unsigned,_/binary>> = _1,
                _15 =
                    if
                        _17 == 0 ->
                            false;
                        _17 == 1 ->
                            true
                    end
            end,
            _16 = _13 + 4
        end,
        begin
            begin
                <<_:_16/binary,_20:32/unsigned,_/binary>> = _1,
                _18 =
                    if
                        _20 == 0 ->
                            false;
                        _20 == 1 ->
                            true
                    end
            end,
            _19 = _16 + 4
        end,
        {{_3,_5,_7,_9,_12,_15,_18},_19}
    end.

enc_pathconf3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_post_op_attr(_2)]
    end.

dec_pathconf3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_post_op_attr(_1, _2),
        {{_3},_4}
    end.

enc_pathconf3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_pathconf3resok(_3);
                 _ ->
                     enc_pathconf3resfail(_3)
             end]
    end.

dec_pathconf3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_pathconf3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_pathconf3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_commit3args(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_nfs_fh3(_4),enc_offset3(_3),enc_count3(_2)]
    end.

dec_commit3args(_1, _2) ->
    begin
        {_3,_4} = dec_nfs_fh3(_1, _2),
        {_5,_6} = dec_offset3(_1, _4),
        {_7,_8} = dec_count3(_1, _6),
        {{_3,_5,_7},_8}
    end.

enc_commit3resok(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_wcc_data(_3),enc_writeverf3(_2)]
    end.

dec_commit3resok(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {_5,_6} = dec_writeverf3(_1, _4),
        {{_3,_5},_6}
    end.

enc_commit3resfail(_1) ->
    case _1 of
        {_2} ->
            [enc_wcc_data(_2)]
    end.

dec_commit3resfail(_1, _2) ->
    begin
        {_3,_4} = dec_wcc_data(_1, _2),
        {{_3},_4}
    end.

enc_commit3res(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nfsstat3(_2),
             case _2 of
                 'NFS3_OK' ->
                     enc_commit3resok(_3);
                 _ ->
                     enc_commit3resfail(_3)
             end]
    end.

dec_commit3res(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            0 ->
                {_4,_5} = dec_commit3resok(_1, _6),
                {{'NFS3_OK',_4},_5};
            _ ->
                {_4,_5} = dec_commit3resfail(_1, _6),
                _7 = dec_nfsstat3_i2a(_3),
                {{_7,_4},_5}
        end
    end.

io_list_len(L) -> io_list_len(L, 0).
io_list_len([H|T], N) ->
  if
    H >= 0, H =< 255 -> io_list_len(T, N+1);
    is_list(H) -> io_list_len(T, io_list_len(H,N));
    is_binary(H) -> io_list_len(T, size(H) + N);
    true -> exit({xdr, opaque})
  end;
io_list_len(H, N) when is_binary(H) ->
  size(H) + N;
io_list_len([], N) ->
N.

enc_align(Len) ->
  case Len rem 4 of
    0 -> <<>>;
    1 -> <<0,0,0>>;
    2 -> <<0,0>>;
    3 -> <<0>>
  end.

align(Len) ->
  case Len rem 4 of
    0 -> Len;
    1 -> Len+3;
    2 -> Len+2;
    3 -> Len+1
  end.
