use yew::prelude::*;

#[derive(PartialEq, Clone)]
pub enum Color {
    Red,
    Green,
    Blue,
}

pub struct Counter {
    value: u32,
    color: Color,
    onclick: Option<Callback<u32>>,
}

pub enum Msg {
    Increase,
}

#[derive(PartialEq, Clone)]
pub struct Props {
    pub initial: u32,
    pub color: Color,
    pub onclick: Option<Callback<u32>>,
}

impl Default for Props {
    fn default() -> Self {
        Props {
            initial: 0,
            color: Color::Green,
            onclick: None,
        }
    }
}

impl Component for Counter {
    type Message = Msg;
    type Properties = Props;

    fn create(props: Self::Properties, _: ComponentLink<Self>) -> Self {
        Counter {
            value: props.initial,
            color: props.color,
            onclick: props.onclick,
        }
    }

    fn update(&mut self, msg: Self::Message) -> ShouldRender {
        match msg {
            Msg::Increase => {
                self.value = self.value + 1;
                if let Some(ref onclick) = self.onclick {
                    onclick.emit(self.value);
                }
            }
        }
        true
    }

    fn change(&mut self, props: Self::Properties) -> ShouldRender {
        self.color = props.color;
        self.onclick = props.onclick;
        true
    }
}

impl Renderable<Counter> for Counter {
    fn view(&self) -> Html<Self> {
        let colorize = {
            match self.color {
                Color::Red => "background: red;",
                Color::Green => "background: green;",
                Color::Blue => "background: blue;",
            }
        };
        html! {
            <div class="couter",>
                <p>{ self.value }</p>
                <button style=colorize, onclick=|_| Msg::Increase,>{ "Increase internal counter" }</button>
            </div>
        }
    }
}


use yew::prelude::*;
use button::Button;

pub struct Barrier {
    limit: u32,
    counter: u32,
    onsignal: Option<Callback<()>>,
}

pub enum Msg {
    ChildClicked,
}

#[derive(PartialEq, Clone)]
pub struct Props {
    pub limit: u32,
    pub onsignal: Option<Callback<()>>,
}

impl Default for Props {
    fn default() -> Self {
        Props {
            limit: 0,
            onsignal: None,
        }
    }
}


impl Component for Barrier {
    type Message = Msg;
    type Properties = Props;

    fn create(props: Self::Properties, _: ComponentLink<Self>) -> Self {
        Barrier {
            limit: props.limit,
            counter: 0,
            onsignal: props.onsignal,
        }
    }

    fn update(&mut self, msg: Self::Message) -> ShouldRender {
        match msg {
            Msg::ChildClicked => {
                self.counter += 1;
                if self.counter >= self.limit {
                    if let Some(ref mut callback) = self.onsignal {
                        callback.emit(());
                        self.counter = 0;
                    }
                }
            }
        }
        true
    }

    fn change(&mut self, props: Self::Properties) -> ShouldRender {
        self.limit = props.limit;
        self.onsignal = props.onsignal;
        true
    }
}

impl Renderable<Barrier> for Barrier {
    fn view(&self) -> Html<Self> {
        html! {
            <div class="barrier",>
                <p>{ format!("{} on {} clicked", self.counter, self.limit) }</p>
                <Button: onsignal=|_| Msg::ChildClicked, />
                <Button: onsignal=|_| Msg::ChildClicked, />
                <Button: onsignal=|_| Msg::ChildClicked, title="Middle", />
                <Button: onsignal=|_| Msg::ChildClicked, />
                <Button: onsignal=|_| Msg::ChildClicked, />
            </div>
        }
    }
}

