use super::rocket;
use rocket::local::Client;
use rocket::http::Status;

fn client() -> Client {
    let rocket = rocket::ignite().mount("/", routes![super::root, super::login]);
    Client::new(rocket).unwrap()
}

#[test]
fn test_root() {
    let client = client();
    let mut response = client.get("/").dispatch();

    assert!(response.body().is_none());
    assert_eq!(response.status(), Status::SeeOther);
    for h in response.headers().iter() {
        match h.name.as_str() {
            "Location" => assert_eq!(h.value, "/login"),
            "Content-Length" => assert_eq!(h.value.parse::<i32>().unwrap(), 0),
            _ => { /* let these through */ }
        }
    }
}

#[test]
fn test_login() {
    let client = client();
    let mut r = client.get("/login").dispatch();
    assert_eq!(r.body_string(), Some("Hi! Please log in before continuing.".into()));
}
use rocket::local::Client;
use rocket::http::{Status, ContentType};

use std::io::Read;
use std::fs::{self, File};

const UPLOAD_CONTENTS: &str = "Hey! I'm going to be uploaded. :D Yay!";

#[test]
fn test_index() {
    let client = Client::new(super::rocket()).unwrap();
    let mut res = client.get("/").dispatch();
    assert_eq!(res.body_string(), Some(super::index().to_string()));
}

#[test]
fn test_raw_upload() {
    // Delete the upload file before we begin.
    let _ = fs::remove_file("/tmp/upload.txt");

    // Do the upload. Make sure we get the expected results.
    let client = Client::new(super::rocket()).unwrap();
    let mut res = client.post("/upload")
        .header(ContentType::Plain)
        .body(UPLOAD_CONTENTS)
        .dispatch();

    assert_eq!(res.status(), Status::Ok);
    assert_eq!(res.body_string(), Some(UPLOAD_CONTENTS.len().to_string()));

    // Ensure we find the body in the /tmp/upload.txt file.
    let mut file_contents = String::new();
    let mut file = File::open("/tmp/upload.txt").expect("open upload.txt file");
    file.read_to_string(&mut file_contents).expect("read upload.txt");
    assert_eq!(&file_contents, UPLOAD_CONTENTS);
}
