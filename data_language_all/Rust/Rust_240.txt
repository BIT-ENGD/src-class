//! This demo originally created by https://github.com/qthree
//! Source: https://github.com/qthree/yew_table100x100_test

#[macro_use]
extern crate yew;

use yew::prelude::*;

pub struct Model {
    selected: Option<(u32, u32)>
}

pub enum Msg {
    Select(u32, u32),
}

impl Component for Model {
    type Message = Msg;
    type Properties = ();

    fn create(_: (), _: ComponentLink<Self>) -> Self {
        Model {
            selected: None
        }
    }

    // Some details omitted. Explore the examples to get more.
    fn update(&mut self, msg: Self::Message) -> ShouldRender {
        match msg {
            Msg::Select(x, y) => {
                self.selected = Some((x, y));
            }
        }
        true
    }
}

fn square_class(this: (u32, u32), selected: Option<(u32, u32)>) -> &'static str {
    match selected {
        Some(xy) if xy == this => {"square_green"},
        _ => {"square_red"}
    }
}

fn view_square(selected: Option<(u32, u32)>, row: u32, column: u32) -> Html<Model> {
    html! {
        <td
            class=square_class((column, row), selected),
            onclick=|_| Msg::Select(column, row),
        >
        </td>
    }
}

fn view_row(selected: Option<(u32, u32)>, row: u32) -> Html<Model> {
    html! {
        <tr>
            {for (0..99).map(|column| {
                view_square(selected, row, column)
            })}
        </tr>
    }
}

impl Renderable<Model> for Model {
    fn view(&self) -> Html<Self> {
        html! {
            <table>
                {for (0..99).map(|row| {
                    view_row(self.selected, row)
                })}
            </table>
        }
    }
}
#![recursion_limit="512"]
#[macro_use]
extern crate stdweb;
extern crate yew;

use yew::prelude::*;

use stdweb::web::Node;
use stdweb::unstable::TryFrom;
use yew::virtual_dom::VNode;

pub struct Model {
    pub value: i64,
}

pub enum Msg {
}

impl Component for Model {
    type Message = Msg;
    type Properties = ();

    fn create(_: Self::Properties, _: ComponentLink<Self>) -> Self {
        Model {
            value: 0,
        }
    }

    fn update(&mut self, _: Self::Message) -> ShouldRender {
        true
    }
}


const SVG: &str = r#"
<h2>Inline SVG or <i>any</i> HTML:</h2>
<svg height="250" width="500">
  <polygon points="220,10 300,210 170,250 123,234" style="fill:lime;stroke:purple;stroke-width:1" />
    Sorry, your browser does not support inline SVG.
</svg>
"#;

impl Renderable<Model> for Model {
    fn view(&self) -> Html<Self> {
        let js_svg = js! {
            var div = document.createElement("div");
            div.innerHTML = @{SVG.to_string()};
            console.log(div);
            return div;
        };
        eprintln!("js_svg: {:?}", js_svg);
        let node = Node::try_from(js_svg).expect("convert js_svg");
        let vnode = VNode::VRef(node);
        eprintln!("svg: {:?}", vnode);
        vnode
    }
}
