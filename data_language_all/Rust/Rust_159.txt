/// Helper function that might appear in Rust stable at some point
/// (https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.transpose)
pub fn transpose<T, E>(opt: Option<Result<T, E>>) -> Result<Option<T>, E> {
    opt.map_or(Ok(None), |res| res.map(Some))
}

#[cfg(test)]
mod tests {
    use super::transpose;

    #[derive(Debug, PartialEq)]
    struct TestError;

    type TestResult<T> = Result<T, TestError>;

    #[test]
    fn basic() {
        let a: Option<TestResult<i32>> = Some(Ok(2));
        assert_eq!(Ok(Some(2)), transpose(a));

        let b: Option<TestResult<i32>> = Some(Err(TestError));
        assert_eq!(Err(TestError), transpose(b));

        let c: Option<TestResult<i32>> = None;
        assert_eq!(Ok(None), transpose(c));
    }
}
#[macro_use]
extern crate clap;

use clap::Shell;
use std::fs;

include!("src/clap_app.rs");

const BIN_NAME: &str = "bat";

fn main() {
    let outdir = std::env::var_os("SHELL_COMPLETIONS_DIR").or(std::env::var_os("OUT_DIR"));

    let outdir = match outdir {
        None => return,
        Some(outdir) => outdir,
    };

    fs::create_dir_all(&outdir).unwrap();

    let mut app = build_app(true);
    app.gen_completions(BIN_NAME, Shell::Bash, &outdir);
    app.gen_completions(BIN_NAME, Shell::Fish, &outdir);
    app.gen_completions(BIN_NAME, Shell::Zsh, &outdir);
    app.gen_completions(BIN_NAME, Shell::PowerShell, &outdir);
}
