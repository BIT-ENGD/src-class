import io

from setuptools import find_packages, setup

with io.open('README.rst', 'rt', encoding='utf8') as f:
    readme = f.read()

setup(
    name='js_example',
    version='1.0.0',
    url='http://flask.pocoo.org/docs/patterns/jquery/',
    license='BSD',
    maintainer='Pallets team',
    maintainer_email='contact@palletsprojects.com',
    description='Demonstrates making Ajax requests to Flask.',
    long_description=readme,
    packages=find_packages(),
    include_package_data=True,
    zip_safe=False,
    install_requires=[
        'flask',
    ],
    extras_require={
        'test': [
            'pytest',
            'coverage',
            'blinker',
        ],
    },
)
import io

from setuptools import find_packages, setup

with io.open('README.rst', 'rt', encoding='utf8') as f:
    readme = f.read()

setup(
    name='js_example',
    version='1.0.0',
    url='http://flask.pocoo.org/docs/patterns/jquery/',
    license='BSD',
    maintainer='Pallets team',
    maintainer_email='contact@palletsprojects.com',
    description='Demonstrates making Ajax requests to Flask.',
    long_description=readme,
    packages=find_packages(),
    include_package_data=True,
    zip_safe=False,
    install_requires=[
        'flask',
    ],
    extras_require={
        'test': [
            'pytest',
            'coverage',
            'blinker',
        ],
    },
)
import pytest

from flask import template_rendered


@pytest.mark.parametrize(('path', 'template_name'), (
    ('/', 'plain.html'),
    ('/plain', 'plain.html'),
    ('/fetch', 'fetch.html'),
    ('/jquery', 'jquery.html'),
))
def test_index(app, client, path, template_name):
    def check(sender, template, context):
        assert template.name == template_name

    with template_rendered.connected_to(check, app):
        client.get(path)


@pytest.mark.parametrize(('a', 'b', 'result'), (
    (2, 3, 5),
    (2.5, 3, 5.5),
    (2, None, 2),
    (2, 'b', 2),
))
def test_add(client, a, b, result):
    response = client.post('/add', data={'a': a, 'b': b})
    assert response.get_json()['result'] == result
